
DC motor driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000322  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000322  00000396  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000039e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f97  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007b8  00000000  00000000  0000146b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000092f  00000000  00000000  00001c23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000194  00000000  00000000  00002554  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005ef  00000000  00000000  000026e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000cee  00000000  00000000  00002cd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  000039c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e2       	ldi	r30, 0x22	; 34
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 86 01 	call	0x30c	; 0x30c <main>
  7a:	0c 94 8f 01 	jmp	0x31e	; 0x31e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <HAL_DCMOTOR_Einit>:
#include "DIO_Interface.h"
#include "common_macros.h"
#include <avr/io.h>//DON'T FORGETT TO REPLACE IT WITH INTERUPT REG FILE 

E_DCMOTOR_ERROR HAL_DCMOTOR_Einit(S_DCMOTOR* S_DC)
{
  82:	0f 93       	push	r16
  84:	1f 93       	push	r17
  86:	cf 93       	push	r28
  88:	df 93       	push	r29
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
  8e:	29 97       	sbiw	r28, 0x09	; 9
  90:	0f b6       	in	r0, 0x3f	; 63
  92:	f8 94       	cli
  94:	de bf       	out	0x3e, r29	; 62
  96:	0f be       	out	0x3f, r0	; 63
  98:	cd bf       	out	0x3d, r28	; 61
  9a:	8c 01       	movw	r16, r24
	E_DCMOTOR_ERROR error=DCMOTOR_E_OK;
	S_Dio pwm={S_DC->PWM_port,S_DC->PWM_pin,OUTPUT};
  9c:	fc 01       	movw	r30, r24
  9e:	80 81       	ld	r24, Z
  a0:	89 83       	std	Y+1, r24	; 0x01
  a2:	83 81       	ldd	r24, Z+3	; 0x03
  a4:	8a 83       	std	Y+2, r24	; 0x02
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	8b 83       	std	Y+3, r24	; 0x03
	S_Dio dir={S_DC->DIR_port,S_DC->DIR_pin,OUTPUT};
  aa:	91 81       	ldd	r25, Z+1	; 0x01
  ac:	9c 83       	std	Y+4, r25	; 0x04
  ae:	94 81       	ldd	r25, Z+4	; 0x04
  b0:	9d 83       	std	Y+5, r25	; 0x05
  b2:	8e 83       	std	Y+6, r24	; 0x06
	S_Dio en={S_DC->EN_port,S_DC->EN_pin,OUTPUT};
  b4:	92 81       	ldd	r25, Z+2	; 0x02
  b6:	9f 83       	std	Y+7, r25	; 0x07
  b8:	95 81       	ldd	r25, Z+5	; 0x05
  ba:	98 87       	std	Y+8, r25	; 0x08
  bc:	89 87       	std	Y+9, r24	; 0x09
	//make sure that PWM is the OC0 PIN PB3 if you want half the speed
	error=MCAL_Dio_Init(&pwm);//set dc motor driver PWM SIGNAL as avr output
  be:	ce 01       	movw	r24, r28
  c0:	01 96       	adiw	r24, 0x01	; 1
  c2:	0e 94 c4 00 	call	0x188	; 0x188 <MCAL_Dio_Init>
	error=MCAL_Dio_Init(&dir);//set DC motor direction pin as avr output
  c6:	ce 01       	movw	r24, r28
  c8:	04 96       	adiw	r24, 0x04	; 4
  ca:	0e 94 c4 00 	call	0x188	; 0x188 <MCAL_Dio_Init>
	error=MCAL_Dio_Init(&en);//set DC motor driver enable as avr output
  ce:	ce 01       	movw	r24, r28
  d0:	07 96       	adiw	r24, 0x07	; 7
  d2:	0e 94 c4 00 	call	0x188	; 0x188 <MCAL_Dio_Init>
	error=MCAL_Dio_WriteSinglePin(&en,S_DC->EN_pin,1);//enable the DC MOTOR DRIVER L298
  d6:	f8 01       	movw	r30, r16
  d8:	65 81       	ldd	r22, Z+5	; 0x05
  da:	41 e0       	ldi	r20, 0x01	; 1
  dc:	ce 01       	movw	r24, r28
  de:	07 96       	adiw	r24, 0x07	; 7
  e0:	0e 94 f5 00 	call	0x1ea	; 0x1ea <MCAL_Dio_WriteSinglePin>
	return error;
}
  e4:	29 96       	adiw	r28, 0x09	; 9
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	f8 94       	cli
  ea:	de bf       	out	0x3e, r29	; 62
  ec:	0f be       	out	0x3f, r0	; 63
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	1f 91       	pop	r17
  f6:	0f 91       	pop	r16
  f8:	08 95       	ret

000000fa <HAL_DCMOTOR_Edirection>:

E_DCMOTOR_ERROR HAL_DCMOTOR_Edirection(S_DCMOTOR* S_DC)
{	E_DCMOTOR_ERROR error=DCMOTOR_E_OK;
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	00 d0       	rcall	.+0      	; 0x100 <HAL_DCMOTOR_Edirection+0x6>
 100:	1f 92       	push	r1
 102:	cd b7       	in	r28, 0x3d	; 61
 104:	de b7       	in	r29, 0x3e	; 62
 106:	fc 01       	movw	r30, r24
	
	S_Dio dir={S_DC->DIR_port,S_DC->DIR_pin,OUTPUT};
 108:	81 81       	ldd	r24, Z+1	; 0x01
 10a:	89 83       	std	Y+1, r24	; 0x01
 10c:	64 81       	ldd	r22, Z+4	; 0x04
 10e:	6a 83       	std	Y+2, r22	; 0x02
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	8b 83       	std	Y+3, r24	; 0x03
	
	//set the direction clkwise or anti-clkwise
	
	if (S_DC->clkwise==1)
 114:	86 81       	ldd	r24, Z+6	; 0x06
 116:	81 30       	cpi	r24, 0x01	; 1
 118:	31 f4       	brne	.+12     	; 0x126 <HAL_DCMOTOR_Edirection+0x2c>
	{
		error=MCAL_Dio_WriteSinglePin(&dir,S_DC->DIR_pin,1);		
 11a:	41 e0       	ldi	r20, 0x01	; 1
 11c:	ce 01       	movw	r24, r28
 11e:	01 96       	adiw	r24, 0x01	; 1
 120:	0e 94 f5 00 	call	0x1ea	; 0x1ea <MCAL_Dio_WriteSinglePin>
 124:	09 c0       	rjmp	.+18     	; 0x138 <HAL_DCMOTOR_Edirection+0x3e>
	}
	else if (S_DC->clkwise==0)
 126:	81 11       	cpse	r24, r1
 128:	06 c0       	rjmp	.+12     	; 0x136 <HAL_DCMOTOR_Edirection+0x3c>
	{
		error=MCAL_Dio_WriteSinglePin(&dir,S_DC->DIR_pin,0);
 12a:	40 e0       	ldi	r20, 0x00	; 0
 12c:	ce 01       	movw	r24, r28
 12e:	01 96       	adiw	r24, 0x01	; 1
 130:	0e 94 f5 00 	call	0x1ea	; 0x1ea <MCAL_Dio_WriteSinglePin>
 134:	01 c0       	rjmp	.+2      	; 0x138 <HAL_DCMOTOR_Edirection+0x3e>
	error=MCAL_Dio_WriteSinglePin(&en,S_DC->EN_pin,1);//enable the DC MOTOR DRIVER L298
	return error;
}

E_DCMOTOR_ERROR HAL_DCMOTOR_Edirection(S_DCMOTOR* S_DC)
{	E_DCMOTOR_ERROR error=DCMOTOR_E_OK;
 136:	80 e0       	ldi	r24, 0x00	; 0
	else if (S_DC->clkwise==0)
	{
		error=MCAL_Dio_WriteSinglePin(&dir,S_DC->DIR_pin,0);
	}
	return error;
}
 138:	0f 90       	pop	r0
 13a:	0f 90       	pop	r0
 13c:	0f 90       	pop	r0
 13e:	df 91       	pop	r29
 140:	cf 91       	pop	r28
 142:	08 95       	ret

00000144 <HAL_DCMOTOR_Efullspeed>:

E_DCMOTOR_ERROR HAL_DCMOTOR_Efullspeed(S_DCMOTOR* S_DC)
{	
 144:	0f 93       	push	r16
 146:	1f 93       	push	r17
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	00 d0       	rcall	.+0      	; 0x14e <HAL_DCMOTOR_Efullspeed+0xa>
 14e:	1f 92       	push	r1
 150:	cd b7       	in	r28, 0x3d	; 61
 152:	de b7       	in	r29, 0x3e	; 62
 154:	8c 01       	movw	r16, r24
	S_Dio pwm={S_DC->PWM_port,S_DC->PWM_pin,OUTPUT};
 156:	fc 01       	movw	r30, r24
 158:	80 81       	ld	r24, Z
 15a:	89 83       	std	Y+1, r24	; 0x01
 15c:	83 81       	ldd	r24, Z+3	; 0x03
 15e:	8a 83       	std	Y+2, r24	; 0x02
 160:	8f ef       	ldi	r24, 0xFF	; 255
 162:	8b 83       	std	Y+3, r24	; 0x03
	E_DCMOTOR_ERROR error=DCMOTOR_E_N_OK;
	error=HAL_DCMOTOR_Edirection(S_DC);
 164:	c8 01       	movw	r24, r16
 166:	0e 94 7d 00 	call	0xfa	; 0xfa <HAL_DCMOTOR_Edirection>
	error=MCAL_Dio_WriteSinglePin(&pwm,S_DC->PWM_pin,1);
 16a:	f8 01       	movw	r30, r16
 16c:	63 81       	ldd	r22, Z+3	; 0x03
 16e:	41 e0       	ldi	r20, 0x01	; 1
 170:	ce 01       	movw	r24, r28
 172:	01 96       	adiw	r24, 0x01	; 1
 174:	0e 94 f5 00 	call	0x1ea	; 0x1ea <MCAL_Dio_WriteSinglePin>
	return error;
};
 178:	0f 90       	pop	r0
 17a:	0f 90       	pop	r0
 17c:	0f 90       	pop	r0
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	1f 91       	pop	r17
 184:	0f 91       	pop	r16
 186:	08 95       	ret

00000188 <MCAL_Dio_Init>:
			break;

		}
	}
	return error;
}
 188:	fc 01       	movw	r30, r24
 18a:	90 81       	ld	r25, Z
 18c:	94 30       	cpi	r25, 0x04	; 4
 18e:	48 f5       	brcc	.+82     	; 0x1e2 <MCAL_Dio_Init+0x5a>
 190:	81 81       	ldd	r24, Z+1	; 0x01
 192:	22 81       	ldd	r18, Z+2	; 0x02
 194:	28 23       	and	r18, r24
 196:	91 30       	cpi	r25, 0x01	; 1
 198:	79 f0       	breq	.+30     	; 0x1b8 <MCAL_Dio_Init+0x30>
 19a:	28 f0       	brcs	.+10     	; 0x1a6 <MCAL_Dio_Init+0x1e>
 19c:	92 30       	cpi	r25, 0x02	; 2
 19e:	99 f0       	breq	.+38     	; 0x1c6 <MCAL_Dio_Init+0x3e>
 1a0:	93 30       	cpi	r25, 0x03	; 3
 1a2:	c1 f0       	breq	.+48     	; 0x1d4 <MCAL_Dio_Init+0x4c>
 1a4:	20 c0       	rjmp	.+64     	; 0x1e6 <MCAL_Dio_Init+0x5e>
 1a6:	3a b3       	in	r19, 0x1a	; 26
 1a8:	98 2f       	mov	r25, r24
 1aa:	90 95       	com	r25
 1ac:	89 2f       	mov	r24, r25
 1ae:	83 23       	and	r24, r19
 1b0:	28 2b       	or	r18, r24
 1b2:	2a bb       	out	0x1a, r18	; 26
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	08 95       	ret
 1b8:	97 b3       	in	r25, 0x17	; 23
 1ba:	80 95       	com	r24
 1bc:	89 23       	and	r24, r25
 1be:	28 2b       	or	r18, r24
 1c0:	27 bb       	out	0x17, r18	; 23
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	08 95       	ret
 1c6:	94 b3       	in	r25, 0x14	; 20
 1c8:	80 95       	com	r24
 1ca:	89 23       	and	r24, r25
 1cc:	28 2b       	or	r18, r24
 1ce:	24 bb       	out	0x14, r18	; 20
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	08 95       	ret
 1d4:	91 b3       	in	r25, 0x11	; 17
 1d6:	80 95       	com	r24
 1d8:	89 23       	and	r24, r25
 1da:	28 2b       	or	r18, r24
 1dc:	21 bb       	out	0x11, r18	; 17
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	08 95       	ret
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	08 95       	ret
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	08 95       	ret

000001ea <MCAL_Dio_WriteSinglePin>:
		u8PinNumber bitNumber;
		if(DIO_STATUS_ERROR == E_NOT_OK)
		{
			error = E_NOT_OK;
		}
		else if(Dio_WritePin->port_num >= DIO_CONFIGURED_PORTS)
 1ea:	fc 01       	movw	r30, r24
 1ec:	50 81       	ld	r21, Z
 1ee:	54 30       	cpi	r21, 0x04	; 4
 1f0:	08 f0       	brcs	.+2      	; 0x1f4 <MCAL_Dio_WriteSinglePin+0xa>
 1f2:	88 c0       	rjmp	.+272    	; 0x304 <MCAL_Dio_WriteSinglePin+0x11a>
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0d c0       	rjmp	.+26     	; 0x214 <MCAL_Dio_WriteSinglePin+0x2a>
			error = E_NOT_OK;
		}
		else
		{
			for (int i = 0; i < DIO_CONFIGURED_PINS; i++) {
						if (Pin_Num & (1 << i)) {
 1fa:	26 2f       	mov	r18, r22
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	08 2e       	mov	r0, r24
 200:	02 c0       	rjmp	.+4      	; 0x206 <MCAL_Dio_WriteSinglePin+0x1c>
 202:	35 95       	asr	r19
 204:	27 95       	ror	r18
 206:	0a 94       	dec	r0
 208:	e2 f7       	brpl	.-8      	; 0x202 <MCAL_Dio_WriteSinglePin+0x18>
 20a:	20 ff       	sbrs	r18, 0
 20c:	02 c0       	rjmp	.+4      	; 0x212 <MCAL_Dio_WriteSinglePin+0x28>
							bitNumber = i;
 20e:	78 2f       	mov	r23, r24
							break;
 210:	04 c0       	rjmp	.+8      	; 0x21a <MCAL_Dio_WriteSinglePin+0x30>

			error = E_NOT_OK;
		}
		else
		{
			for (int i = 0; i < DIO_CONFIGURED_PINS; i++) {
 212:	01 96       	adiw	r24, 0x01	; 1
 214:	88 30       	cpi	r24, 0x08	; 8
 216:	91 05       	cpc	r25, r1
 218:	84 f3       	brlt	.-32     	; 0x1fa <MCAL_Dio_WriteSinglePin+0x10>
						if (Pin_Num & (1 << i)) {
							bitNumber = i;
							break;
						}
					}
			switch(Dio_WritePin->port_num)
 21a:	51 30       	cpi	r21, 0x01	; 1
 21c:	11 f1       	breq	.+68     	; 0x262 <MCAL_Dio_WriteSinglePin+0x78>
 21e:	30 f0       	brcs	.+12     	; 0x22c <MCAL_Dio_WriteSinglePin+0x42>
 220:	52 30       	cpi	r21, 0x02	; 2
 222:	d1 f1       	breq	.+116    	; 0x298 <MCAL_Dio_WriteSinglePin+0xae>
 224:	53 30       	cpi	r21, 0x03	; 3
 226:	09 f4       	brne	.+2      	; 0x22a <MCAL_Dio_WriteSinglePin+0x40>
 228:	52 c0       	rjmp	.+164    	; 0x2ce <MCAL_Dio_WriteSinglePin+0xe4>
 22a:	6e c0       	rjmp	.+220    	; 0x308 <MCAL_Dio_WriteSinglePin+0x11e>
					{
					case PORTA_ID:
						if(Pin_value == 1) // compare with one as i define LOGIC_HIGH 1 in DIO_std but ican't use it
 22c:	41 30       	cpi	r20, 0x01	; 1
 22e:	61 f4       	brne	.+24     	; 0x248 <MCAL_Dio_WriteSinglePin+0x5e>
						{
							SET_BIT(DIO_PORTA,bitNumber);
 230:	2b b3       	in	r18, 0x1b	; 27
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	02 c0       	rjmp	.+4      	; 0x23c <MCAL_Dio_WriteSinglePin+0x52>
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	7a 95       	dec	r23
 23e:	e2 f7       	brpl	.-8      	; 0x238 <MCAL_Dio_WriteSinglePin+0x4e>
 240:	82 2b       	or	r24, r18
 242:	8b bb       	out	0x1b, r24	; 27
	return error;
}

E_ErrorType MCAL_Dio_WriteSinglePin(S_Dio *Dio_WritePin,E_DioPin Pin_Num,u8PinValue Pin_value)
{
		E_ErrorType error = E_OK;
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	08 95       	ret
						{
							SET_BIT(DIO_PORTA,bitNumber);
						}
						else
						{
							CLEAR_BIT(DIO_PORTA,bitNumber);
 248:	2b b3       	in	r18, 0x1b	; 27
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	02 c0       	rjmp	.+4      	; 0x254 <MCAL_Dio_WriteSinglePin+0x6a>
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	7a 95       	dec	r23
 256:	e2 f7       	brpl	.-8      	; 0x250 <MCAL_Dio_WriteSinglePin+0x66>
 258:	80 95       	com	r24
 25a:	82 23       	and	r24, r18
 25c:	8b bb       	out	0x1b, r24	; 27
	return error;
}

E_ErrorType MCAL_Dio_WriteSinglePin(S_Dio *Dio_WritePin,E_DioPin Pin_Num,u8PinValue Pin_value)
{
		E_ErrorType error = E_OK;
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	08 95       	ret
						{
							CLEAR_BIT(DIO_PORTA,bitNumber);
						}
						break;
					case PORTB_ID:
						if(Pin_value == 1)
 262:	41 30       	cpi	r20, 0x01	; 1
 264:	61 f4       	brne	.+24     	; 0x27e <MCAL_Dio_WriteSinglePin+0x94>
						{
							SET_BIT(DIO_PORTB,bitNumber);
 266:	28 b3       	in	r18, 0x18	; 24
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	02 c0       	rjmp	.+4      	; 0x272 <MCAL_Dio_WriteSinglePin+0x88>
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	7a 95       	dec	r23
 274:	e2 f7       	brpl	.-8      	; 0x26e <MCAL_Dio_WriteSinglePin+0x84>
 276:	82 2b       	or	r24, r18
 278:	88 bb       	out	0x18, r24	; 24
	return error;
}

E_ErrorType MCAL_Dio_WriteSinglePin(S_Dio *Dio_WritePin,E_DioPin Pin_Num,u8PinValue Pin_value)
{
		E_ErrorType error = E_OK;
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	08 95       	ret
						{
							SET_BIT(DIO_PORTB,bitNumber);
						}
						else
						{
							CLEAR_BIT(DIO_PORTB,bitNumber);
 27e:	28 b3       	in	r18, 0x18	; 24
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	02 c0       	rjmp	.+4      	; 0x28a <MCAL_Dio_WriteSinglePin+0xa0>
 286:	88 0f       	add	r24, r24
 288:	99 1f       	adc	r25, r25
 28a:	7a 95       	dec	r23
 28c:	e2 f7       	brpl	.-8      	; 0x286 <MCAL_Dio_WriteSinglePin+0x9c>
 28e:	80 95       	com	r24
 290:	82 23       	and	r24, r18
 292:	88 bb       	out	0x18, r24	; 24
	return error;
}

E_ErrorType MCAL_Dio_WriteSinglePin(S_Dio *Dio_WritePin,E_DioPin Pin_Num,u8PinValue Pin_value)
{
		E_ErrorType error = E_OK;
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	08 95       	ret
						{
							CLEAR_BIT(DIO_PORTB,bitNumber);
						}
						break;
					case PORTC_ID:
						if(Pin_value == 1)
 298:	41 30       	cpi	r20, 0x01	; 1
 29a:	61 f4       	brne	.+24     	; 0x2b4 <MCAL_Dio_WriteSinglePin+0xca>
						{
							SET_BIT(DIO_PORTC,bitNumber);
 29c:	25 b3       	in	r18, 0x15	; 21
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <MCAL_Dio_WriteSinglePin+0xbe>
 2a4:	88 0f       	add	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	7a 95       	dec	r23
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <MCAL_Dio_WriteSinglePin+0xba>
 2ac:	82 2b       	or	r24, r18
 2ae:	85 bb       	out	0x15, r24	; 21
	return error;
}

E_ErrorType MCAL_Dio_WriteSinglePin(S_Dio *Dio_WritePin,E_DioPin Pin_Num,u8PinValue Pin_value)
{
		E_ErrorType error = E_OK;
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	08 95       	ret
						{
							SET_BIT(DIO_PORTC,bitNumber);
						}
						else
						{
							CLEAR_BIT(DIO_PORTC,bitNumber);
 2b4:	25 b3       	in	r18, 0x15	; 21
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <MCAL_Dio_WriteSinglePin+0xd6>
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	7a 95       	dec	r23
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <MCAL_Dio_WriteSinglePin+0xd2>
 2c4:	80 95       	com	r24
 2c6:	82 23       	and	r24, r18
 2c8:	85 bb       	out	0x15, r24	; 21
	return error;
}

E_ErrorType MCAL_Dio_WriteSinglePin(S_Dio *Dio_WritePin,E_DioPin Pin_Num,u8PinValue Pin_value)
{
		E_ErrorType error = E_OK;
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	08 95       	ret
						{
							CLEAR_BIT(DIO_PORTC,bitNumber);
						}
						break;
					case PORTD_ID:
						if(Pin_value == 1)
 2ce:	41 30       	cpi	r20, 0x01	; 1
 2d0:	61 f4       	brne	.+24     	; 0x2ea <MCAL_Dio_WriteSinglePin+0x100>
						{
							SET_BIT(DIO_PORTD,bitNumber);
 2d2:	22 b3       	in	r18, 0x12	; 18
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <MCAL_Dio_WriteSinglePin+0xf4>
 2da:	88 0f       	add	r24, r24
 2dc:	99 1f       	adc	r25, r25
 2de:	7a 95       	dec	r23
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <MCAL_Dio_WriteSinglePin+0xf0>
 2e2:	82 2b       	or	r24, r18
 2e4:	82 bb       	out	0x12, r24	; 18
	return error;
}

E_ErrorType MCAL_Dio_WriteSinglePin(S_Dio *Dio_WritePin,E_DioPin Pin_Num,u8PinValue Pin_value)
{
		E_ErrorType error = E_OK;
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	08 95       	ret
						{
							SET_BIT(DIO_PORTD,bitNumber);
						}
						else
						{
							CLEAR_BIT(DIO_PORTD,bitNumber);
 2ea:	22 b3       	in	r18, 0x12	; 18
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <MCAL_Dio_WriteSinglePin+0x10c>
 2f2:	88 0f       	add	r24, r24
 2f4:	99 1f       	adc	r25, r25
 2f6:	7a 95       	dec	r23
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <MCAL_Dio_WriteSinglePin+0x108>
 2fa:	80 95       	com	r24
 2fc:	82 23       	and	r24, r18
 2fe:	82 bb       	out	0x12, r24	; 18
	return error;
}

E_ErrorType MCAL_Dio_WriteSinglePin(S_Dio *Dio_WritePin,E_DioPin Pin_Num,u8PinValue Pin_value)
{
		E_ErrorType error = E_OK;
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	08 95       	ret
			error = E_NOT_OK;
		}
		else if(Dio_WritePin->port_num >= DIO_CONFIGURED_PORTS)
		{

			error = E_NOT_OK;
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	08 95       	ret
	return error;
}

E_ErrorType MCAL_Dio_WriteSinglePin(S_Dio *Dio_WritePin,E_DioPin Pin_Num,u8PinValue Pin_value)
{
		E_ErrorType error = E_OK;
 308:	80 e0       	ldi	r24, 0x00	; 0

		}

		return error;

}
 30a:	08 95       	ret

0000030c <main>:
#include <util/delay.h>
S_DCMOTOR S_DC={'B','B','B',3,5,6,1};
	
int main(void)
{	
    HAL_DCMOTOR_Einit(&S_DC);
 30c:	80 e6       	ldi	r24, 0x60	; 96
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	0e 94 41 00 	call	0x82	; 0x82 <HAL_DCMOTOR_Einit>
	/*HAL_DCMOTOR_Ehalfspeed(&S_DC);
	_delay_ms(10000);*/
	HAL_DCMOTOR_Efullspeed(&S_DC);
 314:	80 e6       	ldi	r24, 0x60	; 96
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	0e 94 a2 00 	call	0x144	; 0x144 <HAL_DCMOTOR_Efullspeed>
 31c:	ff cf       	rjmp	.-2      	; 0x31c <main+0x10>

0000031e <_exit>:
 31e:	f8 94       	cli

00000320 <__stop_program>:
 320:	ff cf       	rjmp	.-2      	; 0x320 <__stop_program>
