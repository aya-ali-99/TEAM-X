
Timer0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000202  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  00000276  2**0
                  ALLOC
  2 .stab         000005dc  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000008ce  00000000  00000000  00000854  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 e7 00 	call	0x1ce	; 0x1ce <main>
  74:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <MCAL_Timer0_Init>:
 * F_PWM=(F_CPU)/(256*N) = (16^6)/(256*1024) = 61
 * Duty Cycle can be changed be update the value in The Compare Register
 */

E_ErrorType MCAL_Timer0_Init(E_Prescaler prescaler,u8CompareValue CompareValue,u8DutyCyle Duty_Cycle)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	00 d0       	rcall	.+0      	; 0x82 <MCAL_Timer0_Init+0x6>
  82:	00 d0       	rcall	.+0      	; 0x84 <MCAL_Timer0_Init+0x8>
  84:	00 d0       	rcall	.+0      	; 0x86 <MCAL_Timer0_Init+0xa>
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	8a 83       	std	Y+2, r24	; 0x02
  8c:	6b 83       	std	Y+3, r22	; 0x03
  8e:	4c 83       	std	Y+4, r20	; 0x04
		error = E_NOT_OK;
	}
	else
	{
#if (TIMER0_MODE == OVER_FLOW_MODE)
		TCNT0 = 0; //To start counting from 0
  90:	e2 e5       	ldi	r30, 0x52	; 82
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1
		 * . prescaler 1024 CS00=1  CS02=1
		 * . prescaler 256  CS02=1
		 * . prescaler 64   CS00=1  CS0=1
		 * . prsecaler 8    CS00=1
		 */
		SET_BIT(TCCR0,FOC0);
  96:	a3 e5       	ldi	r26, 0x53	; 83
  98:	b0 e0       	ldi	r27, 0x00	; 0
  9a:	e3 e5       	ldi	r30, 0x53	; 83
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	80 68       	ori	r24, 0x80	; 128
  a2:	8c 93       	st	X, r24

		switch (prescaler)
  a4:	8a 81       	ldd	r24, Y+2	; 0x02
  a6:	28 2f       	mov	r18, r24
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	3e 83       	std	Y+6, r19	; 0x06
  ac:	2d 83       	std	Y+5, r18	; 0x05
  ae:	8d 81       	ldd	r24, Y+5	; 0x05
  b0:	9e 81       	ldd	r25, Y+6	; 0x06
  b2:	81 30       	cpi	r24, 0x01	; 1
  b4:	91 05       	cpc	r25, r1
  b6:	e9 f0       	breq	.+58     	; 0xf2 <MCAL_Timer0_Init+0x76>
  b8:	2d 81       	ldd	r18, Y+5	; 0x05
  ba:	3e 81       	ldd	r19, Y+6	; 0x06
  bc:	22 30       	cpi	r18, 0x02	; 2
  be:	31 05       	cpc	r19, r1
  c0:	2c f4       	brge	.+10     	; 0xcc <MCAL_Timer0_Init+0x50>
  c2:	8d 81       	ldd	r24, Y+5	; 0x05
  c4:	9e 81       	ldd	r25, Y+6	; 0x06
  c6:	00 97       	sbiw	r24, 0x00	; 0
  c8:	61 f0       	breq	.+24     	; 0xe2 <MCAL_Timer0_Init+0x66>
  ca:	38 c0       	rjmp	.+112    	; 0x13c <MCAL_Timer0_Init+0xc0>
  cc:	2d 81       	ldd	r18, Y+5	; 0x05
  ce:	3e 81       	ldd	r19, Y+6	; 0x06
  d0:	22 30       	cpi	r18, 0x02	; 2
  d2:	31 05       	cpc	r19, r1
  d4:	e9 f0       	breq	.+58     	; 0x110 <MCAL_Timer0_Init+0x94>
  d6:	8d 81       	ldd	r24, Y+5	; 0x05
  d8:	9e 81       	ldd	r25, Y+6	; 0x06
  da:	83 30       	cpi	r24, 0x03	; 3
  dc:	91 05       	cpc	r25, r1
  de:	01 f1       	breq	.+64     	; 0x120 <MCAL_Timer0_Init+0xa4>
  e0:	2d c0       	rjmp	.+90     	; 0x13c <MCAL_Timer0_Init+0xc0>
		{
		case Prescaler_8:
			SET_BIT(TCCR0,CS00);
  e2:	a3 e5       	ldi	r26, 0x53	; 83
  e4:	b0 e0       	ldi	r27, 0x00	; 0
  e6:	e3 e5       	ldi	r30, 0x53	; 83
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	81 60       	ori	r24, 0x01	; 1
  ee:	8c 93       	st	X, r24
  f0:	25 c0       	rjmp	.+74     	; 0x13c <MCAL_Timer0_Init+0xc0>
			break;
		case Prescaler_64:
			SET_BIT(TCCR0,CS00);
  f2:	a3 e5       	ldi	r26, 0x53	; 83
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	e3 e5       	ldi	r30, 0x53	; 83
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	81 60       	ori	r24, 0x01	; 1
  fe:	8c 93       	st	X, r24
			SET_BIT(TCCR0,CS01);
 100:	a3 e5       	ldi	r26, 0x53	; 83
 102:	b0 e0       	ldi	r27, 0x00	; 0
 104:	e3 e5       	ldi	r30, 0x53	; 83
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	82 60       	ori	r24, 0x02	; 2
 10c:	8c 93       	st	X, r24
 10e:	16 c0       	rjmp	.+44     	; 0x13c <MCAL_Timer0_Init+0xc0>
			break;
		case Prescaler_256:
			SET_BIT(TCCR0,CS02);
 110:	a3 e5       	ldi	r26, 0x53	; 83
 112:	b0 e0       	ldi	r27, 0x00	; 0
 114:	e3 e5       	ldi	r30, 0x53	; 83
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	84 60       	ori	r24, 0x04	; 4
 11c:	8c 93       	st	X, r24
 11e:	0e c0       	rjmp	.+28     	; 0x13c <MCAL_Timer0_Init+0xc0>
			break;
		case Prescaler_1024:
			SET_BIT(TCCR0,CS00);
 120:	a3 e5       	ldi	r26, 0x53	; 83
 122:	b0 e0       	ldi	r27, 0x00	; 0
 124:	e3 e5       	ldi	r30, 0x53	; 83
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	81 60       	ori	r24, 0x01	; 1
 12c:	8c 93       	st	X, r24
			SET_BIT(TCCR0,CS02);
 12e:	a3 e5       	ldi	r26, 0x53	; 83
 130:	b0 e0       	ldi	r27, 0x00	; 0
 132:	e3 e5       	ldi	r30, 0x53	; 83
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	84 60       	ori	r24, 0x04	; 4
 13a:	8c 93       	st	X, r24
			break;
		default:
			break;
		}
		//Enable Time0 Iterrupt
		SET_BIT(TIMSK,TOIE0);
 13c:	a9 e5       	ldi	r26, 0x59	; 89
 13e:	b0 e0       	ldi	r27, 0x00	; 0
 140:	e9 e5       	ldi	r30, 0x59	; 89
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	81 60       	ori	r24, 0x01	; 1
 148:	8c 93       	st	X, r24
			break;
		default:
			break;
		}
#endif
return error;
 14a:	89 81       	ldd	r24, Y+1	; 0x01
	}
}
 14c:	26 96       	adiw	r28, 0x06	; 6
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	f8 94       	cli
 152:	de bf       	out	0x3e, r29	; 62
 154:	0f be       	out	0x3f, r0	; 63
 156:	cd bf       	out	0x3d, r28	; 61
 158:	cf 91       	pop	r28
 15a:	df 91       	pop	r29
 15c:	08 95       	ret

0000015e <__vector_11>:
#include <util/delay.h>

int counter = 0;

ISR(TIMER0_OVF_vect)
{
 15e:	1f 92       	push	r1
 160:	0f 92       	push	r0
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	0f 92       	push	r0
 166:	11 24       	eor	r1, r1
 168:	8f 93       	push	r24
 16a:	9f 93       	push	r25
 16c:	af 93       	push	r26
 16e:	bf 93       	push	r27
 170:	ef 93       	push	r30
 172:	ff 93       	push	r31
 174:	df 93       	push	r29
 176:	cf 93       	push	r28
 178:	cd b7       	in	r28, 0x3d	; 61
 17a:	de b7       	in	r29, 0x3e	; 62
	counter ++;
 17c:	80 91 60 00 	lds	r24, 0x0060
 180:	90 91 61 00 	lds	r25, 0x0061
 184:	01 96       	adiw	r24, 0x01	; 1
 186:	90 93 61 00 	sts	0x0061, r25
 18a:	80 93 60 00 	sts	0x0060, r24

	if(counter == 4)
 18e:	80 91 60 00 	lds	r24, 0x0060
 192:	90 91 61 00 	lds	r25, 0x0061
 196:	84 30       	cpi	r24, 0x04	; 4
 198:	91 05       	cpc	r25, r1
 19a:	61 f4       	brne	.+24     	; 0x1b4 <__vector_11+0x56>
	{
		PORTA = PORTA ^ (1<<PINA7);
 19c:	ab e3       	ldi	r26, 0x3B	; 59
 19e:	b0 e0       	ldi	r27, 0x00	; 0
 1a0:	eb e3       	ldi	r30, 0x3B	; 59
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	90 81       	ld	r25, Z
 1a6:	80 e8       	ldi	r24, 0x80	; 128
 1a8:	89 27       	eor	r24, r25
 1aa:	8c 93       	st	X, r24
		counter = 0;
 1ac:	10 92 61 00 	sts	0x0061, r1
 1b0:	10 92 60 00 	sts	0x0060, r1
	}

}
 1b4:	cf 91       	pop	r28
 1b6:	df 91       	pop	r29
 1b8:	ff 91       	pop	r31
 1ba:	ef 91       	pop	r30
 1bc:	bf 91       	pop	r27
 1be:	af 91       	pop	r26
 1c0:	9f 91       	pop	r25
 1c2:	8f 91       	pop	r24
 1c4:	0f 90       	pop	r0
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	0f 90       	pop	r0
 1ca:	1f 90       	pop	r1
 1cc:	18 95       	reti

000001ce <main>:
		}

}
*/
int main(void)
{
 1ce:	df 93       	push	r29
 1d0:	cf 93       	push	r28
 1d2:	cd b7       	in	r28, 0x3d	; 61
 1d4:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0xFF;
 1d6:	ea e3       	ldi	r30, 0x3A	; 58
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	8f ef       	ldi	r24, 0xFF	; 255
 1dc:	80 83       	st	Z, r24
	PORTA =0x00;
 1de:	eb e3       	ldi	r30, 0x3B	; 59
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	10 82       	st	Z, r1
	SREG |=(1<<7);
 1e4:	af e5       	ldi	r26, 0x5F	; 95
 1e6:	b0 e0       	ldi	r27, 0x00	; 0
 1e8:	ef e5       	ldi	r30, 0x5F	; 95
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	80 68       	ori	r24, 0x80	; 128
 1f0:	8c 93       	st	X, r24
	MCAL_Timer0_Init(Prescaler_64, 0, 0);
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	60 e0       	ldi	r22, 0x00	; 0
 1f6:	40 e0       	ldi	r20, 0x00	; 0
 1f8:	0e 94 3e 00 	call	0x7c	; 0x7c <MCAL_Timer0_Init>
 1fc:	ff cf       	rjmp	.-2      	; 0x1fc <main+0x2e>

000001fe <_exit>:
 1fe:	f8 94       	cli

00000200 <__stop_program>:
 200:	ff cf       	rjmp	.-2      	; 0x200 <__stop_program>
