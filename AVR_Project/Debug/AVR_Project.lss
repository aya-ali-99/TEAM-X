
AVR_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006c44  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000162  00800060  00006c44  00006cd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000038  008001c2  008001c2  00006e3a  2**0
                  ALLOC
  3 .stab         00007c14  00000000  00000000  00006e3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003845  00000000  00000000  0000ea50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00012295  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  00012435  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  00012625  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  00014a31  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  00015da8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00016f80  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  00017140  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  00017433  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00017e01  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 70 11 	jmp	0x22e0	; 0x22e0 <__vector_1>
       8:	0c 94 a3 11 	jmp	0x2346	; 0x2346 <__vector_2>
       c:	0c 94 d6 11 	jmp	0x23ac	; 0x23ac <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 48 0c 	jmp	0x1890	; 0x1890 <__vector_6>
      1c:	0c 94 e2 0b 	jmp	0x17c4	; 0x17c4 <__vector_7>
      20:	0c 94 15 0c 	jmp	0x182a	; 0x182a <__vector_8>
      24:	0c 94 af 0b 	jmp	0x175e	; 0x175e <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 38 08 	jmp	0x1070	; 0x1070 <__vector_13>
      38:	0c 94 9e 08 	jmp	0x113c	; 0x113c <__vector_14>
      3c:	0c 94 6b 08 	jmp	0x10d6	; 0x10d6 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e4       	ldi	r30, 0x44	; 68
      68:	fc e6       	ldi	r31, 0x6C	; 108
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3c       	cpi	r26, 0xC2	; 194
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 ec       	ldi	r26, 0xC2	; 194
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3f       	cpi	r26, 0xFA	; 250
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a7 35 	call	0x6b4e	; 0x6b4e <main>
      8a:	0c 94 20 36 	jmp	0x6c40	; 0x6c40 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e9 35 	jmp	0x6bd2	; 0x6bd2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e8       	ldi	r26, 0x8B	; 139
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 05 36 	jmp	0x6c0a	; 0x6c0a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f5 35 	jmp	0x6bea	; 0x6bea <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 11 36 	jmp	0x6c22	; 0x6c22 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f5 35 	jmp	0x6bea	; 0x6bea <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 11 36 	jmp	0x6c22	; 0x6c22 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e9 35 	jmp	0x6bd2	; 0x6bd2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e8       	ldi	r24, 0x8B	; 139
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 05 36 	jmp	0x6c0a	; 0x6c0a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f1 35 	jmp	0x6be2	; 0x6be2 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6b e8       	ldi	r22, 0x8B	; 139
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 0d 36 	jmp	0x6c1a	; 0x6c1a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 f5 35 	jmp	0x6bea	; 0x6bea <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 11 36 	jmp	0x6c22	; 0x6c22 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 f5 35 	jmp	0x6bea	; 0x6bea <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 11 36 	jmp	0x6c22	; 0x6c22 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 f5 35 	jmp	0x6bea	; 0x6bea <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 11 36 	jmp	0x6c22	; 0x6c22 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 f2 35 	jmp	0x6be4	; 0x6be4 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 0e 36 	jmp	0x6c1c	; 0x6c1c <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 f9 35 	jmp	0x6bf2	; 0x6bf2 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 15 36 	jmp	0x6c2a	; 0x6c2a <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	ed 56       	subi	r30, 0x6D	; 109
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <MCAL_UART_init>:
#include "Uart_interface.h"
#include "lcd_Interface.h"

/* UART initialization */
E_Errore_State_UART MCAL_UART_init(u32 baudRate)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
     e00:	29 97       	sbiw	r28, 0x09	; 9
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	f8 94       	cli
     e06:	de bf       	out	0x3e, r29	; 62
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	cd bf       	out	0x3d, r28	; 61
     e0c:	6e 83       	std	Y+6, r22	; 0x06
     e0e:	7f 83       	std	Y+7, r23	; 0x07
     e10:	88 87       	std	Y+8, r24	; 0x08
     e12:	99 87       	std	Y+9, r25	; 0x09
	E_Errore_State_UART error =OK;
     e14:	1d 82       	std	Y+5, r1	; 0x05
	}
	else
	{


		u32 BRValue = (F_CPU/(16UL*baudRate)) - 1;
     e16:	8e 81       	ldd	r24, Y+6	; 0x06
     e18:	9f 81       	ldd	r25, Y+7	; 0x07
     e1a:	a8 85       	ldd	r26, Y+8	; 0x08
     e1c:	b9 85       	ldd	r27, Y+9	; 0x09
     e1e:	88 0f       	add	r24, r24
     e20:	99 1f       	adc	r25, r25
     e22:	aa 1f       	adc	r26, r26
     e24:	bb 1f       	adc	r27, r27
     e26:	88 0f       	add	r24, r24
     e28:	99 1f       	adc	r25, r25
     e2a:	aa 1f       	adc	r26, r26
     e2c:	bb 1f       	adc	r27, r27
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	aa 1f       	adc	r26, r26
     e34:	bb 1f       	adc	r27, r27
     e36:	88 0f       	add	r24, r24
     e38:	99 1f       	adc	r25, r25
     e3a:	aa 1f       	adc	r26, r26
     e3c:	bb 1f       	adc	r27, r27
     e3e:	9c 01       	movw	r18, r24
     e40:	ad 01       	movw	r20, r26
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	94 e2       	ldi	r25, 0x24	; 36
     e46:	a4 ef       	ldi	r26, 0xF4	; 244
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	bc 01       	movw	r22, r24
     e4c:	cd 01       	movw	r24, r26
     e4e:	0e 94 c7 35 	call	0x6b8e	; 0x6b8e <__udivmodsi4>
     e52:	da 01       	movw	r26, r20
     e54:	c9 01       	movw	r24, r18
     e56:	01 97       	sbiw	r24, 0x01	; 1
     e58:	a1 09       	sbc	r26, r1
     e5a:	b1 09       	sbc	r27, r1
     e5c:	89 83       	std	Y+1, r24	; 0x01
     e5e:	9a 83       	std	Y+2, r25	; 0x02
     e60:	ab 83       	std	Y+3, r26	; 0x03
     e62:	bc 83       	std	Y+4, r27	; 0x04

		/* Set baud rate */
		UCSRC &= ~(1<<URSEL);
     e64:	a0 e4       	ldi	r26, 0x40	; 64
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e0 e4       	ldi	r30, 0x40	; 64
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	8f 77       	andi	r24, 0x7F	; 127
     e70:	8c 93       	st	X, r24
		UBRRH = (u8)(BRValue>>8);
     e72:	e0 e4       	ldi	r30, 0x40	; 64
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	89 81       	ldd	r24, Y+1	; 0x01
     e78:	9a 81       	ldd	r25, Y+2	; 0x02
     e7a:	ab 81       	ldd	r26, Y+3	; 0x03
     e7c:	bc 81       	ldd	r27, Y+4	; 0x04
     e7e:	89 2f       	mov	r24, r25
     e80:	9a 2f       	mov	r25, r26
     e82:	ab 2f       	mov	r26, r27
     e84:	bb 27       	eor	r27, r27
     e86:	80 83       	st	Z, r24
		UBRRL = (u8)BRValue;
     e88:	e9 e2       	ldi	r30, 0x29	; 41
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	80 83       	st	Z, r24

		/* Enable receiver and transmitter */
		UCSRB = (1<<RXEN)|(1<<TXEN);//|(1<<RXCIE);
     e90:	ea e2       	ldi	r30, 0x2A	; 42
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	88 e1       	ldi	r24, 0x18	; 24
     e96:	80 83       	st	Z, r24
		/* Set frame format: 8data, 2stop bit */
		UCSRC = (1<<URSEL)|(3<<UCSZ0);
     e98:	e0 e4       	ldi	r30, 0x40	; 64
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	86 e8       	ldi	r24, 0x86	; 134
     e9e:	80 83       	st	Z, r24


	}

	return error;
     ea0:	8d 81       	ldd	r24, Y+5	; 0x05

}
     ea2:	29 96       	adiw	r28, 0x09	; 9
     ea4:	0f b6       	in	r0, 0x3f	; 63
     ea6:	f8 94       	cli
     ea8:	de bf       	out	0x3e, r29	; 62
     eaa:	0f be       	out	0x3f, r0	; 63
     eac:	cd bf       	out	0x3d, r28	; 61
     eae:	cf 91       	pop	r28
     eb0:	df 91       	pop	r29
     eb2:	08 95       	ret

00000eb4 <MCAL_UART_send_sysch>:


/* UART sends character or number by synchronous  way */
E_Errore_State_UART MCAL_UART_send_sysch(u8 Data)
{
     eb4:	df 93       	push	r29
     eb6:	cf 93       	push	r28
     eb8:	00 d0       	rcall	.+0      	; 0xeba <MCAL_UART_send_sysch+0x6>
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
     ebe:	8a 83       	std	Y+2, r24	; 0x02
	E_Errore_State_UART error =OK;
     ec0:	19 82       	std	Y+1, r1	; 0x01
		error=NOT_OK;
	}
	else
	{
		/* Wait for empty transmit buffer */
		while ( !( UCSRA & (1<<UDRE)) );
     ec2:	eb e2       	ldi	r30, 0x2B	; 43
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	88 2f       	mov	r24, r24
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	80 72       	andi	r24, 0x20	; 32
     ece:	90 70       	andi	r25, 0x00	; 0
     ed0:	00 97       	sbiw	r24, 0x00	; 0
     ed2:	b9 f3       	breq	.-18     	; 0xec2 <MCAL_UART_send_sysch+0xe>

		/* Put data into buffer, sends the data */
		UDR = Data;
     ed4:	ec e2       	ldi	r30, 0x2C	; 44
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	8a 81       	ldd	r24, Y+2	; 0x02
     eda:	80 83       	st	Z, r24
	}
	return error;
     edc:	89 81       	ldd	r24, Y+1	; 0x01
}
     ede:	0f 90       	pop	r0
     ee0:	0f 90       	pop	r0
     ee2:	cf 91       	pop	r28
     ee4:	df 91       	pop	r29
     ee6:	08 95       	ret

00000ee8 <MCAL_UART_TXC_Enable>:


/* Enable Transmit complete */
E_Errore_State_UART MCAL_UART_TXC_Enable()
{
     ee8:	df 93       	push	r29
     eea:	cf 93       	push	r28
     eec:	0f 92       	push	r0
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
	E_Errore_State_UART error =OK;
     ef2:	19 82       	std	Y+1, r1	; 0x01
		error=NOT_OK;
	}
	else{

		/* Enable Transmit complete  interrupt */
		UCSRB |=(1<<TXCIE);
     ef4:	aa e2       	ldi	r26, 0x2A	; 42
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	ea e2       	ldi	r30, 0x2A	; 42
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	80 64       	ori	r24, 0x40	; 64
     f00:	8c 93       	st	X, r24
		//enable global interrupt
		sei();
     f02:	78 94       	sei
	}
	return error;
     f04:	89 81       	ldd	r24, Y+1	; 0x01
}
     f06:	0f 90       	pop	r0
     f08:	cf 91       	pop	r28
     f0a:	df 91       	pop	r29
     f0c:	08 95       	ret

00000f0e <MCAL_UART_UDRE_Enable>:

/* Enable USART data register empty */
E_Errore_State_UART  MCAL_UART_UDRE_Enable()
{
     f0e:	df 93       	push	r29
     f10:	cf 93       	push	r28
     f12:	0f 92       	push	r0
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
	E_Errore_State_UART error =OK;
     f18:	19 82       	std	Y+1, r1	; 0x01
	else
	{


		/* Enable the interrupt UART data register empty */
		UCSRB |=(1<<UDRIE);
     f1a:	aa e2       	ldi	r26, 0x2A	; 42
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	ea e2       	ldi	r30, 0x2A	; 42
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	80 62       	ori	r24, 0x20	; 32
     f26:	8c 93       	st	X, r24
		/* Enable global interrupt */
		sei();
     f28:	78 94       	sei

	}
	return error;
     f2a:	89 81       	ldd	r24, Y+1	; 0x01


}
     f2c:	0f 90       	pop	r0
     f2e:	cf 91       	pop	r28
     f30:	df 91       	pop	r29
     f32:	08 95       	ret

00000f34 <MCAL_UART_send_str_sysch>:

/* UART sends string  by synchronous  way */
E_Errore_State_UART MCAL_UART_send_str_sysch(char*Str)
{
     f34:	df 93       	push	r29
     f36:	cf 93       	push	r28
     f38:	00 d0       	rcall	.+0      	; 0xf3a <MCAL_UART_send_str_sysch+0x6>
     f3a:	00 d0       	rcall	.+0      	; 0xf3c <MCAL_UART_send_str_sysch+0x8>
     f3c:	0f 92       	push	r0
     f3e:	cd b7       	in	r28, 0x3d	; 61
     f40:	de b7       	in	r29, 0x3e	; 62
     f42:	9d 83       	std	Y+5, r25	; 0x05
     f44:	8c 83       	std	Y+4, r24	; 0x04
	E_Errore_State_UART u8LocalReturn;
	E_Errore_State_UART error =OK;
     f46:	1a 82       	std	Y+2, r1	; 0x02
	{
		error=NOT_OK;
	}
	else
	{
		for(u8 i=0;Str[i]!='\0';i++)
     f48:	19 82       	std	Y+1, r1	; 0x01
     f4a:	0f c0       	rjmp	.+30     	; 0xf6a <MCAL_UART_send_str_sysch+0x36>
		{

			u8LocalReturn=MCAL_UART_send_sysch(Str[i]);
     f4c:	89 81       	ldd	r24, Y+1	; 0x01
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	8c 81       	ldd	r24, Y+4	; 0x04
     f54:	9d 81       	ldd	r25, Y+5	; 0x05
     f56:	fc 01       	movw	r30, r24
     f58:	e2 0f       	add	r30, r18
     f5a:	f3 1f       	adc	r31, r19
     f5c:	80 81       	ld	r24, Z
     f5e:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <MCAL_UART_send_sysch>
     f62:	8b 83       	std	Y+3, r24	; 0x03
	{
		error=NOT_OK;
	}
	else
	{
		for(u8 i=0;Str[i]!='\0';i++)
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	8f 5f       	subi	r24, 0xFF	; 255
     f68:	89 83       	std	Y+1, r24	; 0x01
     f6a:	89 81       	ldd	r24, Y+1	; 0x01
     f6c:	28 2f       	mov	r18, r24
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	8c 81       	ldd	r24, Y+4	; 0x04
     f72:	9d 81       	ldd	r25, Y+5	; 0x05
     f74:	fc 01       	movw	r30, r24
     f76:	e2 0f       	add	r30, r18
     f78:	f3 1f       	adc	r31, r19
     f7a:	80 81       	ld	r24, Z
     f7c:	88 23       	and	r24, r24
     f7e:	31 f7       	brne	.-52     	; 0xf4c <MCAL_UART_send_str_sysch+0x18>

			u8LocalReturn=MCAL_UART_send_sysch(Str[i]);

		}
	}
	return error;
     f80:	8a 81       	ldd	r24, Y+2	; 0x02
}
     f82:	0f 90       	pop	r0
     f84:	0f 90       	pop	r0
     f86:	0f 90       	pop	r0
     f88:	0f 90       	pop	r0
     f8a:	0f 90       	pop	r0
     f8c:	cf 91       	pop	r28
     f8e:	df 91       	pop	r29
     f90:	08 95       	ret

00000f92 <MCAL_UART_receive_sysch>:

/* UART receives data  by synchronous  way */
u8 MCAL_UART_receive_sysch()
{
     f92:	df 93       	push	r29
     f94:	cf 93       	push	r28
     f96:	cd b7       	in	r28, 0x3d	; 61
     f98:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */
	while ( !(UCSRA & (1<<RXC)) );
     f9a:	eb e2       	ldi	r30, 0x2B	; 43
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	88 23       	and	r24, r24
     fa2:	dc f7       	brge	.-10     	; 0xf9a <MCAL_UART_receive_sysch+0x8>
	HAL_LCD_sendCharacter(UDR);
     fa4:	ec e2       	ldi	r30, 0x2C	; 44
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	0e 94 18 2c 	call	0x5830	; 0x5830 <HAL_LCD_sendCharacter>
	/* Get and return received data from buffer */
	return UDR;
     fae:	ec e2       	ldi	r30, 0x2C	; 44
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
}
     fb4:	cf 91       	pop	r28
     fb6:	df 91       	pop	r29
     fb8:	08 95       	ret

00000fba <MCAL_UART_RXC_Enable>:


/* Enable USART receive complete  */
E_Errore_State_UART  MCAL_UART_RXC_Enable()
{
     fba:	df 93       	push	r29
     fbc:	cf 93       	push	r28
     fbe:	0f 92       	push	r0
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
	E_Errore_State_UART error =OK;
     fc4:	19 82       	std	Y+1, r1	; 0x01
	}
	else
	{

		//enable the interrupt complete interrupt
		UCSRB |=(1<<RXCIE);
     fc6:	aa e2       	ldi	r26, 0x2A	; 42
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	ea e2       	ldi	r30, 0x2A	; 42
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	80 68       	ori	r24, 0x80	; 128
     fd2:	8c 93       	st	X, r24
		//enable global interrupt
		sei();
     fd4:	78 94       	sei

	}
	return error;
     fd6:	89 81       	ldd	r24, Y+1	; 0x01
}
     fd8:	0f 90       	pop	r0
     fda:	cf 91       	pop	r28
     fdc:	df 91       	pop	r29
     fde:	08 95       	ret

00000fe0 <MCAL_UART_setCAllBACK>:


E_Errore_State_UART  MCAL_UART_setCAllBACK(void (*p2f)(void),MODES mode)
{
     fe0:	df 93       	push	r29
     fe2:	cf 93       	push	r28
     fe4:	00 d0       	rcall	.+0      	; 0xfe6 <MCAL_UART_setCAllBACK+0x6>
     fe6:	00 d0       	rcall	.+0      	; 0xfe8 <MCAL_UART_setCAllBACK+0x8>
     fe8:	00 d0       	rcall	.+0      	; 0xfea <MCAL_UART_setCAllBACK+0xa>
     fea:	cd b7       	in	r28, 0x3d	; 61
     fec:	de b7       	in	r29, 0x3e	; 62
     fee:	9b 83       	std	Y+3, r25	; 0x03
     ff0:	8a 83       	std	Y+2, r24	; 0x02
     ff2:	6c 83       	std	Y+4, r22	; 0x04
	E_Errore_State_UART error =OK;
     ff4:	19 82       	std	Y+1, r1	; 0x01
	{
		error=NOT_OK;
	}
	else
	{
		switch (mode)
     ff6:	8c 81       	ldd	r24, Y+4	; 0x04
     ff8:	28 2f       	mov	r18, r24
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	3e 83       	std	Y+6, r19	; 0x06
     ffe:	2d 83       	std	Y+5, r18	; 0x05
    1000:	8d 81       	ldd	r24, Y+5	; 0x05
    1002:	9e 81       	ldd	r25, Y+6	; 0x06
    1004:	81 30       	cpi	r24, 0x01	; 1
    1006:	91 05       	cpc	r25, r1
    1008:	a1 f0       	breq	.+40     	; 0x1032 <MCAL_UART_setCAllBACK+0x52>
    100a:	2d 81       	ldd	r18, Y+5	; 0x05
    100c:	3e 81       	ldd	r19, Y+6	; 0x06
    100e:	22 30       	cpi	r18, 0x02	; 2
    1010:	31 05       	cpc	r19, r1
    1012:	d1 f0       	breq	.+52     	; 0x1048 <MCAL_UART_setCAllBACK+0x68>
    1014:	8d 81       	ldd	r24, Y+5	; 0x05
    1016:	9e 81       	ldd	r25, Y+6	; 0x06
    1018:	00 97       	sbiw	r24, 0x00	; 0
    101a:	01 f5       	brne	.+64     	; 0x105c <MCAL_UART_setCAllBACK+0x7c>
		{
		case Data_Register_Empty:
			if ((p2f) != NULL)
    101c:	8a 81       	ldd	r24, Y+2	; 0x02
    101e:	9b 81       	ldd	r25, Y+3	; 0x03
    1020:	00 97       	sbiw	r24, 0x00	; 0
    1022:	e1 f0       	breq	.+56     	; 0x105c <MCAL_UART_setCAllBACK+0x7c>
			{
				ptr2fun_Data_register_empty= p2f;
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	9b 81       	ldd	r25, Y+3	; 0x03
    1028:	90 93 c3 01 	sts	0x01C3, r25
    102c:	80 93 c2 01 	sts	0x01C2, r24
    1030:	15 c0       	rjmp	.+42     	; 0x105c <MCAL_UART_setCAllBACK+0x7c>
			}
			break;
		case Transmit_Complete:
			if( (p2f) != NULL)
    1032:	8a 81       	ldd	r24, Y+2	; 0x02
    1034:	9b 81       	ldd	r25, Y+3	; 0x03
    1036:	00 97       	sbiw	r24, 0x00	; 0
    1038:	89 f0       	breq	.+34     	; 0x105c <MCAL_UART_setCAllBACK+0x7c>
			{
				ptr2fun_transmit_complete = p2f;
    103a:	8a 81       	ldd	r24, Y+2	; 0x02
    103c:	9b 81       	ldd	r25, Y+3	; 0x03
    103e:	90 93 c5 01 	sts	0x01C5, r25
    1042:	80 93 c4 01 	sts	0x01C4, r24
    1046:	0a c0       	rjmp	.+20     	; 0x105c <MCAL_UART_setCAllBACK+0x7c>
			}
			break;
		case receive_complete:
			if( (p2f) != NULL)
    1048:	8a 81       	ldd	r24, Y+2	; 0x02
    104a:	9b 81       	ldd	r25, Y+3	; 0x03
    104c:	00 97       	sbiw	r24, 0x00	; 0
    104e:	31 f0       	breq	.+12     	; 0x105c <MCAL_UART_setCAllBACK+0x7c>
			{
				ptr2fun_receive_data = p2f;
    1050:	8a 81       	ldd	r24, Y+2	; 0x02
    1052:	9b 81       	ldd	r25, Y+3	; 0x03
    1054:	90 93 c7 01 	sts	0x01C7, r25
    1058:	80 93 c6 01 	sts	0x01C6, r24
			break;

		}

	}
	return error;
    105c:	89 81       	ldd	r24, Y+1	; 0x01
}
    105e:	26 96       	adiw	r28, 0x06	; 6
    1060:	0f b6       	in	r0, 0x3f	; 63
    1062:	f8 94       	cli
    1064:	de bf       	out	0x3e, r29	; 62
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	cd bf       	out	0x3d, r28	; 61
    106a:	cf 91       	pop	r28
    106c:	df 91       	pop	r29
    106e:	08 95       	ret

00001070 <__vector_13>:


ISR(UART_RXC_VECT)
{
    1070:	1f 92       	push	r1
    1072:	0f 92       	push	r0
    1074:	0f b6       	in	r0, 0x3f	; 63
    1076:	0f 92       	push	r0
    1078:	11 24       	eor	r1, r1
    107a:	2f 93       	push	r18
    107c:	3f 93       	push	r19
    107e:	4f 93       	push	r20
    1080:	5f 93       	push	r21
    1082:	6f 93       	push	r22
    1084:	7f 93       	push	r23
    1086:	8f 93       	push	r24
    1088:	9f 93       	push	r25
    108a:	af 93       	push	r26
    108c:	bf 93       	push	r27
    108e:	ef 93       	push	r30
    1090:	ff 93       	push	r31
    1092:	df 93       	push	r29
    1094:	cf 93       	push	r28
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62
	if (ptr2fun_receive_data != NULL)
    109a:	80 91 c6 01 	lds	r24, 0x01C6
    109e:	90 91 c7 01 	lds	r25, 0x01C7
    10a2:	00 97       	sbiw	r24, 0x00	; 0
    10a4:	29 f0       	breq	.+10     	; 0x10b0 <__vector_13+0x40>
	{
		ptr2fun_receive_data();
    10a6:	e0 91 c6 01 	lds	r30, 0x01C6
    10aa:	f0 91 c7 01 	lds	r31, 0x01C7
    10ae:	09 95       	icall
	}
}
    10b0:	cf 91       	pop	r28
    10b2:	df 91       	pop	r29
    10b4:	ff 91       	pop	r31
    10b6:	ef 91       	pop	r30
    10b8:	bf 91       	pop	r27
    10ba:	af 91       	pop	r26
    10bc:	9f 91       	pop	r25
    10be:	8f 91       	pop	r24
    10c0:	7f 91       	pop	r23
    10c2:	6f 91       	pop	r22
    10c4:	5f 91       	pop	r21
    10c6:	4f 91       	pop	r20
    10c8:	3f 91       	pop	r19
    10ca:	2f 91       	pop	r18
    10cc:	0f 90       	pop	r0
    10ce:	0f be       	out	0x3f, r0	; 63
    10d0:	0f 90       	pop	r0
    10d2:	1f 90       	pop	r1
    10d4:	18 95       	reti

000010d6 <__vector_15>:


ISR(UART_TXC_vect)
{
    10d6:	1f 92       	push	r1
    10d8:	0f 92       	push	r0
    10da:	0f b6       	in	r0, 0x3f	; 63
    10dc:	0f 92       	push	r0
    10de:	11 24       	eor	r1, r1
    10e0:	2f 93       	push	r18
    10e2:	3f 93       	push	r19
    10e4:	4f 93       	push	r20
    10e6:	5f 93       	push	r21
    10e8:	6f 93       	push	r22
    10ea:	7f 93       	push	r23
    10ec:	8f 93       	push	r24
    10ee:	9f 93       	push	r25
    10f0:	af 93       	push	r26
    10f2:	bf 93       	push	r27
    10f4:	ef 93       	push	r30
    10f6:	ff 93       	push	r31
    10f8:	df 93       	push	r29
    10fa:	cf 93       	push	r28
    10fc:	cd b7       	in	r28, 0x3d	; 61
    10fe:	de b7       	in	r29, 0x3e	; 62
	if (ptr2fun_transmit_complete  != NULL)
    1100:	80 91 c4 01 	lds	r24, 0x01C4
    1104:	90 91 c5 01 	lds	r25, 0x01C5
    1108:	00 97       	sbiw	r24, 0x00	; 0
    110a:	29 f0       	breq	.+10     	; 0x1116 <__vector_15+0x40>
	{
		ptr2fun_transmit_complete();
    110c:	e0 91 c4 01 	lds	r30, 0x01C4
    1110:	f0 91 c5 01 	lds	r31, 0x01C5
    1114:	09 95       	icall
	}
}
    1116:	cf 91       	pop	r28
    1118:	df 91       	pop	r29
    111a:	ff 91       	pop	r31
    111c:	ef 91       	pop	r30
    111e:	bf 91       	pop	r27
    1120:	af 91       	pop	r26
    1122:	9f 91       	pop	r25
    1124:	8f 91       	pop	r24
    1126:	7f 91       	pop	r23
    1128:	6f 91       	pop	r22
    112a:	5f 91       	pop	r21
    112c:	4f 91       	pop	r20
    112e:	3f 91       	pop	r19
    1130:	2f 91       	pop	r18
    1132:	0f 90       	pop	r0
    1134:	0f be       	out	0x3f, r0	; 63
    1136:	0f 90       	pop	r0
    1138:	1f 90       	pop	r1
    113a:	18 95       	reti

0000113c <__vector_14>:

ISR(UART_UDRE_vect)
{
    113c:	1f 92       	push	r1
    113e:	0f 92       	push	r0
    1140:	0f b6       	in	r0, 0x3f	; 63
    1142:	0f 92       	push	r0
    1144:	11 24       	eor	r1, r1
    1146:	2f 93       	push	r18
    1148:	3f 93       	push	r19
    114a:	4f 93       	push	r20
    114c:	5f 93       	push	r21
    114e:	6f 93       	push	r22
    1150:	7f 93       	push	r23
    1152:	8f 93       	push	r24
    1154:	9f 93       	push	r25
    1156:	af 93       	push	r26
    1158:	bf 93       	push	r27
    115a:	ef 93       	push	r30
    115c:	ff 93       	push	r31
    115e:	df 93       	push	r29
    1160:	cf 93       	push	r28
    1162:	cd b7       	in	r28, 0x3d	; 61
    1164:	de b7       	in	r29, 0x3e	; 62
	if (ptr2fun_Data_register_empty != NULL)
    1166:	80 91 c2 01 	lds	r24, 0x01C2
    116a:	90 91 c3 01 	lds	r25, 0x01C3
    116e:	00 97       	sbiw	r24, 0x00	; 0
    1170:	29 f0       	breq	.+10     	; 0x117c <__vector_14+0x40>
	{
		ptr2fun_Data_register_empty();
    1172:	e0 91 c2 01 	lds	r30, 0x01C2
    1176:	f0 91 c3 01 	lds	r31, 0x01C3
    117a:	09 95       	icall
	}
}
    117c:	cf 91       	pop	r28
    117e:	df 91       	pop	r29
    1180:	ff 91       	pop	r31
    1182:	ef 91       	pop	r30
    1184:	bf 91       	pop	r27
    1186:	af 91       	pop	r26
    1188:	9f 91       	pop	r25
    118a:	8f 91       	pop	r24
    118c:	7f 91       	pop	r23
    118e:	6f 91       	pop	r22
    1190:	5f 91       	pop	r21
    1192:	4f 91       	pop	r20
    1194:	3f 91       	pop	r19
    1196:	2f 91       	pop	r18
    1198:	0f 90       	pop	r0
    119a:	0f be       	out	0x3f, r0	; 63
    119c:	0f 90       	pop	r0
    119e:	1f 90       	pop	r1
    11a0:	18 95       	reti

000011a2 <Timer1_Init>:
static void (*Timer1_OCB_Fptr) (void)=NULL_PTR;
static void (*Timer1_ICU_Fptr) (void)=NULL_PTR;
/******************************************************************************************/

E__Error__Type Timer1_Init( Timer1Mode_type mode,Timer1Scaler_type scaler)
{
    11a2:	df 93       	push	r29
    11a4:	cf 93       	push	r28
    11a6:	00 d0       	rcall	.+0      	; 0x11a8 <Timer1_Init+0x6>
    11a8:	00 d0       	rcall	.+0      	; 0x11aa <Timer1_Init+0x8>
    11aa:	0f 92       	push	r0
    11ac:	cd b7       	in	r28, 0x3d	; 61
    11ae:	de b7       	in	r29, 0x3e	; 62
    11b0:	8a 83       	std	Y+2, r24	; 0x02
    11b2:	6b 83       	std	Y+3, r22	; 0x03
	E__Error__Type localreturn=TIMER1_E_OK;
    11b4:	19 82       	std	Y+1, r1	; 0x01
	switch (mode)
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	3d 83       	std	Y+5, r19	; 0x05
    11be:	2c 83       	std	Y+4, r18	; 0x04
    11c0:	8c 81       	ldd	r24, Y+4	; 0x04
    11c2:	9d 81       	ldd	r25, Y+5	; 0x05
    11c4:	82 30       	cpi	r24, 0x02	; 2
    11c6:	91 05       	cpc	r25, r1
    11c8:	09 f4       	brne	.+2      	; 0x11cc <Timer1_Init+0x2a>
    11ca:	5c c0       	rjmp	.+184    	; 0x1284 <Timer1_Init+0xe2>
    11cc:	2c 81       	ldd	r18, Y+4	; 0x04
    11ce:	3d 81       	ldd	r19, Y+5	; 0x05
    11d0:	23 30       	cpi	r18, 0x03	; 3
    11d2:	31 05       	cpc	r19, r1
    11d4:	54 f4       	brge	.+20     	; 0x11ea <Timer1_Init+0x48>
    11d6:	8c 81       	ldd	r24, Y+4	; 0x04
    11d8:	9d 81       	ldd	r25, Y+5	; 0x05
    11da:	00 97       	sbiw	r24, 0x00	; 0
    11dc:	c9 f0       	breq	.+50     	; 0x1210 <Timer1_Init+0x6e>
    11de:	2c 81       	ldd	r18, Y+4	; 0x04
    11e0:	3d 81       	ldd	r19, Y+5	; 0x05
    11e2:	21 30       	cpi	r18, 0x01	; 1
    11e4:	31 05       	cpc	r19, r1
    11e6:	89 f1       	breq	.+98     	; 0x124a <Timer1_Init+0xa8>
    11e8:	c0 c0       	rjmp	.+384    	; 0x136a <Timer1_Init+0x1c8>
    11ea:	8c 81       	ldd	r24, Y+4	; 0x04
    11ec:	9d 81       	ldd	r25, Y+5	; 0x05
    11ee:	84 30       	cpi	r24, 0x04	; 4
    11f0:	91 05       	cpc	r25, r1
    11f2:	09 f4       	brne	.+2      	; 0x11f6 <Timer1_Init+0x54>
    11f4:	9e c0       	rjmp	.+316    	; 0x1332 <Timer1_Init+0x190>
    11f6:	2c 81       	ldd	r18, Y+4	; 0x04
    11f8:	3d 81       	ldd	r19, Y+5	; 0x05
    11fa:	24 30       	cpi	r18, 0x04	; 4
    11fc:	31 05       	cpc	r19, r1
    11fe:	0c f4       	brge	.+2      	; 0x1202 <Timer1_Init+0x60>
    1200:	5e c0       	rjmp	.+188    	; 0x12be <Timer1_Init+0x11c>
    1202:	8c 81       	ldd	r24, Y+4	; 0x04
    1204:	9d 81       	ldd	r25, Y+5	; 0x05
    1206:	85 30       	cpi	r24, 0x05	; 5
    1208:	91 05       	cpc	r25, r1
    120a:	09 f4       	brne	.+2      	; 0x120e <Timer1_Init+0x6c>
    120c:	75 c0       	rjmp	.+234    	; 0x12f8 <Timer1_Init+0x156>
    120e:	ad c0       	rjmp	.+346    	; 0x136a <Timer1_Init+0x1c8>
	{
	case TIMER1_NORMAL_MODE:
		CLEAR_BIT(TCCR1A,WGM10);
    1210:	af e4       	ldi	r26, 0x4F	; 79
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	ef e4       	ldi	r30, 0x4F	; 79
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	8e 7f       	andi	r24, 0xFE	; 254
    121c:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,WGM11);
    121e:	af e4       	ldi	r26, 0x4F	; 79
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	ef e4       	ldi	r30, 0x4F	; 79
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	8d 7f       	andi	r24, 0xFD	; 253
    122a:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM12);
    122c:	ae e4       	ldi	r26, 0x4E	; 78
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	ee e4       	ldi	r30, 0x4E	; 78
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	87 7f       	andi	r24, 0xF7	; 247
    1238:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM13);
    123a:	ae e4       	ldi	r26, 0x4E	; 78
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	ee e4       	ldi	r30, 0x4E	; 78
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	8f 7e       	andi	r24, 0xEF	; 239
    1246:	8c 93       	st	X, r24
    1248:	90 c0       	rjmp	.+288    	; 0x136a <Timer1_Init+0x1c8>
		break;
	case TIMER1_CTC_ICR_TOP_MODE:
		CLEAR_BIT(TCCR1A,WGM10);
    124a:	af e4       	ldi	r26, 0x4F	; 79
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	ef e4       	ldi	r30, 0x4F	; 79
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	8e 7f       	andi	r24, 0xFE	; 254
    1256:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,WGM11);
    1258:	af e4       	ldi	r26, 0x4F	; 79
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	ef e4       	ldi	r30, 0x4F	; 79
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	8d 7f       	andi	r24, 0xFD	; 253
    1264:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM12);
    1266:	ae e4       	ldi	r26, 0x4E	; 78
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	ee e4       	ldi	r30, 0x4E	; 78
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	88 60       	ori	r24, 0x08	; 8
    1272:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM13);
    1274:	ae e4       	ldi	r26, 0x4E	; 78
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	ee e4       	ldi	r30, 0x4E	; 78
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	80 61       	ori	r24, 0x10	; 16
    1280:	8c 93       	st	X, r24
    1282:	73 c0       	rjmp	.+230    	; 0x136a <Timer1_Init+0x1c8>
		break;

	case TIMER1_CTC_OCRA_TOP_MODE:
		CLEAR_BIT(TCCR1A,WGM10);
    1284:	af e4       	ldi	r26, 0x4F	; 79
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	ef e4       	ldi	r30, 0x4F	; 79
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	8e 7f       	andi	r24, 0xFE	; 254
    1290:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,WGM11);
    1292:	af e4       	ldi	r26, 0x4F	; 79
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	ef e4       	ldi	r30, 0x4F	; 79
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	8d 7f       	andi	r24, 0xFD	; 253
    129e:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM12);
    12a0:	ae e4       	ldi	r26, 0x4E	; 78
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	ee e4       	ldi	r30, 0x4E	; 78
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	88 60       	ori	r24, 0x08	; 8
    12ac:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM13);
    12ae:	ae e4       	ldi	r26, 0x4E	; 78
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	ee e4       	ldi	r30, 0x4E	; 78
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	8f 7e       	andi	r24, 0xEF	; 239
    12ba:	8c 93       	st	X, r24
    12bc:	56 c0       	rjmp	.+172    	; 0x136a <Timer1_Init+0x1c8>
		break;

	case TIMER1_FASTPWM_ICR_TOP_MODE:
		CLEAR_BIT(TCCR1A,WGM10);
    12be:	af e4       	ldi	r26, 0x4F	; 79
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	ef e4       	ldi	r30, 0x4F	; 79
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	8e 7f       	andi	r24, 0xFE	; 254
    12ca:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,WGM11);
    12cc:	af e4       	ldi	r26, 0x4F	; 79
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	ef e4       	ldi	r30, 0x4F	; 79
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	82 60       	ori	r24, 0x02	; 2
    12d8:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM12);
    12da:	ae e4       	ldi	r26, 0x4E	; 78
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	ee e4       	ldi	r30, 0x4E	; 78
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	88 60       	ori	r24, 0x08	; 8
    12e6:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM13);
    12e8:	ae e4       	ldi	r26, 0x4E	; 78
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	ee e4       	ldi	r30, 0x4E	; 78
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	80 61       	ori	r24, 0x10	; 16
    12f4:	8c 93       	st	X, r24
    12f6:	39 c0       	rjmp	.+114    	; 0x136a <Timer1_Init+0x1c8>
		break;

	case TIMER1_FASTPWM_FF_TOP_MODE:
		SET_BIT(TCCR1A,WGM10);
    12f8:	af e4       	ldi	r26, 0x4F	; 79
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	ef e4       	ldi	r30, 0x4F	; 79
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	81 60       	ori	r24, 0x01	; 1
    1304:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,WGM11);
    1306:	af e4       	ldi	r26, 0x4F	; 79
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	ef e4       	ldi	r30, 0x4F	; 79
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	8d 7f       	andi	r24, 0xFD	; 253
    1312:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM12);
    1314:	ae e4       	ldi	r26, 0x4E	; 78
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	ee e4       	ldi	r30, 0x4E	; 78
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	88 60       	ori	r24, 0x08	; 8
    1320:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM13);
    1322:	ae e4       	ldi	r26, 0x4E	; 78
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	ee e4       	ldi	r30, 0x4E	; 78
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	8f 7e       	andi	r24, 0xEF	; 239
    132e:	8c 93       	st	X, r24
    1330:	1c c0       	rjmp	.+56     	; 0x136a <Timer1_Init+0x1c8>
		break;

	case TIMER1_FASTPWM_OCRA_TOP_MODE:
		SET_BIT(TCCR1A,WGM10);
    1332:	af e4       	ldi	r26, 0x4F	; 79
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	ef e4       	ldi	r30, 0x4F	; 79
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	81 60       	ori	r24, 0x01	; 1
    133e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,WGM11);
    1340:	af e4       	ldi	r26, 0x4F	; 79
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	ef e4       	ldi	r30, 0x4F	; 79
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	82 60       	ori	r24, 0x02	; 2
    134c:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM12);
    134e:	ae e4       	ldi	r26, 0x4E	; 78
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	ee e4       	ldi	r30, 0x4E	; 78
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	88 60       	ori	r24, 0x08	; 8
    135a:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM13);
    135c:	ae e4       	ldi	r26, 0x4E	; 78
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	ee e4       	ldi	r30, 0x4E	; 78
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	80 61       	ori	r24, 0x10	; 16
    1368:	8c 93       	st	X, r24
		break;
	}

	TCCR1B&=0XF8;
    136a:	ae e4       	ldi	r26, 0x4E	; 78
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	ee e4       	ldi	r30, 0x4E	; 78
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	88 7f       	andi	r24, 0xF8	; 248
    1376:	8c 93       	st	X, r24
	TCCR1B|=scaler;
    1378:	ae e4       	ldi	r26, 0x4E	; 78
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	ee e4       	ldi	r30, 0x4E	; 78
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	90 81       	ld	r25, Z
    1382:	8b 81       	ldd	r24, Y+3	; 0x03
    1384:	89 2b       	or	r24, r25
    1386:	8c 93       	st	X, r24

	return localreturn;
    1388:	89 81       	ldd	r24, Y+1	; 0x01
}
    138a:	0f 90       	pop	r0
    138c:	0f 90       	pop	r0
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	0f 90       	pop	r0
    1394:	cf 91       	pop	r28
    1396:	df 91       	pop	r29
    1398:	08 95       	ret

0000139a <Timer1_OCRA1Mode>:
E__Error__Type Timer1_OCRA1Mode(OC1A_Mode_type oc1a_mode)
{
    139a:	df 93       	push	r29
    139c:	cf 93       	push	r28
    139e:	00 d0       	rcall	.+0      	; 0x13a0 <Timer1_OCRA1Mode+0x6>
    13a0:	00 d0       	rcall	.+0      	; 0x13a2 <Timer1_OCRA1Mode+0x8>
    13a2:	cd b7       	in	r28, 0x3d	; 61
    13a4:	de b7       	in	r29, 0x3e	; 62
    13a6:	8a 83       	std	Y+2, r24	; 0x02
	E__Error__Type localreturn=TIMER1_E_OK;
    13a8:	19 82       	std	Y+1, r1	; 0x01
	switch (oc1a_mode)
    13aa:	8a 81       	ldd	r24, Y+2	; 0x02
    13ac:	28 2f       	mov	r18, r24
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	3c 83       	std	Y+4, r19	; 0x04
    13b2:	2b 83       	std	Y+3, r18	; 0x03
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	9c 81       	ldd	r25, Y+4	; 0x04
    13b8:	81 30       	cpi	r24, 0x01	; 1
    13ba:	91 05       	cpc	r25, r1
    13bc:	21 f1       	breq	.+72     	; 0x1406 <Timer1_OCRA1Mode+0x6c>
    13be:	2b 81       	ldd	r18, Y+3	; 0x03
    13c0:	3c 81       	ldd	r19, Y+4	; 0x04
    13c2:	22 30       	cpi	r18, 0x02	; 2
    13c4:	31 05       	cpc	r19, r1
    13c6:	2c f4       	brge	.+10     	; 0x13d2 <Timer1_OCRA1Mode+0x38>
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	9c 81       	ldd	r25, Y+4	; 0x04
    13cc:	00 97       	sbiw	r24, 0x00	; 0
    13ce:	61 f0       	breq	.+24     	; 0x13e8 <Timer1_OCRA1Mode+0x4e>
    13d0:	46 c0       	rjmp	.+140    	; 0x145e <Timer1_OCRA1Mode+0xc4>
    13d2:	2b 81       	ldd	r18, Y+3	; 0x03
    13d4:	3c 81       	ldd	r19, Y+4	; 0x04
    13d6:	22 30       	cpi	r18, 0x02	; 2
    13d8:	31 05       	cpc	r19, r1
    13da:	21 f1       	breq	.+72     	; 0x1424 <Timer1_OCRA1Mode+0x8a>
    13dc:	8b 81       	ldd	r24, Y+3	; 0x03
    13de:	9c 81       	ldd	r25, Y+4	; 0x04
    13e0:	83 30       	cpi	r24, 0x03	; 3
    13e2:	91 05       	cpc	r25, r1
    13e4:	71 f1       	breq	.+92     	; 0x1442 <Timer1_OCRA1Mode+0xa8>
    13e6:	3b c0       	rjmp	.+118    	; 0x145e <Timer1_OCRA1Mode+0xc4>
	{
	case OCRA_DISCONNECTED:
		CLEAR_BIT(TCCR1A,COM1A0);
    13e8:	af e4       	ldi	r26, 0x4F	; 79
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	ef e4       	ldi	r30, 0x4F	; 79
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	8f 7b       	andi	r24, 0xBF	; 191
    13f4:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,COM1A1);
    13f6:	af e4       	ldi	r26, 0x4F	; 79
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	ef e4       	ldi	r30, 0x4F	; 79
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	8f 77       	andi	r24, 0x7F	; 127
    1402:	8c 93       	st	X, r24
    1404:	2c c0       	rjmp	.+88     	; 0x145e <Timer1_OCRA1Mode+0xc4>
		break;
	case OCRA_TOGGLE:
		SET_BIT(TCCR1A,COM1A0);
    1406:	af e4       	ldi	r26, 0x4F	; 79
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	ef e4       	ldi	r30, 0x4F	; 79
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	80 64       	ori	r24, 0x40	; 64
    1412:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,COM1A1);
    1414:	af e4       	ldi	r26, 0x4F	; 79
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	ef e4       	ldi	r30, 0x4F	; 79
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	8f 77       	andi	r24, 0x7F	; 127
    1420:	8c 93       	st	X, r24
    1422:	1d c0       	rjmp	.+58     	; 0x145e <Timer1_OCRA1Mode+0xc4>
		break;
	case OCRA_NON_INVERTING:
		CLEAR_BIT(TCCR1A,COM1A0);
    1424:	af e4       	ldi	r26, 0x4F	; 79
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	ef e4       	ldi	r30, 0x4F	; 79
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	8f 7b       	andi	r24, 0xBF	; 191
    1430:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,COM1A1);
    1432:	af e4       	ldi	r26, 0x4F	; 79
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	ef e4       	ldi	r30, 0x4F	; 79
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	80 68       	ori	r24, 0x80	; 128
    143e:	8c 93       	st	X, r24
    1440:	0e c0       	rjmp	.+28     	; 0x145e <Timer1_OCRA1Mode+0xc4>
		break;
	case OCRA_INVERTING:
		SET_BIT(TCCR1A,COM1A0);
    1442:	af e4       	ldi	r26, 0x4F	; 79
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	ef e4       	ldi	r30, 0x4F	; 79
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	80 64       	ori	r24, 0x40	; 64
    144e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,COM1A1);
    1450:	af e4       	ldi	r26, 0x4F	; 79
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	ef e4       	ldi	r30, 0x4F	; 79
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	80 68       	ori	r24, 0x80	; 128
    145c:	8c 93       	st	X, r24
		break;
	}
	return localreturn;
    145e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	0f 90       	pop	r0
    1466:	0f 90       	pop	r0
    1468:	cf 91       	pop	r28
    146a:	df 91       	pop	r29
    146c:	08 95       	ret

0000146e <Timer1_OCRB1Mode>:
E__Error__Type Timer1_OCRB1Mode(OC1B_Mode_type oc1b_mode)
{
    146e:	df 93       	push	r29
    1470:	cf 93       	push	r28
    1472:	00 d0       	rcall	.+0      	; 0x1474 <Timer1_OCRB1Mode+0x6>
    1474:	00 d0       	rcall	.+0      	; 0x1476 <Timer1_OCRB1Mode+0x8>
    1476:	cd b7       	in	r28, 0x3d	; 61
    1478:	de b7       	in	r29, 0x3e	; 62
    147a:	8a 83       	std	Y+2, r24	; 0x02
	E__Error__Type localreturn=TIMER1_E_OK;
    147c:	19 82       	std	Y+1, r1	; 0x01
	switch (oc1b_mode)
    147e:	8a 81       	ldd	r24, Y+2	; 0x02
    1480:	28 2f       	mov	r18, r24
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	3c 83       	std	Y+4, r19	; 0x04
    1486:	2b 83       	std	Y+3, r18	; 0x03
    1488:	8b 81       	ldd	r24, Y+3	; 0x03
    148a:	9c 81       	ldd	r25, Y+4	; 0x04
    148c:	81 30       	cpi	r24, 0x01	; 1
    148e:	91 05       	cpc	r25, r1
    1490:	21 f1       	breq	.+72     	; 0x14da <Timer1_OCRB1Mode+0x6c>
    1492:	2b 81       	ldd	r18, Y+3	; 0x03
    1494:	3c 81       	ldd	r19, Y+4	; 0x04
    1496:	22 30       	cpi	r18, 0x02	; 2
    1498:	31 05       	cpc	r19, r1
    149a:	2c f4       	brge	.+10     	; 0x14a6 <Timer1_OCRB1Mode+0x38>
    149c:	8b 81       	ldd	r24, Y+3	; 0x03
    149e:	9c 81       	ldd	r25, Y+4	; 0x04
    14a0:	00 97       	sbiw	r24, 0x00	; 0
    14a2:	61 f0       	breq	.+24     	; 0x14bc <Timer1_OCRB1Mode+0x4e>
    14a4:	46 c0       	rjmp	.+140    	; 0x1532 <Timer1_OCRB1Mode+0xc4>
    14a6:	2b 81       	ldd	r18, Y+3	; 0x03
    14a8:	3c 81       	ldd	r19, Y+4	; 0x04
    14aa:	22 30       	cpi	r18, 0x02	; 2
    14ac:	31 05       	cpc	r19, r1
    14ae:	21 f1       	breq	.+72     	; 0x14f8 <Timer1_OCRB1Mode+0x8a>
    14b0:	8b 81       	ldd	r24, Y+3	; 0x03
    14b2:	9c 81       	ldd	r25, Y+4	; 0x04
    14b4:	83 30       	cpi	r24, 0x03	; 3
    14b6:	91 05       	cpc	r25, r1
    14b8:	71 f1       	breq	.+92     	; 0x1516 <Timer1_OCRB1Mode+0xa8>
    14ba:	3b c0       	rjmp	.+118    	; 0x1532 <Timer1_OCRB1Mode+0xc4>
	{
	case OCRB_DISCONNECTED:
		CLEAR_BIT(TCCR1A,COM1B0);
    14bc:	af e4       	ldi	r26, 0x4F	; 79
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	ef e4       	ldi	r30, 0x4F	; 79
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	8f 7e       	andi	r24, 0xEF	; 239
    14c8:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,COM1B1);
    14ca:	af e4       	ldi	r26, 0x4F	; 79
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	ef e4       	ldi	r30, 0x4F	; 79
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	8f 7d       	andi	r24, 0xDF	; 223
    14d6:	8c 93       	st	X, r24
    14d8:	2c c0       	rjmp	.+88     	; 0x1532 <Timer1_OCRB1Mode+0xc4>
		break;
	case OCRB_TOGGLE:
		SET_BIT(TCCR1A,COM1B0);
    14da:	af e4       	ldi	r26, 0x4F	; 79
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	ef e4       	ldi	r30, 0x4F	; 79
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	80 61       	ori	r24, 0x10	; 16
    14e6:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,COM1B1);
    14e8:	af e4       	ldi	r26, 0x4F	; 79
    14ea:	b0 e0       	ldi	r27, 0x00	; 0
    14ec:	ef e4       	ldi	r30, 0x4F	; 79
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	8f 7d       	andi	r24, 0xDF	; 223
    14f4:	8c 93       	st	X, r24
    14f6:	1d c0       	rjmp	.+58     	; 0x1532 <Timer1_OCRB1Mode+0xc4>
		break;
	case OCRB_NON_INVERTING:
		CLEAR_BIT(TCCR1A,COM1B0);
    14f8:	af e4       	ldi	r26, 0x4F	; 79
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	ef e4       	ldi	r30, 0x4F	; 79
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	8f 7e       	andi	r24, 0xEF	; 239
    1504:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,COM1B1);
    1506:	af e4       	ldi	r26, 0x4F	; 79
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	ef e4       	ldi	r30, 0x4F	; 79
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	80 62       	ori	r24, 0x20	; 32
    1512:	8c 93       	st	X, r24
    1514:	0e c0       	rjmp	.+28     	; 0x1532 <Timer1_OCRB1Mode+0xc4>
		break;
	case OCRB_INVERTING:
		SET_BIT(TCCR1A,COM1B0);
    1516:	af e4       	ldi	r26, 0x4F	; 79
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	ef e4       	ldi	r30, 0x4F	; 79
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	80 61       	ori	r24, 0x10	; 16
    1522:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,COM1B1);
    1524:	af e4       	ldi	r26, 0x4F	; 79
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	ef e4       	ldi	r30, 0x4F	; 79
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	80 62       	ori	r24, 0x20	; 32
    1530:	8c 93       	st	X, r24
		break;
	}
	return localreturn;
    1532:	89 81       	ldd	r24, Y+1	; 0x01
}
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	0f 90       	pop	r0
    153a:	0f 90       	pop	r0
    153c:	cf 91       	pop	r28
    153e:	df 91       	pop	r29
    1540:	08 95       	ret

00001542 <Timer1_InputCaptureEdge>:
E__Error__Type Timer1_InputCaptureEdge(ICU_Edge_type edge)
{
    1542:	df 93       	push	r29
    1544:	cf 93       	push	r28
    1546:	00 d0       	rcall	.+0      	; 0x1548 <Timer1_InputCaptureEdge+0x6>
    1548:	cd b7       	in	r28, 0x3d	; 61
    154a:	de b7       	in	r29, 0x3e	; 62
    154c:	8a 83       	std	Y+2, r24	; 0x02
	E__Error__Type localreturn=TIMER1_E_OK;
    154e:	19 82       	std	Y+1, r1	; 0x01
	if(edge==RISING)
    1550:	8a 81       	ldd	r24, Y+2	; 0x02
    1552:	88 23       	and	r24, r24
    1554:	41 f4       	brne	.+16     	; 0x1566 <Timer1_InputCaptureEdge+0x24>
		SET_BIT(TCCR1B,ICES1);
    1556:	ae e4       	ldi	r26, 0x4E	; 78
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	ee e4       	ldi	r30, 0x4E	; 78
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	80 64       	ori	r24, 0x40	; 64
    1562:	8c 93       	st	X, r24
    1564:	0a c0       	rjmp	.+20     	; 0x157a <Timer1_InputCaptureEdge+0x38>

	else if(edge==FALLING)
    1566:	8a 81       	ldd	r24, Y+2	; 0x02
    1568:	81 30       	cpi	r24, 0x01	; 1
    156a:	39 f4       	brne	.+14     	; 0x157a <Timer1_InputCaptureEdge+0x38>
		CLEAR_BIT(TCCR1B,ICES1);
    156c:	ae e4       	ldi	r26, 0x4E	; 78
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	ee e4       	ldi	r30, 0x4E	; 78
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	8f 7b       	andi	r24, 0xBF	; 191
    1578:	8c 93       	st	X, r24

	return localreturn;
    157a:	89 81       	ldd	r24, Y+1	; 0x01
}
    157c:	0f 90       	pop	r0
    157e:	0f 90       	pop	r0
    1580:	cf 91       	pop	r28
    1582:	df 91       	pop	r29
    1584:	08 95       	ret

00001586 <Timer1_ICU_InterruptEnable>:


/****************************Timer 1 Interrupt functions**************************************/

void Timer1_ICU_InterruptEnable(void)
{
    1586:	df 93       	push	r29
    1588:	cf 93       	push	r28
    158a:	cd b7       	in	r28, 0x3d	; 61
    158c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TICIE1);
    158e:	a9 e5       	ldi	r26, 0x59	; 89
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	e9 e5       	ldi	r30, 0x59	; 89
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	80 62       	ori	r24, 0x20	; 32
    159a:	8c 93       	st	X, r24
}
    159c:	cf 91       	pop	r28
    159e:	df 91       	pop	r29
    15a0:	08 95       	ret

000015a2 <Timer1_ICU_InterruptDisable>:
void Timer1_ICU_InterruptDisable(void)
{
    15a2:	df 93       	push	r29
    15a4:	cf 93       	push	r28
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK,TICIE1);
    15aa:	a9 e5       	ldi	r26, 0x59	; 89
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	e9 e5       	ldi	r30, 0x59	; 89
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	8f 7d       	andi	r24, 0xDF	; 223
    15b6:	8c 93       	st	X, r24
}
    15b8:	cf 91       	pop	r28
    15ba:	df 91       	pop	r29
    15bc:	08 95       	ret

000015be <Timer1_OVF_InterruptEnable>:
void Timer1_OVF_InterruptEnable(void)
{
    15be:	df 93       	push	r29
    15c0:	cf 93       	push	r28
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TOIE1);
    15c6:	a9 e5       	ldi	r26, 0x59	; 89
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	e9 e5       	ldi	r30, 0x59	; 89
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	84 60       	ori	r24, 0x04	; 4
    15d2:	8c 93       	st	X, r24
}
    15d4:	cf 91       	pop	r28
    15d6:	df 91       	pop	r29
    15d8:	08 95       	ret

000015da <Timer1_OVF_InterruptDisable>:
void Timer1_OVF_InterruptDisable(void)
{
    15da:	df 93       	push	r29
    15dc:	cf 93       	push	r28
    15de:	cd b7       	in	r28, 0x3d	; 61
    15e0:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK,TOIE1);
    15e2:	a9 e5       	ldi	r26, 0x59	; 89
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	e9 e5       	ldi	r30, 0x59	; 89
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	8b 7f       	andi	r24, 0xFB	; 251
    15ee:	8c 93       	st	X, r24
}
    15f0:	cf 91       	pop	r28
    15f2:	df 91       	pop	r29
    15f4:	08 95       	ret

000015f6 <Timer1_OCA_InterruptEnable>:
void Timer1_OCA_InterruptEnable(void)
{
    15f6:	df 93       	push	r29
    15f8:	cf 93       	push	r28
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,OCIE1A);
    15fe:	a9 e5       	ldi	r26, 0x59	; 89
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	e9 e5       	ldi	r30, 0x59	; 89
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	80 61       	ori	r24, 0x10	; 16
    160a:	8c 93       	st	X, r24
}
    160c:	cf 91       	pop	r28
    160e:	df 91       	pop	r29
    1610:	08 95       	ret

00001612 <Timer1_OCA_InterruptDisable>:
void Timer1_OCA_InterruptDisable(void)
{
    1612:	df 93       	push	r29
    1614:	cf 93       	push	r28
    1616:	cd b7       	in	r28, 0x3d	; 61
    1618:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK,OCIE1A);
    161a:	a9 e5       	ldi	r26, 0x59	; 89
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	e9 e5       	ldi	r30, 0x59	; 89
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	8f 7e       	andi	r24, 0xEF	; 239
    1626:	8c 93       	st	X, r24
}
    1628:	cf 91       	pop	r28
    162a:	df 91       	pop	r29
    162c:	08 95       	ret

0000162e <Timer1_OCB_InterruptEnable>:
void Timer1_OCB_InterruptEnable(void)
{
    162e:	df 93       	push	r29
    1630:	cf 93       	push	r28
    1632:	cd b7       	in	r28, 0x3d	; 61
    1634:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,OCIE1B);
    1636:	a9 e5       	ldi	r26, 0x59	; 89
    1638:	b0 e0       	ldi	r27, 0x00	; 0
    163a:	e9 e5       	ldi	r30, 0x59	; 89
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	88 60       	ori	r24, 0x08	; 8
    1642:	8c 93       	st	X, r24
}
    1644:	cf 91       	pop	r28
    1646:	df 91       	pop	r29
    1648:	08 95       	ret

0000164a <Timer1_OCB_InterruptDisable>:
void Timer1_OCB_InterruptDisable(void)
{
    164a:	df 93       	push	r29
    164c:	cf 93       	push	r28
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK,OCIE1B);
    1652:	a9 e5       	ldi	r26, 0x59	; 89
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	e9 e5       	ldi	r30, 0x59	; 89
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	87 7f       	andi	r24, 0xF7	; 247
    165e:	8c 93       	st	X, r24
}
    1660:	cf 91       	pop	r28
    1662:	df 91       	pop	r29
    1664:	08 95       	ret

00001666 <Timer1_OVF_SetCallBack>:

/*********************************Timer 1 Call Back functions*****************************************/

E__Error__Type Timer1_OVF_SetCallBack(void(*LocalFptr)(void))
{
    1666:	df 93       	push	r29
    1668:	cf 93       	push	r28
    166a:	00 d0       	rcall	.+0      	; 0x166c <Timer1_OVF_SetCallBack+0x6>
    166c:	0f 92       	push	r0
    166e:	cd b7       	in	r28, 0x3d	; 61
    1670:	de b7       	in	r29, 0x3e	; 62
    1672:	9b 83       	std	Y+3, r25	; 0x03
    1674:	8a 83       	std	Y+2, r24	; 0x02
	E__Error__Type localreturn=TIMER1_E_NOT_OK;
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	89 83       	std	Y+1, r24	; 0x01

	if (LocalFptr==NULL_PTR)
    167a:	8a 81       	ldd	r24, Y+2	; 0x02
    167c:	9b 81       	ldd	r25, Y+3	; 0x03
    167e:	00 97       	sbiw	r24, 0x00	; 0
    1680:	19 f4       	brne	.+6      	; 0x1688 <Timer1_OVF_SetCallBack+0x22>
	{
		localreturn=TIMER1_E_NULL_PTR;
    1682:	82 e0       	ldi	r24, 0x02	; 2
    1684:	89 83       	std	Y+1, r24	; 0x01
    1686:	07 c0       	rjmp	.+14     	; 0x1696 <Timer1_OVF_SetCallBack+0x30>
	}
	else
	{
		Timer1_OVF_Fptr=LocalFptr;
    1688:	8a 81       	ldd	r24, Y+2	; 0x02
    168a:	9b 81       	ldd	r25, Y+3	; 0x03
    168c:	90 93 c9 01 	sts	0x01C9, r25
    1690:	80 93 c8 01 	sts	0x01C8, r24
		localreturn=TIMER1_E_OK;
    1694:	19 82       	std	Y+1, r1	; 0x01
	}
	return localreturn;
    1696:	89 81       	ldd	r24, Y+1	; 0x01
}
    1698:	0f 90       	pop	r0
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	cf 91       	pop	r28
    16a0:	df 91       	pop	r29
    16a2:	08 95       	ret

000016a4 <Timer1_OCA_SetCallBack>:
E__Error__Type Timer1_OCA_SetCallBack(void(*LocalFptr)(void))
{
    16a4:	df 93       	push	r29
    16a6:	cf 93       	push	r28
    16a8:	00 d0       	rcall	.+0      	; 0x16aa <Timer1_OCA_SetCallBack+0x6>
    16aa:	0f 92       	push	r0
    16ac:	cd b7       	in	r28, 0x3d	; 61
    16ae:	de b7       	in	r29, 0x3e	; 62
    16b0:	9b 83       	std	Y+3, r25	; 0x03
    16b2:	8a 83       	std	Y+2, r24	; 0x02
	E__Error__Type localreturn=TIMER1_E_NOT_OK;
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	89 83       	std	Y+1, r24	; 0x01

	if (LocalFptr==NULL_PTR)
    16b8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ba:	9b 81       	ldd	r25, Y+3	; 0x03
    16bc:	00 97       	sbiw	r24, 0x00	; 0
    16be:	19 f4       	brne	.+6      	; 0x16c6 <Timer1_OCA_SetCallBack+0x22>
	{
		localreturn=TIMER1_E_NULL_PTR;
    16c0:	82 e0       	ldi	r24, 0x02	; 2
    16c2:	89 83       	std	Y+1, r24	; 0x01
    16c4:	07 c0       	rjmp	.+14     	; 0x16d4 <Timer1_OCA_SetCallBack+0x30>
	}
	else
	{
		Timer1_OCA_Fptr=LocalFptr;
    16c6:	8a 81       	ldd	r24, Y+2	; 0x02
    16c8:	9b 81       	ldd	r25, Y+3	; 0x03
    16ca:	90 93 cb 01 	sts	0x01CB, r25
    16ce:	80 93 ca 01 	sts	0x01CA, r24
		localreturn=TIMER1_E_OK;
    16d2:	19 82       	std	Y+1, r1	; 0x01
	}
	return localreturn;
    16d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    16d6:	0f 90       	pop	r0
    16d8:	0f 90       	pop	r0
    16da:	0f 90       	pop	r0
    16dc:	cf 91       	pop	r28
    16de:	df 91       	pop	r29
    16e0:	08 95       	ret

000016e2 <Timer1_OCB_SetCallBack>:
E__Error__Type Timer1_OCB_SetCallBack(void(*LocalFptr)(void))
{
    16e2:	df 93       	push	r29
    16e4:	cf 93       	push	r28
    16e6:	00 d0       	rcall	.+0      	; 0x16e8 <Timer1_OCB_SetCallBack+0x6>
    16e8:	0f 92       	push	r0
    16ea:	cd b7       	in	r28, 0x3d	; 61
    16ec:	de b7       	in	r29, 0x3e	; 62
    16ee:	9b 83       	std	Y+3, r25	; 0x03
    16f0:	8a 83       	std	Y+2, r24	; 0x02
	E__Error__Type localreturn=TIMER1_E_NOT_OK;
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	89 83       	std	Y+1, r24	; 0x01

	if (LocalFptr==NULL_PTR)
    16f6:	8a 81       	ldd	r24, Y+2	; 0x02
    16f8:	9b 81       	ldd	r25, Y+3	; 0x03
    16fa:	00 97       	sbiw	r24, 0x00	; 0
    16fc:	19 f4       	brne	.+6      	; 0x1704 <Timer1_OCB_SetCallBack+0x22>
	{
		localreturn=TIMER1_E_NULL_PTR;
    16fe:	82 e0       	ldi	r24, 0x02	; 2
    1700:	89 83       	std	Y+1, r24	; 0x01
    1702:	07 c0       	rjmp	.+14     	; 0x1712 <Timer1_OCB_SetCallBack+0x30>
	}
	else
	{
		Timer1_OCB_Fptr=LocalFptr;
    1704:	8a 81       	ldd	r24, Y+2	; 0x02
    1706:	9b 81       	ldd	r25, Y+3	; 0x03
    1708:	90 93 cd 01 	sts	0x01CD, r25
    170c:	80 93 cc 01 	sts	0x01CC, r24
		localreturn=TIMER1_E_OK;
    1710:	19 82       	std	Y+1, r1	; 0x01
	}
	return localreturn;
    1712:	89 81       	ldd	r24, Y+1	; 0x01
}
    1714:	0f 90       	pop	r0
    1716:	0f 90       	pop	r0
    1718:	0f 90       	pop	r0
    171a:	cf 91       	pop	r28
    171c:	df 91       	pop	r29
    171e:	08 95       	ret

00001720 <Timer1_ICU_SetCallBack>:
E__Error__Type Timer1_ICU_SetCallBack(void(*LocalFptr)(void))
{
    1720:	df 93       	push	r29
    1722:	cf 93       	push	r28
    1724:	00 d0       	rcall	.+0      	; 0x1726 <Timer1_ICU_SetCallBack+0x6>
    1726:	0f 92       	push	r0
    1728:	cd b7       	in	r28, 0x3d	; 61
    172a:	de b7       	in	r29, 0x3e	; 62
    172c:	9b 83       	std	Y+3, r25	; 0x03
    172e:	8a 83       	std	Y+2, r24	; 0x02
	E__Error__Type localreturn=TIMER1_E_NOT_OK;
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	89 83       	std	Y+1, r24	; 0x01

	if (LocalFptr==NULL_PTR)
    1734:	8a 81       	ldd	r24, Y+2	; 0x02
    1736:	9b 81       	ldd	r25, Y+3	; 0x03
    1738:	00 97       	sbiw	r24, 0x00	; 0
    173a:	19 f4       	brne	.+6      	; 0x1742 <Timer1_ICU_SetCallBack+0x22>
	{
		localreturn=TIMER1_E_NULL_PTR;
    173c:	82 e0       	ldi	r24, 0x02	; 2
    173e:	89 83       	std	Y+1, r24	; 0x01
    1740:	07 c0       	rjmp	.+14     	; 0x1750 <Timer1_ICU_SetCallBack+0x30>
	}
	else
	{
		Timer1_ICU_Fptr=LocalFptr;
    1742:	8a 81       	ldd	r24, Y+2	; 0x02
    1744:	9b 81       	ldd	r25, Y+3	; 0x03
    1746:	90 93 cf 01 	sts	0x01CF, r25
    174a:	80 93 ce 01 	sts	0x01CE, r24
		localreturn=TIMER1_E_OK;
    174e:	19 82       	std	Y+1, r1	; 0x01
	}
	return localreturn;
    1750:	89 81       	ldd	r24, Y+1	; 0x01
}
    1752:	0f 90       	pop	r0
    1754:	0f 90       	pop	r0
    1756:	0f 90       	pop	r0
    1758:	cf 91       	pop	r28
    175a:	df 91       	pop	r29
    175c:	08 95       	ret

0000175e <__vector_9>:

/*********************************Timer 1 ISR functions*********************************************/
ISR(TIMER1_OVF_vect)
{
    175e:	1f 92       	push	r1
    1760:	0f 92       	push	r0
    1762:	0f b6       	in	r0, 0x3f	; 63
    1764:	0f 92       	push	r0
    1766:	11 24       	eor	r1, r1
    1768:	2f 93       	push	r18
    176a:	3f 93       	push	r19
    176c:	4f 93       	push	r20
    176e:	5f 93       	push	r21
    1770:	6f 93       	push	r22
    1772:	7f 93       	push	r23
    1774:	8f 93       	push	r24
    1776:	9f 93       	push	r25
    1778:	af 93       	push	r26
    177a:	bf 93       	push	r27
    177c:	ef 93       	push	r30
    177e:	ff 93       	push	r31
    1780:	df 93       	push	r29
    1782:	cf 93       	push	r28
    1784:	cd b7       	in	r28, 0x3d	; 61
    1786:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_OVF_Fptr!=NULL_PTR)
    1788:	80 91 c8 01 	lds	r24, 0x01C8
    178c:	90 91 c9 01 	lds	r25, 0x01C9
    1790:	00 97       	sbiw	r24, 0x00	; 0
    1792:	29 f0       	breq	.+10     	; 0x179e <__vector_9+0x40>
	{
		Timer1_OVF_Fptr();
    1794:	e0 91 c8 01 	lds	r30, 0x01C8
    1798:	f0 91 c9 01 	lds	r31, 0x01C9
    179c:	09 95       	icall
	}
}
    179e:	cf 91       	pop	r28
    17a0:	df 91       	pop	r29
    17a2:	ff 91       	pop	r31
    17a4:	ef 91       	pop	r30
    17a6:	bf 91       	pop	r27
    17a8:	af 91       	pop	r26
    17aa:	9f 91       	pop	r25
    17ac:	8f 91       	pop	r24
    17ae:	7f 91       	pop	r23
    17b0:	6f 91       	pop	r22
    17b2:	5f 91       	pop	r21
    17b4:	4f 91       	pop	r20
    17b6:	3f 91       	pop	r19
    17b8:	2f 91       	pop	r18
    17ba:	0f 90       	pop	r0
    17bc:	0f be       	out	0x3f, r0	; 63
    17be:	0f 90       	pop	r0
    17c0:	1f 90       	pop	r1
    17c2:	18 95       	reti

000017c4 <__vector_7>:
ISR(TIMER1_OCA_vect)
{
    17c4:	1f 92       	push	r1
    17c6:	0f 92       	push	r0
    17c8:	0f b6       	in	r0, 0x3f	; 63
    17ca:	0f 92       	push	r0
    17cc:	11 24       	eor	r1, r1
    17ce:	2f 93       	push	r18
    17d0:	3f 93       	push	r19
    17d2:	4f 93       	push	r20
    17d4:	5f 93       	push	r21
    17d6:	6f 93       	push	r22
    17d8:	7f 93       	push	r23
    17da:	8f 93       	push	r24
    17dc:	9f 93       	push	r25
    17de:	af 93       	push	r26
    17e0:	bf 93       	push	r27
    17e2:	ef 93       	push	r30
    17e4:	ff 93       	push	r31
    17e6:	df 93       	push	r29
    17e8:	cf 93       	push	r28
    17ea:	cd b7       	in	r28, 0x3d	; 61
    17ec:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_OCA_Fptr!=NULL_PTR)
    17ee:	80 91 ca 01 	lds	r24, 0x01CA
    17f2:	90 91 cb 01 	lds	r25, 0x01CB
    17f6:	00 97       	sbiw	r24, 0x00	; 0
    17f8:	29 f0       	breq	.+10     	; 0x1804 <__vector_7+0x40>
	{
		Timer1_OCA_Fptr();
    17fa:	e0 91 ca 01 	lds	r30, 0x01CA
    17fe:	f0 91 cb 01 	lds	r31, 0x01CB
    1802:	09 95       	icall
	}
}
    1804:	cf 91       	pop	r28
    1806:	df 91       	pop	r29
    1808:	ff 91       	pop	r31
    180a:	ef 91       	pop	r30
    180c:	bf 91       	pop	r27
    180e:	af 91       	pop	r26
    1810:	9f 91       	pop	r25
    1812:	8f 91       	pop	r24
    1814:	7f 91       	pop	r23
    1816:	6f 91       	pop	r22
    1818:	5f 91       	pop	r21
    181a:	4f 91       	pop	r20
    181c:	3f 91       	pop	r19
    181e:	2f 91       	pop	r18
    1820:	0f 90       	pop	r0
    1822:	0f be       	out	0x3f, r0	; 63
    1824:	0f 90       	pop	r0
    1826:	1f 90       	pop	r1
    1828:	18 95       	reti

0000182a <__vector_8>:
ISR(TIMER1_OCB_vect)
{
    182a:	1f 92       	push	r1
    182c:	0f 92       	push	r0
    182e:	0f b6       	in	r0, 0x3f	; 63
    1830:	0f 92       	push	r0
    1832:	11 24       	eor	r1, r1
    1834:	2f 93       	push	r18
    1836:	3f 93       	push	r19
    1838:	4f 93       	push	r20
    183a:	5f 93       	push	r21
    183c:	6f 93       	push	r22
    183e:	7f 93       	push	r23
    1840:	8f 93       	push	r24
    1842:	9f 93       	push	r25
    1844:	af 93       	push	r26
    1846:	bf 93       	push	r27
    1848:	ef 93       	push	r30
    184a:	ff 93       	push	r31
    184c:	df 93       	push	r29
    184e:	cf 93       	push	r28
    1850:	cd b7       	in	r28, 0x3d	; 61
    1852:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_OCB_Fptr!=NULL_PTR)
    1854:	80 91 cc 01 	lds	r24, 0x01CC
    1858:	90 91 cd 01 	lds	r25, 0x01CD
    185c:	00 97       	sbiw	r24, 0x00	; 0
    185e:	29 f0       	breq	.+10     	; 0x186a <__vector_8+0x40>
	{
		Timer1_OCB_Fptr();
    1860:	e0 91 cc 01 	lds	r30, 0x01CC
    1864:	f0 91 cd 01 	lds	r31, 0x01CD
    1868:	09 95       	icall
	}
}
    186a:	cf 91       	pop	r28
    186c:	df 91       	pop	r29
    186e:	ff 91       	pop	r31
    1870:	ef 91       	pop	r30
    1872:	bf 91       	pop	r27
    1874:	af 91       	pop	r26
    1876:	9f 91       	pop	r25
    1878:	8f 91       	pop	r24
    187a:	7f 91       	pop	r23
    187c:	6f 91       	pop	r22
    187e:	5f 91       	pop	r21
    1880:	4f 91       	pop	r20
    1882:	3f 91       	pop	r19
    1884:	2f 91       	pop	r18
    1886:	0f 90       	pop	r0
    1888:	0f be       	out	0x3f, r0	; 63
    188a:	0f 90       	pop	r0
    188c:	1f 90       	pop	r1
    188e:	18 95       	reti

00001890 <__vector_6>:
ISR(TIMER1_ICU_vect)
{
    1890:	1f 92       	push	r1
    1892:	0f 92       	push	r0
    1894:	0f b6       	in	r0, 0x3f	; 63
    1896:	0f 92       	push	r0
    1898:	11 24       	eor	r1, r1
    189a:	2f 93       	push	r18
    189c:	3f 93       	push	r19
    189e:	4f 93       	push	r20
    18a0:	5f 93       	push	r21
    18a2:	6f 93       	push	r22
    18a4:	7f 93       	push	r23
    18a6:	8f 93       	push	r24
    18a8:	9f 93       	push	r25
    18aa:	af 93       	push	r26
    18ac:	bf 93       	push	r27
    18ae:	ef 93       	push	r30
    18b0:	ff 93       	push	r31
    18b2:	df 93       	push	r29
    18b4:	cf 93       	push	r28
    18b6:	cd b7       	in	r28, 0x3d	; 61
    18b8:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_ICU_Fptr!=NULL_PTR)
    18ba:	80 91 ce 01 	lds	r24, 0x01CE
    18be:	90 91 cf 01 	lds	r25, 0x01CF
    18c2:	00 97       	sbiw	r24, 0x00	; 0
    18c4:	29 f0       	breq	.+10     	; 0x18d0 <__vector_6+0x40>
	{
		Timer1_ICU_Fptr();
    18c6:	e0 91 ce 01 	lds	r30, 0x01CE
    18ca:	f0 91 cf 01 	lds	r31, 0x01CF
    18ce:	09 95       	icall
	}
}
    18d0:	cf 91       	pop	r28
    18d2:	df 91       	pop	r29
    18d4:	ff 91       	pop	r31
    18d6:	ef 91       	pop	r30
    18d8:	bf 91       	pop	r27
    18da:	af 91       	pop	r26
    18dc:	9f 91       	pop	r25
    18de:	8f 91       	pop	r24
    18e0:	7f 91       	pop	r23
    18e2:	6f 91       	pop	r22
    18e4:	5f 91       	pop	r21
    18e6:	4f 91       	pop	r20
    18e8:	3f 91       	pop	r19
    18ea:	2f 91       	pop	r18
    18ec:	0f 90       	pop	r0
    18ee:	0f be       	out	0x3f, r0	; 63
    18f0:	0f 90       	pop	r0
    18f2:	1f 90       	pop	r1
    18f4:	18 95       	reti

000018f6 <MCAL_Timer0_OVF_Init>:
 *
 */


E_ErrorType MCAL_Timer0_OVF_Init(E_Prescaler prescaler)
{
    18f6:	df 93       	push	r29
    18f8:	cf 93       	push	r28
    18fa:	00 d0       	rcall	.+0      	; 0x18fc <MCAL_Timer0_OVF_Init+0x6>
    18fc:	00 d0       	rcall	.+0      	; 0x18fe <MCAL_Timer0_OVF_Init+0x8>
    18fe:	cd b7       	in	r28, 0x3d	; 61
    1900:	de b7       	in	r29, 0x3e	; 62
    1902:	8a 83       	std	Y+2, r24	; 0x02
	{
		error = E_NOT_OK;
	}
	else
	{
		TCNT0 = 0; //To start counting from 0
    1904:	e2 e5       	ldi	r30, 0x52	; 82
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	10 82       	st	Z, r1
		 * . prescaler 1024 CS00=1  CS02=1
		 * . prescaler 256  CS02=1
		 * . prescaler 64   CS00=1  CS0=1
		 * . prsecaler 8    CS00=1
		 */
		SET_BIT(TCCR0,FOC0);
    190a:	a3 e5       	ldi	r26, 0x53	; 83
    190c:	b0 e0       	ldi	r27, 0x00	; 0
    190e:	e3 e5       	ldi	r30, 0x53	; 83
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	80 81       	ld	r24, Z
    1914:	80 68       	ori	r24, 0x80	; 128
    1916:	8c 93       	st	X, r24

		switch (prescaler)
    1918:	8a 81       	ldd	r24, Y+2	; 0x02
    191a:	28 2f       	mov	r18, r24
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	3c 83       	std	Y+4, r19	; 0x04
    1920:	2b 83       	std	Y+3, r18	; 0x03
    1922:	8b 81       	ldd	r24, Y+3	; 0x03
    1924:	9c 81       	ldd	r25, Y+4	; 0x04
    1926:	81 30       	cpi	r24, 0x01	; 1
    1928:	91 05       	cpc	r25, r1
    192a:	e9 f0       	breq	.+58     	; 0x1966 <MCAL_Timer0_OVF_Init+0x70>
    192c:	2b 81       	ldd	r18, Y+3	; 0x03
    192e:	3c 81       	ldd	r19, Y+4	; 0x04
    1930:	22 30       	cpi	r18, 0x02	; 2
    1932:	31 05       	cpc	r19, r1
    1934:	2c f4       	brge	.+10     	; 0x1940 <MCAL_Timer0_OVF_Init+0x4a>
    1936:	8b 81       	ldd	r24, Y+3	; 0x03
    1938:	9c 81       	ldd	r25, Y+4	; 0x04
    193a:	00 97       	sbiw	r24, 0x00	; 0
    193c:	61 f0       	breq	.+24     	; 0x1956 <MCAL_Timer0_OVF_Init+0x60>
    193e:	38 c0       	rjmp	.+112    	; 0x19b0 <MCAL_Timer0_OVF_Init+0xba>
    1940:	2b 81       	ldd	r18, Y+3	; 0x03
    1942:	3c 81       	ldd	r19, Y+4	; 0x04
    1944:	22 30       	cpi	r18, 0x02	; 2
    1946:	31 05       	cpc	r19, r1
    1948:	e9 f0       	breq	.+58     	; 0x1984 <MCAL_Timer0_OVF_Init+0x8e>
    194a:	8b 81       	ldd	r24, Y+3	; 0x03
    194c:	9c 81       	ldd	r25, Y+4	; 0x04
    194e:	83 30       	cpi	r24, 0x03	; 3
    1950:	91 05       	cpc	r25, r1
    1952:	01 f1       	breq	.+64     	; 0x1994 <MCAL_Timer0_OVF_Init+0x9e>
    1954:	2d c0       	rjmp	.+90     	; 0x19b0 <MCAL_Timer0_OVF_Init+0xba>
		{
		case 0:
			SET_BIT(TCCR0,CS00);
    1956:	a3 e5       	ldi	r26, 0x53	; 83
    1958:	b0 e0       	ldi	r27, 0x00	; 0
    195a:	e3 e5       	ldi	r30, 0x53	; 83
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	80 81       	ld	r24, Z
    1960:	81 60       	ori	r24, 0x01	; 1
    1962:	8c 93       	st	X, r24
    1964:	25 c0       	rjmp	.+74     	; 0x19b0 <MCAL_Timer0_OVF_Init+0xba>

			break;

		case 1:
			SET_BIT(TCCR0,CS00);
    1966:	a3 e5       	ldi	r26, 0x53	; 83
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	e3 e5       	ldi	r30, 0x53	; 83
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	81 60       	ori	r24, 0x01	; 1
    1972:	8c 93       	st	X, r24
			SET_BIT(TCCR0,CS01);
    1974:	a3 e5       	ldi	r26, 0x53	; 83
    1976:	b0 e0       	ldi	r27, 0x00	; 0
    1978:	e3 e5       	ldi	r30, 0x53	; 83
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	80 81       	ld	r24, Z
    197e:	82 60       	ori	r24, 0x02	; 2
    1980:	8c 93       	st	X, r24
    1982:	16 c0       	rjmp	.+44     	; 0x19b0 <MCAL_Timer0_OVF_Init+0xba>
			break;
		case 2:
			SET_BIT(TCCR0,CS02);
    1984:	a3 e5       	ldi	r26, 0x53	; 83
    1986:	b0 e0       	ldi	r27, 0x00	; 0
    1988:	e3 e5       	ldi	r30, 0x53	; 83
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	80 81       	ld	r24, Z
    198e:	84 60       	ori	r24, 0x04	; 4
    1990:	8c 93       	st	X, r24
    1992:	0e c0       	rjmp	.+28     	; 0x19b0 <MCAL_Timer0_OVF_Init+0xba>
			break;
		case 3:
			SET_BIT(TCCR0,CS00);
    1994:	a3 e5       	ldi	r26, 0x53	; 83
    1996:	b0 e0       	ldi	r27, 0x00	; 0
    1998:	e3 e5       	ldi	r30, 0x53	; 83
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	81 60       	ori	r24, 0x01	; 1
    19a0:	8c 93       	st	X, r24
			SET_BIT(TCCR0,CS02);
    19a2:	a3 e5       	ldi	r26, 0x53	; 83
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	e3 e5       	ldi	r30, 0x53	; 83
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	84 60       	ori	r24, 0x04	; 4
    19ae:	8c 93       	st	X, r24
			break;
		}


		//Enable Time0 Iterrupt
		SET_BIT(TIMSK,TOIE0);
    19b0:	a9 e5       	ldi	r26, 0x59	; 89
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	e9 e5       	ldi	r30, 0x59	; 89
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	81 60       	ori	r24, 0x01	; 1
    19bc:	8c 93       	st	X, r24
	}


	return error;
    19be:	89 81       	ldd	r24, Y+1	; 0x01
}
    19c0:	0f 90       	pop	r0
    19c2:	0f 90       	pop	r0
    19c4:	0f 90       	pop	r0
    19c6:	0f 90       	pop	r0
    19c8:	cf 91       	pop	r28
    19ca:	df 91       	pop	r29
    19cc:	08 95       	ret

000019ce <MCAL_Timer0_CTC_Init>:
 *
 * Time0 Comapet match mode  ISR(TIMER0_COMP_vect)
 */

E_ErrorType MCAL_Timer0_CTC_Init(E_Prescaler prescaler,u8CompareValue CompareValue)
{
    19ce:	df 93       	push	r29
    19d0:	cf 93       	push	r28
    19d2:	00 d0       	rcall	.+0      	; 0x19d4 <MCAL_Timer0_CTC_Init+0x6>
    19d4:	00 d0       	rcall	.+0      	; 0x19d6 <MCAL_Timer0_CTC_Init+0x8>
    19d6:	0f 92       	push	r0
    19d8:	cd b7       	in	r28, 0x3d	; 61
    19da:	de b7       	in	r29, 0x3e	; 62
    19dc:	8a 83       	std	Y+2, r24	; 0x02
    19de:	6b 83       	std	Y+3, r22	; 0x03
	{
		error = E_NOT_OK;
	}
	else
	{
		TCNT0 = 0;    // Set Timer initial value to 0
    19e0:	e2 e5       	ldi	r30, 0x52	; 82
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	10 82       	st	Z, r1
		OCR0  = CompareValue; // Set Compare Value
    19e6:	ec e5       	ldi	r30, 0x5C	; 92
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	8b 81       	ldd	r24, Y+3	; 0x03
    19ec:	80 83       	st	Z, r24
		 * . prescaler 1024 CS00=1  CS02=1
		 * . prescaler 256  CS02=1
		 * . prescaler 64   CS00=1  CS0=1
		 * . prsecaler 8    CS00=1
		 */
		SET_BIT(TCCR0,FOC0);
    19ee:	a3 e5       	ldi	r26, 0x53	; 83
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
    19f2:	e3 e5       	ldi	r30, 0x53	; 83
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	80 68       	ori	r24, 0x80	; 128
    19fa:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM01);
    19fc:	a3 e5       	ldi	r26, 0x53	; 83
    19fe:	b0 e0       	ldi	r27, 0x00	; 0
    1a00:	e3 e5       	ldi	r30, 0x53	; 83
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	88 60       	ori	r24, 0x08	; 8
    1a08:	8c 93       	st	X, r24
		//SET_BIT(TCCR0,COM01);

		switch (prescaler)
    1a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0c:	28 2f       	mov	r18, r24
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	3d 83       	std	Y+5, r19	; 0x05
    1a12:	2c 83       	std	Y+4, r18	; 0x04
    1a14:	8c 81       	ldd	r24, Y+4	; 0x04
    1a16:	9d 81       	ldd	r25, Y+5	; 0x05
    1a18:	81 30       	cpi	r24, 0x01	; 1
    1a1a:	91 05       	cpc	r25, r1
    1a1c:	e9 f0       	breq	.+58     	; 0x1a58 <MCAL_Timer0_CTC_Init+0x8a>
    1a1e:	2c 81       	ldd	r18, Y+4	; 0x04
    1a20:	3d 81       	ldd	r19, Y+5	; 0x05
    1a22:	22 30       	cpi	r18, 0x02	; 2
    1a24:	31 05       	cpc	r19, r1
    1a26:	2c f4       	brge	.+10     	; 0x1a32 <MCAL_Timer0_CTC_Init+0x64>
    1a28:	8c 81       	ldd	r24, Y+4	; 0x04
    1a2a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a2c:	00 97       	sbiw	r24, 0x00	; 0
    1a2e:	61 f0       	breq	.+24     	; 0x1a48 <MCAL_Timer0_CTC_Init+0x7a>
    1a30:	38 c0       	rjmp	.+112    	; 0x1aa2 <MCAL_Timer0_CTC_Init+0xd4>
    1a32:	2c 81       	ldd	r18, Y+4	; 0x04
    1a34:	3d 81       	ldd	r19, Y+5	; 0x05
    1a36:	22 30       	cpi	r18, 0x02	; 2
    1a38:	31 05       	cpc	r19, r1
    1a3a:	e9 f0       	breq	.+58     	; 0x1a76 <MCAL_Timer0_CTC_Init+0xa8>
    1a3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a3e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a40:	83 30       	cpi	r24, 0x03	; 3
    1a42:	91 05       	cpc	r25, r1
    1a44:	01 f1       	breq	.+64     	; 0x1a86 <MCAL_Timer0_CTC_Init+0xb8>
    1a46:	2d c0       	rjmp	.+90     	; 0x1aa2 <MCAL_Timer0_CTC_Init+0xd4>
		{
		case 0:
			SET_BIT(TCCR0,CS00);
    1a48:	a3 e5       	ldi	r26, 0x53	; 83
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	e3 e5       	ldi	r30, 0x53	; 83
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	80 81       	ld	r24, Z
    1a52:	81 60       	ori	r24, 0x01	; 1
    1a54:	8c 93       	st	X, r24
    1a56:	25 c0       	rjmp	.+74     	; 0x1aa2 <MCAL_Timer0_CTC_Init+0xd4>

			break;

		case 1:
			SET_BIT(TCCR0,CS00);
    1a58:	a3 e5       	ldi	r26, 0x53	; 83
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	e3 e5       	ldi	r30, 0x53	; 83
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	81 60       	ori	r24, 0x01	; 1
    1a64:	8c 93       	st	X, r24
			SET_BIT(TCCR0,CS01);
    1a66:	a3 e5       	ldi	r26, 0x53	; 83
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	e3 e5       	ldi	r30, 0x53	; 83
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	82 60       	ori	r24, 0x02	; 2
    1a72:	8c 93       	st	X, r24
    1a74:	16 c0       	rjmp	.+44     	; 0x1aa2 <MCAL_Timer0_CTC_Init+0xd4>
			break;
		case 2:
			SET_BIT(TCCR0,CS02);
    1a76:	a3 e5       	ldi	r26, 0x53	; 83
    1a78:	b0 e0       	ldi	r27, 0x00	; 0
    1a7a:	e3 e5       	ldi	r30, 0x53	; 83
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	84 60       	ori	r24, 0x04	; 4
    1a82:	8c 93       	st	X, r24
    1a84:	0e c0       	rjmp	.+28     	; 0x1aa2 <MCAL_Timer0_CTC_Init+0xd4>
			break;
		case 3:
			SET_BIT(TCCR0,CS00);
    1a86:	a3 e5       	ldi	r26, 0x53	; 83
    1a88:	b0 e0       	ldi	r27, 0x00	; 0
    1a8a:	e3 e5       	ldi	r30, 0x53	; 83
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	81 60       	ori	r24, 0x01	; 1
    1a92:	8c 93       	st	X, r24
			SET_BIT(TCCR0,CS02);
    1a94:	a3 e5       	ldi	r26, 0x53	; 83
    1a96:	b0 e0       	ldi	r27, 0x00	; 0
    1a98:	e3 e5       	ldi	r30, 0x53	; 83
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	84 60       	ori	r24, 0x04	; 4
    1aa0:	8c 93       	st	X, r24
			break;
		default:

			break;
		}
		SET_BIT(TIMSK,OCIE0);// Enable Timer0 Compare Interrupt
    1aa2:	a9 e5       	ldi	r26, 0x59	; 89
    1aa4:	b0 e0       	ldi	r27, 0x00	; 0
    1aa6:	e9 e5       	ldi	r30, 0x59	; 89
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	82 60       	ori	r24, 0x02	; 2
    1aae:	8c 93       	st	X, r24

	}
	return error;
    1ab0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ab2:	0f 90       	pop	r0
    1ab4:	0f 90       	pop	r0
    1ab6:	0f 90       	pop	r0
    1ab8:	0f 90       	pop	r0
    1aba:	0f 90       	pop	r0
    1abc:	cf 91       	pop	r28
    1abe:	df 91       	pop	r29
    1ac0:	08 95       	ret

00001ac2 <MCAL_Timer0_FastPWM_Init>:
 * F_PWM=(F_CPU)/(256*N) = (16^6)/(256*1024) = 61
 * Duty Cycle can be changed be update the value in The Compare Register
 */

E_ErrorType MCAL_Timer0_FastPWM_Init(E_Prescaler prescaler,u8DutyCyle Duty_Cycle)
{
    1ac2:	df 93       	push	r29
    1ac4:	cf 93       	push	r28
    1ac6:	00 d0       	rcall	.+0      	; 0x1ac8 <MCAL_Timer0_FastPWM_Init+0x6>
    1ac8:	00 d0       	rcall	.+0      	; 0x1aca <MCAL_Timer0_FastPWM_Init+0x8>
    1aca:	0f 92       	push	r0
    1acc:	cd b7       	in	r28, 0x3d	; 61
    1ace:	de b7       	in	r29, 0x3e	; 62
    1ad0:	8a 83       	std	Y+2, r24	; 0x02
    1ad2:	6b 83       	std	Y+3, r22	; 0x03
		error = E_NOT_OK;
	}
	else
	{

		TCNT0 = 0;
    1ad4:	e2 e5       	ldi	r30, 0x52	; 82
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	10 82       	st	Z, r1
		OCR0 = Duty_Cycle;
    1ada:	ec e5       	ldi	r30, 0x5C	; 92
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae0:	80 83       	st	Z, r24
		// Define PB3 to Output as it's the signal which genrates pwm by timer0
		SET_BIT(TIMER0_PWM_PORT,TIMER0_PWM_PIN);
    1ae2:	a7 e3       	ldi	r26, 0x37	; 55
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	e7 e3       	ldi	r30, 0x37	; 55
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	80 81       	ld	r24, Z
    1aec:	88 60       	ori	r24, 0x08	; 8
    1aee:	8c 93       	st	X, r24
		 * . prescaler 256  CS02=1
		 * . prescaler 64   CS00=1  CS0=1
		 * . prsecaler 8    CS00=1
		 */

		SET_BIT(TCCR0,WGM00);
    1af0:	a3 e5       	ldi	r26, 0x53	; 83
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	e3 e5       	ldi	r30, 0x53	; 83
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	80 64       	ori	r24, 0x40	; 64
    1afc:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM11);
    1afe:	a3 e5       	ldi	r26, 0x53	; 83
    1b00:	b0 e0       	ldi	r27, 0x00	; 0
    1b02:	e3 e5       	ldi	r30, 0x53	; 83
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	82 60       	ori	r24, 0x02	; 2
    1b0a:	8c 93       	st	X, r24
		SET_BIT(TCCR0,COM01);
    1b0c:	a3 e5       	ldi	r26, 0x53	; 83
    1b0e:	b0 e0       	ldi	r27, 0x00	; 0
    1b10:	e3 e5       	ldi	r30, 0x53	; 83
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	80 81       	ld	r24, Z
    1b16:	80 62       	ori	r24, 0x20	; 32
    1b18:	8c 93       	st	X, r24

		switch (prescaler)
    1b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1c:	28 2f       	mov	r18, r24
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	3d 83       	std	Y+5, r19	; 0x05
    1b22:	2c 83       	std	Y+4, r18	; 0x04
    1b24:	8c 81       	ldd	r24, Y+4	; 0x04
    1b26:	9d 81       	ldd	r25, Y+5	; 0x05
    1b28:	81 30       	cpi	r24, 0x01	; 1
    1b2a:	91 05       	cpc	r25, r1
    1b2c:	e9 f0       	breq	.+58     	; 0x1b68 <MCAL_Timer0_FastPWM_Init+0xa6>
    1b2e:	2c 81       	ldd	r18, Y+4	; 0x04
    1b30:	3d 81       	ldd	r19, Y+5	; 0x05
    1b32:	22 30       	cpi	r18, 0x02	; 2
    1b34:	31 05       	cpc	r19, r1
    1b36:	2c f4       	brge	.+10     	; 0x1b42 <MCAL_Timer0_FastPWM_Init+0x80>
    1b38:	8c 81       	ldd	r24, Y+4	; 0x04
    1b3a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b3c:	00 97       	sbiw	r24, 0x00	; 0
    1b3e:	61 f0       	breq	.+24     	; 0x1b58 <MCAL_Timer0_FastPWM_Init+0x96>
    1b40:	38 c0       	rjmp	.+112    	; 0x1bb2 <MCAL_Timer0_FastPWM_Init+0xf0>
    1b42:	2c 81       	ldd	r18, Y+4	; 0x04
    1b44:	3d 81       	ldd	r19, Y+5	; 0x05
    1b46:	22 30       	cpi	r18, 0x02	; 2
    1b48:	31 05       	cpc	r19, r1
    1b4a:	e9 f0       	breq	.+58     	; 0x1b86 <MCAL_Timer0_FastPWM_Init+0xc4>
    1b4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b4e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b50:	83 30       	cpi	r24, 0x03	; 3
    1b52:	91 05       	cpc	r25, r1
    1b54:	01 f1       	breq	.+64     	; 0x1b96 <MCAL_Timer0_FastPWM_Init+0xd4>
    1b56:	2d c0       	rjmp	.+90     	; 0x1bb2 <MCAL_Timer0_FastPWM_Init+0xf0>
		{
		case 0:
			SET_BIT(TCCR0,CS00);
    1b58:	a3 e5       	ldi	r26, 0x53	; 83
    1b5a:	b0 e0       	ldi	r27, 0x00	; 0
    1b5c:	e3 e5       	ldi	r30, 0x53	; 83
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	80 81       	ld	r24, Z
    1b62:	81 60       	ori	r24, 0x01	; 1
    1b64:	8c 93       	st	X, r24
    1b66:	25 c0       	rjmp	.+74     	; 0x1bb2 <MCAL_Timer0_FastPWM_Init+0xf0>

			break;

		case 1:
			SET_BIT(TCCR0,CS00);
    1b68:	a3 e5       	ldi	r26, 0x53	; 83
    1b6a:	b0 e0       	ldi	r27, 0x00	; 0
    1b6c:	e3 e5       	ldi	r30, 0x53	; 83
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	80 81       	ld	r24, Z
    1b72:	81 60       	ori	r24, 0x01	; 1
    1b74:	8c 93       	st	X, r24
			SET_BIT(TCCR0,CS01);
    1b76:	a3 e5       	ldi	r26, 0x53	; 83
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	e3 e5       	ldi	r30, 0x53	; 83
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	82 60       	ori	r24, 0x02	; 2
    1b82:	8c 93       	st	X, r24
    1b84:	16 c0       	rjmp	.+44     	; 0x1bb2 <MCAL_Timer0_FastPWM_Init+0xf0>
			break;
		case 2:
			SET_BIT(TCCR0,CS02);
    1b86:	a3 e5       	ldi	r26, 0x53	; 83
    1b88:	b0 e0       	ldi	r27, 0x00	; 0
    1b8a:	e3 e5       	ldi	r30, 0x53	; 83
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	80 81       	ld	r24, Z
    1b90:	84 60       	ori	r24, 0x04	; 4
    1b92:	8c 93       	st	X, r24
    1b94:	0e c0       	rjmp	.+28     	; 0x1bb2 <MCAL_Timer0_FastPWM_Init+0xf0>
			break;
		case 3:
			SET_BIT(TCCR0,CS00);
    1b96:	a3 e5       	ldi	r26, 0x53	; 83
    1b98:	b0 e0       	ldi	r27, 0x00	; 0
    1b9a:	e3 e5       	ldi	r30, 0x53	; 83
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	80 81       	ld	r24, Z
    1ba0:	81 60       	ori	r24, 0x01	; 1
    1ba2:	8c 93       	st	X, r24
			SET_BIT(TCCR0,CS02);
    1ba4:	a3 e5       	ldi	r26, 0x53	; 83
    1ba6:	b0 e0       	ldi	r27, 0x00	; 0
    1ba8:	e3 e5       	ldi	r30, 0x53	; 83
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	80 81       	ld	r24, Z
    1bae:	84 60       	ori	r24, 0x04	; 4
    1bb0:	8c 93       	st	X, r24
		}

	}


	return 0;
    1bb2:	80 e0       	ldi	r24, 0x00	; 0
}
    1bb4:	0f 90       	pop	r0
    1bb6:	0f 90       	pop	r0
    1bb8:	0f 90       	pop	r0
    1bba:	0f 90       	pop	r0
    1bbc:	0f 90       	pop	r0
    1bbe:	cf 91       	pop	r28
    1bc0:	df 91       	pop	r29
    1bc2:	08 95       	ret

00001bc4 <MCAL_Timer0_PCPWM_Init>:
 * Duty Cycle can be changed be update the value in The Compare Register
 */


E_ErrorType MCAL_Timer0_PCPWM_Init(E_Prescaler prescaler,u8DutyCyle Duty_Cycle)
{
    1bc4:	df 93       	push	r29
    1bc6:	cf 93       	push	r28
    1bc8:	00 d0       	rcall	.+0      	; 0x1bca <MCAL_Timer0_PCPWM_Init+0x6>
    1bca:	00 d0       	rcall	.+0      	; 0x1bcc <MCAL_Timer0_PCPWM_Init+0x8>
    1bcc:	0f 92       	push	r0
    1bce:	cd b7       	in	r28, 0x3d	; 61
    1bd0:	de b7       	in	r29, 0x3e	; 62
    1bd2:	8a 83       	std	Y+2, r24	; 0x02
    1bd4:	6b 83       	std	Y+3, r22	; 0x03
	{
		error = E_NOT_OK;
	}
	else
	{
		TCNT0 = 0;
    1bd6:	e2 e5       	ldi	r30, 0x52	; 82
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	10 82       	st	Z, r1
		OCR0 = Duty_Cycle;
    1bdc:	ec e5       	ldi	r30, 0x5C	; 92
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	8b 81       	ldd	r24, Y+3	; 0x03
    1be2:	80 83       	st	Z, r24
		SET_BIT(TIMER0_PWM_PORT,TIMER0_PWM_PIN);
    1be4:	a7 e3       	ldi	r26, 0x37	; 55
    1be6:	b0 e0       	ldi	r27, 0x00	; 0
    1be8:	e7 e3       	ldi	r30, 0x37	; 55
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	80 81       	ld	r24, Z
    1bee:	88 60       	ori	r24, 0x08	; 8
    1bf0:	8c 93       	st	X, r24
		 * . prescaler 256  CS02=1
		 * . prescaler 64   CS00=1  CS0=1
		 * . prsecaler 8    CS00=1
		 */

		SET_BIT(TCCR0,WGM00);
    1bf2:	a3 e5       	ldi	r26, 0x53	; 83
    1bf4:	b0 e0       	ldi	r27, 0x00	; 0
    1bf6:	e3 e5       	ldi	r30, 0x53	; 83
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	80 81       	ld	r24, Z
    1bfc:	80 64       	ori	r24, 0x40	; 64
    1bfe:	8c 93       	st	X, r24
		SET_BIT(TCCR0,COM01);
    1c00:	a3 e5       	ldi	r26, 0x53	; 83
    1c02:	b0 e0       	ldi	r27, 0x00	; 0
    1c04:	e3 e5       	ldi	r30, 0x53	; 83
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	80 81       	ld	r24, Z
    1c0a:	80 62       	ori	r24, 0x20	; 32
    1c0c:	8c 93       	st	X, r24
		switch (prescaler)
    1c0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c10:	28 2f       	mov	r18, r24
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	3d 83       	std	Y+5, r19	; 0x05
    1c16:	2c 83       	std	Y+4, r18	; 0x04
    1c18:	8c 81       	ldd	r24, Y+4	; 0x04
    1c1a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c1c:	81 30       	cpi	r24, 0x01	; 1
    1c1e:	91 05       	cpc	r25, r1
    1c20:	e9 f0       	breq	.+58     	; 0x1c5c <MCAL_Timer0_PCPWM_Init+0x98>
    1c22:	2c 81       	ldd	r18, Y+4	; 0x04
    1c24:	3d 81       	ldd	r19, Y+5	; 0x05
    1c26:	22 30       	cpi	r18, 0x02	; 2
    1c28:	31 05       	cpc	r19, r1
    1c2a:	2c f4       	brge	.+10     	; 0x1c36 <MCAL_Timer0_PCPWM_Init+0x72>
    1c2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c2e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c30:	00 97       	sbiw	r24, 0x00	; 0
    1c32:	61 f0       	breq	.+24     	; 0x1c4c <MCAL_Timer0_PCPWM_Init+0x88>
    1c34:	38 c0       	rjmp	.+112    	; 0x1ca6 <MCAL_Timer0_PCPWM_Init+0xe2>
    1c36:	2c 81       	ldd	r18, Y+4	; 0x04
    1c38:	3d 81       	ldd	r19, Y+5	; 0x05
    1c3a:	22 30       	cpi	r18, 0x02	; 2
    1c3c:	31 05       	cpc	r19, r1
    1c3e:	e9 f0       	breq	.+58     	; 0x1c7a <MCAL_Timer0_PCPWM_Init+0xb6>
    1c40:	8c 81       	ldd	r24, Y+4	; 0x04
    1c42:	9d 81       	ldd	r25, Y+5	; 0x05
    1c44:	83 30       	cpi	r24, 0x03	; 3
    1c46:	91 05       	cpc	r25, r1
    1c48:	01 f1       	breq	.+64     	; 0x1c8a <MCAL_Timer0_PCPWM_Init+0xc6>
    1c4a:	2d c0       	rjmp	.+90     	; 0x1ca6 <MCAL_Timer0_PCPWM_Init+0xe2>
		{
		case 0:
			SET_BIT(TCCR0,CS00);
    1c4c:	a3 e5       	ldi	r26, 0x53	; 83
    1c4e:	b0 e0       	ldi	r27, 0x00	; 0
    1c50:	e3 e5       	ldi	r30, 0x53	; 83
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	80 81       	ld	r24, Z
    1c56:	81 60       	ori	r24, 0x01	; 1
    1c58:	8c 93       	st	X, r24
    1c5a:	25 c0       	rjmp	.+74     	; 0x1ca6 <MCAL_Timer0_PCPWM_Init+0xe2>

			break;

		case 1:
			SET_BIT(TCCR0,CS00);
    1c5c:	a3 e5       	ldi	r26, 0x53	; 83
    1c5e:	b0 e0       	ldi	r27, 0x00	; 0
    1c60:	e3 e5       	ldi	r30, 0x53	; 83
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	80 81       	ld	r24, Z
    1c66:	81 60       	ori	r24, 0x01	; 1
    1c68:	8c 93       	st	X, r24
			SET_BIT(TCCR0,CS01);
    1c6a:	a3 e5       	ldi	r26, 0x53	; 83
    1c6c:	b0 e0       	ldi	r27, 0x00	; 0
    1c6e:	e3 e5       	ldi	r30, 0x53	; 83
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	80 81       	ld	r24, Z
    1c74:	82 60       	ori	r24, 0x02	; 2
    1c76:	8c 93       	st	X, r24
    1c78:	16 c0       	rjmp	.+44     	; 0x1ca6 <MCAL_Timer0_PCPWM_Init+0xe2>
			break;
		case 2:
			SET_BIT(TCCR0,CS02);
    1c7a:	a3 e5       	ldi	r26, 0x53	; 83
    1c7c:	b0 e0       	ldi	r27, 0x00	; 0
    1c7e:	e3 e5       	ldi	r30, 0x53	; 83
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	80 81       	ld	r24, Z
    1c84:	84 60       	ori	r24, 0x04	; 4
    1c86:	8c 93       	st	X, r24
    1c88:	0e c0       	rjmp	.+28     	; 0x1ca6 <MCAL_Timer0_PCPWM_Init+0xe2>
			break;
		case 3:
			SET_BIT(TCCR0,CS00);
    1c8a:	a3 e5       	ldi	r26, 0x53	; 83
    1c8c:	b0 e0       	ldi	r27, 0x00	; 0
    1c8e:	e3 e5       	ldi	r30, 0x53	; 83
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	80 81       	ld	r24, Z
    1c94:	81 60       	ori	r24, 0x01	; 1
    1c96:	8c 93       	st	X, r24
			SET_BIT(TCCR0,CS02);
    1c98:	a3 e5       	ldi	r26, 0x53	; 83
    1c9a:	b0 e0       	ldi	r27, 0x00	; 0
    1c9c:	e3 e5       	ldi	r30, 0x53	; 83
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	80 81       	ld	r24, Z
    1ca2:	84 60       	ori	r24, 0x04	; 4
    1ca4:	8c 93       	st	X, r24
		default:

			break;
		}
	}
	return error;
    1ca6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ca8:	0f 90       	pop	r0
    1caa:	0f 90       	pop	r0
    1cac:	0f 90       	pop	r0
    1cae:	0f 90       	pop	r0
    1cb0:	0f 90       	pop	r0
    1cb2:	cf 91       	pop	r28
    1cb4:	df 91       	pop	r29
    1cb6:	08 95       	ret

00001cb8 <I2C_Init>:

#include "I2C.h"
/* Include I2C header file */

void I2C_Init()												/* I2C initialize function */
{
    1cb8:	0f 93       	push	r16
    1cba:	1f 93       	push	r17
    1cbc:	df 93       	push	r29
    1cbe:	cf 93       	push	r28
    1cc0:	cd b7       	in	r28, 0x3d	; 61
    1cc2:	de b7       	in	r29, 0x3e	; 62
	TWBR = BITRATE(TWSR = 0x00);							/* Get bit rate register value by formula */
    1cc4:	00 e2       	ldi	r16, 0x20	; 32
    1cc6:	10 e0       	ldi	r17, 0x00	; 0
    1cc8:	e1 e2       	ldi	r30, 0x21	; 33
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	10 82       	st	Z, r1
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	40 e0       	ldi	r20, 0x00	; 0
    1cd4:	50 e4       	ldi	r21, 0x40	; 64
    1cd6:	60 e0       	ldi	r22, 0x00	; 0
    1cd8:	70 e0       	ldi	r23, 0x00	; 0
    1cda:	80 e1       	ldi	r24, 0x10	; 16
    1cdc:	93 e4       	ldi	r25, 0x43	; 67
    1cde:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	bc 01       	movw	r22, r24
    1ce8:	cd 01       	movw	r24, r26
    1cea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	f8 01       	movw	r30, r16
    1cf4:	80 83       	st	Z, r24
}
    1cf6:	cf 91       	pop	r28
    1cf8:	df 91       	pop	r29
    1cfa:	1f 91       	pop	r17
    1cfc:	0f 91       	pop	r16
    1cfe:	08 95       	ret

00001d00 <I2C_Start>:


uint8_t I2C_Start(char write_address)						/* I2C start function */
{
    1d00:	df 93       	push	r29
    1d02:	cf 93       	push	r28
    1d04:	00 d0       	rcall	.+0      	; 0x1d06 <I2C_Start+0x6>
    1d06:	0f 92       	push	r0
    1d08:	cd b7       	in	r28, 0x3d	; 61
    1d0a:	de b7       	in	r29, 0x3e	; 62
    1d0c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
    1d0e:	e6 e5       	ldi	r30, 0x56	; 86
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	84 ea       	ldi	r24, 0xA4	; 164
    1d14:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
    1d16:	e6 e5       	ldi	r30, 0x56	; 86
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	80 81       	ld	r24, Z
    1d1c:	88 23       	and	r24, r24
    1d1e:	dc f7       	brge	.-10     	; 0x1d16 <I2C_Start+0x16>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
    1d20:	e1 e2       	ldi	r30, 0x21	; 33
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	80 81       	ld	r24, Z
    1d26:	88 7f       	andi	r24, 0xF8	; 248
    1d28:	89 83       	std	Y+1, r24	; 0x01
	if (status != 0x08)										/* Check weather start condition transmitted successfully or not? */
    1d2a:	89 81       	ldd	r24, Y+1	; 0x01
    1d2c:	88 30       	cpi	r24, 0x08	; 8
    1d2e:	11 f0       	breq	.+4      	; 0x1d34 <I2C_Start+0x34>
	return 0;												/* If not then return 0 to indicate start condition fail */
    1d30:	1b 82       	std	Y+3, r1	; 0x03
    1d32:	20 c0       	rjmp	.+64     	; 0x1d74 <I2C_Start+0x74>
	TWDR = write_address;									/* If yes then write SLA+W in TWI data register */
    1d34:	e3 e2       	ldi	r30, 0x23	; 35
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3a:	80 83       	st	Z, r24
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
    1d3c:	e6 e5       	ldi	r30, 0x56	; 86
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	84 e8       	ldi	r24, 0x84	; 132
    1d42:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
    1d44:	e6 e5       	ldi	r30, 0x56	; 86
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	80 81       	ld	r24, Z
    1d4a:	88 23       	and	r24, r24
    1d4c:	dc f7       	brge	.-10     	; 0x1d44 <I2C_Start+0x44>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
    1d4e:	e1 e2       	ldi	r30, 0x21	; 33
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	80 81       	ld	r24, Z
    1d54:	88 7f       	andi	r24, 0xF8	; 248
    1d56:	89 83       	std	Y+1, r24	; 0x01
	if (status == 0x18)										/* Check weather SLA+W transmitted & ack received or not? */
    1d58:	89 81       	ldd	r24, Y+1	; 0x01
    1d5a:	88 31       	cpi	r24, 0x18	; 24
    1d5c:	19 f4       	brne	.+6      	; 0x1d64 <I2C_Start+0x64>
	return 1;												/* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	8b 83       	std	Y+3, r24	; 0x03
    1d62:	08 c0       	rjmp	.+16     	; 0x1d74 <I2C_Start+0x74>
	if (status == 0x20)										/* Check weather SLA+W transmitted & nack received or not? */
    1d64:	89 81       	ldd	r24, Y+1	; 0x01
    1d66:	80 32       	cpi	r24, 0x20	; 32
    1d68:	19 f4       	brne	.+6      	; 0x1d70 <I2C_Start+0x70>
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
    1d6a:	82 e0       	ldi	r24, 0x02	; 2
    1d6c:	8b 83       	std	Y+3, r24	; 0x03
    1d6e:	02 c0       	rjmp	.+4      	; 0x1d74 <I2C_Start+0x74>
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
    1d70:	83 e0       	ldi	r24, 0x03	; 3
    1d72:	8b 83       	std	Y+3, r24	; 0x03
    1d74:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1d76:	0f 90       	pop	r0
    1d78:	0f 90       	pop	r0
    1d7a:	0f 90       	pop	r0
    1d7c:	cf 91       	pop	r28
    1d7e:	df 91       	pop	r29
    1d80:	08 95       	ret

00001d82 <I2C_Repeated_Start>:

uint8_t I2C_Repeated_Start(char read_address)				/* I2C repeated start function */
{
    1d82:	df 93       	push	r29
    1d84:	cf 93       	push	r28
    1d86:	00 d0       	rcall	.+0      	; 0x1d88 <I2C_Repeated_Start+0x6>
    1d88:	0f 92       	push	r0
    1d8a:	cd b7       	in	r28, 0x3d	; 61
    1d8c:	de b7       	in	r29, 0x3e	; 62
    1d8e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
    1d90:	e6 e5       	ldi	r30, 0x56	; 86
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	84 ea       	ldi	r24, 0xA4	; 164
    1d96:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
    1d98:	e6 e5       	ldi	r30, 0x56	; 86
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	80 81       	ld	r24, Z
    1d9e:	88 23       	and	r24, r24
    1da0:	dc f7       	brge	.-10     	; 0x1d98 <I2C_Repeated_Start+0x16>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
    1da2:	e1 e2       	ldi	r30, 0x21	; 33
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	88 7f       	andi	r24, 0xF8	; 248
    1daa:	89 83       	std	Y+1, r24	; 0x01
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
    1dac:	89 81       	ldd	r24, Y+1	; 0x01
    1dae:	80 31       	cpi	r24, 0x10	; 16
    1db0:	11 f0       	breq	.+4      	; 0x1db6 <I2C_Repeated_Start+0x34>
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
    1db2:	1b 82       	std	Y+3, r1	; 0x03
    1db4:	20 c0       	rjmp	.+64     	; 0x1df6 <I2C_Repeated_Start+0x74>
	TWDR = read_address;									/* If yes then write SLA+R in TWI data register */
    1db6:	e3 e2       	ldi	r30, 0x23	; 35
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbc:	80 83       	st	Z, r24
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
    1dbe:	e6 e5       	ldi	r30, 0x56	; 86
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	84 e8       	ldi	r24, 0x84	; 132
    1dc4:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
    1dc6:	e6 e5       	ldi	r30, 0x56	; 86
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	80 81       	ld	r24, Z
    1dcc:	88 23       	and	r24, r24
    1dce:	dc f7       	brge	.-10     	; 0x1dc6 <I2C_Repeated_Start+0x44>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
    1dd0:	e1 e2       	ldi	r30, 0x21	; 33
    1dd2:	f0 e0       	ldi	r31, 0x00	; 0
    1dd4:	80 81       	ld	r24, Z
    1dd6:	88 7f       	andi	r24, 0xF8	; 248
    1dd8:	89 83       	std	Y+1, r24	; 0x01
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
    1dda:	89 81       	ldd	r24, Y+1	; 0x01
    1ddc:	80 34       	cpi	r24, 0x40	; 64
    1dde:	19 f4       	brne	.+6      	; 0x1de6 <I2C_Repeated_Start+0x64>
	return 1;												/* If yes then return 1 to indicate ack received */
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	8b 83       	std	Y+3, r24	; 0x03
    1de4:	08 c0       	rjmp	.+16     	; 0x1df6 <I2C_Repeated_Start+0x74>
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
    1de6:	89 81       	ldd	r24, Y+1	; 0x01
    1de8:	80 32       	cpi	r24, 0x20	; 32
    1dea:	19 f4       	brne	.+6      	; 0x1df2 <I2C_Repeated_Start+0x70>
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
    1dec:	82 e0       	ldi	r24, 0x02	; 2
    1dee:	8b 83       	std	Y+3, r24	; 0x03
    1df0:	02 c0       	rjmp	.+4      	; 0x1df6 <I2C_Repeated_Start+0x74>
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
    1df2:	83 e0       	ldi	r24, 0x03	; 3
    1df4:	8b 83       	std	Y+3, r24	; 0x03
    1df6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1df8:	0f 90       	pop	r0
    1dfa:	0f 90       	pop	r0
    1dfc:	0f 90       	pop	r0
    1dfe:	cf 91       	pop	r28
    1e00:	df 91       	pop	r29
    1e02:	08 95       	ret

00001e04 <I2C_Stop>:

void I2C_Stop()												/* I2C stop function */
{
    1e04:	df 93       	push	r29
    1e06:	cf 93       	push	r28
    1e08:	cd b7       	in	r28, 0x3d	; 61
    1e0a:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
    1e0c:	e6 e5       	ldi	r30, 0x56	; 86
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	84 e9       	ldi	r24, 0x94	; 148
    1e12:	80 83       	st	Z, r24
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */
    1e14:	e6 e5       	ldi	r30, 0x56	; 86
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	88 2f       	mov	r24, r24
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	80 71       	andi	r24, 0x10	; 16
    1e20:	90 70       	andi	r25, 0x00	; 0
    1e22:	00 97       	sbiw	r24, 0x00	; 0
    1e24:	b9 f7       	brne	.-18     	; 0x1e14 <I2C_Stop+0x10>
}
    1e26:	cf 91       	pop	r28
    1e28:	df 91       	pop	r29
    1e2a:	08 95       	ret

00001e2c <I2C_Start_Wait>:

void I2C_Start_Wait(char write_address)						/* I2C start wait function */
{
    1e2c:	df 93       	push	r29
    1e2e:	cf 93       	push	r28
    1e30:	00 d0       	rcall	.+0      	; 0x1e32 <I2C_Start_Wait+0x6>
    1e32:	cd b7       	in	r28, 0x3d	; 61
    1e34:	de b7       	in	r29, 0x3e	; 62
    1e36:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
    1e38:	e6 e5       	ldi	r30, 0x56	; 86
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	84 ea       	ldi	r24, 0xA4	; 164
    1e3e:	80 83       	st	Z, r24
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
    1e40:	e6 e5       	ldi	r30, 0x56	; 86
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	80 81       	ld	r24, Z
    1e46:	88 23       	and	r24, r24
    1e48:	dc f7       	brge	.-10     	; 0x1e40 <I2C_Start_Wait+0x14>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
    1e4a:	e1 e2       	ldi	r30, 0x21	; 33
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	88 7f       	andi	r24, 0xF8	; 248
    1e52:	89 83       	std	Y+1, r24	; 0x01
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
    1e54:	89 81       	ldd	r24, Y+1	; 0x01
    1e56:	88 30       	cpi	r24, 0x08	; 8
    1e58:	79 f7       	brne	.-34     	; 0x1e38 <I2C_Start_Wait+0xc>
		continue;											/* If no then continue with start loop again */
		TWDR = write_address;								/* If yes then write SLA+W in TWI data register */
    1e5a:	e3 e2       	ldi	r30, 0x23	; 35
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e60:	80 83       	st	Z, r24
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
    1e62:	e6 e5       	ldi	r30, 0x56	; 86
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	84 e8       	ldi	r24, 0x84	; 132
    1e68:	80 83       	st	Z, r24
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (Write operation) */
    1e6a:	e6 e5       	ldi	r30, 0x56	; 86
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	80 81       	ld	r24, Z
    1e70:	88 23       	and	r24, r24
    1e72:	dc f7       	brge	.-10     	; 0x1e6a <I2C_Start_Wait+0x3e>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
    1e74:	e1 e2       	ldi	r30, 0x21	; 33
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	80 81       	ld	r24, Z
    1e7a:	88 7f       	andi	r24, 0xF8	; 248
    1e7c:	89 83       	std	Y+1, r24	; 0x01
		if (status != 0x18 )								/* Check weather SLA+W transmitted & ack received or not? */
    1e7e:	89 81       	ldd	r24, Y+1	; 0x01
    1e80:	88 31       	cpi	r24, 0x18	; 24
    1e82:	19 f0       	breq	.+6      	; 0x1e8a <I2C_Start_Wait+0x5e>
		{
			I2C_Stop();										/* If not then generate stop condition */
    1e84:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <I2C_Stop>
    1e88:	d7 cf       	rjmp	.-82     	; 0x1e38 <I2C_Start_Wait+0xc>
			continue;										/* continue with start loop again */
		}
		break;												/* If yes then break loop */
	}
    1e8a:	0f 90       	pop	r0
    1e8c:	0f 90       	pop	r0
    1e8e:	cf 91       	pop	r28
    1e90:	df 91       	pop	r29
    1e92:	08 95       	ret

00001e94 <I2C_Write>:
}

uint8_t I2C_Write(uint8_t data)								/* I2C write function */
{
    1e94:	df 93       	push	r29
    1e96:	cf 93       	push	r28
    1e98:	00 d0       	rcall	.+0      	; 0x1e9a <I2C_Write+0x6>
    1e9a:	0f 92       	push	r0
    1e9c:	cd b7       	in	r28, 0x3d	; 61
    1e9e:	de b7       	in	r29, 0x3e	; 62
    1ea0:	8a 83       	std	Y+2, r24	; 0x02

	uint8_t status;											/* Declare variable */
	TWDR = data;		/* Copy data in TWI data register */
    1ea2:	e3 e2       	ldi	r30, 0x23	; 35
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea8:	80 83       	st	Z, r24
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
    1eaa:	e6 e5       	ldi	r30, 0x56	; 86
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	84 e8       	ldi	r24, 0x84	; 132
    1eb0:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
    1eb2:	e6 e5       	ldi	r30, 0x56	; 86
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	80 81       	ld	r24, Z
    1eb8:	88 23       	and	r24, r24
    1eba:	dc f7       	brge	.-10     	; 0x1eb2 <I2C_Write+0x1e>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
    1ebc:	e1 e2       	ldi	r30, 0x21	; 33
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	80 81       	ld	r24, Z
    1ec2:	88 7f       	andi	r24, 0xF8	; 248
    1ec4:	89 83       	std	Y+1, r24	; 0x01
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
    1ec6:	89 81       	ldd	r24, Y+1	; 0x01
    1ec8:	88 32       	cpi	r24, 0x28	; 40
    1eca:	11 f4       	brne	.+4      	; 0x1ed0 <I2C_Write+0x3c>
	return 0;												/* If yes then return 0 to indicate ack received */
    1ecc:	1b 82       	std	Y+3, r1	; 0x03
    1ece:	08 c0       	rjmp	.+16     	; 0x1ee0 <I2C_Write+0x4c>
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
    1ed0:	89 81       	ldd	r24, Y+1	; 0x01
    1ed2:	80 33       	cpi	r24, 0x30	; 48
    1ed4:	19 f4       	brne	.+6      	; 0x1edc <I2C_Write+0x48>
	return 1;												/* If yes then return 1 to indicate nack received */
    1ed6:	81 e0       	ldi	r24, 0x01	; 1
    1ed8:	8b 83       	std	Y+3, r24	; 0x03
    1eda:	02 c0       	rjmp	.+4      	; 0x1ee0 <I2C_Write+0x4c>
	else
	return 2;
    1edc:	82 e0       	ldi	r24, 0x02	; 2
    1ede:	8b 83       	std	Y+3, r24	; 0x03
    1ee0:	8b 81       	ldd	r24, Y+3	; 0x03
	                          /* Else return 2 to indicate data transmission failed */
}
    1ee2:	0f 90       	pop	r0
    1ee4:	0f 90       	pop	r0
    1ee6:	0f 90       	pop	r0
    1ee8:	cf 91       	pop	r28
    1eea:	df 91       	pop	r29
    1eec:	08 95       	ret

00001eee <I2C_Read_Ack>:

int I2C_Read_Ack()											/* I2C read ack function */
{
    1eee:	df 93       	push	r29
    1ef0:	cf 93       	push	r28
    1ef2:	cd b7       	in	r28, 0x3d	; 61
    1ef4:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
    1ef6:	e6 e5       	ldi	r30, 0x56	; 86
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	84 ec       	ldi	r24, 0xC4	; 196
    1efc:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
    1efe:	e6 e5       	ldi	r30, 0x56	; 86
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	80 81       	ld	r24, Z
    1f04:	88 23       	and	r24, r24
    1f06:	dc f7       	brge	.-10     	; 0x1efe <I2C_Read_Ack+0x10>
	return TWDR;											/* Return received data */
    1f08:	e3 e2       	ldi	r30, 0x23	; 35
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	80 81       	ld	r24, Z
    1f0e:	88 2f       	mov	r24, r24
    1f10:	90 e0       	ldi	r25, 0x00	; 0
}
    1f12:	cf 91       	pop	r28
    1f14:	df 91       	pop	r29
    1f16:	08 95       	ret

00001f18 <I2C_Read_Nack>:

int I2C_Read_Nack()										/* I2C read nack function */
{
    1f18:	df 93       	push	r29
    1f1a:	cf 93       	push	r28
    1f1c:	cd b7       	in	r28, 0x3d	; 61
    1f1e:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
    1f20:	e6 e5       	ldi	r30, 0x56	; 86
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	84 e8       	ldi	r24, 0x84	; 132
    1f26:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
    1f28:	e6 e5       	ldi	r30, 0x56	; 86
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	80 81       	ld	r24, Z
    1f2e:	88 23       	and	r24, r24
    1f30:	dc f7       	brge	.-10     	; 0x1f28 <I2C_Read_Nack+0x10>
	return TWDR;											/* Return received data */
    1f32:	e3 e2       	ldi	r30, 0x23	; 35
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	80 81       	ld	r24, Z
    1f38:	88 2f       	mov	r24, r24
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
}
    1f3c:	cf 91       	pop	r28
    1f3e:	df 91       	pop	r29
    1f40:	08 95       	ret

00001f42 <TWI_init>:
#include "twi.h"

#include "common_macros.h"

void TWI_init(void)
{
    1f42:	df 93       	push	r29
    1f44:	cf 93       	push	r28
    1f46:	cd b7       	in	r28, 0x3d	; 61
    1f48:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x0C;
    1f4a:	e0 e2       	ldi	r30, 0x20	; 32
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	8c e0       	ldi	r24, 0x0C	; 12
    1f50:	80 83       	st	Z, r24
	TWSR = 0x00;
    1f52:	e1 e2       	ldi	r30, 0x21	; 33
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
    1f58:	e2 e2       	ldi	r30, 0x22	; 34
    1f5a:	f0 e0       	ldi	r31, 0x00	; 0
    1f5c:	82 e0       	ldi	r24, 0x02	; 2
    1f5e:	80 83       	st	Z, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    1f60:	e6 e5       	ldi	r30, 0x56	; 86
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	84 e0       	ldi	r24, 0x04	; 4
    1f66:	80 83       	st	Z, r24
}
    1f68:	cf 91       	pop	r28
    1f6a:	df 91       	pop	r29
    1f6c:	08 95       	ret

00001f6e <TWI_start>:

void TWI_start(void)
{
    1f6e:	df 93       	push	r29
    1f70:	cf 93       	push	r28
    1f72:	cd b7       	in	r28, 0x3d	; 61
    1f74:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1f76:	e6 e5       	ldi	r30, 0x56	; 86
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	84 ea       	ldi	r24, 0xA4	; 164
    1f7c:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1f7e:	e6 e5       	ldi	r30, 0x56	; 86
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	80 81       	ld	r24, Z
    1f84:	88 23       	and	r24, r24
    1f86:	dc f7       	brge	.-10     	; 0x1f7e <TWI_start+0x10>
}
    1f88:	cf 91       	pop	r28
    1f8a:	df 91       	pop	r29
    1f8c:	08 95       	ret

00001f8e <TWI_stop>:

void TWI_stop(void)
{
    1f8e:	df 93       	push	r29
    1f90:	cf 93       	push	r28
    1f92:	cd b7       	in	r28, 0x3d	; 61
    1f94:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1f96:	e6 e5       	ldi	r30, 0x56	; 86
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	84 e9       	ldi	r24, 0x94	; 148
    1f9c:	80 83       	st	Z, r24
}
    1f9e:	cf 91       	pop	r28
    1fa0:	df 91       	pop	r29
    1fa2:	08 95       	ret

00001fa4 <TWI_writeByte>:

void TWI_writeByte(uint8_t data)
{
    1fa4:	df 93       	push	r29
    1fa6:	cf 93       	push	r28
    1fa8:	0f 92       	push	r0
    1faa:	cd b7       	in	r28, 0x3d	; 61
    1fac:	de b7       	in	r29, 0x3e	; 62
    1fae:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1fb0:	e3 e2       	ldi	r30, 0x23	; 35
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	89 81       	ldd	r24, Y+1	; 0x01
    1fb6:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    1fb8:	e6 e5       	ldi	r30, 0x56	; 86
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	84 e8       	ldi	r24, 0x84	; 132
    1fbe:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1fc0:	e6 e5       	ldi	r30, 0x56	; 86
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	80 81       	ld	r24, Z
    1fc6:	88 23       	and	r24, r24
    1fc8:	dc f7       	brge	.-10     	; 0x1fc0 <TWI_writeByte+0x1c>
}
    1fca:	0f 90       	pop	r0
    1fcc:	cf 91       	pop	r28
    1fce:	df 91       	pop	r29
    1fd0:	08 95       	ret

00001fd2 <TWI_readByteWithACK>:

uint8_t TWI_readByteWithACK(void)
{
    1fd2:	df 93       	push	r29
    1fd4:	cf 93       	push	r28
    1fd6:	cd b7       	in	r28, 0x3d	; 61
    1fd8:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1fda:	e6 e5       	ldi	r30, 0x56	; 86
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	84 ec       	ldi	r24, 0xC4	; 196
    1fe0:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1fe2:	e6 e5       	ldi	r30, 0x56	; 86
    1fe4:	f0 e0       	ldi	r31, 0x00	; 0
    1fe6:	80 81       	ld	r24, Z
    1fe8:	88 23       	and	r24, r24
    1fea:	dc f7       	brge	.-10     	; 0x1fe2 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    1fec:	e3 e2       	ldi	r30, 0x23	; 35
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	80 81       	ld	r24, Z
}
    1ff2:	cf 91       	pop	r28
    1ff4:	df 91       	pop	r29
    1ff6:	08 95       	ret

00001ff8 <TWI_readByteWithNACK>:

uint8_t TWI_readByteWithNACK(void)
{
    1ff8:	df 93       	push	r29
    1ffa:	cf 93       	push	r28
    1ffc:	cd b7       	in	r28, 0x3d	; 61
    1ffe:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2000:	e6 e5       	ldi	r30, 0x56	; 86
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	84 e8       	ldi	r24, 0x84	; 132
    2006:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2008:	e6 e5       	ldi	r30, 0x56	; 86
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	80 81       	ld	r24, Z
    200e:	88 23       	and	r24, r24
    2010:	dc f7       	brge	.-10     	; 0x2008 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2012:	e3 e2       	ldi	r30, 0x23	; 35
    2014:	f0 e0       	ldi	r31, 0x00	; 0
    2016:	80 81       	ld	r24, Z
}
    2018:	cf 91       	pop	r28
    201a:	df 91       	pop	r29
    201c:	08 95       	ret

0000201e <TWI_getStatus>:

uint8_t TWI_getStatus(void)
{
    201e:	df 93       	push	r29
    2020:	cf 93       	push	r28
    2022:	0f 92       	push	r0
    2024:	cd b7       	in	r28, 0x3d	; 61
    2026:	de b7       	in	r29, 0x3e	; 62
    uint8_t status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    2028:	e1 e2       	ldi	r30, 0x21	; 33
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	80 81       	ld	r24, Z
    202e:	88 7f       	andi	r24, 0xF8	; 248
    2030:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2032:	89 81       	ldd	r24, Y+1	; 0x01
}
    2034:	0f 90       	pop	r0
    2036:	cf 91       	pop	r28
    2038:	df 91       	pop	r29
    203a:	08 95       	ret

0000203c <MCAL_EXT_INT_0_init>:
#include "External_interrupt_interface.h"


/* External interrupt 0 initialization */
E_Error_state MCAL_EXT_INT_0_init(EN_interrupt_sense_t sense)
{
    203c:	df 93       	push	r29
    203e:	cf 93       	push	r28
    2040:	00 d0       	rcall	.+0      	; 0x2042 <MCAL_EXT_INT_0_init+0x6>
    2042:	00 d0       	rcall	.+0      	; 0x2044 <MCAL_EXT_INT_0_init+0x8>
    2044:	cd b7       	in	r28, 0x3d	; 61
    2046:	de b7       	in	r29, 0x3e	; 62
    2048:	8a 83       	std	Y+2, r24	; 0x02
	E_Error_state error =OK;
    204a:	19 82       	std	Y+1, r1	; 0x01
		error =NOT_OK;
	}
	else
	{
		/* Enable the global interrupt */
		sei();
    204c:	78 94       	sei
		/*  Choose the interrupt sense on external interrupt 0 */
		switch(sense)
    204e:	8a 81       	ldd	r24, Y+2	; 0x02
    2050:	28 2f       	mov	r18, r24
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	3c 83       	std	Y+4, r19	; 0x04
    2056:	2b 83       	std	Y+3, r18	; 0x03
    2058:	8b 81       	ldd	r24, Y+3	; 0x03
    205a:	9c 81       	ldd	r25, Y+4	; 0x04
    205c:	81 30       	cpi	r24, 0x01	; 1
    205e:	91 05       	cpc	r25, r1
    2060:	01 f1       	breq	.+64     	; 0x20a2 <MCAL_EXT_INT_0_init+0x66>
    2062:	2b 81       	ldd	r18, Y+3	; 0x03
    2064:	3c 81       	ldd	r19, Y+4	; 0x04
    2066:	22 30       	cpi	r18, 0x02	; 2
    2068:	31 05       	cpc	r19, r1
    206a:	2c f4       	brge	.+10     	; 0x2076 <MCAL_EXT_INT_0_init+0x3a>
    206c:	8b 81       	ldd	r24, Y+3	; 0x03
    206e:	9c 81       	ldd	r25, Y+4	; 0x04
    2070:	00 97       	sbiw	r24, 0x00	; 0
    2072:	61 f0       	breq	.+24     	; 0x208c <MCAL_EXT_INT_0_init+0x50>
    2074:	36 c0       	rjmp	.+108    	; 0x20e2 <MCAL_EXT_INT_0_init+0xa6>
    2076:	2b 81       	ldd	r18, Y+3	; 0x03
    2078:	3c 81       	ldd	r19, Y+4	; 0x04
    207a:	22 30       	cpi	r18, 0x02	; 2
    207c:	31 05       	cpc	r19, r1
    207e:	e1 f0       	breq	.+56     	; 0x20b8 <MCAL_EXT_INT_0_init+0x7c>
    2080:	8b 81       	ldd	r24, Y+3	; 0x03
    2082:	9c 81       	ldd	r25, Y+4	; 0x04
    2084:	83 30       	cpi	r24, 0x03	; 3
    2086:	91 05       	cpc	r25, r1
    2088:	11 f1       	breq	.+68     	; 0x20ce <MCAL_EXT_INT_0_init+0x92>
    208a:	2b c0       	rjmp	.+86     	; 0x20e2 <MCAL_EXT_INT_0_init+0xa6>
		{
		/* Low level interrupt */
		case low_level_sense:
			MCUCR &=~ ((1<<ISC00)|(1<<ISC01));
    208c:	a5 e5       	ldi	r26, 0x55	; 85
    208e:	b0 e0       	ldi	r27, 0x00	; 0
    2090:	e5 e5       	ldi	r30, 0x55	; 85
    2092:	f0 e0       	ldi	r31, 0x00	; 0
    2094:	80 81       	ld	r24, Z
    2096:	91 81       	ldd	r25, Z+1	; 0x01
    2098:	8c 7f       	andi	r24, 0xFC	; 252
    209a:	11 96       	adiw	r26, 0x01	; 1
    209c:	9c 93       	st	X, r25
    209e:	8e 93       	st	-X, r24
    20a0:	20 c0       	rjmp	.+64     	; 0x20e2 <MCAL_EXT_INT_0_init+0xa6>
			break;
			/* Any logical change */
		case anyLogicChange_sense:
			MCUCR |= (1<<ISC00);
    20a2:	a5 e5       	ldi	r26, 0x55	; 85
    20a4:	b0 e0       	ldi	r27, 0x00	; 0
    20a6:	e5 e5       	ldi	r30, 0x55	; 85
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	80 81       	ld	r24, Z
    20ac:	91 81       	ldd	r25, Z+1	; 0x01
    20ae:	81 60       	ori	r24, 0x01	; 1
    20b0:	11 96       	adiw	r26, 0x01	; 1
    20b2:	9c 93       	st	X, r25
    20b4:	8e 93       	st	-X, r24
    20b6:	15 c0       	rjmp	.+42     	; 0x20e2 <MCAL_EXT_INT_0_init+0xa6>
			break;
			/* Falling edge trigger */
		case falling_edge_sense:
			MCUCR |= (1<<ISC01);
    20b8:	a5 e5       	ldi	r26, 0x55	; 85
    20ba:	b0 e0       	ldi	r27, 0x00	; 0
    20bc:	e5 e5       	ldi	r30, 0x55	; 85
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	80 81       	ld	r24, Z
    20c2:	91 81       	ldd	r25, Z+1	; 0x01
    20c4:	82 60       	ori	r24, 0x02	; 2
    20c6:	11 96       	adiw	r26, 0x01	; 1
    20c8:	9c 93       	st	X, r25
    20ca:	8e 93       	st	-X, r24
    20cc:	0a c0       	rjmp	.+20     	; 0x20e2 <MCAL_EXT_INT_0_init+0xa6>
			break;
			/* Rising edge */
		case rising_edge_sense:
			MCUCR |= (1<<ISC01) | (1<<ISC00);
    20ce:	a5 e5       	ldi	r26, 0x55	; 85
    20d0:	b0 e0       	ldi	r27, 0x00	; 0
    20d2:	e5 e5       	ldi	r30, 0x55	; 85
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 81       	ld	r24, Z
    20d8:	91 81       	ldd	r25, Z+1	; 0x01
    20da:	83 60       	ori	r24, 0x03	; 3
    20dc:	11 96       	adiw	r26, 0x01	; 1
    20de:	9c 93       	st	X, r25
    20e0:	8e 93       	st	-X, r24
			break;
		default:
			break;
		}
		/* Enable the external interrupt 0 */
		GICR |= (1<<INT0);
    20e2:	ab e5       	ldi	r26, 0x5B	; 91
    20e4:	b0 e0       	ldi	r27, 0x00	; 0
    20e6:	eb e5       	ldi	r30, 0x5B	; 91
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	80 81       	ld	r24, Z
    20ec:	91 81       	ldd	r25, Z+1	; 0x01
    20ee:	80 64       	ori	r24, 0x40	; 64
    20f0:	11 96       	adiw	r26, 0x01	; 1
    20f2:	9c 93       	st	X, r25
    20f4:	8e 93       	st	-X, r24
	}
	return error;
    20f6:	89 81       	ldd	r24, Y+1	; 0x01

}
    20f8:	0f 90       	pop	r0
    20fa:	0f 90       	pop	r0
    20fc:	0f 90       	pop	r0
    20fe:	0f 90       	pop	r0
    2100:	cf 91       	pop	r28
    2102:	df 91       	pop	r29
    2104:	08 95       	ret

00002106 <MCAL_EXT_INT_1_init>:

/* External interrupt 1 initialization */
E_Error_state MCAL_EXT_INT_1_init(EN_interrupt_sense_t sense)
{
    2106:	df 93       	push	r29
    2108:	cf 93       	push	r28
    210a:	00 d0       	rcall	.+0      	; 0x210c <MCAL_EXT_INT_1_init+0x6>
    210c:	00 d0       	rcall	.+0      	; 0x210e <MCAL_EXT_INT_1_init+0x8>
    210e:	cd b7       	in	r28, 0x3d	; 61
    2110:	de b7       	in	r29, 0x3e	; 62
    2112:	8a 83       	std	Y+2, r24	; 0x02
	E_Error_state error =OK;
    2114:	19 82       	std	Y+1, r1	; 0x01
	}
	else
	{

		/* Enable the global interrupt */
		sei();
    2116:	78 94       	sei
		/* Choose the interrupt sense on external interrupt */
		switch(sense)
    2118:	8a 81       	ldd	r24, Y+2	; 0x02
    211a:	28 2f       	mov	r18, r24
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	3c 83       	std	Y+4, r19	; 0x04
    2120:	2b 83       	std	Y+3, r18	; 0x03
    2122:	8b 81       	ldd	r24, Y+3	; 0x03
    2124:	9c 81       	ldd	r25, Y+4	; 0x04
    2126:	81 30       	cpi	r24, 0x01	; 1
    2128:	91 05       	cpc	r25, r1
    212a:	01 f1       	breq	.+64     	; 0x216c <MCAL_EXT_INT_1_init+0x66>
    212c:	2b 81       	ldd	r18, Y+3	; 0x03
    212e:	3c 81       	ldd	r19, Y+4	; 0x04
    2130:	22 30       	cpi	r18, 0x02	; 2
    2132:	31 05       	cpc	r19, r1
    2134:	2c f4       	brge	.+10     	; 0x2140 <MCAL_EXT_INT_1_init+0x3a>
    2136:	8b 81       	ldd	r24, Y+3	; 0x03
    2138:	9c 81       	ldd	r25, Y+4	; 0x04
    213a:	00 97       	sbiw	r24, 0x00	; 0
    213c:	61 f0       	breq	.+24     	; 0x2156 <MCAL_EXT_INT_1_init+0x50>
    213e:	36 c0       	rjmp	.+108    	; 0x21ac <MCAL_EXT_INT_1_init+0xa6>
    2140:	2b 81       	ldd	r18, Y+3	; 0x03
    2142:	3c 81       	ldd	r19, Y+4	; 0x04
    2144:	22 30       	cpi	r18, 0x02	; 2
    2146:	31 05       	cpc	r19, r1
    2148:	e1 f0       	breq	.+56     	; 0x2182 <MCAL_EXT_INT_1_init+0x7c>
    214a:	8b 81       	ldd	r24, Y+3	; 0x03
    214c:	9c 81       	ldd	r25, Y+4	; 0x04
    214e:	83 30       	cpi	r24, 0x03	; 3
    2150:	91 05       	cpc	r25, r1
    2152:	11 f1       	breq	.+68     	; 0x2198 <MCAL_EXT_INT_1_init+0x92>
    2154:	2b c0       	rjmp	.+86     	; 0x21ac <MCAL_EXT_INT_1_init+0xa6>
		{
		/* Low level interrupt */
		case low_level_sense:
			MCUCR &=~ ((1<<ISC10)|(1<<ISC11));
    2156:	a5 e5       	ldi	r26, 0x55	; 85
    2158:	b0 e0       	ldi	r27, 0x00	; 0
    215a:	e5 e5       	ldi	r30, 0x55	; 85
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	80 81       	ld	r24, Z
    2160:	91 81       	ldd	r25, Z+1	; 0x01
    2162:	83 7f       	andi	r24, 0xF3	; 243
    2164:	11 96       	adiw	r26, 0x01	; 1
    2166:	9c 93       	st	X, r25
    2168:	8e 93       	st	-X, r24
    216a:	20 c0       	rjmp	.+64     	; 0x21ac <MCAL_EXT_INT_1_init+0xa6>
			break;
			/* Any logical change */
		case anyLogicChange_sense:
			MCUCR |= (1<<ISC10);
    216c:	a5 e5       	ldi	r26, 0x55	; 85
    216e:	b0 e0       	ldi	r27, 0x00	; 0
    2170:	e5 e5       	ldi	r30, 0x55	; 85
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	80 81       	ld	r24, Z
    2176:	91 81       	ldd	r25, Z+1	; 0x01
    2178:	84 60       	ori	r24, 0x04	; 4
    217a:	11 96       	adiw	r26, 0x01	; 1
    217c:	9c 93       	st	X, r25
    217e:	8e 93       	st	-X, r24
    2180:	15 c0       	rjmp	.+42     	; 0x21ac <MCAL_EXT_INT_1_init+0xa6>
			break;
			/* Falling edge trigger */
		case falling_edge_sense:
			MCUCR |= (1<<ISC11);
    2182:	a5 e5       	ldi	r26, 0x55	; 85
    2184:	b0 e0       	ldi	r27, 0x00	; 0
    2186:	e5 e5       	ldi	r30, 0x55	; 85
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	80 81       	ld	r24, Z
    218c:	91 81       	ldd	r25, Z+1	; 0x01
    218e:	88 60       	ori	r24, 0x08	; 8
    2190:	11 96       	adiw	r26, 0x01	; 1
    2192:	9c 93       	st	X, r25
    2194:	8e 93       	st	-X, r24
    2196:	0a c0       	rjmp	.+20     	; 0x21ac <MCAL_EXT_INT_1_init+0xa6>
			break;
			/* Rising edge */
		case rising_edge_sense:
			MCUCR |= (1<<ISC11) | (1<<ISC10);
    2198:	a5 e5       	ldi	r26, 0x55	; 85
    219a:	b0 e0       	ldi	r27, 0x00	; 0
    219c:	e5 e5       	ldi	r30, 0x55	; 85
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	80 81       	ld	r24, Z
    21a2:	91 81       	ldd	r25, Z+1	; 0x01
    21a4:	8c 60       	ori	r24, 0x0C	; 12
    21a6:	11 96       	adiw	r26, 0x01	; 1
    21a8:	9c 93       	st	X, r25
    21aa:	8e 93       	st	-X, r24
			break;
		default:
			break;
		}
		/* Enable the external interrupt */
		GICR |= (1<<INT1);
    21ac:	ab e5       	ldi	r26, 0x5B	; 91
    21ae:	b0 e0       	ldi	r27, 0x00	; 0
    21b0:	eb e5       	ldi	r30, 0x5B	; 91
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	80 81       	ld	r24, Z
    21b6:	91 81       	ldd	r25, Z+1	; 0x01
    21b8:	80 68       	ori	r24, 0x80	; 128
    21ba:	11 96       	adiw	r26, 0x01	; 1
    21bc:	9c 93       	st	X, r25
    21be:	8e 93       	st	-X, r24
	}
	return error;
    21c0:	89 81       	ldd	r24, Y+1	; 0x01

}
    21c2:	0f 90       	pop	r0
    21c4:	0f 90       	pop	r0
    21c6:	0f 90       	pop	r0
    21c8:	0f 90       	pop	r0
    21ca:	cf 91       	pop	r28
    21cc:	df 91       	pop	r29
    21ce:	08 95       	ret

000021d0 <MCAL_EXT_INT_2_init>:


/* External interrupt 2 initialization */
E_Error_state MCAL_EXT_INT_2_init(EN_interrupt_sense_t sense)
{
    21d0:	df 93       	push	r29
    21d2:	cf 93       	push	r28
    21d4:	00 d0       	rcall	.+0      	; 0x21d6 <MCAL_EXT_INT_2_init+0x6>
    21d6:	00 d0       	rcall	.+0      	; 0x21d8 <MCAL_EXT_INT_2_init+0x8>
    21d8:	cd b7       	in	r28, 0x3d	; 61
    21da:	de b7       	in	r29, 0x3e	; 62
    21dc:	8a 83       	std	Y+2, r24	; 0x02
	E_Error_state error =OK;
    21de:	19 82       	std	Y+1, r1	; 0x01
		error =NOT_OK;
	}
	else
	{
		/* Enable the global interrupt2 */
		sei();
    21e0:	78 94       	sei
		/* Choose the interrupt sense on external interrupt2 */
		switch(sense)
    21e2:	8a 81       	ldd	r24, Y+2	; 0x02
    21e4:	28 2f       	mov	r18, r24
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	3c 83       	std	Y+4, r19	; 0x04
    21ea:	2b 83       	std	Y+3, r18	; 0x03
    21ec:	8b 81       	ldd	r24, Y+3	; 0x03
    21ee:	9c 81       	ldd	r25, Y+4	; 0x04
    21f0:	82 30       	cpi	r24, 0x02	; 2
    21f2:	91 05       	cpc	r25, r1
    21f4:	31 f0       	breq	.+12     	; 0x2202 <MCAL_EXT_INT_2_init+0x32>
    21f6:	2b 81       	ldd	r18, Y+3	; 0x03
    21f8:	3c 81       	ldd	r19, Y+4	; 0x04
    21fa:	23 30       	cpi	r18, 0x03	; 3
    21fc:	31 05       	cpc	r19, r1
    21fe:	61 f0       	breq	.+24     	; 0x2218 <MCAL_EXT_INT_2_init+0x48>
    2200:	15 c0       	rjmp	.+42     	; 0x222c <MCAL_EXT_INT_2_init+0x5c>
		{
		/* Falling edge trigger */
		case falling_edge_sense:
			MCUCSR &= ~(1<<ISC2);
    2202:	a4 e5       	ldi	r26, 0x54	; 84
    2204:	b0 e0       	ldi	r27, 0x00	; 0
    2206:	e4 e5       	ldi	r30, 0x54	; 84
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	80 81       	ld	r24, Z
    220c:	91 81       	ldd	r25, Z+1	; 0x01
    220e:	8f 7b       	andi	r24, 0xBF	; 191
    2210:	11 96       	adiw	r26, 0x01	; 1
    2212:	9c 93       	st	X, r25
    2214:	8e 93       	st	-X, r24
    2216:	0a c0       	rjmp	.+20     	; 0x222c <MCAL_EXT_INT_2_init+0x5c>
			break;
			/* Rising edge */
		case rising_edge_sense:
			MCUCSR |= (1<<ISC2);
    2218:	a4 e5       	ldi	r26, 0x54	; 84
    221a:	b0 e0       	ldi	r27, 0x00	; 0
    221c:	e4 e5       	ldi	r30, 0x54	; 84
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	80 81       	ld	r24, Z
    2222:	91 81       	ldd	r25, Z+1	; 0x01
    2224:	80 64       	ori	r24, 0x40	; 64
    2226:	11 96       	adiw	r26, 0x01	; 1
    2228:	9c 93       	st	X, r25
    222a:	8e 93       	st	-X, r24
			break;
		default:
			break;
		}
		/* Enable the external interrupt2 */
		GICR |= (1<<INT2);
    222c:	ab e5       	ldi	r26, 0x5B	; 91
    222e:	b0 e0       	ldi	r27, 0x00	; 0
    2230:	eb e5       	ldi	r30, 0x5B	; 91
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	80 81       	ld	r24, Z
    2236:	91 81       	ldd	r25, Z+1	; 0x01
    2238:	80 62       	ori	r24, 0x20	; 32
    223a:	11 96       	adiw	r26, 0x01	; 1
    223c:	9c 93       	st	X, r25
    223e:	8e 93       	st	-X, r24
	}
	return error;
    2240:	89 81       	ldd	r24, Y+1	; 0x01

}
    2242:	0f 90       	pop	r0
    2244:	0f 90       	pop	r0
    2246:	0f 90       	pop	r0
    2248:	0f 90       	pop	r0
    224a:	cf 91       	pop	r28
    224c:	df 91       	pop	r29
    224e:	08 95       	ret

00002250 <MCAL_Ext_INT_setCallBack>:


E_Error_state MCAL_Ext_INT_setCallBack(void(* ptr_to_ISR_ExT_INT)(void),ext_int interrupt)
{
    2250:	df 93       	push	r29
    2252:	cf 93       	push	r28
    2254:	00 d0       	rcall	.+0      	; 0x2256 <MCAL_Ext_INT_setCallBack+0x6>
    2256:	00 d0       	rcall	.+0      	; 0x2258 <MCAL_Ext_INT_setCallBack+0x8>
    2258:	00 d0       	rcall	.+0      	; 0x225a <MCAL_Ext_INT_setCallBack+0xa>
    225a:	cd b7       	in	r28, 0x3d	; 61
    225c:	de b7       	in	r29, 0x3e	; 62
    225e:	9b 83       	std	Y+3, r25	; 0x03
    2260:	8a 83       	std	Y+2, r24	; 0x02
    2262:	6c 83       	std	Y+4, r22	; 0x04
	E_Error_state error=OK;
    2264:	19 82       	std	Y+1, r1	; 0x01
			error =NOT_OK;
		}
		else
		{

	switch (interrupt)
    2266:	8c 81       	ldd	r24, Y+4	; 0x04
    2268:	28 2f       	mov	r18, r24
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	3e 83       	std	Y+6, r19	; 0x06
    226e:	2d 83       	std	Y+5, r18	; 0x05
    2270:	8d 81       	ldd	r24, Y+5	; 0x05
    2272:	9e 81       	ldd	r25, Y+6	; 0x06
    2274:	81 30       	cpi	r24, 0x01	; 1
    2276:	91 05       	cpc	r25, r1
    2278:	a1 f0       	breq	.+40     	; 0x22a2 <MCAL_Ext_INT_setCallBack+0x52>
    227a:	2d 81       	ldd	r18, Y+5	; 0x05
    227c:	3e 81       	ldd	r19, Y+6	; 0x06
    227e:	22 30       	cpi	r18, 0x02	; 2
    2280:	31 05       	cpc	r19, r1
    2282:	d1 f0       	breq	.+52     	; 0x22b8 <MCAL_Ext_INT_setCallBack+0x68>
    2284:	8d 81       	ldd	r24, Y+5	; 0x05
    2286:	9e 81       	ldd	r25, Y+6	; 0x06
    2288:	00 97       	sbiw	r24, 0x00	; 0
    228a:	01 f5       	brne	.+64     	; 0x22cc <MCAL_Ext_INT_setCallBack+0x7c>
	{
	case ext_int_0:
		if ((ptr_to_ISR_ExT_INT) != NULL)
    228c:	8a 81       	ldd	r24, Y+2	; 0x02
    228e:	9b 81       	ldd	r25, Y+3	; 0x03
    2290:	00 97       	sbiw	r24, 0x00	; 0
    2292:	e1 f0       	breq	.+56     	; 0x22cc <MCAL_Ext_INT_setCallBack+0x7c>
		{
			ptr2fun_ext_int_0 = ptr_to_ISR_ExT_INT;
    2294:	8a 81       	ldd	r24, Y+2	; 0x02
    2296:	9b 81       	ldd	r25, Y+3	; 0x03
    2298:	90 93 d1 01 	sts	0x01D1, r25
    229c:	80 93 d0 01 	sts	0x01D0, r24
    22a0:	15 c0       	rjmp	.+42     	; 0x22cc <MCAL_Ext_INT_setCallBack+0x7c>
		}
		break;
	case ext_int_1:
		if( (ptr_to_ISR_ExT_INT) != NULL)
    22a2:	8a 81       	ldd	r24, Y+2	; 0x02
    22a4:	9b 81       	ldd	r25, Y+3	; 0x03
    22a6:	00 97       	sbiw	r24, 0x00	; 0
    22a8:	89 f0       	breq	.+34     	; 0x22cc <MCAL_Ext_INT_setCallBack+0x7c>
		{
			ptr2fun_ext_int_1 = ptr_to_ISR_ExT_INT;
    22aa:	8a 81       	ldd	r24, Y+2	; 0x02
    22ac:	9b 81       	ldd	r25, Y+3	; 0x03
    22ae:	90 93 d3 01 	sts	0x01D3, r25
    22b2:	80 93 d2 01 	sts	0x01D2, r24
    22b6:	0a c0       	rjmp	.+20     	; 0x22cc <MCAL_Ext_INT_setCallBack+0x7c>
		}
		break;
	case ext_int_2:
		if( (ptr_to_ISR_ExT_INT) != NULL)
    22b8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ba:	9b 81       	ldd	r25, Y+3	; 0x03
    22bc:	00 97       	sbiw	r24, 0x00	; 0
    22be:	31 f0       	breq	.+12     	; 0x22cc <MCAL_Ext_INT_setCallBack+0x7c>
		{
			ptr2fun_ext_int_2 = ptr_to_ISR_ExT_INT;
    22c0:	8a 81       	ldd	r24, Y+2	; 0x02
    22c2:	9b 81       	ldd	r25, Y+3	; 0x03
    22c4:	90 93 d5 01 	sts	0x01D5, r25
    22c8:	80 93 d4 01 	sts	0x01D4, r24
	default:
		break;

	}
		}
	return error;
    22cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    22ce:	26 96       	adiw	r28, 0x06	; 6
    22d0:	0f b6       	in	r0, 0x3f	; 63
    22d2:	f8 94       	cli
    22d4:	de bf       	out	0x3e, r29	; 62
    22d6:	0f be       	out	0x3f, r0	; 63
    22d8:	cd bf       	out	0x3d, r28	; 61
    22da:	cf 91       	pop	r28
    22dc:	df 91       	pop	r29
    22de:	08 95       	ret

000022e0 <__vector_1>:


ISR(EXT_INT_0)
{
    22e0:	1f 92       	push	r1
    22e2:	0f 92       	push	r0
    22e4:	0f b6       	in	r0, 0x3f	; 63
    22e6:	0f 92       	push	r0
    22e8:	11 24       	eor	r1, r1
    22ea:	2f 93       	push	r18
    22ec:	3f 93       	push	r19
    22ee:	4f 93       	push	r20
    22f0:	5f 93       	push	r21
    22f2:	6f 93       	push	r22
    22f4:	7f 93       	push	r23
    22f6:	8f 93       	push	r24
    22f8:	9f 93       	push	r25
    22fa:	af 93       	push	r26
    22fc:	bf 93       	push	r27
    22fe:	ef 93       	push	r30
    2300:	ff 93       	push	r31
    2302:	df 93       	push	r29
    2304:	cf 93       	push	r28
    2306:	cd b7       	in	r28, 0x3d	; 61
    2308:	de b7       	in	r29, 0x3e	; 62
	if (ptr2fun_ext_int_0 != NULL)
    230a:	80 91 d0 01 	lds	r24, 0x01D0
    230e:	90 91 d1 01 	lds	r25, 0x01D1
    2312:	00 97       	sbiw	r24, 0x00	; 0
    2314:	29 f0       	breq	.+10     	; 0x2320 <__vector_1+0x40>
	{
		ptr2fun_ext_int_0();
    2316:	e0 91 d0 01 	lds	r30, 0x01D0
    231a:	f0 91 d1 01 	lds	r31, 0x01D1
    231e:	09 95       	icall
	}
}
    2320:	cf 91       	pop	r28
    2322:	df 91       	pop	r29
    2324:	ff 91       	pop	r31
    2326:	ef 91       	pop	r30
    2328:	bf 91       	pop	r27
    232a:	af 91       	pop	r26
    232c:	9f 91       	pop	r25
    232e:	8f 91       	pop	r24
    2330:	7f 91       	pop	r23
    2332:	6f 91       	pop	r22
    2334:	5f 91       	pop	r21
    2336:	4f 91       	pop	r20
    2338:	3f 91       	pop	r19
    233a:	2f 91       	pop	r18
    233c:	0f 90       	pop	r0
    233e:	0f be       	out	0x3f, r0	; 63
    2340:	0f 90       	pop	r0
    2342:	1f 90       	pop	r1
    2344:	18 95       	reti

00002346 <__vector_2>:



ISR(EXT_INT_1)
{
    2346:	1f 92       	push	r1
    2348:	0f 92       	push	r0
    234a:	0f b6       	in	r0, 0x3f	; 63
    234c:	0f 92       	push	r0
    234e:	11 24       	eor	r1, r1
    2350:	2f 93       	push	r18
    2352:	3f 93       	push	r19
    2354:	4f 93       	push	r20
    2356:	5f 93       	push	r21
    2358:	6f 93       	push	r22
    235a:	7f 93       	push	r23
    235c:	8f 93       	push	r24
    235e:	9f 93       	push	r25
    2360:	af 93       	push	r26
    2362:	bf 93       	push	r27
    2364:	ef 93       	push	r30
    2366:	ff 93       	push	r31
    2368:	df 93       	push	r29
    236a:	cf 93       	push	r28
    236c:	cd b7       	in	r28, 0x3d	; 61
    236e:	de b7       	in	r29, 0x3e	; 62
	if (ptr2fun_ext_int_1 != NULL)
    2370:	80 91 d2 01 	lds	r24, 0x01D2
    2374:	90 91 d3 01 	lds	r25, 0x01D3
    2378:	00 97       	sbiw	r24, 0x00	; 0
    237a:	29 f0       	breq	.+10     	; 0x2386 <__vector_2+0x40>
	{
		ptr2fun_ext_int_1();
    237c:	e0 91 d2 01 	lds	r30, 0x01D2
    2380:	f0 91 d3 01 	lds	r31, 0x01D3
    2384:	09 95       	icall
	}
}
    2386:	cf 91       	pop	r28
    2388:	df 91       	pop	r29
    238a:	ff 91       	pop	r31
    238c:	ef 91       	pop	r30
    238e:	bf 91       	pop	r27
    2390:	af 91       	pop	r26
    2392:	9f 91       	pop	r25
    2394:	8f 91       	pop	r24
    2396:	7f 91       	pop	r23
    2398:	6f 91       	pop	r22
    239a:	5f 91       	pop	r21
    239c:	4f 91       	pop	r20
    239e:	3f 91       	pop	r19
    23a0:	2f 91       	pop	r18
    23a2:	0f 90       	pop	r0
    23a4:	0f be       	out	0x3f, r0	; 63
    23a6:	0f 90       	pop	r0
    23a8:	1f 90       	pop	r1
    23aa:	18 95       	reti

000023ac <__vector_3>:



ISR(EXT_INT_2)
{
    23ac:	1f 92       	push	r1
    23ae:	0f 92       	push	r0
    23b0:	0f b6       	in	r0, 0x3f	; 63
    23b2:	0f 92       	push	r0
    23b4:	11 24       	eor	r1, r1
    23b6:	2f 93       	push	r18
    23b8:	3f 93       	push	r19
    23ba:	4f 93       	push	r20
    23bc:	5f 93       	push	r21
    23be:	6f 93       	push	r22
    23c0:	7f 93       	push	r23
    23c2:	8f 93       	push	r24
    23c4:	9f 93       	push	r25
    23c6:	af 93       	push	r26
    23c8:	bf 93       	push	r27
    23ca:	ef 93       	push	r30
    23cc:	ff 93       	push	r31
    23ce:	df 93       	push	r29
    23d0:	cf 93       	push	r28
    23d2:	cd b7       	in	r28, 0x3d	; 61
    23d4:	de b7       	in	r29, 0x3e	; 62
	if (ptr2fun_ext_int_2 != NULL)
    23d6:	80 91 d4 01 	lds	r24, 0x01D4
    23da:	90 91 d5 01 	lds	r25, 0x01D5
    23de:	00 97       	sbiw	r24, 0x00	; 0
    23e0:	29 f0       	breq	.+10     	; 0x23ec <__vector_3+0x40>
	{
		ptr2fun_ext_int_2();
    23e2:	e0 91 d4 01 	lds	r30, 0x01D4
    23e6:	f0 91 d5 01 	lds	r31, 0x01D5
    23ea:	09 95       	icall
	}
}
    23ec:	cf 91       	pop	r28
    23ee:	df 91       	pop	r29
    23f0:	ff 91       	pop	r31
    23f2:	ef 91       	pop	r30
    23f4:	bf 91       	pop	r27
    23f6:	af 91       	pop	r26
    23f8:	9f 91       	pop	r25
    23fa:	8f 91       	pop	r24
    23fc:	7f 91       	pop	r23
    23fe:	6f 91       	pop	r22
    2400:	5f 91       	pop	r21
    2402:	4f 91       	pop	r20
    2404:	3f 91       	pop	r19
    2406:	2f 91       	pop	r18
    2408:	0f 90       	pop	r0
    240a:	0f be       	out	0x3f, r0	; 63
    240c:	0f 90       	pop	r0
    240e:	1f 90       	pop	r1
    2410:	18 95       	reti

00002412 <EEPROM_writeByte>:

#include "external_eeprom.h"
#include "twi.h"

uint8_t EEPROM_writeByte(uint16_t u16addr, uint8_t u8data)
{
    2412:	df 93       	push	r29
    2414:	cf 93       	push	r28
    2416:	00 d0       	rcall	.+0      	; 0x2418 <EEPROM_writeByte+0x6>
    2418:	00 d0       	rcall	.+0      	; 0x241a <EEPROM_writeByte+0x8>
    241a:	cd b7       	in	r28, 0x3d	; 61
    241c:	de b7       	in	r29, 0x3e	; 62
    241e:	9a 83       	std	Y+2, r25	; 0x02
    2420:	89 83       	std	Y+1, r24	; 0x01
    2422:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    2424:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <TWI_start>
    if (TWI_getStatus() != TWI_START)
    2428:	0e 94 0f 10 	call	0x201e	; 0x201e <TWI_getStatus>
    242c:	88 30       	cpi	r24, 0x08	; 8
    242e:	11 f0       	breq	.+4      	; 0x2434 <EEPROM_writeByte+0x22>
        return ERROR;
    2430:	1c 82       	std	Y+4, r1	; 0x04
    2432:	28 c0       	rjmp	.+80     	; 0x2484 <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8_t)(0xA0 | ((u16addr & 0x0700)>>7)));
    2434:	89 81       	ldd	r24, Y+1	; 0x01
    2436:	9a 81       	ldd	r25, Y+2	; 0x02
    2438:	80 70       	andi	r24, 0x00	; 0
    243a:	97 70       	andi	r25, 0x07	; 7
    243c:	88 0f       	add	r24, r24
    243e:	89 2f       	mov	r24, r25
    2440:	88 1f       	adc	r24, r24
    2442:	99 0b       	sbc	r25, r25
    2444:	91 95       	neg	r25
    2446:	80 6a       	ori	r24, 0xA0	; 160
    2448:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    244c:	0e 94 0f 10 	call	0x201e	; 0x201e <TWI_getStatus>
    2450:	88 31       	cpi	r24, 0x18	; 24
    2452:	11 f0       	breq	.+4      	; 0x2458 <EEPROM_writeByte+0x46>
        return ERROR;
    2454:	1c 82       	std	Y+4, r1	; 0x04
    2456:	16 c0       	rjmp	.+44     	; 0x2484 <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_writeByte((uint8_t)(u16addr));
    2458:	89 81       	ldd	r24, Y+1	; 0x01
    245a:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    245e:	0e 94 0f 10 	call	0x201e	; 0x201e <TWI_getStatus>
    2462:	88 32       	cpi	r24, 0x28	; 40
    2464:	11 f0       	breq	.+4      	; 0x246a <EEPROM_writeByte+0x58>
        return ERROR;
    2466:	1c 82       	std	Y+4, r1	; 0x04
    2468:	0d c0       	rjmp	.+26     	; 0x2484 <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_writeByte(u8data);
    246a:	8b 81       	ldd	r24, Y+3	; 0x03
    246c:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2470:	0e 94 0f 10 	call	0x201e	; 0x201e <TWI_getStatus>
    2474:	88 32       	cpi	r24, 0x28	; 40
    2476:	11 f0       	breq	.+4      	; 0x247c <EEPROM_writeByte+0x6a>
        return ERROR;
    2478:	1c 82       	std	Y+4, r1	; 0x04
    247a:	04 c0       	rjmp	.+8      	; 0x2484 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    247c:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <TWI_stop>

    return SUCCESS;
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	8c 83       	std	Y+4, r24	; 0x04
    2484:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2486:	0f 90       	pop	r0
    2488:	0f 90       	pop	r0
    248a:	0f 90       	pop	r0
    248c:	0f 90       	pop	r0
    248e:	cf 91       	pop	r28
    2490:	df 91       	pop	r29
    2492:	08 95       	ret

00002494 <EEPROM_readByte>:

uint8_t EEPROM_readByte(uint16_t u16addr, uint8_t *u8data)
{
    2494:	df 93       	push	r29
    2496:	cf 93       	push	r28
    2498:	00 d0       	rcall	.+0      	; 0x249a <EEPROM_readByte+0x6>
    249a:	00 d0       	rcall	.+0      	; 0x249c <EEPROM_readByte+0x8>
    249c:	0f 92       	push	r0
    249e:	cd b7       	in	r28, 0x3d	; 61
    24a0:	de b7       	in	r29, 0x3e	; 62
    24a2:	9a 83       	std	Y+2, r25	; 0x02
    24a4:	89 83       	std	Y+1, r24	; 0x01
    24a6:	7c 83       	std	Y+4, r23	; 0x04
    24a8:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    24aa:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <TWI_start>
    if (TWI_getStatus() != TWI_START)
    24ae:	0e 94 0f 10 	call	0x201e	; 0x201e <TWI_getStatus>
    24b2:	88 30       	cpi	r24, 0x08	; 8
    24b4:	11 f0       	breq	.+4      	; 0x24ba <EEPROM_readByte+0x26>
        return ERROR;
    24b6:	1d 82       	std	Y+5, r1	; 0x05
    24b8:	44 c0       	rjmp	.+136    	; 0x2542 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8_t)((0xA0) | ((u16addr & 0x0700)>>7)));
    24ba:	89 81       	ldd	r24, Y+1	; 0x01
    24bc:	9a 81       	ldd	r25, Y+2	; 0x02
    24be:	80 70       	andi	r24, 0x00	; 0
    24c0:	97 70       	andi	r25, 0x07	; 7
    24c2:	88 0f       	add	r24, r24
    24c4:	89 2f       	mov	r24, r25
    24c6:	88 1f       	adc	r24, r24
    24c8:	99 0b       	sbc	r25, r25
    24ca:	91 95       	neg	r25
    24cc:	80 6a       	ori	r24, 0xA0	; 160
    24ce:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    24d2:	0e 94 0f 10 	call	0x201e	; 0x201e <TWI_getStatus>
    24d6:	88 31       	cpi	r24, 0x18	; 24
    24d8:	11 f0       	breq	.+4      	; 0x24de <EEPROM_readByte+0x4a>
        return ERROR;
    24da:	1d 82       	std	Y+5, r1	; 0x05
    24dc:	32 c0       	rjmp	.+100    	; 0x2542 <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_writeByte((uint8_t)(u16addr));
    24de:	89 81       	ldd	r24, Y+1	; 0x01
    24e0:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    24e4:	0e 94 0f 10 	call	0x201e	; 0x201e <TWI_getStatus>
    24e8:	88 32       	cpi	r24, 0x28	; 40
    24ea:	11 f0       	breq	.+4      	; 0x24f0 <EEPROM_readByte+0x5c>
        return ERROR;
    24ec:	1d 82       	std	Y+5, r1	; 0x05
    24ee:	29 c0       	rjmp	.+82     	; 0x2542 <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
    24f0:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    24f4:	0e 94 0f 10 	call	0x201e	; 0x201e <TWI_getStatus>
    24f8:	80 31       	cpi	r24, 0x10	; 16
    24fa:	11 f0       	breq	.+4      	; 0x2500 <EEPROM_readByte+0x6c>
        return ERROR;
    24fc:	1d 82       	std	Y+5, r1	; 0x05
    24fe:	21 c0       	rjmp	.+66     	; 0x2542 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8_t)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    2500:	89 81       	ldd	r24, Y+1	; 0x01
    2502:	9a 81       	ldd	r25, Y+2	; 0x02
    2504:	80 70       	andi	r24, 0x00	; 0
    2506:	97 70       	andi	r25, 0x07	; 7
    2508:	88 0f       	add	r24, r24
    250a:	89 2f       	mov	r24, r25
    250c:	88 1f       	adc	r24, r24
    250e:	99 0b       	sbc	r25, r25
    2510:	91 95       	neg	r25
    2512:	81 6a       	ori	r24, 0xA1	; 161
    2514:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    2518:	0e 94 0f 10 	call	0x201e	; 0x201e <TWI_getStatus>
    251c:	80 34       	cpi	r24, 0x40	; 64
    251e:	11 f0       	breq	.+4      	; 0x2524 <EEPROM_readByte+0x90>
        return ERROR;
    2520:	1d 82       	std	Y+5, r1	; 0x05
    2522:	0f c0       	rjmp	.+30     	; 0x2542 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    2524:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <TWI_readByteWithNACK>
    2528:	eb 81       	ldd	r30, Y+3	; 0x03
    252a:	fc 81       	ldd	r31, Y+4	; 0x04
    252c:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    252e:	0e 94 0f 10 	call	0x201e	; 0x201e <TWI_getStatus>
    2532:	88 35       	cpi	r24, 0x58	; 88
    2534:	11 f0       	breq	.+4      	; 0x253a <EEPROM_readByte+0xa6>
        return ERROR;
    2536:	1d 82       	std	Y+5, r1	; 0x05
    2538:	04 c0       	rjmp	.+8      	; 0x2542 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    253a:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <TWI_stop>

    return SUCCESS;
    253e:	81 e0       	ldi	r24, 0x01	; 1
    2540:	8d 83       	std	Y+5, r24	; 0x05
    2542:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2544:	0f 90       	pop	r0
    2546:	0f 90       	pop	r0
    2548:	0f 90       	pop	r0
    254a:	0f 90       	pop	r0
    254c:	0f 90       	pop	r0
    254e:	cf 91       	pop	r28
    2550:	df 91       	pop	r29
    2552:	08 95       	ret

00002554 <MCAL_Dio_Init>:
#include "DIO_interface.h"
#include "DIO_Types.h"


E_ErrorType MCAL_Dio_Init(S_Dio *Dio_Config)
{
    2554:	df 93       	push	r29
    2556:	cf 93       	push	r28
    2558:	cd b7       	in	r28, 0x3d	; 61
    255a:	de b7       	in	r29, 0x3e	; 62
    255c:	27 97       	sbiw	r28, 0x07	; 7
    255e:	0f b6       	in	r0, 0x3f	; 63
    2560:	f8 94       	cli
    2562:	de bf       	out	0x3e, r29	; 62
    2564:	0f be       	out	0x3f, r0	; 63
    2566:	cd bf       	out	0x3d, r28	; 61
    2568:	9d 83       	std	Y+5, r25	; 0x05
    256a:	8c 83       	std	Y+4, r24	; 0x04
	E_ErrorType error = E_OK;
    256c:	1b 82       	std	Y+3, r1	; 0x03

	if(DIO_STATUS_ERROR == E_NOT_OK)
	{
		error = E_NOT_OK;
	}
	else if(Dio_Config->port_num >= DIO_CONFIGURED_PORTS)
    256e:	ec 81       	ldd	r30, Y+4	; 0x04
    2570:	fd 81       	ldd	r31, Y+5	; 0x05
    2572:	80 81       	ld	r24, Z
    2574:	84 30       	cpi	r24, 0x04	; 4
    2576:	18 f0       	brcs	.+6      	; 0x257e <MCAL_Dio_Init+0x2a>
	{

		error = E_NOT_OK;
    2578:	81 e0       	ldi	r24, 0x01	; 1
    257a:	8b 83       	std	Y+3, r24	; 0x03
    257c:	6c c0       	rjmp	.+216    	; 0x2656 <MCAL_Dio_Init+0x102>
	}
	else
	{

		Mask2 = ((Dio_Config->pin_num) & (Dio_Config->Direction));
    257e:	ec 81       	ldd	r30, Y+4	; 0x04
    2580:	fd 81       	ldd	r31, Y+5	; 0x05
    2582:	91 81       	ldd	r25, Z+1	; 0x01
    2584:	ec 81       	ldd	r30, Y+4	; 0x04
    2586:	fd 81       	ldd	r31, Y+5	; 0x05
    2588:	82 81       	ldd	r24, Z+2	; 0x02
    258a:	89 23       	and	r24, r25
    258c:	89 83       	std	Y+1, r24	; 0x01
		switch(Dio_Config->port_num)
    258e:	ec 81       	ldd	r30, Y+4	; 0x04
    2590:	fd 81       	ldd	r31, Y+5	; 0x05
    2592:	80 81       	ld	r24, Z
    2594:	28 2f       	mov	r18, r24
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	3f 83       	std	Y+7, r19	; 0x07
    259a:	2e 83       	std	Y+6, r18	; 0x06
    259c:	8e 81       	ldd	r24, Y+6	; 0x06
    259e:	9f 81       	ldd	r25, Y+7	; 0x07
    25a0:	81 30       	cpi	r24, 0x01	; 1
    25a2:	91 05       	cpc	r25, r1
    25a4:	31 f1       	breq	.+76     	; 0x25f2 <MCAL_Dio_Init+0x9e>
    25a6:	2e 81       	ldd	r18, Y+6	; 0x06
    25a8:	3f 81       	ldd	r19, Y+7	; 0x07
    25aa:	22 30       	cpi	r18, 0x02	; 2
    25ac:	31 05       	cpc	r19, r1
    25ae:	2c f4       	brge	.+10     	; 0x25ba <MCAL_Dio_Init+0x66>
    25b0:	8e 81       	ldd	r24, Y+6	; 0x06
    25b2:	9f 81       	ldd	r25, Y+7	; 0x07
    25b4:	00 97       	sbiw	r24, 0x00	; 0
    25b6:	61 f0       	breq	.+24     	; 0x25d0 <MCAL_Dio_Init+0x7c>
    25b8:	4e c0       	rjmp	.+156    	; 0x2656 <MCAL_Dio_Init+0x102>
    25ba:	2e 81       	ldd	r18, Y+6	; 0x06
    25bc:	3f 81       	ldd	r19, Y+7	; 0x07
    25be:	22 30       	cpi	r18, 0x02	; 2
    25c0:	31 05       	cpc	r19, r1
    25c2:	41 f1       	breq	.+80     	; 0x2614 <MCAL_Dio_Init+0xc0>
    25c4:	8e 81       	ldd	r24, Y+6	; 0x06
    25c6:	9f 81       	ldd	r25, Y+7	; 0x07
    25c8:	83 30       	cpi	r24, 0x03	; 3
    25ca:	91 05       	cpc	r25, r1
    25cc:	a1 f1       	breq	.+104    	; 0x2636 <MCAL_Dio_Init+0xe2>
    25ce:	43 c0       	rjmp	.+134    	; 0x2656 <MCAL_Dio_Init+0x102>
		{
		case PORTA_ID:
			Mask1 = ((DIO_DDRA) & (~(Dio_Config->pin_num)));
    25d0:	ea e3       	ldi	r30, 0x3A	; 58
    25d2:	f0 e0       	ldi	r31, 0x00	; 0
    25d4:	80 81       	ld	r24, Z
    25d6:	98 2f       	mov	r25, r24
    25d8:	ec 81       	ldd	r30, Y+4	; 0x04
    25da:	fd 81       	ldd	r31, Y+5	; 0x05
    25dc:	81 81       	ldd	r24, Z+1	; 0x01
    25de:	80 95       	com	r24
    25e0:	89 23       	and	r24, r25
    25e2:	8a 83       	std	Y+2, r24	; 0x02
			DIO_DDRA = Mask1 | Mask2;
    25e4:	ea e3       	ldi	r30, 0x3A	; 58
    25e6:	f0 e0       	ldi	r31, 0x00	; 0
    25e8:	9a 81       	ldd	r25, Y+2	; 0x02
    25ea:	89 81       	ldd	r24, Y+1	; 0x01
    25ec:	89 2b       	or	r24, r25
    25ee:	80 83       	st	Z, r24
    25f0:	32 c0       	rjmp	.+100    	; 0x2656 <MCAL_Dio_Init+0x102>
			break;
		case PORTB_ID:
			Mask1 = ((DIO_DDRB) & (~(Dio_Config->pin_num)));
    25f2:	e7 e3       	ldi	r30, 0x37	; 55
    25f4:	f0 e0       	ldi	r31, 0x00	; 0
    25f6:	80 81       	ld	r24, Z
    25f8:	98 2f       	mov	r25, r24
    25fa:	ec 81       	ldd	r30, Y+4	; 0x04
    25fc:	fd 81       	ldd	r31, Y+5	; 0x05
    25fe:	81 81       	ldd	r24, Z+1	; 0x01
    2600:	80 95       	com	r24
    2602:	89 23       	and	r24, r25
    2604:	8a 83       	std	Y+2, r24	; 0x02
			DIO_DDRB = Mask1 | Mask2;
    2606:	e7 e3       	ldi	r30, 0x37	; 55
    2608:	f0 e0       	ldi	r31, 0x00	; 0
    260a:	9a 81       	ldd	r25, Y+2	; 0x02
    260c:	89 81       	ldd	r24, Y+1	; 0x01
    260e:	89 2b       	or	r24, r25
    2610:	80 83       	st	Z, r24
    2612:	21 c0       	rjmp	.+66     	; 0x2656 <MCAL_Dio_Init+0x102>
			break;
		case PORTC_ID:
			Mask1 = ((DIO_DDRC) & (~(Dio_Config->pin_num)));
    2614:	e4 e3       	ldi	r30, 0x34	; 52
    2616:	f0 e0       	ldi	r31, 0x00	; 0
    2618:	80 81       	ld	r24, Z
    261a:	98 2f       	mov	r25, r24
    261c:	ec 81       	ldd	r30, Y+4	; 0x04
    261e:	fd 81       	ldd	r31, Y+5	; 0x05
    2620:	81 81       	ldd	r24, Z+1	; 0x01
    2622:	80 95       	com	r24
    2624:	89 23       	and	r24, r25
    2626:	8a 83       	std	Y+2, r24	; 0x02
			DIO_DDRC = Mask1 | Mask2;
    2628:	e4 e3       	ldi	r30, 0x34	; 52
    262a:	f0 e0       	ldi	r31, 0x00	; 0
    262c:	9a 81       	ldd	r25, Y+2	; 0x02
    262e:	89 81       	ldd	r24, Y+1	; 0x01
    2630:	89 2b       	or	r24, r25
    2632:	80 83       	st	Z, r24
    2634:	10 c0       	rjmp	.+32     	; 0x2656 <MCAL_Dio_Init+0x102>
			break;
		case PORTD_ID:
			Mask1 = ((DIO_DDRD) & (~(Dio_Config->pin_num)));
    2636:	e1 e3       	ldi	r30, 0x31	; 49
    2638:	f0 e0       	ldi	r31, 0x00	; 0
    263a:	80 81       	ld	r24, Z
    263c:	98 2f       	mov	r25, r24
    263e:	ec 81       	ldd	r30, Y+4	; 0x04
    2640:	fd 81       	ldd	r31, Y+5	; 0x05
    2642:	81 81       	ldd	r24, Z+1	; 0x01
    2644:	80 95       	com	r24
    2646:	89 23       	and	r24, r25
    2648:	8a 83       	std	Y+2, r24	; 0x02
			DIO_DDRD = Mask1 | Mask2;
    264a:	e1 e3       	ldi	r30, 0x31	; 49
    264c:	f0 e0       	ldi	r31, 0x00	; 0
    264e:	9a 81       	ldd	r25, Y+2	; 0x02
    2650:	89 81       	ldd	r24, Y+1	; 0x01
    2652:	89 2b       	or	r24, r25
    2654:	80 83       	st	Z, r24
			break;

		}
	}

	return error;
    2656:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2658:	27 96       	adiw	r28, 0x07	; 7
    265a:	0f b6       	in	r0, 0x3f	; 63
    265c:	f8 94       	cli
    265e:	de bf       	out	0x3e, r29	; 62
    2660:	0f be       	out	0x3f, r0	; 63
    2662:	cd bf       	out	0x3d, r28	; 61
    2664:	cf 91       	pop	r28
    2666:	df 91       	pop	r29
    2668:	08 95       	ret

0000266a <MCAL_Dio_SetPortDirection>:

E_ErrorType MCAL_Dio_SetPortDirection(S_Dio *Dio_ConfigPort)
{
    266a:	df 93       	push	r29
    266c:	cf 93       	push	r28
    266e:	00 d0       	rcall	.+0      	; 0x2670 <MCAL_Dio_SetPortDirection+0x6>
    2670:	00 d0       	rcall	.+0      	; 0x2672 <MCAL_Dio_SetPortDirection+0x8>
    2672:	0f 92       	push	r0
    2674:	cd b7       	in	r28, 0x3d	; 61
    2676:	de b7       	in	r29, 0x3e	; 62
    2678:	9b 83       	std	Y+3, r25	; 0x03
    267a:	8a 83       	std	Y+2, r24	; 0x02
	E_ErrorType error = E_OK;
    267c:	19 82       	std	Y+1, r1	; 0x01

	if(DIO_STATUS_ERROR == E_NOT_OK)
	{
		error = E_NOT_OK;
	}
	else if(Dio_ConfigPort->port_num >= DIO_CONFIGURED_PORTS)
    267e:	ea 81       	ldd	r30, Y+2	; 0x02
    2680:	fb 81       	ldd	r31, Y+3	; 0x03
    2682:	80 81       	ld	r24, Z
    2684:	84 30       	cpi	r24, 0x04	; 4
    2686:	18 f0       	brcs	.+6      	; 0x268e <MCAL_Dio_SetPortDirection+0x24>
	{

		error = E_NOT_OK;
    2688:	81 e0       	ldi	r24, 0x01	; 1
    268a:	89 83       	std	Y+1, r24	; 0x01
    268c:	44 c0       	rjmp	.+136    	; 0x2716 <MCAL_Dio_SetPortDirection+0xac>
	}
	else
	{
		switch(Dio_ConfigPort->port_num)
    268e:	ea 81       	ldd	r30, Y+2	; 0x02
    2690:	fb 81       	ldd	r31, Y+3	; 0x03
    2692:	80 81       	ld	r24, Z
    2694:	28 2f       	mov	r18, r24
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	3d 83       	std	Y+5, r19	; 0x05
    269a:	2c 83       	std	Y+4, r18	; 0x04
    269c:	8c 81       	ldd	r24, Y+4	; 0x04
    269e:	9d 81       	ldd	r25, Y+5	; 0x05
    26a0:	81 30       	cpi	r24, 0x01	; 1
    26a2:	91 05       	cpc	r25, r1
    26a4:	f1 f0       	breq	.+60     	; 0x26e2 <MCAL_Dio_SetPortDirection+0x78>
    26a6:	2c 81       	ldd	r18, Y+4	; 0x04
    26a8:	3d 81       	ldd	r19, Y+5	; 0x05
    26aa:	22 30       	cpi	r18, 0x02	; 2
    26ac:	31 05       	cpc	r19, r1
    26ae:	2c f4       	brge	.+10     	; 0x26ba <MCAL_Dio_SetPortDirection+0x50>
    26b0:	8c 81       	ldd	r24, Y+4	; 0x04
    26b2:	9d 81       	ldd	r25, Y+5	; 0x05
    26b4:	00 97       	sbiw	r24, 0x00	; 0
    26b6:	61 f0       	breq	.+24     	; 0x26d0 <MCAL_Dio_SetPortDirection+0x66>
    26b8:	2e c0       	rjmp	.+92     	; 0x2716 <MCAL_Dio_SetPortDirection+0xac>
    26ba:	2c 81       	ldd	r18, Y+4	; 0x04
    26bc:	3d 81       	ldd	r19, Y+5	; 0x05
    26be:	22 30       	cpi	r18, 0x02	; 2
    26c0:	31 05       	cpc	r19, r1
    26c2:	c1 f0       	breq	.+48     	; 0x26f4 <MCAL_Dio_SetPortDirection+0x8a>
    26c4:	8c 81       	ldd	r24, Y+4	; 0x04
    26c6:	9d 81       	ldd	r25, Y+5	; 0x05
    26c8:	83 30       	cpi	r24, 0x03	; 3
    26ca:	91 05       	cpc	r25, r1
    26cc:	e1 f0       	breq	.+56     	; 0x2706 <MCAL_Dio_SetPortDirection+0x9c>
    26ce:	23 c0       	rjmp	.+70     	; 0x2716 <MCAL_Dio_SetPortDirection+0xac>
		{
		case PORTA_ID:
			DIO_DDRA = Dio_ConfigPort->Direction;
    26d0:	ea e3       	ldi	r30, 0x3A	; 58
    26d2:	f0 e0       	ldi	r31, 0x00	; 0
    26d4:	aa 81       	ldd	r26, Y+2	; 0x02
    26d6:	bb 81       	ldd	r27, Y+3	; 0x03
    26d8:	12 96       	adiw	r26, 0x02	; 2
    26da:	8c 91       	ld	r24, X
    26dc:	12 97       	sbiw	r26, 0x02	; 2
    26de:	80 83       	st	Z, r24
    26e0:	1a c0       	rjmp	.+52     	; 0x2716 <MCAL_Dio_SetPortDirection+0xac>
			break;
		case PORTB_ID:
			DIO_DDRB = Dio_ConfigPort->Direction;
    26e2:	e7 e3       	ldi	r30, 0x37	; 55
    26e4:	f0 e0       	ldi	r31, 0x00	; 0
    26e6:	aa 81       	ldd	r26, Y+2	; 0x02
    26e8:	bb 81       	ldd	r27, Y+3	; 0x03
    26ea:	12 96       	adiw	r26, 0x02	; 2
    26ec:	8c 91       	ld	r24, X
    26ee:	12 97       	sbiw	r26, 0x02	; 2
    26f0:	80 83       	st	Z, r24
    26f2:	11 c0       	rjmp	.+34     	; 0x2716 <MCAL_Dio_SetPortDirection+0xac>
			break;
		case PORTC_ID:

			DIO_DDRC = Dio_ConfigPort->Direction;
    26f4:	e4 e3       	ldi	r30, 0x34	; 52
    26f6:	f0 e0       	ldi	r31, 0x00	; 0
    26f8:	aa 81       	ldd	r26, Y+2	; 0x02
    26fa:	bb 81       	ldd	r27, Y+3	; 0x03
    26fc:	12 96       	adiw	r26, 0x02	; 2
    26fe:	8c 91       	ld	r24, X
    2700:	12 97       	sbiw	r26, 0x02	; 2
    2702:	80 83       	st	Z, r24
    2704:	08 c0       	rjmp	.+16     	; 0x2716 <MCAL_Dio_SetPortDirection+0xac>
			break;
		case PORTD_ID:
			DIO_DDRD = Dio_ConfigPort->Direction;
    2706:	e1 e3       	ldi	r30, 0x31	; 49
    2708:	f0 e0       	ldi	r31, 0x00	; 0
    270a:	aa 81       	ldd	r26, Y+2	; 0x02
    270c:	bb 81       	ldd	r27, Y+3	; 0x03
    270e:	12 96       	adiw	r26, 0x02	; 2
    2710:	8c 91       	ld	r24, X
    2712:	12 97       	sbiw	r26, 0x02	; 2
    2714:	80 83       	st	Z, r24
			break;

		}
	}

	return error;
    2716:	89 81       	ldd	r24, Y+1	; 0x01
}
    2718:	0f 90       	pop	r0
    271a:	0f 90       	pop	r0
    271c:	0f 90       	pop	r0
    271e:	0f 90       	pop	r0
    2720:	0f 90       	pop	r0
    2722:	cf 91       	pop	r28
    2724:	df 91       	pop	r29
    2726:	08 95       	ret

00002728 <MCAL_Dio_SetPinDirection>:

E_ErrorType MCAL_Dio_SetPinDirection(S_Dio *Dio_ConfigPin)
{
    2728:	df 93       	push	r29
    272a:	cf 93       	push	r28
    272c:	cd b7       	in	r28, 0x3d	; 61
    272e:	de b7       	in	r29, 0x3e	; 62
    2730:	27 97       	sbiw	r28, 0x07	; 7
    2732:	0f b6       	in	r0, 0x3f	; 63
    2734:	f8 94       	cli
    2736:	de bf       	out	0x3e, r29	; 62
    2738:	0f be       	out	0x3f, r0	; 63
    273a:	cd bf       	out	0x3d, r28	; 61
    273c:	9d 83       	std	Y+5, r25	; 0x05
    273e:	8c 83       	std	Y+4, r24	; 0x04
	E_ErrorType error = E_OK;
    2740:	1b 82       	std	Y+3, r1	; 0x03
	if(DIO_STATUS_ERROR == E_NOT_OK)
	{

		error = E_NOT_OK;
	}
	else if(Dio_ConfigPin->port_num >= DIO_CONFIGURED_PORTS)
    2742:	ec 81       	ldd	r30, Y+4	; 0x04
    2744:	fd 81       	ldd	r31, Y+5	; 0x05
    2746:	80 81       	ld	r24, Z
    2748:	84 30       	cpi	r24, 0x04	; 4
    274a:	18 f0       	brcs	.+6      	; 0x2752 <MCAL_Dio_SetPinDirection+0x2a>
	{

		error = E_NOT_OK;
    274c:	81 e0       	ldi	r24, 0x01	; 1
    274e:	8b 83       	std	Y+3, r24	; 0x03
    2750:	6c c0       	rjmp	.+216    	; 0x282a <MCAL_Dio_SetPinDirection+0x102>
	}
	else
	{
		Mask2 = ((Dio_ConfigPin->pin_num) & (Dio_ConfigPin->Direction));
    2752:	ec 81       	ldd	r30, Y+4	; 0x04
    2754:	fd 81       	ldd	r31, Y+5	; 0x05
    2756:	91 81       	ldd	r25, Z+1	; 0x01
    2758:	ec 81       	ldd	r30, Y+4	; 0x04
    275a:	fd 81       	ldd	r31, Y+5	; 0x05
    275c:	82 81       	ldd	r24, Z+2	; 0x02
    275e:	89 23       	and	r24, r25
    2760:	89 83       	std	Y+1, r24	; 0x01
		switch(Dio_ConfigPin->port_num)
    2762:	ec 81       	ldd	r30, Y+4	; 0x04
    2764:	fd 81       	ldd	r31, Y+5	; 0x05
    2766:	80 81       	ld	r24, Z
    2768:	28 2f       	mov	r18, r24
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	3f 83       	std	Y+7, r19	; 0x07
    276e:	2e 83       	std	Y+6, r18	; 0x06
    2770:	8e 81       	ldd	r24, Y+6	; 0x06
    2772:	9f 81       	ldd	r25, Y+7	; 0x07
    2774:	81 30       	cpi	r24, 0x01	; 1
    2776:	91 05       	cpc	r25, r1
    2778:	31 f1       	breq	.+76     	; 0x27c6 <MCAL_Dio_SetPinDirection+0x9e>
    277a:	2e 81       	ldd	r18, Y+6	; 0x06
    277c:	3f 81       	ldd	r19, Y+7	; 0x07
    277e:	22 30       	cpi	r18, 0x02	; 2
    2780:	31 05       	cpc	r19, r1
    2782:	2c f4       	brge	.+10     	; 0x278e <MCAL_Dio_SetPinDirection+0x66>
    2784:	8e 81       	ldd	r24, Y+6	; 0x06
    2786:	9f 81       	ldd	r25, Y+7	; 0x07
    2788:	00 97       	sbiw	r24, 0x00	; 0
    278a:	61 f0       	breq	.+24     	; 0x27a4 <MCAL_Dio_SetPinDirection+0x7c>
    278c:	4e c0       	rjmp	.+156    	; 0x282a <MCAL_Dio_SetPinDirection+0x102>
    278e:	2e 81       	ldd	r18, Y+6	; 0x06
    2790:	3f 81       	ldd	r19, Y+7	; 0x07
    2792:	22 30       	cpi	r18, 0x02	; 2
    2794:	31 05       	cpc	r19, r1
    2796:	41 f1       	breq	.+80     	; 0x27e8 <MCAL_Dio_SetPinDirection+0xc0>
    2798:	8e 81       	ldd	r24, Y+6	; 0x06
    279a:	9f 81       	ldd	r25, Y+7	; 0x07
    279c:	83 30       	cpi	r24, 0x03	; 3
    279e:	91 05       	cpc	r25, r1
    27a0:	a1 f1       	breq	.+104    	; 0x280a <MCAL_Dio_SetPinDirection+0xe2>
    27a2:	43 c0       	rjmp	.+134    	; 0x282a <MCAL_Dio_SetPinDirection+0x102>
		{
		case PORTA_ID:
			Mask1 = ((DIO_DDRA) & (~(Dio_ConfigPin->pin_num)));
    27a4:	ea e3       	ldi	r30, 0x3A	; 58
    27a6:	f0 e0       	ldi	r31, 0x00	; 0
    27a8:	80 81       	ld	r24, Z
    27aa:	98 2f       	mov	r25, r24
    27ac:	ec 81       	ldd	r30, Y+4	; 0x04
    27ae:	fd 81       	ldd	r31, Y+5	; 0x05
    27b0:	81 81       	ldd	r24, Z+1	; 0x01
    27b2:	80 95       	com	r24
    27b4:	89 23       	and	r24, r25
    27b6:	8a 83       	std	Y+2, r24	; 0x02
			DIO_DDRA = Mask1 | Mask2;
    27b8:	ea e3       	ldi	r30, 0x3A	; 58
    27ba:	f0 e0       	ldi	r31, 0x00	; 0
    27bc:	9a 81       	ldd	r25, Y+2	; 0x02
    27be:	89 81       	ldd	r24, Y+1	; 0x01
    27c0:	89 2b       	or	r24, r25
    27c2:	80 83       	st	Z, r24
    27c4:	32 c0       	rjmp	.+100    	; 0x282a <MCAL_Dio_SetPinDirection+0x102>
			break;
		case PORTB_ID:
			Mask1 = ((DIO_DDRB) & (~(Dio_ConfigPin->pin_num)));
    27c6:	e7 e3       	ldi	r30, 0x37	; 55
    27c8:	f0 e0       	ldi	r31, 0x00	; 0
    27ca:	80 81       	ld	r24, Z
    27cc:	98 2f       	mov	r25, r24
    27ce:	ec 81       	ldd	r30, Y+4	; 0x04
    27d0:	fd 81       	ldd	r31, Y+5	; 0x05
    27d2:	81 81       	ldd	r24, Z+1	; 0x01
    27d4:	80 95       	com	r24
    27d6:	89 23       	and	r24, r25
    27d8:	8a 83       	std	Y+2, r24	; 0x02
			DIO_DDRB = Mask1 | Mask2;
    27da:	e7 e3       	ldi	r30, 0x37	; 55
    27dc:	f0 e0       	ldi	r31, 0x00	; 0
    27de:	9a 81       	ldd	r25, Y+2	; 0x02
    27e0:	89 81       	ldd	r24, Y+1	; 0x01
    27e2:	89 2b       	or	r24, r25
    27e4:	80 83       	st	Z, r24
    27e6:	21 c0       	rjmp	.+66     	; 0x282a <MCAL_Dio_SetPinDirection+0x102>
			break;
		case PORTC_ID:
			Mask1 = ((DIO_DDRC) & (~(Dio_ConfigPin->pin_num)));
    27e8:	e4 e3       	ldi	r30, 0x34	; 52
    27ea:	f0 e0       	ldi	r31, 0x00	; 0
    27ec:	80 81       	ld	r24, Z
    27ee:	98 2f       	mov	r25, r24
    27f0:	ec 81       	ldd	r30, Y+4	; 0x04
    27f2:	fd 81       	ldd	r31, Y+5	; 0x05
    27f4:	81 81       	ldd	r24, Z+1	; 0x01
    27f6:	80 95       	com	r24
    27f8:	89 23       	and	r24, r25
    27fa:	8a 83       	std	Y+2, r24	; 0x02
			DIO_DDRC = Mask1 | Mask2;
    27fc:	e4 e3       	ldi	r30, 0x34	; 52
    27fe:	f0 e0       	ldi	r31, 0x00	; 0
    2800:	9a 81       	ldd	r25, Y+2	; 0x02
    2802:	89 81       	ldd	r24, Y+1	; 0x01
    2804:	89 2b       	or	r24, r25
    2806:	80 83       	st	Z, r24
    2808:	10 c0       	rjmp	.+32     	; 0x282a <MCAL_Dio_SetPinDirection+0x102>
			break;
		case PORTD_ID:
			Mask1 = ((DIO_DDRD) & (~(Dio_ConfigPin->pin_num)));
    280a:	e1 e3       	ldi	r30, 0x31	; 49
    280c:	f0 e0       	ldi	r31, 0x00	; 0
    280e:	80 81       	ld	r24, Z
    2810:	98 2f       	mov	r25, r24
    2812:	ec 81       	ldd	r30, Y+4	; 0x04
    2814:	fd 81       	ldd	r31, Y+5	; 0x05
    2816:	81 81       	ldd	r24, Z+1	; 0x01
    2818:	80 95       	com	r24
    281a:	89 23       	and	r24, r25
    281c:	8a 83       	std	Y+2, r24	; 0x02
			DIO_DDRD = Mask1 | Mask2;
    281e:	e1 e3       	ldi	r30, 0x31	; 49
    2820:	f0 e0       	ldi	r31, 0x00	; 0
    2822:	9a 81       	ldd	r25, Y+2	; 0x02
    2824:	89 81       	ldd	r24, Y+1	; 0x01
    2826:	89 2b       	or	r24, r25
    2828:	80 83       	st	Z, r24
			break;

		}
	}

	return error;
    282a:	8b 81       	ldd	r24, Y+3	; 0x03

}
    282c:	27 96       	adiw	r28, 0x07	; 7
    282e:	0f b6       	in	r0, 0x3f	; 63
    2830:	f8 94       	cli
    2832:	de bf       	out	0x3e, r29	; 62
    2834:	0f be       	out	0x3f, r0	; 63
    2836:	cd bf       	out	0x3d, r28	; 61
    2838:	cf 91       	pop	r28
    283a:	df 91       	pop	r29
    283c:	08 95       	ret

0000283e <MCAL_Dio_ReadPort>:


E_ErrorType MCAL_Dio_ReadPort(S_Dio *Dio_ReadPort,u8PortValue *Port_Value)
{
    283e:	df 93       	push	r29
    2840:	cf 93       	push	r28
    2842:	cd b7       	in	r28, 0x3d	; 61
    2844:	de b7       	in	r29, 0x3e	; 62
    2846:	27 97       	sbiw	r28, 0x07	; 7
    2848:	0f b6       	in	r0, 0x3f	; 63
    284a:	f8 94       	cli
    284c:	de bf       	out	0x3e, r29	; 62
    284e:	0f be       	out	0x3f, r0	; 63
    2850:	cd bf       	out	0x3d, r28	; 61
    2852:	9b 83       	std	Y+3, r25	; 0x03
    2854:	8a 83       	std	Y+2, r24	; 0x02
    2856:	7d 83       	std	Y+5, r23	; 0x05
    2858:	6c 83       	std	Y+4, r22	; 0x04
	E_ErrorType error = E_OK;
    285a:	19 82       	std	Y+1, r1	; 0x01
	if(DIO_STATUS_ERROR == E_NOT_OK)
	{
		error = E_NOT_OK;
	}
	else if(Dio_ReadPort->port_num >= DIO_CONFIGURED_PORTS)
    285c:	ea 81       	ldd	r30, Y+2	; 0x02
    285e:	fb 81       	ldd	r31, Y+3	; 0x03
    2860:	80 81       	ld	r24, Z
    2862:	84 30       	cpi	r24, 0x04	; 4
    2864:	18 f0       	brcs	.+6      	; 0x286c <MCAL_Dio_ReadPort+0x2e>
	{

		error = E_NOT_OK;
    2866:	81 e0       	ldi	r24, 0x01	; 1
    2868:	89 83       	std	Y+1, r24	; 0x01
    286a:	3c c0       	rjmp	.+120    	; 0x28e4 <MCAL_Dio_ReadPort+0xa6>
	}
	else
	{
		switch (Dio_ReadPort->port_num )
    286c:	ea 81       	ldd	r30, Y+2	; 0x02
    286e:	fb 81       	ldd	r31, Y+3	; 0x03
    2870:	80 81       	ld	r24, Z
    2872:	28 2f       	mov	r18, r24
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	3f 83       	std	Y+7, r19	; 0x07
    2878:	2e 83       	std	Y+6, r18	; 0x06
    287a:	8e 81       	ldd	r24, Y+6	; 0x06
    287c:	9f 81       	ldd	r25, Y+7	; 0x07
    287e:	81 30       	cpi	r24, 0x01	; 1
    2880:	91 05       	cpc	r25, r1
    2882:	e1 f0       	breq	.+56     	; 0x28bc <MCAL_Dio_ReadPort+0x7e>
    2884:	2e 81       	ldd	r18, Y+6	; 0x06
    2886:	3f 81       	ldd	r19, Y+7	; 0x07
    2888:	22 30       	cpi	r18, 0x02	; 2
    288a:	31 05       	cpc	r19, r1
    288c:	2c f4       	brge	.+10     	; 0x2898 <MCAL_Dio_ReadPort+0x5a>
    288e:	8e 81       	ldd	r24, Y+6	; 0x06
    2890:	9f 81       	ldd	r25, Y+7	; 0x07
    2892:	00 97       	sbiw	r24, 0x00	; 0
    2894:	61 f0       	breq	.+24     	; 0x28ae <MCAL_Dio_ReadPort+0x70>
    2896:	26 c0       	rjmp	.+76     	; 0x28e4 <MCAL_Dio_ReadPort+0xa6>
    2898:	2e 81       	ldd	r18, Y+6	; 0x06
    289a:	3f 81       	ldd	r19, Y+7	; 0x07
    289c:	22 30       	cpi	r18, 0x02	; 2
    289e:	31 05       	cpc	r19, r1
    28a0:	a1 f0       	breq	.+40     	; 0x28ca <MCAL_Dio_ReadPort+0x8c>
    28a2:	8e 81       	ldd	r24, Y+6	; 0x06
    28a4:	9f 81       	ldd	r25, Y+7	; 0x07
    28a6:	83 30       	cpi	r24, 0x03	; 3
    28a8:	91 05       	cpc	r25, r1
    28aa:	b1 f0       	breq	.+44     	; 0x28d8 <MCAL_Dio_ReadPort+0x9a>
    28ac:	1b c0       	rjmp	.+54     	; 0x28e4 <MCAL_Dio_ReadPort+0xa6>
		{
		case PORTA_ID:
			*Port_Value = DIO_PINA;
    28ae:	e9 e3       	ldi	r30, 0x39	; 57
    28b0:	f0 e0       	ldi	r31, 0x00	; 0
    28b2:	80 81       	ld	r24, Z
    28b4:	ec 81       	ldd	r30, Y+4	; 0x04
    28b6:	fd 81       	ldd	r31, Y+5	; 0x05
    28b8:	80 83       	st	Z, r24
    28ba:	14 c0       	rjmp	.+40     	; 0x28e4 <MCAL_Dio_ReadPort+0xa6>
			break;
		case PORTB_ID:
			*Port_Value = DIO_PINB;
    28bc:	e6 e3       	ldi	r30, 0x36	; 54
    28be:	f0 e0       	ldi	r31, 0x00	; 0
    28c0:	80 81       	ld	r24, Z
    28c2:	ec 81       	ldd	r30, Y+4	; 0x04
    28c4:	fd 81       	ldd	r31, Y+5	; 0x05
    28c6:	80 83       	st	Z, r24
    28c8:	0d c0       	rjmp	.+26     	; 0x28e4 <MCAL_Dio_ReadPort+0xa6>
			break;
		case PORTC_ID:
			*Port_Value = DIO_PINC;
    28ca:	e3 e3       	ldi	r30, 0x33	; 51
    28cc:	f0 e0       	ldi	r31, 0x00	; 0
    28ce:	80 81       	ld	r24, Z
    28d0:	ec 81       	ldd	r30, Y+4	; 0x04
    28d2:	fd 81       	ldd	r31, Y+5	; 0x05
    28d4:	80 83       	st	Z, r24
    28d6:	06 c0       	rjmp	.+12     	; 0x28e4 <MCAL_Dio_ReadPort+0xa6>
			break;
		case PORTD_ID:
			*Port_Value = DIO_PIND;
    28d8:	e0 e3       	ldi	r30, 0x30	; 48
    28da:	f0 e0       	ldi	r31, 0x00	; 0
    28dc:	80 81       	ld	r24, Z
    28de:	ec 81       	ldd	r30, Y+4	; 0x04
    28e0:	fd 81       	ldd	r31, Y+5	; 0x05
    28e2:	80 83       	st	Z, r24
			break;

		}
	}
	return error;
    28e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    28e6:	27 96       	adiw	r28, 0x07	; 7
    28e8:	0f b6       	in	r0, 0x3f	; 63
    28ea:	f8 94       	cli
    28ec:	de bf       	out	0x3e, r29	; 62
    28ee:	0f be       	out	0x3f, r0	; 63
    28f0:	cd bf       	out	0x3d, r28	; 61
    28f2:	cf 91       	pop	r28
    28f4:	df 91       	pop	r29
    28f6:	08 95       	ret

000028f8 <MCAL_Dio_ReadPin>:

E_ErrorType MCAL_Dio_ReadPin(S_Dio *Dio_ReadPin,u8PinValue *Pin_Value)
{
    28f8:	df 93       	push	r29
    28fa:	cf 93       	push	r28
    28fc:	cd b7       	in	r28, 0x3d	; 61
    28fe:	de b7       	in	r29, 0x3e	; 62
    2900:	27 97       	sbiw	r28, 0x07	; 7
    2902:	0f b6       	in	r0, 0x3f	; 63
    2904:	f8 94       	cli
    2906:	de bf       	out	0x3e, r29	; 62
    2908:	0f be       	out	0x3f, r0	; 63
    290a:	cd bf       	out	0x3d, r28	; 61
    290c:	9b 83       	std	Y+3, r25	; 0x03
    290e:	8a 83       	std	Y+2, r24	; 0x02
    2910:	7d 83       	std	Y+5, r23	; 0x05
    2912:	6c 83       	std	Y+4, r22	; 0x04
	E_ErrorType error = E_OK;
    2914:	19 82       	std	Y+1, r1	; 0x01

	if(DIO_STATUS_ERROR == E_NOT_OK)
	{
		error = E_NOT_OK;
	}
	else if(Dio_ReadPin->port_num >= DIO_CONFIGURED_PORTS)
    2916:	ea 81       	ldd	r30, Y+2	; 0x02
    2918:	fb 81       	ldd	r31, Y+3	; 0x03
    291a:	80 81       	ld	r24, Z
    291c:	84 30       	cpi	r24, 0x04	; 4
    291e:	18 f0       	brcs	.+6      	; 0x2926 <MCAL_Dio_ReadPin+0x2e>
	{

		error = E_NOT_OK;
    2920:	81 e0       	ldi	r24, 0x01	; 1
    2922:	89 83       	std	Y+1, r24	; 0x01
    2924:	7a c0       	rjmp	.+244    	; 0x2a1a <MCAL_Dio_ReadPin+0x122>

	}
	else
	{

		switch(Dio_ReadPin->port_num)
    2926:	ea 81       	ldd	r30, Y+2	; 0x02
    2928:	fb 81       	ldd	r31, Y+3	; 0x03
    292a:	80 81       	ld	r24, Z
    292c:	28 2f       	mov	r18, r24
    292e:	30 e0       	ldi	r19, 0x00	; 0
    2930:	3f 83       	std	Y+7, r19	; 0x07
    2932:	2e 83       	std	Y+6, r18	; 0x06
    2934:	4e 81       	ldd	r20, Y+6	; 0x06
    2936:	5f 81       	ldd	r21, Y+7	; 0x07
    2938:	41 30       	cpi	r20, 0x01	; 1
    293a:	51 05       	cpc	r21, r1
    293c:	69 f1       	breq	.+90     	; 0x2998 <MCAL_Dio_ReadPin+0xa0>
    293e:	8e 81       	ldd	r24, Y+6	; 0x06
    2940:	9f 81       	ldd	r25, Y+7	; 0x07
    2942:	82 30       	cpi	r24, 0x02	; 2
    2944:	91 05       	cpc	r25, r1
    2946:	34 f4       	brge	.+12     	; 0x2954 <MCAL_Dio_ReadPin+0x5c>
    2948:	2e 81       	ldd	r18, Y+6	; 0x06
    294a:	3f 81       	ldd	r19, Y+7	; 0x07
    294c:	21 15       	cp	r18, r1
    294e:	31 05       	cpc	r19, r1
    2950:	69 f0       	breq	.+26     	; 0x296c <MCAL_Dio_ReadPin+0x74>
    2952:	63 c0       	rjmp	.+198    	; 0x2a1a <MCAL_Dio_ReadPin+0x122>
    2954:	4e 81       	ldd	r20, Y+6	; 0x06
    2956:	5f 81       	ldd	r21, Y+7	; 0x07
    2958:	42 30       	cpi	r20, 0x02	; 2
    295a:	51 05       	cpc	r21, r1
    295c:	99 f1       	breq	.+102    	; 0x29c4 <MCAL_Dio_ReadPin+0xcc>
    295e:	8e 81       	ldd	r24, Y+6	; 0x06
    2960:	9f 81       	ldd	r25, Y+7	; 0x07
    2962:	83 30       	cpi	r24, 0x03	; 3
    2964:	91 05       	cpc	r25, r1
    2966:	09 f4       	brne	.+2      	; 0x296a <MCAL_Dio_ReadPin+0x72>
    2968:	43 c0       	rjmp	.+134    	; 0x29f0 <MCAL_Dio_ReadPin+0xf8>
    296a:	57 c0       	rjmp	.+174    	; 0x2a1a <MCAL_Dio_ReadPin+0x122>
		{
		case PORTA_ID:
			*Pin_Value = GET_BIT(DIO_PINA,Dio_ReadPin->pin_num);
    296c:	e9 e3       	ldi	r30, 0x39	; 57
    296e:	f0 e0       	ldi	r31, 0x00	; 0
    2970:	80 81       	ld	r24, Z
    2972:	28 2f       	mov	r18, r24
    2974:	30 e0       	ldi	r19, 0x00	; 0
    2976:	ea 81       	ldd	r30, Y+2	; 0x02
    2978:	fb 81       	ldd	r31, Y+3	; 0x03
    297a:	81 81       	ldd	r24, Z+1	; 0x01
    297c:	88 2f       	mov	r24, r24
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	a9 01       	movw	r20, r18
    2982:	02 c0       	rjmp	.+4      	; 0x2988 <MCAL_Dio_ReadPin+0x90>
    2984:	55 95       	asr	r21
    2986:	47 95       	ror	r20
    2988:	8a 95       	dec	r24
    298a:	e2 f7       	brpl	.-8      	; 0x2984 <MCAL_Dio_ReadPin+0x8c>
    298c:	ca 01       	movw	r24, r20
    298e:	81 70       	andi	r24, 0x01	; 1
    2990:	ec 81       	ldd	r30, Y+4	; 0x04
    2992:	fd 81       	ldd	r31, Y+5	; 0x05
    2994:	80 83       	st	Z, r24
    2996:	41 c0       	rjmp	.+130    	; 0x2a1a <MCAL_Dio_ReadPin+0x122>
			break;
		case PORTB_ID:
			*Pin_Value = GET_BIT(DIO_PINB,Dio_ReadPin->pin_num);
    2998:	e6 e3       	ldi	r30, 0x36	; 54
    299a:	f0 e0       	ldi	r31, 0x00	; 0
    299c:	80 81       	ld	r24, Z
    299e:	28 2f       	mov	r18, r24
    29a0:	30 e0       	ldi	r19, 0x00	; 0
    29a2:	ea 81       	ldd	r30, Y+2	; 0x02
    29a4:	fb 81       	ldd	r31, Y+3	; 0x03
    29a6:	81 81       	ldd	r24, Z+1	; 0x01
    29a8:	88 2f       	mov	r24, r24
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	a9 01       	movw	r20, r18
    29ae:	02 c0       	rjmp	.+4      	; 0x29b4 <MCAL_Dio_ReadPin+0xbc>
    29b0:	55 95       	asr	r21
    29b2:	47 95       	ror	r20
    29b4:	8a 95       	dec	r24
    29b6:	e2 f7       	brpl	.-8      	; 0x29b0 <MCAL_Dio_ReadPin+0xb8>
    29b8:	ca 01       	movw	r24, r20
    29ba:	81 70       	andi	r24, 0x01	; 1
    29bc:	ec 81       	ldd	r30, Y+4	; 0x04
    29be:	fd 81       	ldd	r31, Y+5	; 0x05
    29c0:	80 83       	st	Z, r24
    29c2:	2b c0       	rjmp	.+86     	; 0x2a1a <MCAL_Dio_ReadPin+0x122>
			break;
		case PORTC_ID:
			*Pin_Value = GET_BIT(DIO_PINC,Dio_ReadPin->pin_num);
    29c4:	e3 e3       	ldi	r30, 0x33	; 51
    29c6:	f0 e0       	ldi	r31, 0x00	; 0
    29c8:	80 81       	ld	r24, Z
    29ca:	28 2f       	mov	r18, r24
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	ea 81       	ldd	r30, Y+2	; 0x02
    29d0:	fb 81       	ldd	r31, Y+3	; 0x03
    29d2:	81 81       	ldd	r24, Z+1	; 0x01
    29d4:	88 2f       	mov	r24, r24
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	a9 01       	movw	r20, r18
    29da:	02 c0       	rjmp	.+4      	; 0x29e0 <MCAL_Dio_ReadPin+0xe8>
    29dc:	55 95       	asr	r21
    29de:	47 95       	ror	r20
    29e0:	8a 95       	dec	r24
    29e2:	e2 f7       	brpl	.-8      	; 0x29dc <MCAL_Dio_ReadPin+0xe4>
    29e4:	ca 01       	movw	r24, r20
    29e6:	81 70       	andi	r24, 0x01	; 1
    29e8:	ec 81       	ldd	r30, Y+4	; 0x04
    29ea:	fd 81       	ldd	r31, Y+5	; 0x05
    29ec:	80 83       	st	Z, r24
    29ee:	15 c0       	rjmp	.+42     	; 0x2a1a <MCAL_Dio_ReadPin+0x122>
			break;
		case PORTD_ID:
			*Pin_Value = GET_BIT(DIO_PIND,Dio_ReadPin->pin_num);
    29f0:	e0 e3       	ldi	r30, 0x30	; 48
    29f2:	f0 e0       	ldi	r31, 0x00	; 0
    29f4:	80 81       	ld	r24, Z
    29f6:	28 2f       	mov	r18, r24
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	ea 81       	ldd	r30, Y+2	; 0x02
    29fc:	fb 81       	ldd	r31, Y+3	; 0x03
    29fe:	81 81       	ldd	r24, Z+1	; 0x01
    2a00:	88 2f       	mov	r24, r24
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	a9 01       	movw	r20, r18
    2a06:	02 c0       	rjmp	.+4      	; 0x2a0c <MCAL_Dio_ReadPin+0x114>
    2a08:	55 95       	asr	r21
    2a0a:	47 95       	ror	r20
    2a0c:	8a 95       	dec	r24
    2a0e:	e2 f7       	brpl	.-8      	; 0x2a08 <MCAL_Dio_ReadPin+0x110>
    2a10:	ca 01       	movw	r24, r20
    2a12:	81 70       	andi	r24, 0x01	; 1
    2a14:	ec 81       	ldd	r30, Y+4	; 0x04
    2a16:	fd 81       	ldd	r31, Y+5	; 0x05
    2a18:	80 83       	st	Z, r24
			break;
		}
	}
	return error;
    2a1a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a1c:	27 96       	adiw	r28, 0x07	; 7
    2a1e:	0f b6       	in	r0, 0x3f	; 63
    2a20:	f8 94       	cli
    2a22:	de bf       	out	0x3e, r29	; 62
    2a24:	0f be       	out	0x3f, r0	; 63
    2a26:	cd bf       	out	0x3d, r28	; 61
    2a28:	cf 91       	pop	r28
    2a2a:	df 91       	pop	r29
    2a2c:	08 95       	ret

00002a2e <MCAL_Dio_WritePort>:


E_ErrorType MCAL_Dio_WritePort(S_Dio *Dio_WritePort,u8PortValue Port_Value)
{
    2a2e:	df 93       	push	r29
    2a30:	cf 93       	push	r28
    2a32:	00 d0       	rcall	.+0      	; 0x2a34 <MCAL_Dio_WritePort+0x6>
    2a34:	00 d0       	rcall	.+0      	; 0x2a36 <MCAL_Dio_WritePort+0x8>
    2a36:	00 d0       	rcall	.+0      	; 0x2a38 <MCAL_Dio_WritePort+0xa>
    2a38:	cd b7       	in	r28, 0x3d	; 61
    2a3a:	de b7       	in	r29, 0x3e	; 62
    2a3c:	9b 83       	std	Y+3, r25	; 0x03
    2a3e:	8a 83       	std	Y+2, r24	; 0x02
    2a40:	6c 83       	std	Y+4, r22	; 0x04
	E_ErrorType error = E_OK;
    2a42:	19 82       	std	Y+1, r1	; 0x01

	if(DIO_STATUS_ERROR == E_NOT_OK)
	{
		error = E_NOT_OK;
	}
	else if(Dio_WritePort->port_num >= DIO_CONFIGURED_PORTS)
    2a44:	ea 81       	ldd	r30, Y+2	; 0x02
    2a46:	fb 81       	ldd	r31, Y+3	; 0x03
    2a48:	80 81       	ld	r24, Z
    2a4a:	84 30       	cpi	r24, 0x04	; 4
    2a4c:	18 f0       	brcs	.+6      	; 0x2a54 <MCAL_Dio_WritePort+0x26>
	{

		error = E_NOT_OK;
    2a4e:	81 e0       	ldi	r24, 0x01	; 1
    2a50:	89 83       	std	Y+1, r24	; 0x01
    2a52:	34 c0       	rjmp	.+104    	; 0x2abc <MCAL_Dio_WritePort+0x8e>
	}
	else
	{
		switch (Dio_WritePort->port_num)
    2a54:	ea 81       	ldd	r30, Y+2	; 0x02
    2a56:	fb 81       	ldd	r31, Y+3	; 0x03
    2a58:	80 81       	ld	r24, Z
    2a5a:	28 2f       	mov	r18, r24
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	3e 83       	std	Y+6, r19	; 0x06
    2a60:	2d 83       	std	Y+5, r18	; 0x05
    2a62:	8d 81       	ldd	r24, Y+5	; 0x05
    2a64:	9e 81       	ldd	r25, Y+6	; 0x06
    2a66:	81 30       	cpi	r24, 0x01	; 1
    2a68:	91 05       	cpc	r25, r1
    2a6a:	d1 f0       	breq	.+52     	; 0x2aa0 <MCAL_Dio_WritePort+0x72>
    2a6c:	2d 81       	ldd	r18, Y+5	; 0x05
    2a6e:	3e 81       	ldd	r19, Y+6	; 0x06
    2a70:	22 30       	cpi	r18, 0x02	; 2
    2a72:	31 05       	cpc	r19, r1
    2a74:	2c f4       	brge	.+10     	; 0x2a80 <MCAL_Dio_WritePort+0x52>
    2a76:	8d 81       	ldd	r24, Y+5	; 0x05
    2a78:	9e 81       	ldd	r25, Y+6	; 0x06
    2a7a:	00 97       	sbiw	r24, 0x00	; 0
    2a7c:	61 f0       	breq	.+24     	; 0x2a96 <MCAL_Dio_WritePort+0x68>
    2a7e:	1e c0       	rjmp	.+60     	; 0x2abc <MCAL_Dio_WritePort+0x8e>
    2a80:	2d 81       	ldd	r18, Y+5	; 0x05
    2a82:	3e 81       	ldd	r19, Y+6	; 0x06
    2a84:	22 30       	cpi	r18, 0x02	; 2
    2a86:	31 05       	cpc	r19, r1
    2a88:	81 f0       	breq	.+32     	; 0x2aaa <MCAL_Dio_WritePort+0x7c>
    2a8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a8e:	83 30       	cpi	r24, 0x03	; 3
    2a90:	91 05       	cpc	r25, r1
    2a92:	81 f0       	breq	.+32     	; 0x2ab4 <MCAL_Dio_WritePort+0x86>
    2a94:	13 c0       	rjmp	.+38     	; 0x2abc <MCAL_Dio_WritePort+0x8e>
		{
		case PORTA_ID:
			DIO_PORTA = Port_Value;
    2a96:	eb e3       	ldi	r30, 0x3B	; 59
    2a98:	f0 e0       	ldi	r31, 0x00	; 0
    2a9a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a9c:	80 83       	st	Z, r24
    2a9e:	0e c0       	rjmp	.+28     	; 0x2abc <MCAL_Dio_WritePort+0x8e>
			break;
		case PORTB_ID:
			DIO_PORTB = Port_Value;
    2aa0:	e8 e3       	ldi	r30, 0x38	; 56
    2aa2:	f0 e0       	ldi	r31, 0x00	; 0
    2aa4:	8c 81       	ldd	r24, Y+4	; 0x04
    2aa6:	80 83       	st	Z, r24
    2aa8:	09 c0       	rjmp	.+18     	; 0x2abc <MCAL_Dio_WritePort+0x8e>
			break;
		case PORTC_ID:
			DIO_PORTC = Port_Value;
    2aaa:	e5 e3       	ldi	r30, 0x35	; 53
    2aac:	f0 e0       	ldi	r31, 0x00	; 0
    2aae:	8c 81       	ldd	r24, Y+4	; 0x04
    2ab0:	80 83       	st	Z, r24
    2ab2:	04 c0       	rjmp	.+8      	; 0x2abc <MCAL_Dio_WritePort+0x8e>
			break;
		case PORTD_ID:
			DIO_PORTD = Port_Value;
    2ab4:	e2 e3       	ldi	r30, 0x32	; 50
    2ab6:	f0 e0       	ldi	r31, 0x00	; 0
    2ab8:	8c 81       	ldd	r24, Y+4	; 0x04
    2aba:	80 83       	st	Z, r24
			break;
		}
	}
	return error;
    2abc:	89 81       	ldd	r24, Y+1	; 0x01
}
    2abe:	26 96       	adiw	r28, 0x06	; 6
    2ac0:	0f b6       	in	r0, 0x3f	; 63
    2ac2:	f8 94       	cli
    2ac4:	de bf       	out	0x3e, r29	; 62
    2ac6:	0f be       	out	0x3f, r0	; 63
    2ac8:	cd bf       	out	0x3d, r28	; 61
    2aca:	cf 91       	pop	r28
    2acc:	df 91       	pop	r29
    2ace:	08 95       	ret

00002ad0 <MCAL_Dio_WritePin>:


E_ErrorType MCAL_Dio_WritePin(S_Dio *Dio_WritePin,u8PinValue Pin_value)
{
    2ad0:	df 93       	push	r29
    2ad2:	cf 93       	push	r28
    2ad4:	cd b7       	in	r28, 0x3d	; 61
    2ad6:	de b7       	in	r29, 0x3e	; 62
    2ad8:	28 97       	sbiw	r28, 0x08	; 8
    2ada:	0f b6       	in	r0, 0x3f	; 63
    2adc:	f8 94       	cli
    2ade:	de bf       	out	0x3e, r29	; 62
    2ae0:	0f be       	out	0x3f, r0	; 63
    2ae2:	cd bf       	out	0x3d, r28	; 61
    2ae4:	9d 83       	std	Y+5, r25	; 0x05
    2ae6:	8c 83       	std	Y+4, r24	; 0x04
    2ae8:	6e 83       	std	Y+6, r22	; 0x06
	E_ErrorType error = E_OK;
    2aea:	1b 82       	std	Y+3, r1	; 0x03
	u8RegisterValue Mask1,Mask2;
	if(DIO_STATUS_ERROR == E_NOT_OK)
	{
		error = E_NOT_OK;
	}
	else if(Dio_WritePin->port_num >= DIO_CONFIGURED_PORTS)
    2aec:	ec 81       	ldd	r30, Y+4	; 0x04
    2aee:	fd 81       	ldd	r31, Y+5	; 0x05
    2af0:	80 81       	ld	r24, Z
    2af2:	84 30       	cpi	r24, 0x04	; 4
    2af4:	18 f0       	brcs	.+6      	; 0x2afc <MCAL_Dio_WritePin+0x2c>
	{

		error = E_NOT_OK;
    2af6:	81 e0       	ldi	r24, 0x01	; 1
    2af8:	8b 83       	std	Y+3, r24	; 0x03
    2afa:	6a c0       	rjmp	.+212    	; 0x2bd0 <MCAL_Dio_WritePin+0x100>
	}
	else
	{

		Mask2 = ((Dio_WritePin->pin_num) & (Pin_value));
    2afc:	ec 81       	ldd	r30, Y+4	; 0x04
    2afe:	fd 81       	ldd	r31, Y+5	; 0x05
    2b00:	91 81       	ldd	r25, Z+1	; 0x01
    2b02:	8e 81       	ldd	r24, Y+6	; 0x06
    2b04:	89 23       	and	r24, r25
    2b06:	89 83       	std	Y+1, r24	; 0x01
		switch(Dio_WritePin->port_num)
    2b08:	ec 81       	ldd	r30, Y+4	; 0x04
    2b0a:	fd 81       	ldd	r31, Y+5	; 0x05
    2b0c:	80 81       	ld	r24, Z
    2b0e:	28 2f       	mov	r18, r24
    2b10:	30 e0       	ldi	r19, 0x00	; 0
    2b12:	38 87       	std	Y+8, r19	; 0x08
    2b14:	2f 83       	std	Y+7, r18	; 0x07
    2b16:	8f 81       	ldd	r24, Y+7	; 0x07
    2b18:	98 85       	ldd	r25, Y+8	; 0x08
    2b1a:	81 30       	cpi	r24, 0x01	; 1
    2b1c:	91 05       	cpc	r25, r1
    2b1e:	31 f1       	breq	.+76     	; 0x2b6c <MCAL_Dio_WritePin+0x9c>
    2b20:	2f 81       	ldd	r18, Y+7	; 0x07
    2b22:	38 85       	ldd	r19, Y+8	; 0x08
    2b24:	22 30       	cpi	r18, 0x02	; 2
    2b26:	31 05       	cpc	r19, r1
    2b28:	2c f4       	brge	.+10     	; 0x2b34 <MCAL_Dio_WritePin+0x64>
    2b2a:	8f 81       	ldd	r24, Y+7	; 0x07
    2b2c:	98 85       	ldd	r25, Y+8	; 0x08
    2b2e:	00 97       	sbiw	r24, 0x00	; 0
    2b30:	61 f0       	breq	.+24     	; 0x2b4a <MCAL_Dio_WritePin+0x7a>
    2b32:	4e c0       	rjmp	.+156    	; 0x2bd0 <MCAL_Dio_WritePin+0x100>
    2b34:	2f 81       	ldd	r18, Y+7	; 0x07
    2b36:	38 85       	ldd	r19, Y+8	; 0x08
    2b38:	22 30       	cpi	r18, 0x02	; 2
    2b3a:	31 05       	cpc	r19, r1
    2b3c:	41 f1       	breq	.+80     	; 0x2b8e <MCAL_Dio_WritePin+0xbe>
    2b3e:	8f 81       	ldd	r24, Y+7	; 0x07
    2b40:	98 85       	ldd	r25, Y+8	; 0x08
    2b42:	83 30       	cpi	r24, 0x03	; 3
    2b44:	91 05       	cpc	r25, r1
    2b46:	a1 f1       	breq	.+104    	; 0x2bb0 <MCAL_Dio_WritePin+0xe0>
    2b48:	43 c0       	rjmp	.+134    	; 0x2bd0 <MCAL_Dio_WritePin+0x100>
		{
		case PORTA_ID:
			Mask1 = ((DIO_PORTA) & (~(Dio_WritePin->pin_num)));
    2b4a:	eb e3       	ldi	r30, 0x3B	; 59
    2b4c:	f0 e0       	ldi	r31, 0x00	; 0
    2b4e:	80 81       	ld	r24, Z
    2b50:	98 2f       	mov	r25, r24
    2b52:	ec 81       	ldd	r30, Y+4	; 0x04
    2b54:	fd 81       	ldd	r31, Y+5	; 0x05
    2b56:	81 81       	ldd	r24, Z+1	; 0x01
    2b58:	80 95       	com	r24
    2b5a:	89 23       	and	r24, r25
    2b5c:	8a 83       	std	Y+2, r24	; 0x02
			DIO_PORTA = Mask1 | Mask2;
    2b5e:	eb e3       	ldi	r30, 0x3B	; 59
    2b60:	f0 e0       	ldi	r31, 0x00	; 0
    2b62:	9a 81       	ldd	r25, Y+2	; 0x02
    2b64:	89 81       	ldd	r24, Y+1	; 0x01
    2b66:	89 2b       	or	r24, r25
    2b68:	80 83       	st	Z, r24
    2b6a:	32 c0       	rjmp	.+100    	; 0x2bd0 <MCAL_Dio_WritePin+0x100>
			break;
		case PORTB_ID:
			Mask1 = ((DIO_PORTB) & (~(Dio_WritePin->pin_num)));
    2b6c:	e8 e3       	ldi	r30, 0x38	; 56
    2b6e:	f0 e0       	ldi	r31, 0x00	; 0
    2b70:	80 81       	ld	r24, Z
    2b72:	98 2f       	mov	r25, r24
    2b74:	ec 81       	ldd	r30, Y+4	; 0x04
    2b76:	fd 81       	ldd	r31, Y+5	; 0x05
    2b78:	81 81       	ldd	r24, Z+1	; 0x01
    2b7a:	80 95       	com	r24
    2b7c:	89 23       	and	r24, r25
    2b7e:	8a 83       	std	Y+2, r24	; 0x02
			DIO_PORTB = Mask1 | Mask2;
    2b80:	e8 e3       	ldi	r30, 0x38	; 56
    2b82:	f0 e0       	ldi	r31, 0x00	; 0
    2b84:	9a 81       	ldd	r25, Y+2	; 0x02
    2b86:	89 81       	ldd	r24, Y+1	; 0x01
    2b88:	89 2b       	or	r24, r25
    2b8a:	80 83       	st	Z, r24
    2b8c:	21 c0       	rjmp	.+66     	; 0x2bd0 <MCAL_Dio_WritePin+0x100>
			break;
		case PORTC_ID:
			Mask1 = ((DIO_PORTC) & (~(Dio_WritePin->pin_num)));
    2b8e:	e5 e3       	ldi	r30, 0x35	; 53
    2b90:	f0 e0       	ldi	r31, 0x00	; 0
    2b92:	80 81       	ld	r24, Z
    2b94:	98 2f       	mov	r25, r24
    2b96:	ec 81       	ldd	r30, Y+4	; 0x04
    2b98:	fd 81       	ldd	r31, Y+5	; 0x05
    2b9a:	81 81       	ldd	r24, Z+1	; 0x01
    2b9c:	80 95       	com	r24
    2b9e:	89 23       	and	r24, r25
    2ba0:	8a 83       	std	Y+2, r24	; 0x02
			DIO_PORTC = Mask1 | Mask2;
    2ba2:	e5 e3       	ldi	r30, 0x35	; 53
    2ba4:	f0 e0       	ldi	r31, 0x00	; 0
    2ba6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ba8:	89 81       	ldd	r24, Y+1	; 0x01
    2baa:	89 2b       	or	r24, r25
    2bac:	80 83       	st	Z, r24
    2bae:	10 c0       	rjmp	.+32     	; 0x2bd0 <MCAL_Dio_WritePin+0x100>
			break;
		case PORTD_ID:
			Mask1 = ((DIO_PORTD) & (~(Dio_WritePin->pin_num)));
    2bb0:	e2 e3       	ldi	r30, 0x32	; 50
    2bb2:	f0 e0       	ldi	r31, 0x00	; 0
    2bb4:	80 81       	ld	r24, Z
    2bb6:	98 2f       	mov	r25, r24
    2bb8:	ec 81       	ldd	r30, Y+4	; 0x04
    2bba:	fd 81       	ldd	r31, Y+5	; 0x05
    2bbc:	81 81       	ldd	r24, Z+1	; 0x01
    2bbe:	80 95       	com	r24
    2bc0:	89 23       	and	r24, r25
    2bc2:	8a 83       	std	Y+2, r24	; 0x02
			DIO_PORTD = Mask1 | Mask2;
    2bc4:	e2 e3       	ldi	r30, 0x32	; 50
    2bc6:	f0 e0       	ldi	r31, 0x00	; 0
    2bc8:	9a 81       	ldd	r25, Y+2	; 0x02
    2bca:	89 81       	ldd	r24, Y+1	; 0x01
    2bcc:	89 2b       	or	r24, r25
    2bce:	80 83       	st	Z, r24
			break;

		}
	}
	return error;
    2bd0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2bd2:	28 96       	adiw	r28, 0x08	; 8
    2bd4:	0f b6       	in	r0, 0x3f	; 63
    2bd6:	f8 94       	cli
    2bd8:	de bf       	out	0x3e, r29	; 62
    2bda:	0f be       	out	0x3f, r0	; 63
    2bdc:	cd bf       	out	0x3d, r28	; 61
    2bde:	cf 91       	pop	r28
    2be0:	df 91       	pop	r29
    2be2:	08 95       	ret

00002be4 <MCAL_Dio_WriteSinglePin>:

E_ErrorType MCAL_Dio_WriteSinglePin(S_Dio *Dio_WritePin,E_DioPin Pin_Num,u8PinValue Pin_value)
{
    2be4:	df 93       	push	r29
    2be6:	cf 93       	push	r28
    2be8:	cd b7       	in	r28, 0x3d	; 61
    2bea:	de b7       	in	r29, 0x3e	; 62
    2bec:	2a 97       	sbiw	r28, 0x0a	; 10
    2bee:	0f b6       	in	r0, 0x3f	; 63
    2bf0:	f8 94       	cli
    2bf2:	de bf       	out	0x3e, r29	; 62
    2bf4:	0f be       	out	0x3f, r0	; 63
    2bf6:	cd bf       	out	0x3d, r28	; 61
    2bf8:	9e 83       	std	Y+6, r25	; 0x06
    2bfa:	8d 83       	std	Y+5, r24	; 0x05
    2bfc:	6f 83       	std	Y+7, r22	; 0x07
    2bfe:	48 87       	std	Y+8, r20	; 0x08
		E_ErrorType error = E_OK;
    2c00:	1c 82       	std	Y+4, r1	; 0x04
		u8PinNumber bitNumber;
		if(DIO_STATUS_ERROR == E_NOT_OK)
		{
			error = E_NOT_OK;
		}
		else if(Dio_WritePin->port_num >= DIO_CONFIGURED_PORTS)
    2c02:	ed 81       	ldd	r30, Y+5	; 0x05
    2c04:	fe 81       	ldd	r31, Y+6	; 0x06
    2c06:	80 81       	ld	r24, Z
    2c08:	84 30       	cpi	r24, 0x04	; 4
    2c0a:	18 f0       	brcs	.+6      	; 0x2c12 <MCAL_Dio_WriteSinglePin+0x2e>
		{

			error = E_NOT_OK;
    2c0c:	81 e0       	ldi	r24, 0x01	; 1
    2c0e:	8c 83       	std	Y+4, r24	; 0x04
    2c10:	f0 c0       	rjmp	.+480    	; 0x2df2 <MCAL_Dio_WriteSinglePin+0x20e>
		}
		else
		{
			for (int i = 0; i < DIO_CONFIGURED_PINS; i++) {
    2c12:	1a 82       	std	Y+2, r1	; 0x02
    2c14:	19 82       	std	Y+1, r1	; 0x01
    2c16:	15 c0       	rjmp	.+42     	; 0x2c42 <MCAL_Dio_WriteSinglePin+0x5e>
						if (Pin_Num & (1 << i)) {
    2c18:	8f 81       	ldd	r24, Y+7	; 0x07
    2c1a:	88 2f       	mov	r24, r24
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	09 80       	ldd	r0, Y+1	; 0x01
    2c20:	02 c0       	rjmp	.+4      	; 0x2c26 <MCAL_Dio_WriteSinglePin+0x42>
    2c22:	95 95       	asr	r25
    2c24:	87 95       	ror	r24
    2c26:	0a 94       	dec	r0
    2c28:	e2 f7       	brpl	.-8      	; 0x2c22 <MCAL_Dio_WriteSinglePin+0x3e>
    2c2a:	81 70       	andi	r24, 0x01	; 1
    2c2c:	90 70       	andi	r25, 0x00	; 0
    2c2e:	88 23       	and	r24, r24
    2c30:	19 f0       	breq	.+6      	; 0x2c38 <MCAL_Dio_WriteSinglePin+0x54>
							bitNumber = i;
    2c32:	89 81       	ldd	r24, Y+1	; 0x01
    2c34:	8b 83       	std	Y+3, r24	; 0x03
    2c36:	0a c0       	rjmp	.+20     	; 0x2c4c <MCAL_Dio_WriteSinglePin+0x68>

			error = E_NOT_OK;
		}
		else
		{
			for (int i = 0; i < DIO_CONFIGURED_PINS; i++) {
    2c38:	89 81       	ldd	r24, Y+1	; 0x01
    2c3a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c3c:	01 96       	adiw	r24, 0x01	; 1
    2c3e:	9a 83       	std	Y+2, r25	; 0x02
    2c40:	89 83       	std	Y+1, r24	; 0x01
    2c42:	89 81       	ldd	r24, Y+1	; 0x01
    2c44:	9a 81       	ldd	r25, Y+2	; 0x02
    2c46:	88 30       	cpi	r24, 0x08	; 8
    2c48:	91 05       	cpc	r25, r1
    2c4a:	34 f3       	brlt	.-52     	; 0x2c18 <MCAL_Dio_WriteSinglePin+0x34>
						if (Pin_Num & (1 << i)) {
							bitNumber = i;
							break;
						}
					}
			switch(Dio_WritePin->port_num)
    2c4c:	ed 81       	ldd	r30, Y+5	; 0x05
    2c4e:	fe 81       	ldd	r31, Y+6	; 0x06
    2c50:	80 81       	ld	r24, Z
    2c52:	28 2f       	mov	r18, r24
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	3a 87       	std	Y+10, r19	; 0x0a
    2c58:	29 87       	std	Y+9, r18	; 0x09
    2c5a:	89 85       	ldd	r24, Y+9	; 0x09
    2c5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c5e:	81 30       	cpi	r24, 0x01	; 1
    2c60:	91 05       	cpc	r25, r1
    2c62:	09 f4       	brne	.+2      	; 0x2c66 <MCAL_Dio_WriteSinglePin+0x82>
    2c64:	43 c0       	rjmp	.+134    	; 0x2cec <MCAL_Dio_WriteSinglePin+0x108>
    2c66:	29 85       	ldd	r18, Y+9	; 0x09
    2c68:	3a 85       	ldd	r19, Y+10	; 0x0a
    2c6a:	22 30       	cpi	r18, 0x02	; 2
    2c6c:	31 05       	cpc	r19, r1
    2c6e:	2c f4       	brge	.+10     	; 0x2c7a <MCAL_Dio_WriteSinglePin+0x96>
    2c70:	89 85       	ldd	r24, Y+9	; 0x09
    2c72:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c74:	00 97       	sbiw	r24, 0x00	; 0
    2c76:	71 f0       	breq	.+28     	; 0x2c94 <MCAL_Dio_WriteSinglePin+0xb0>
    2c78:	bc c0       	rjmp	.+376    	; 0x2df2 <MCAL_Dio_WriteSinglePin+0x20e>
    2c7a:	29 85       	ldd	r18, Y+9	; 0x09
    2c7c:	3a 85       	ldd	r19, Y+10	; 0x0a
    2c7e:	22 30       	cpi	r18, 0x02	; 2
    2c80:	31 05       	cpc	r19, r1
    2c82:	09 f4       	brne	.+2      	; 0x2c86 <MCAL_Dio_WriteSinglePin+0xa2>
    2c84:	5f c0       	rjmp	.+190    	; 0x2d44 <MCAL_Dio_WriteSinglePin+0x160>
    2c86:	89 85       	ldd	r24, Y+9	; 0x09
    2c88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c8a:	83 30       	cpi	r24, 0x03	; 3
    2c8c:	91 05       	cpc	r25, r1
    2c8e:	09 f4       	brne	.+2      	; 0x2c92 <MCAL_Dio_WriteSinglePin+0xae>
    2c90:	85 c0       	rjmp	.+266    	; 0x2d9c <MCAL_Dio_WriteSinglePin+0x1b8>
    2c92:	af c0       	rjmp	.+350    	; 0x2df2 <MCAL_Dio_WriteSinglePin+0x20e>
					{
					case PORTA_ID:
						if(Pin_value == 1) // compare with one as i define LOGIC_HIGH 1 in DIO_std but ican't use it
    2c94:	88 85       	ldd	r24, Y+8	; 0x08
    2c96:	81 30       	cpi	r24, 0x01	; 1
    2c98:	a1 f4       	brne	.+40     	; 0x2cc2 <MCAL_Dio_WriteSinglePin+0xde>
						{
							SET_BIT(DIO_PORTA,bitNumber);
    2c9a:	ab e3       	ldi	r26, 0x3B	; 59
    2c9c:	b0 e0       	ldi	r27, 0x00	; 0
    2c9e:	eb e3       	ldi	r30, 0x3B	; 59
    2ca0:	f0 e0       	ldi	r31, 0x00	; 0
    2ca2:	80 81       	ld	r24, Z
    2ca4:	48 2f       	mov	r20, r24
    2ca6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca8:	28 2f       	mov	r18, r24
    2caa:	30 e0       	ldi	r19, 0x00	; 0
    2cac:	81 e0       	ldi	r24, 0x01	; 1
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	02 2e       	mov	r0, r18
    2cb2:	02 c0       	rjmp	.+4      	; 0x2cb8 <MCAL_Dio_WriteSinglePin+0xd4>
    2cb4:	88 0f       	add	r24, r24
    2cb6:	99 1f       	adc	r25, r25
    2cb8:	0a 94       	dec	r0
    2cba:	e2 f7       	brpl	.-8      	; 0x2cb4 <MCAL_Dio_WriteSinglePin+0xd0>
    2cbc:	84 2b       	or	r24, r20
    2cbe:	8c 93       	st	X, r24
    2cc0:	98 c0       	rjmp	.+304    	; 0x2df2 <MCAL_Dio_WriteSinglePin+0x20e>
						}
						else
						{
							CLEAR_BIT(DIO_PORTA,bitNumber);
    2cc2:	ab e3       	ldi	r26, 0x3B	; 59
    2cc4:	b0 e0       	ldi	r27, 0x00	; 0
    2cc6:	eb e3       	ldi	r30, 0x3B	; 59
    2cc8:	f0 e0       	ldi	r31, 0x00	; 0
    2cca:	80 81       	ld	r24, Z
    2ccc:	48 2f       	mov	r20, r24
    2cce:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd0:	28 2f       	mov	r18, r24
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	81 e0       	ldi	r24, 0x01	; 1
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	02 2e       	mov	r0, r18
    2cda:	02 c0       	rjmp	.+4      	; 0x2ce0 <MCAL_Dio_WriteSinglePin+0xfc>
    2cdc:	88 0f       	add	r24, r24
    2cde:	99 1f       	adc	r25, r25
    2ce0:	0a 94       	dec	r0
    2ce2:	e2 f7       	brpl	.-8      	; 0x2cdc <MCAL_Dio_WriteSinglePin+0xf8>
    2ce4:	80 95       	com	r24
    2ce6:	84 23       	and	r24, r20
    2ce8:	8c 93       	st	X, r24
    2cea:	83 c0       	rjmp	.+262    	; 0x2df2 <MCAL_Dio_WriteSinglePin+0x20e>
						}
						break;
					case PORTB_ID:
						if(Pin_value == 1)
    2cec:	88 85       	ldd	r24, Y+8	; 0x08
    2cee:	81 30       	cpi	r24, 0x01	; 1
    2cf0:	a1 f4       	brne	.+40     	; 0x2d1a <MCAL_Dio_WriteSinglePin+0x136>
						{
							SET_BIT(DIO_PORTB,bitNumber);
    2cf2:	a8 e3       	ldi	r26, 0x38	; 56
    2cf4:	b0 e0       	ldi	r27, 0x00	; 0
    2cf6:	e8 e3       	ldi	r30, 0x38	; 56
    2cf8:	f0 e0       	ldi	r31, 0x00	; 0
    2cfa:	80 81       	ld	r24, Z
    2cfc:	48 2f       	mov	r20, r24
    2cfe:	8b 81       	ldd	r24, Y+3	; 0x03
    2d00:	28 2f       	mov	r18, r24
    2d02:	30 e0       	ldi	r19, 0x00	; 0
    2d04:	81 e0       	ldi	r24, 0x01	; 1
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	02 2e       	mov	r0, r18
    2d0a:	02 c0       	rjmp	.+4      	; 0x2d10 <MCAL_Dio_WriteSinglePin+0x12c>
    2d0c:	88 0f       	add	r24, r24
    2d0e:	99 1f       	adc	r25, r25
    2d10:	0a 94       	dec	r0
    2d12:	e2 f7       	brpl	.-8      	; 0x2d0c <MCAL_Dio_WriteSinglePin+0x128>
    2d14:	84 2b       	or	r24, r20
    2d16:	8c 93       	st	X, r24
    2d18:	6c c0       	rjmp	.+216    	; 0x2df2 <MCAL_Dio_WriteSinglePin+0x20e>
						}
						else
						{
							CLEAR_BIT(DIO_PORTB,bitNumber);
    2d1a:	a8 e3       	ldi	r26, 0x38	; 56
    2d1c:	b0 e0       	ldi	r27, 0x00	; 0
    2d1e:	e8 e3       	ldi	r30, 0x38	; 56
    2d20:	f0 e0       	ldi	r31, 0x00	; 0
    2d22:	80 81       	ld	r24, Z
    2d24:	48 2f       	mov	r20, r24
    2d26:	8b 81       	ldd	r24, Y+3	; 0x03
    2d28:	28 2f       	mov	r18, r24
    2d2a:	30 e0       	ldi	r19, 0x00	; 0
    2d2c:	81 e0       	ldi	r24, 0x01	; 1
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	02 2e       	mov	r0, r18
    2d32:	02 c0       	rjmp	.+4      	; 0x2d38 <MCAL_Dio_WriteSinglePin+0x154>
    2d34:	88 0f       	add	r24, r24
    2d36:	99 1f       	adc	r25, r25
    2d38:	0a 94       	dec	r0
    2d3a:	e2 f7       	brpl	.-8      	; 0x2d34 <MCAL_Dio_WriteSinglePin+0x150>
    2d3c:	80 95       	com	r24
    2d3e:	84 23       	and	r24, r20
    2d40:	8c 93       	st	X, r24
    2d42:	57 c0       	rjmp	.+174    	; 0x2df2 <MCAL_Dio_WriteSinglePin+0x20e>
						}
						break;
					case PORTC_ID:
						if(Pin_value == 1)
    2d44:	88 85       	ldd	r24, Y+8	; 0x08
    2d46:	81 30       	cpi	r24, 0x01	; 1
    2d48:	a1 f4       	brne	.+40     	; 0x2d72 <MCAL_Dio_WriteSinglePin+0x18e>
						{
							SET_BIT(DIO_PORTC,bitNumber);
    2d4a:	a5 e3       	ldi	r26, 0x35	; 53
    2d4c:	b0 e0       	ldi	r27, 0x00	; 0
    2d4e:	e5 e3       	ldi	r30, 0x35	; 53
    2d50:	f0 e0       	ldi	r31, 0x00	; 0
    2d52:	80 81       	ld	r24, Z
    2d54:	48 2f       	mov	r20, r24
    2d56:	8b 81       	ldd	r24, Y+3	; 0x03
    2d58:	28 2f       	mov	r18, r24
    2d5a:	30 e0       	ldi	r19, 0x00	; 0
    2d5c:	81 e0       	ldi	r24, 0x01	; 1
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	02 2e       	mov	r0, r18
    2d62:	02 c0       	rjmp	.+4      	; 0x2d68 <MCAL_Dio_WriteSinglePin+0x184>
    2d64:	88 0f       	add	r24, r24
    2d66:	99 1f       	adc	r25, r25
    2d68:	0a 94       	dec	r0
    2d6a:	e2 f7       	brpl	.-8      	; 0x2d64 <MCAL_Dio_WriteSinglePin+0x180>
    2d6c:	84 2b       	or	r24, r20
    2d6e:	8c 93       	st	X, r24
    2d70:	40 c0       	rjmp	.+128    	; 0x2df2 <MCAL_Dio_WriteSinglePin+0x20e>
						}
						else
						{
							CLEAR_BIT(DIO_PORTC,bitNumber);
    2d72:	a5 e3       	ldi	r26, 0x35	; 53
    2d74:	b0 e0       	ldi	r27, 0x00	; 0
    2d76:	e5 e3       	ldi	r30, 0x35	; 53
    2d78:	f0 e0       	ldi	r31, 0x00	; 0
    2d7a:	80 81       	ld	r24, Z
    2d7c:	48 2f       	mov	r20, r24
    2d7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d80:	28 2f       	mov	r18, r24
    2d82:	30 e0       	ldi	r19, 0x00	; 0
    2d84:	81 e0       	ldi	r24, 0x01	; 1
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	02 2e       	mov	r0, r18
    2d8a:	02 c0       	rjmp	.+4      	; 0x2d90 <MCAL_Dio_WriteSinglePin+0x1ac>
    2d8c:	88 0f       	add	r24, r24
    2d8e:	99 1f       	adc	r25, r25
    2d90:	0a 94       	dec	r0
    2d92:	e2 f7       	brpl	.-8      	; 0x2d8c <MCAL_Dio_WriteSinglePin+0x1a8>
    2d94:	80 95       	com	r24
    2d96:	84 23       	and	r24, r20
    2d98:	8c 93       	st	X, r24
    2d9a:	2b c0       	rjmp	.+86     	; 0x2df2 <MCAL_Dio_WriteSinglePin+0x20e>
						}
						break;
					case PORTD_ID:
						if(Pin_value == 1)
    2d9c:	88 85       	ldd	r24, Y+8	; 0x08
    2d9e:	81 30       	cpi	r24, 0x01	; 1
    2da0:	a1 f4       	brne	.+40     	; 0x2dca <MCAL_Dio_WriteSinglePin+0x1e6>
						{
							SET_BIT(DIO_PORTD,bitNumber);
    2da2:	a2 e3       	ldi	r26, 0x32	; 50
    2da4:	b0 e0       	ldi	r27, 0x00	; 0
    2da6:	e2 e3       	ldi	r30, 0x32	; 50
    2da8:	f0 e0       	ldi	r31, 0x00	; 0
    2daa:	80 81       	ld	r24, Z
    2dac:	48 2f       	mov	r20, r24
    2dae:	8b 81       	ldd	r24, Y+3	; 0x03
    2db0:	28 2f       	mov	r18, r24
    2db2:	30 e0       	ldi	r19, 0x00	; 0
    2db4:	81 e0       	ldi	r24, 0x01	; 1
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	02 2e       	mov	r0, r18
    2dba:	02 c0       	rjmp	.+4      	; 0x2dc0 <MCAL_Dio_WriteSinglePin+0x1dc>
    2dbc:	88 0f       	add	r24, r24
    2dbe:	99 1f       	adc	r25, r25
    2dc0:	0a 94       	dec	r0
    2dc2:	e2 f7       	brpl	.-8      	; 0x2dbc <MCAL_Dio_WriteSinglePin+0x1d8>
    2dc4:	84 2b       	or	r24, r20
    2dc6:	8c 93       	st	X, r24
    2dc8:	14 c0       	rjmp	.+40     	; 0x2df2 <MCAL_Dio_WriteSinglePin+0x20e>
						}
						else
						{
							CLEAR_BIT(DIO_PORTD,bitNumber);
    2dca:	a2 e3       	ldi	r26, 0x32	; 50
    2dcc:	b0 e0       	ldi	r27, 0x00	; 0
    2dce:	e2 e3       	ldi	r30, 0x32	; 50
    2dd0:	f0 e0       	ldi	r31, 0x00	; 0
    2dd2:	80 81       	ld	r24, Z
    2dd4:	48 2f       	mov	r20, r24
    2dd6:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd8:	28 2f       	mov	r18, r24
    2dda:	30 e0       	ldi	r19, 0x00	; 0
    2ddc:	81 e0       	ldi	r24, 0x01	; 1
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	02 2e       	mov	r0, r18
    2de2:	02 c0       	rjmp	.+4      	; 0x2de8 <MCAL_Dio_WriteSinglePin+0x204>
    2de4:	88 0f       	add	r24, r24
    2de6:	99 1f       	adc	r25, r25
    2de8:	0a 94       	dec	r0
    2dea:	e2 f7       	brpl	.-8      	; 0x2de4 <MCAL_Dio_WriteSinglePin+0x200>
    2dec:	80 95       	com	r24
    2dee:	84 23       	and	r24, r20
    2df0:	8c 93       	st	X, r24
						break;
		}

		}

		return error;
    2df2:	8c 81       	ldd	r24, Y+4	; 0x04

}
    2df4:	2a 96       	adiw	r28, 0x0a	; 10
    2df6:	0f b6       	in	r0, 0x3f	; 63
    2df8:	f8 94       	cli
    2dfa:	de bf       	out	0x3e, r29	; 62
    2dfc:	0f be       	out	0x3f, r0	; 63
    2dfe:	cd bf       	out	0x3d, r28	; 61
    2e00:	cf 91       	pop	r28
    2e02:	df 91       	pop	r29
    2e04:	08 95       	ret

00002e06 <MCAL_Dio_ReadSinglePin>:

E_ErrorType MCAL_Dio_ReadSinglePin(S_Dio *Dio_ReadPin,E_DioPin Pin_Num,u8PinValue *Pin_Value)
{
    2e06:	df 93       	push	r29
    2e08:	cf 93       	push	r28
    2e0a:	cd b7       	in	r28, 0x3d	; 61
    2e0c:	de b7       	in	r29, 0x3e	; 62
    2e0e:	2b 97       	sbiw	r28, 0x0b	; 11
    2e10:	0f b6       	in	r0, 0x3f	; 63
    2e12:	f8 94       	cli
    2e14:	de bf       	out	0x3e, r29	; 62
    2e16:	0f be       	out	0x3f, r0	; 63
    2e18:	cd bf       	out	0x3d, r28	; 61
    2e1a:	9e 83       	std	Y+6, r25	; 0x06
    2e1c:	8d 83       	std	Y+5, r24	; 0x05
    2e1e:	6f 83       	std	Y+7, r22	; 0x07
    2e20:	59 87       	std	Y+9, r21	; 0x09
    2e22:	48 87       	std	Y+8, r20	; 0x08
	E_ErrorType error = E_OK;
    2e24:	1c 82       	std	Y+4, r1	; 0x04
	{
		error = E_NOT_OK;


	}
	else if(Dio_ReadPin->port_num >= DIO_CONFIGURED_PORTS)
    2e26:	ed 81       	ldd	r30, Y+5	; 0x05
    2e28:	fe 81       	ldd	r31, Y+6	; 0x06
    2e2a:	80 81       	ld	r24, Z
    2e2c:	84 30       	cpi	r24, 0x04	; 4
    2e2e:	18 f0       	brcs	.+6      	; 0x2e36 <MCAL_Dio_ReadSinglePin+0x30>
	{

		error = E_NOT_OK;
    2e30:	81 e0       	ldi	r24, 0x01	; 1
    2e32:	8c 83       	std	Y+4, r24	; 0x04
    2e34:	8f c0       	rjmp	.+286    	; 0x2f54 <MCAL_Dio_ReadSinglePin+0x14e>

	}
	else
	{
		for (int i = 0; i < DIO_CONFIGURED_PINS; i++) {
    2e36:	1a 82       	std	Y+2, r1	; 0x02
    2e38:	19 82       	std	Y+1, r1	; 0x01
    2e3a:	15 c0       	rjmp	.+42     	; 0x2e66 <MCAL_Dio_ReadSinglePin+0x60>
			if (Pin_Num & (1 << i)) {
    2e3c:	8f 81       	ldd	r24, Y+7	; 0x07
    2e3e:	88 2f       	mov	r24, r24
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	09 80       	ldd	r0, Y+1	; 0x01
    2e44:	02 c0       	rjmp	.+4      	; 0x2e4a <MCAL_Dio_ReadSinglePin+0x44>
    2e46:	95 95       	asr	r25
    2e48:	87 95       	ror	r24
    2e4a:	0a 94       	dec	r0
    2e4c:	e2 f7       	brpl	.-8      	; 0x2e46 <MCAL_Dio_ReadSinglePin+0x40>
    2e4e:	81 70       	andi	r24, 0x01	; 1
    2e50:	90 70       	andi	r25, 0x00	; 0
    2e52:	88 23       	and	r24, r24
    2e54:	19 f0       	breq	.+6      	; 0x2e5c <MCAL_Dio_ReadSinglePin+0x56>
				bitNumber = i;
    2e56:	89 81       	ldd	r24, Y+1	; 0x01
    2e58:	8b 83       	std	Y+3, r24	; 0x03
    2e5a:	0a c0       	rjmp	.+20     	; 0x2e70 <MCAL_Dio_ReadSinglePin+0x6a>
		error = E_NOT_OK;

	}
	else
	{
		for (int i = 0; i < DIO_CONFIGURED_PINS; i++) {
    2e5c:	89 81       	ldd	r24, Y+1	; 0x01
    2e5e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e60:	01 96       	adiw	r24, 0x01	; 1
    2e62:	9a 83       	std	Y+2, r25	; 0x02
    2e64:	89 83       	std	Y+1, r24	; 0x01
    2e66:	89 81       	ldd	r24, Y+1	; 0x01
    2e68:	9a 81       	ldd	r25, Y+2	; 0x02
    2e6a:	88 30       	cpi	r24, 0x08	; 8
    2e6c:	91 05       	cpc	r25, r1
    2e6e:	34 f3       	brlt	.-52     	; 0x2e3c <MCAL_Dio_ReadSinglePin+0x36>
			if (Pin_Num & (1 << i)) {
				bitNumber = i;
				break;
			}
		}
		switch(Dio_ReadPin->port_num)
    2e70:	ed 81       	ldd	r30, Y+5	; 0x05
    2e72:	fe 81       	ldd	r31, Y+6	; 0x06
    2e74:	80 81       	ld	r24, Z
    2e76:	28 2f       	mov	r18, r24
    2e78:	30 e0       	ldi	r19, 0x00	; 0
    2e7a:	3b 87       	std	Y+11, r19	; 0x0b
    2e7c:	2a 87       	std	Y+10, r18	; 0x0a
    2e7e:	4a 85       	ldd	r20, Y+10	; 0x0a
    2e80:	5b 85       	ldd	r21, Y+11	; 0x0b
    2e82:	41 30       	cpi	r20, 0x01	; 1
    2e84:	51 05       	cpc	r21, r1
    2e86:	59 f1       	breq	.+86     	; 0x2ede <MCAL_Dio_ReadSinglePin+0xd8>
    2e88:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e8a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e8c:	82 30       	cpi	r24, 0x02	; 2
    2e8e:	91 05       	cpc	r25, r1
    2e90:	34 f4       	brge	.+12     	; 0x2e9e <MCAL_Dio_ReadSinglePin+0x98>
    2e92:	2a 85       	ldd	r18, Y+10	; 0x0a
    2e94:	3b 85       	ldd	r19, Y+11	; 0x0b
    2e96:	21 15       	cp	r18, r1
    2e98:	31 05       	cpc	r19, r1
    2e9a:	69 f0       	breq	.+26     	; 0x2eb6 <MCAL_Dio_ReadSinglePin+0xb0>
    2e9c:	5b c0       	rjmp	.+182    	; 0x2f54 <MCAL_Dio_ReadSinglePin+0x14e>
    2e9e:	4a 85       	ldd	r20, Y+10	; 0x0a
    2ea0:	5b 85       	ldd	r21, Y+11	; 0x0b
    2ea2:	42 30       	cpi	r20, 0x02	; 2
    2ea4:	51 05       	cpc	r21, r1
    2ea6:	79 f1       	breq	.+94     	; 0x2f06 <MCAL_Dio_ReadSinglePin+0x100>
    2ea8:	8a 85       	ldd	r24, Y+10	; 0x0a
    2eaa:	9b 85       	ldd	r25, Y+11	; 0x0b
    2eac:	83 30       	cpi	r24, 0x03	; 3
    2eae:	91 05       	cpc	r25, r1
    2eb0:	09 f4       	brne	.+2      	; 0x2eb4 <MCAL_Dio_ReadSinglePin+0xae>
    2eb2:	3d c0       	rjmp	.+122    	; 0x2f2e <MCAL_Dio_ReadSinglePin+0x128>
    2eb4:	4f c0       	rjmp	.+158    	; 0x2f54 <MCAL_Dio_ReadSinglePin+0x14e>
				{
				case PORTA_ID:
					*Pin_Value = GET_BIT(DIO_PINA,bitNumber);
    2eb6:	e9 e3       	ldi	r30, 0x39	; 57
    2eb8:	f0 e0       	ldi	r31, 0x00	; 0
    2eba:	80 81       	ld	r24, Z
    2ebc:	28 2f       	mov	r18, r24
    2ebe:	30 e0       	ldi	r19, 0x00	; 0
    2ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec2:	88 2f       	mov	r24, r24
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	a9 01       	movw	r20, r18
    2ec8:	02 c0       	rjmp	.+4      	; 0x2ece <MCAL_Dio_ReadSinglePin+0xc8>
    2eca:	55 95       	asr	r21
    2ecc:	47 95       	ror	r20
    2ece:	8a 95       	dec	r24
    2ed0:	e2 f7       	brpl	.-8      	; 0x2eca <MCAL_Dio_ReadSinglePin+0xc4>
    2ed2:	ca 01       	movw	r24, r20
    2ed4:	81 70       	andi	r24, 0x01	; 1
    2ed6:	e8 85       	ldd	r30, Y+8	; 0x08
    2ed8:	f9 85       	ldd	r31, Y+9	; 0x09
    2eda:	80 83       	st	Z, r24
    2edc:	3b c0       	rjmp	.+118    	; 0x2f54 <MCAL_Dio_ReadSinglePin+0x14e>
					break;
				case PORTB_ID:
					*Pin_Value = GET_BIT(DIO_PINB,bitNumber);
    2ede:	e6 e3       	ldi	r30, 0x36	; 54
    2ee0:	f0 e0       	ldi	r31, 0x00	; 0
    2ee2:	80 81       	ld	r24, Z
    2ee4:	28 2f       	mov	r18, r24
    2ee6:	30 e0       	ldi	r19, 0x00	; 0
    2ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eea:	88 2f       	mov	r24, r24
    2eec:	90 e0       	ldi	r25, 0x00	; 0
    2eee:	a9 01       	movw	r20, r18
    2ef0:	02 c0       	rjmp	.+4      	; 0x2ef6 <MCAL_Dio_ReadSinglePin+0xf0>
    2ef2:	55 95       	asr	r21
    2ef4:	47 95       	ror	r20
    2ef6:	8a 95       	dec	r24
    2ef8:	e2 f7       	brpl	.-8      	; 0x2ef2 <MCAL_Dio_ReadSinglePin+0xec>
    2efa:	ca 01       	movw	r24, r20
    2efc:	81 70       	andi	r24, 0x01	; 1
    2efe:	e8 85       	ldd	r30, Y+8	; 0x08
    2f00:	f9 85       	ldd	r31, Y+9	; 0x09
    2f02:	80 83       	st	Z, r24
    2f04:	27 c0       	rjmp	.+78     	; 0x2f54 <MCAL_Dio_ReadSinglePin+0x14e>
					break;
				case PORTC_ID:
					*Pin_Value = GET_BIT(DIO_PINC,bitNumber);
    2f06:	e3 e3       	ldi	r30, 0x33	; 51
    2f08:	f0 e0       	ldi	r31, 0x00	; 0
    2f0a:	80 81       	ld	r24, Z
    2f0c:	28 2f       	mov	r18, r24
    2f0e:	30 e0       	ldi	r19, 0x00	; 0
    2f10:	8b 81       	ldd	r24, Y+3	; 0x03
    2f12:	88 2f       	mov	r24, r24
    2f14:	90 e0       	ldi	r25, 0x00	; 0
    2f16:	a9 01       	movw	r20, r18
    2f18:	02 c0       	rjmp	.+4      	; 0x2f1e <MCAL_Dio_ReadSinglePin+0x118>
    2f1a:	55 95       	asr	r21
    2f1c:	47 95       	ror	r20
    2f1e:	8a 95       	dec	r24
    2f20:	e2 f7       	brpl	.-8      	; 0x2f1a <MCAL_Dio_ReadSinglePin+0x114>
    2f22:	ca 01       	movw	r24, r20
    2f24:	81 70       	andi	r24, 0x01	; 1
    2f26:	e8 85       	ldd	r30, Y+8	; 0x08
    2f28:	f9 85       	ldd	r31, Y+9	; 0x09
    2f2a:	80 83       	st	Z, r24
    2f2c:	13 c0       	rjmp	.+38     	; 0x2f54 <MCAL_Dio_ReadSinglePin+0x14e>
					break;
				case PORTD_ID:
					*Pin_Value = GET_BIT(DIO_PIND,bitNumber);
    2f2e:	e0 e3       	ldi	r30, 0x30	; 48
    2f30:	f0 e0       	ldi	r31, 0x00	; 0
    2f32:	80 81       	ld	r24, Z
    2f34:	28 2f       	mov	r18, r24
    2f36:	30 e0       	ldi	r19, 0x00	; 0
    2f38:	8b 81       	ldd	r24, Y+3	; 0x03
    2f3a:	88 2f       	mov	r24, r24
    2f3c:	90 e0       	ldi	r25, 0x00	; 0
    2f3e:	a9 01       	movw	r20, r18
    2f40:	02 c0       	rjmp	.+4      	; 0x2f46 <MCAL_Dio_ReadSinglePin+0x140>
    2f42:	55 95       	asr	r21
    2f44:	47 95       	ror	r20
    2f46:	8a 95       	dec	r24
    2f48:	e2 f7       	brpl	.-8      	; 0x2f42 <MCAL_Dio_ReadSinglePin+0x13c>
    2f4a:	ca 01       	movw	r24, r20
    2f4c:	81 70       	andi	r24, 0x01	; 1
    2f4e:	e8 85       	ldd	r30, Y+8	; 0x08
    2f50:	f9 85       	ldd	r31, Y+9	; 0x09
    2f52:	80 83       	st	Z, r24
					break;
				}
	}
	return error;
    2f54:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2f56:	2b 96       	adiw	r28, 0x0b	; 11
    2f58:	0f b6       	in	r0, 0x3f	; 63
    2f5a:	f8 94       	cli
    2f5c:	de bf       	out	0x3e, r29	; 62
    2f5e:	0f be       	out	0x3f, r0	; 63
    2f60:	cd bf       	out	0x3d, r28	; 61
    2f62:	cf 91       	pop	r28
    2f64:	df 91       	pop	r29
    2f66:	08 95       	ret

00002f68 <MCAL_Dio_TogglePin>:

E_ErrorType MCAL_Dio_TogglePin(S_Dio *Dio_TogglePin,E_DioPin Pin_Num)
{
    2f68:	df 93       	push	r29
    2f6a:	cf 93       	push	r28
    2f6c:	cd b7       	in	r28, 0x3d	; 61
    2f6e:	de b7       	in	r29, 0x3e	; 62
    2f70:	29 97       	sbiw	r28, 0x09	; 9
    2f72:	0f b6       	in	r0, 0x3f	; 63
    2f74:	f8 94       	cli
    2f76:	de bf       	out	0x3e, r29	; 62
    2f78:	0f be       	out	0x3f, r0	; 63
    2f7a:	cd bf       	out	0x3d, r28	; 61
    2f7c:	9e 83       	std	Y+6, r25	; 0x06
    2f7e:	8d 83       	std	Y+5, r24	; 0x05
    2f80:	6f 83       	std	Y+7, r22	; 0x07

	E_ErrorType error = E_OK;
    2f82:	1c 82       	std	Y+4, r1	; 0x04
	{
		error = E_NOT_OK;


	}
	else if(Dio_TogglePin->port_num >= DIO_CONFIGURED_PORTS)
    2f84:	ed 81       	ldd	r30, Y+5	; 0x05
    2f86:	fe 81       	ldd	r31, Y+6	; 0x06
    2f88:	80 81       	ld	r24, Z
    2f8a:	84 30       	cpi	r24, 0x04	; 4
    2f8c:	18 f0       	brcs	.+6      	; 0x2f94 <MCAL_Dio_TogglePin+0x2c>
	{

		error = E_NOT_OK;
    2f8e:	81 e0       	ldi	r24, 0x01	; 1
    2f90:	8c 83       	std	Y+4, r24	; 0x04
    2f92:	8d c0       	rjmp	.+282    	; 0x30ae <MCAL_Dio_TogglePin+0x146>

	}
	else
	{
		for (int i = 0; i < DIO_CONFIGURED_PINS; i++) {
    2f94:	1a 82       	std	Y+2, r1	; 0x02
    2f96:	19 82       	std	Y+1, r1	; 0x01
    2f98:	15 c0       	rjmp	.+42     	; 0x2fc4 <MCAL_Dio_TogglePin+0x5c>
			if (Pin_Num & (1 << i)) {
    2f9a:	8f 81       	ldd	r24, Y+7	; 0x07
    2f9c:	88 2f       	mov	r24, r24
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	09 80       	ldd	r0, Y+1	; 0x01
    2fa2:	02 c0       	rjmp	.+4      	; 0x2fa8 <MCAL_Dio_TogglePin+0x40>
    2fa4:	95 95       	asr	r25
    2fa6:	87 95       	ror	r24
    2fa8:	0a 94       	dec	r0
    2faa:	e2 f7       	brpl	.-8      	; 0x2fa4 <MCAL_Dio_TogglePin+0x3c>
    2fac:	81 70       	andi	r24, 0x01	; 1
    2fae:	90 70       	andi	r25, 0x00	; 0
    2fb0:	88 23       	and	r24, r24
    2fb2:	19 f0       	breq	.+6      	; 0x2fba <MCAL_Dio_TogglePin+0x52>
				bitNumber = i;
    2fb4:	89 81       	ldd	r24, Y+1	; 0x01
    2fb6:	8b 83       	std	Y+3, r24	; 0x03
    2fb8:	0a c0       	rjmp	.+20     	; 0x2fce <MCAL_Dio_TogglePin+0x66>
		error = E_NOT_OK;

	}
	else
	{
		for (int i = 0; i < DIO_CONFIGURED_PINS; i++) {
    2fba:	89 81       	ldd	r24, Y+1	; 0x01
    2fbc:	9a 81       	ldd	r25, Y+2	; 0x02
    2fbe:	01 96       	adiw	r24, 0x01	; 1
    2fc0:	9a 83       	std	Y+2, r25	; 0x02
    2fc2:	89 83       	std	Y+1, r24	; 0x01
    2fc4:	89 81       	ldd	r24, Y+1	; 0x01
    2fc6:	9a 81       	ldd	r25, Y+2	; 0x02
    2fc8:	88 30       	cpi	r24, 0x08	; 8
    2fca:	91 05       	cpc	r25, r1
    2fcc:	34 f3       	brlt	.-52     	; 0x2f9a <MCAL_Dio_TogglePin+0x32>
				bitNumber = i;
				break;
			}
		}

		switch (Dio_TogglePin->port_num)
    2fce:	ed 81       	ldd	r30, Y+5	; 0x05
    2fd0:	fe 81       	ldd	r31, Y+6	; 0x06
    2fd2:	80 81       	ld	r24, Z
    2fd4:	28 2f       	mov	r18, r24
    2fd6:	30 e0       	ldi	r19, 0x00	; 0
    2fd8:	39 87       	std	Y+9, r19	; 0x09
    2fda:	28 87       	std	Y+8, r18	; 0x08
    2fdc:	88 85       	ldd	r24, Y+8	; 0x08
    2fde:	99 85       	ldd	r25, Y+9	; 0x09
    2fe0:	81 30       	cpi	r24, 0x01	; 1
    2fe2:	91 05       	cpc	r25, r1
    2fe4:	49 f1       	breq	.+82     	; 0x3038 <MCAL_Dio_TogglePin+0xd0>
    2fe6:	28 85       	ldd	r18, Y+8	; 0x08
    2fe8:	39 85       	ldd	r19, Y+9	; 0x09
    2fea:	22 30       	cpi	r18, 0x02	; 2
    2fec:	31 05       	cpc	r19, r1
    2fee:	2c f4       	brge	.+10     	; 0x2ffa <MCAL_Dio_TogglePin+0x92>
    2ff0:	88 85       	ldd	r24, Y+8	; 0x08
    2ff2:	99 85       	ldd	r25, Y+9	; 0x09
    2ff4:	00 97       	sbiw	r24, 0x00	; 0
    2ff6:	61 f0       	breq	.+24     	; 0x3010 <MCAL_Dio_TogglePin+0xa8>
    2ff8:	5a c0       	rjmp	.+180    	; 0x30ae <MCAL_Dio_TogglePin+0x146>
    2ffa:	28 85       	ldd	r18, Y+8	; 0x08
    2ffc:	39 85       	ldd	r19, Y+9	; 0x09
    2ffe:	22 30       	cpi	r18, 0x02	; 2
    3000:	31 05       	cpc	r19, r1
    3002:	71 f1       	breq	.+92     	; 0x3060 <MCAL_Dio_TogglePin+0xf8>
    3004:	88 85       	ldd	r24, Y+8	; 0x08
    3006:	99 85       	ldd	r25, Y+9	; 0x09
    3008:	83 30       	cpi	r24, 0x03	; 3
    300a:	91 05       	cpc	r25, r1
    300c:	e9 f1       	breq	.+122    	; 0x3088 <MCAL_Dio_TogglePin+0x120>
    300e:	4f c0       	rjmp	.+158    	; 0x30ae <MCAL_Dio_TogglePin+0x146>
		{
		case PORTA_ID:
			DIO_PORTA = DIO_PORTA ^ (1<<bitNumber);
    3010:	ab e3       	ldi	r26, 0x3B	; 59
    3012:	b0 e0       	ldi	r27, 0x00	; 0
    3014:	eb e3       	ldi	r30, 0x3B	; 59
    3016:	f0 e0       	ldi	r31, 0x00	; 0
    3018:	80 81       	ld	r24, Z
    301a:	48 2f       	mov	r20, r24
    301c:	8b 81       	ldd	r24, Y+3	; 0x03
    301e:	28 2f       	mov	r18, r24
    3020:	30 e0       	ldi	r19, 0x00	; 0
    3022:	81 e0       	ldi	r24, 0x01	; 1
    3024:	90 e0       	ldi	r25, 0x00	; 0
    3026:	02 2e       	mov	r0, r18
    3028:	02 c0       	rjmp	.+4      	; 0x302e <MCAL_Dio_TogglePin+0xc6>
    302a:	88 0f       	add	r24, r24
    302c:	99 1f       	adc	r25, r25
    302e:	0a 94       	dec	r0
    3030:	e2 f7       	brpl	.-8      	; 0x302a <MCAL_Dio_TogglePin+0xc2>
    3032:	84 27       	eor	r24, r20
    3034:	8c 93       	st	X, r24
    3036:	3b c0       	rjmp	.+118    	; 0x30ae <MCAL_Dio_TogglePin+0x146>
			break;
		case PORTB_ID:
			DIO_PORTB = DIO_PORTB ^ (1<<bitNumber);
    3038:	a8 e3       	ldi	r26, 0x38	; 56
    303a:	b0 e0       	ldi	r27, 0x00	; 0
    303c:	e8 e3       	ldi	r30, 0x38	; 56
    303e:	f0 e0       	ldi	r31, 0x00	; 0
    3040:	80 81       	ld	r24, Z
    3042:	48 2f       	mov	r20, r24
    3044:	8b 81       	ldd	r24, Y+3	; 0x03
    3046:	28 2f       	mov	r18, r24
    3048:	30 e0       	ldi	r19, 0x00	; 0
    304a:	81 e0       	ldi	r24, 0x01	; 1
    304c:	90 e0       	ldi	r25, 0x00	; 0
    304e:	02 2e       	mov	r0, r18
    3050:	02 c0       	rjmp	.+4      	; 0x3056 <MCAL_Dio_TogglePin+0xee>
    3052:	88 0f       	add	r24, r24
    3054:	99 1f       	adc	r25, r25
    3056:	0a 94       	dec	r0
    3058:	e2 f7       	brpl	.-8      	; 0x3052 <MCAL_Dio_TogglePin+0xea>
    305a:	84 27       	eor	r24, r20
    305c:	8c 93       	st	X, r24
    305e:	27 c0       	rjmp	.+78     	; 0x30ae <MCAL_Dio_TogglePin+0x146>
			break;
		case PORTC_ID:
			DIO_PORTB = DIO_PORTC ^ (1<<bitNumber);
    3060:	a8 e3       	ldi	r26, 0x38	; 56
    3062:	b0 e0       	ldi	r27, 0x00	; 0
    3064:	e5 e3       	ldi	r30, 0x35	; 53
    3066:	f0 e0       	ldi	r31, 0x00	; 0
    3068:	80 81       	ld	r24, Z
    306a:	48 2f       	mov	r20, r24
    306c:	8b 81       	ldd	r24, Y+3	; 0x03
    306e:	28 2f       	mov	r18, r24
    3070:	30 e0       	ldi	r19, 0x00	; 0
    3072:	81 e0       	ldi	r24, 0x01	; 1
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	02 2e       	mov	r0, r18
    3078:	02 c0       	rjmp	.+4      	; 0x307e <MCAL_Dio_TogglePin+0x116>
    307a:	88 0f       	add	r24, r24
    307c:	99 1f       	adc	r25, r25
    307e:	0a 94       	dec	r0
    3080:	e2 f7       	brpl	.-8      	; 0x307a <MCAL_Dio_TogglePin+0x112>
    3082:	84 27       	eor	r24, r20
    3084:	8c 93       	st	X, r24
    3086:	13 c0       	rjmp	.+38     	; 0x30ae <MCAL_Dio_TogglePin+0x146>
			break;
		case PORTD_ID:
			DIO_PORTB = DIO_PORTD ^ (1<<bitNumber);
    3088:	a8 e3       	ldi	r26, 0x38	; 56
    308a:	b0 e0       	ldi	r27, 0x00	; 0
    308c:	e2 e3       	ldi	r30, 0x32	; 50
    308e:	f0 e0       	ldi	r31, 0x00	; 0
    3090:	80 81       	ld	r24, Z
    3092:	48 2f       	mov	r20, r24
    3094:	8b 81       	ldd	r24, Y+3	; 0x03
    3096:	28 2f       	mov	r18, r24
    3098:	30 e0       	ldi	r19, 0x00	; 0
    309a:	81 e0       	ldi	r24, 0x01	; 1
    309c:	90 e0       	ldi	r25, 0x00	; 0
    309e:	02 2e       	mov	r0, r18
    30a0:	02 c0       	rjmp	.+4      	; 0x30a6 <MCAL_Dio_TogglePin+0x13e>
    30a2:	88 0f       	add	r24, r24
    30a4:	99 1f       	adc	r25, r25
    30a6:	0a 94       	dec	r0
    30a8:	e2 f7       	brpl	.-8      	; 0x30a2 <MCAL_Dio_TogglePin+0x13a>
    30aa:	84 27       	eor	r24, r20
    30ac:	8c 93       	st	X, r24

			break;
		}
	}

	return error;
    30ae:	8c 81       	ldd	r24, Y+4	; 0x04

}
    30b0:	29 96       	adiw	r28, 0x09	; 9
    30b2:	0f b6       	in	r0, 0x3f	; 63
    30b4:	f8 94       	cli
    30b6:	de bf       	out	0x3e, r29	; 62
    30b8:	0f be       	out	0x3f, r0	; 63
    30ba:	cd bf       	out	0x3d, r28	; 61
    30bc:	cf 91       	pop	r28
    30be:	df 91       	pop	r29
    30c0:	08 95       	ret

000030c2 <MCAL_ADC_INIT>:

#include "ADC_interface.h"
#include "ADC_CFG.h"

E_ERROR_TYPE MCAL_ADC_INIT(){
    30c2:	df 93       	push	r29
    30c4:	cf 93       	push	r28
    30c6:	00 d0       	rcall	.+0      	; 0x30c8 <MCAL_ADC_INIT+0x6>
    30c8:	0f 92       	push	r0
    30ca:	cd b7       	in	r28, 0x3d	; 61
    30cc:	de b7       	in	r29, 0x3e	; 62
	E_ERROR_TYPE u8LocalError = E_OKAY;
    30ce:	81 e0       	ldi	r24, 0x01	; 1
    30d0:	89 83       	std	Y+1, r24	; 0x01
	if(ADC_STATUS_ERROR!=E_OKAY){

	}
		else{
	ADMUX=0;
    30d2:	e7 e2       	ldi	r30, 0x27	; 39
    30d4:	f0 e0       	ldi	r31, 0x00	; 0
    30d6:	10 82       	st	Z, r1
	switch(vref){
    30d8:	80 91 93 01 	lds	r24, 0x0193
    30dc:	28 2f       	mov	r18, r24
    30de:	30 e0       	ldi	r19, 0x00	; 0
    30e0:	3b 83       	std	Y+3, r19	; 0x03
    30e2:	2a 83       	std	Y+2, r18	; 0x02
    30e4:	8a 81       	ldd	r24, Y+2	; 0x02
    30e6:	9b 81       	ldd	r25, Y+3	; 0x03
    30e8:	81 30       	cpi	r24, 0x01	; 1
    30ea:	91 05       	cpc	r25, r1
    30ec:	c1 f0       	breq	.+48     	; 0x311e <MCAL_ADC_INIT+0x5c>
    30ee:	2a 81       	ldd	r18, Y+2	; 0x02
    30f0:	3b 81       	ldd	r19, Y+3	; 0x03
    30f2:	22 30       	cpi	r18, 0x02	; 2
    30f4:	31 05       	cpc	r19, r1
    30f6:	11 f1       	breq	.+68     	; 0x313c <MCAL_ADC_INIT+0x7a>
    30f8:	8a 81       	ldd	r24, Y+2	; 0x02
    30fa:	9b 81       	ldd	r25, Y+3	; 0x03
    30fc:	00 97       	sbiw	r24, 0x00	; 0
    30fe:	61 f5       	brne	.+88     	; 0x3158 <MCAL_ADC_INIT+0x96>
	case ADC_AREF:
		CLEAR_BIT(ADMUX, REFS1);
    3100:	a7 e2       	ldi	r26, 0x27	; 39
    3102:	b0 e0       	ldi	r27, 0x00	; 0
    3104:	e7 e2       	ldi	r30, 0x27	; 39
    3106:	f0 e0       	ldi	r31, 0x00	; 0
    3108:	80 81       	ld	r24, Z
    310a:	8f 77       	andi	r24, 0x7F	; 127
    310c:	8c 93       	st	X, r24
		CLEAR_BIT(ADMUX, REFS0);
    310e:	a7 e2       	ldi	r26, 0x27	; 39
    3110:	b0 e0       	ldi	r27, 0x00	; 0
    3112:	e7 e2       	ldi	r30, 0x27	; 39
    3114:	f0 e0       	ldi	r31, 0x00	; 0
    3116:	80 81       	ld	r24, Z
    3118:	8f 7b       	andi	r24, 0xBF	; 191
    311a:	8c 93       	st	X, r24
    311c:	1d c0       	rjmp	.+58     	; 0x3158 <MCAL_ADC_INIT+0x96>
		break;
	case ADC_VCC:
			CLEAR_BIT(ADMUX, REFS1);
    311e:	a7 e2       	ldi	r26, 0x27	; 39
    3120:	b0 e0       	ldi	r27, 0x00	; 0
    3122:	e7 e2       	ldi	r30, 0x27	; 39
    3124:	f0 e0       	ldi	r31, 0x00	; 0
    3126:	80 81       	ld	r24, Z
    3128:	8f 77       	andi	r24, 0x7F	; 127
    312a:	8c 93       	st	X, r24
			SET_BIT(ADMUX, REFS0);
    312c:	a7 e2       	ldi	r26, 0x27	; 39
    312e:	b0 e0       	ldi	r27, 0x00	; 0
    3130:	e7 e2       	ldi	r30, 0x27	; 39
    3132:	f0 e0       	ldi	r31, 0x00	; 0
    3134:	80 81       	ld	r24, Z
    3136:	80 64       	ori	r24, 0x40	; 64
    3138:	8c 93       	st	X, r24
    313a:	0e c0       	rjmp	.+28     	; 0x3158 <MCAL_ADC_INIT+0x96>
			break;
	case ADC_V256:
			SET_BIT(ADMUX, REFS1);
    313c:	a7 e2       	ldi	r26, 0x27	; 39
    313e:	b0 e0       	ldi	r27, 0x00	; 0
    3140:	e7 e2       	ldi	r30, 0x27	; 39
    3142:	f0 e0       	ldi	r31, 0x00	; 0
    3144:	80 81       	ld	r24, Z
    3146:	80 68       	ori	r24, 0x80	; 128
    3148:	8c 93       	st	X, r24
			SET_BIT(ADMUX, REFS0);
    314a:	a7 e2       	ldi	r26, 0x27	; 39
    314c:	b0 e0       	ldi	r27, 0x00	; 0
    314e:	e7 e2       	ldi	r30, 0x27	; 39
    3150:	f0 e0       	ldi	r31, 0x00	; 0
    3152:	80 81       	ld	r24, Z
    3154:	80 64       	ori	r24, 0x40	; 64
    3156:	8c 93       	st	X, r24
			break;}

	ADCSRA&=0XF8;
    3158:	a6 e2       	ldi	r26, 0x26	; 38
    315a:	b0 e0       	ldi	r27, 0x00	; 0
    315c:	e6 e2       	ldi	r30, 0x26	; 38
    315e:	f0 e0       	ldi	r31, 0x00	; 0
    3160:	80 81       	ld	r24, Z
    3162:	88 7f       	andi	r24, 0xF8	; 248
    3164:	8c 93       	st	X, r24
	scaler&=0X07;
    3166:	80 91 94 01 	lds	r24, 0x0194
    316a:	87 70       	andi	r24, 0x07	; 7
    316c:	80 93 94 01 	sts	0x0194, r24
	ADCSRA=ADCSRA|scaler;
    3170:	a6 e2       	ldi	r26, 0x26	; 38
    3172:	b0 e0       	ldi	r27, 0x00	; 0
    3174:	e6 e2       	ldi	r30, 0x26	; 38
    3176:	f0 e0       	ldi	r31, 0x00	; 0
    3178:	90 81       	ld	r25, Z
    317a:	80 91 94 01 	lds	r24, 0x0194
    317e:	89 2b       	or	r24, r25
    3180:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADEN);
    3182:	a6 e2       	ldi	r26, 0x26	; 38
    3184:	b0 e0       	ldi	r27, 0x00	; 0
    3186:	e6 e2       	ldi	r30, 0x26	; 38
    3188:	f0 e0       	ldi	r31, 0x00	; 0
    318a:	80 81       	ld	r24, Z
    318c:	80 68       	ori	r24, 0x80	; 128
    318e:	8c 93       	st	X, r24
	CLEAR_BIT(ADMUX, ADLAR);
    3190:	a7 e2       	ldi	r26, 0x27	; 39
    3192:	b0 e0       	ldi	r27, 0x00	; 0
    3194:	e7 e2       	ldi	r30, 0x27	; 39
    3196:	f0 e0       	ldi	r31, 0x00	; 0
    3198:	80 81       	ld	r24, Z
    319a:	8f 7d       	andi	r24, 0xDF	; 223
    319c:	8c 93       	st	X, r24
}
	return u8LocalError;
    319e:	89 81       	ldd	r24, Y+1	; 0x01
}
    31a0:	0f 90       	pop	r0
    31a2:	0f 90       	pop	r0
    31a4:	0f 90       	pop	r0
    31a6:	cf 91       	pop	r28
    31a8:	df 91       	pop	r29
    31aa:	08 95       	ret

000031ac <MCAL_ADC_READ>:

u16 MCAL_ADC_READ(ADC_Channel_Type channel){
    31ac:	df 93       	push	r29
    31ae:	cf 93       	push	r28
    31b0:	0f 92       	push	r0
    31b2:	cd b7       	in	r28, 0x3d	; 61
    31b4:	de b7       	in	r29, 0x3e	; 62
    31b6:	89 83       	std	Y+1, r24	; 0x01

	ADMUX&=0XE0;
    31b8:	a7 e2       	ldi	r26, 0x27	; 39
    31ba:	b0 e0       	ldi	r27, 0x00	; 0
    31bc:	e7 e2       	ldi	r30, 0x27	; 39
    31be:	f0 e0       	ldi	r31, 0x00	; 0
    31c0:	80 81       	ld	r24, Z
    31c2:	80 7e       	andi	r24, 0xE0	; 224
    31c4:	8c 93       	st	X, r24
	ADMUX|=channel;
    31c6:	a7 e2       	ldi	r26, 0x27	; 39
    31c8:	b0 e0       	ldi	r27, 0x00	; 0
    31ca:	e7 e2       	ldi	r30, 0x27	; 39
    31cc:	f0 e0       	ldi	r31, 0x00	; 0
    31ce:	90 81       	ld	r25, Z
    31d0:	89 81       	ldd	r24, Y+1	; 0x01
    31d2:	89 2b       	or	r24, r25
    31d4:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC);
    31d6:	a6 e2       	ldi	r26, 0x26	; 38
    31d8:	b0 e0       	ldi	r27, 0x00	; 0
    31da:	e6 e2       	ldi	r30, 0x26	; 38
    31dc:	f0 e0       	ldi	r31, 0x00	; 0
    31de:	80 81       	ld	r24, Z
    31e0:	80 64       	ori	r24, 0x40	; 64
    31e2:	8c 93       	st	X, r24
	while(GET_BIT(ADCSRA,ADSC));
    31e4:	e6 e2       	ldi	r30, 0x26	; 38
    31e6:	f0 e0       	ldi	r31, 0x00	; 0
    31e8:	80 81       	ld	r24, Z
    31ea:	82 95       	swap	r24
    31ec:	86 95       	lsr	r24
    31ee:	86 95       	lsr	r24
    31f0:	83 70       	andi	r24, 0x03	; 3
    31f2:	88 2f       	mov	r24, r24
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	81 70       	andi	r24, 0x01	; 1
    31f8:	90 70       	andi	r25, 0x00	; 0
    31fa:	88 23       	and	r24, r24
    31fc:	99 f7       	brne	.-26     	; 0x31e4 <MCAL_ADC_READ+0x38>

	return ADC;
    31fe:	e4 e2       	ldi	r30, 0x24	; 36
    3200:	f0 e0       	ldi	r31, 0x00	; 0
    3202:	80 81       	ld	r24, Z
    3204:	91 81       	ldd	r25, Z+1	; 0x01
}
    3206:	0f 90       	pop	r0
    3208:	cf 91       	pop	r28
    320a:	df 91       	pop	r29
    320c:	08 95       	ret

0000320e <HAL_RTC_Init>:




E_RTC_ErrorType HAL_RTC_Init(S_RTCData *RTCData)
{
    320e:	df 93       	push	r29
    3210:	cf 93       	push	r28
    3212:	cd b7       	in	r28, 0x3d	; 61
    3214:	de b7       	in	r29, 0x3e	; 62
    3216:	2f 97       	sbiw	r28, 0x0f	; 15
    3218:	0f b6       	in	r0, 0x3f	; 63
    321a:	f8 94       	cli
    321c:	de bf       	out	0x3e, r29	; 62
    321e:	0f be       	out	0x3f, r0	; 63
    3220:	cd bf       	out	0x3d, r28	; 61
    3222:	9f 87       	std	Y+15, r25	; 0x0f
    3224:	8e 87       	std	Y+14, r24	; 0x0e
	uint16_t minutes,hourse,days,month,year;
	E_RTC_ErrorType error = RTC_E_OK;
    3226:	1b 82       	std	Y+3, r1	; 0x03

	if(RTC_STATUS_ERROR== RTC_E_NOT_OK)
	{
		error = RTC_E_NOT_OK;
	}
	else if((RTCData->day_num > MAX_DAY_NUMBER) || (RTCData->month > MAX_MONTH_NUMBER)  || (RTCData->seconds > MAX_SECOND_NUMBER) || (RTCData->minutse > MAX_MINUTE_NUMBER) || (RTCData->hours > MAX_HOUR_NUMBER))
    3228:	ee 85       	ldd	r30, Y+14	; 0x0e
    322a:	ff 85       	ldd	r31, Y+15	; 0x0f
    322c:	80 81       	ld	r24, Z
    322e:	80 32       	cpi	r24, 0x20	; 32
    3230:	a0 f4       	brcc	.+40     	; 0x325a <HAL_RTC_Init+0x4c>
    3232:	ee 85       	ldd	r30, Y+14	; 0x0e
    3234:	ff 85       	ldd	r31, Y+15	; 0x0f
    3236:	81 81       	ldd	r24, Z+1	; 0x01
    3238:	8d 30       	cpi	r24, 0x0D	; 13
    323a:	78 f4       	brcc	.+30     	; 0x325a <HAL_RTC_Init+0x4c>
    323c:	ee 85       	ldd	r30, Y+14	; 0x0e
    323e:	ff 85       	ldd	r31, Y+15	; 0x0f
    3240:	86 81       	ldd	r24, Z+6	; 0x06
    3242:	8d 33       	cpi	r24, 0x3D	; 61
    3244:	50 f4       	brcc	.+20     	; 0x325a <HAL_RTC_Init+0x4c>
    3246:	ee 85       	ldd	r30, Y+14	; 0x0e
    3248:	ff 85       	ldd	r31, Y+15	; 0x0f
    324a:	85 81       	ldd	r24, Z+5	; 0x05
    324c:	8d 33       	cpi	r24, 0x3D	; 61
    324e:	28 f4       	brcc	.+10     	; 0x325a <HAL_RTC_Init+0x4c>
    3250:	ee 85       	ldd	r30, Y+14	; 0x0e
    3252:	ff 85       	ldd	r31, Y+15	; 0x0f
    3254:	84 81       	ldd	r24, Z+4	; 0x04
    3256:	8d 30       	cpi	r24, 0x0D	; 13
    3258:	18 f0       	brcs	.+6      	; 0x3260 <HAL_RTC_Init+0x52>
	{
		error = RTC_E_DATE_FORMAT;
    325a:	82 e0       	ldi	r24, 0x02	; 2
    325c:	8b 83       	std	Y+3, r24	; 0x03
    325e:	db c0       	rjmp	.+438    	; 0x3416 <HAL_RTC_Init+0x208>

	}
	else
	{
		/* First Write the Time Format*/
		I2C_Start(Device_Write_address);			/* Start I2C communication with RTC */
    3260:	80 ed       	ldi	r24, 0xD0	; 208
    3262:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <I2C_Start>
		I2C_Write(READ_CLOCK_ADDRESS);								/* Write on 0 location for second value */
    3266:	80 e0       	ldi	r24, 0x00	; 0
    3268:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <I2C_Write>
		/*converting the decimal value to hex*/
		uint16_t seconds  = ((RTCData->seconds / 10) << 4) | (RTCData->seconds % 10);
    326c:	ee 85       	ldd	r30, Y+14	; 0x0e
    326e:	ff 85       	ldd	r31, Y+15	; 0x0f
    3270:	86 81       	ldd	r24, Z+6	; 0x06
    3272:	9a e0       	ldi	r25, 0x0A	; 10
    3274:	69 2f       	mov	r22, r25
    3276:	0e 94 bb 35 	call	0x6b76	; 0x6b76 <__udivmodqi4>
    327a:	88 2f       	mov	r24, r24
    327c:	90 e0       	ldi	r25, 0x00	; 0
    327e:	9c 01       	movw	r18, r24
    3280:	22 95       	swap	r18
    3282:	32 95       	swap	r19
    3284:	30 7f       	andi	r19, 0xF0	; 240
    3286:	32 27       	eor	r19, r18
    3288:	20 7f       	andi	r18, 0xF0	; 240
    328a:	32 27       	eor	r19, r18
    328c:	ee 85       	ldd	r30, Y+14	; 0x0e
    328e:	ff 85       	ldd	r31, Y+15	; 0x0f
    3290:	86 81       	ldd	r24, Z+6	; 0x06
    3292:	9a e0       	ldi	r25, 0x0A	; 10
    3294:	69 2f       	mov	r22, r25
    3296:	0e 94 bb 35 	call	0x6b76	; 0x6b76 <__udivmodqi4>
    329a:	89 2f       	mov	r24, r25
    329c:	88 2f       	mov	r24, r24
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	82 2b       	or	r24, r18
    32a2:	93 2b       	or	r25, r19
    32a4:	9a 83       	std	Y+2, r25	; 0x02
    32a6:	89 83       	std	Y+1, r24	; 0x01
		I2C_Write(seconds);						/* Write second value on 00 location */
    32a8:	89 81       	ldd	r24, Y+1	; 0x01
    32aa:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <I2C_Write>
		minutes = ((RTCData->minutse/ 10) << 4) | (RTCData->minutse % 10);
    32ae:	ee 85       	ldd	r30, Y+14	; 0x0e
    32b0:	ff 85       	ldd	r31, Y+15	; 0x0f
    32b2:	85 81       	ldd	r24, Z+5	; 0x05
    32b4:	9a e0       	ldi	r25, 0x0A	; 10
    32b6:	69 2f       	mov	r22, r25
    32b8:	0e 94 bb 35 	call	0x6b76	; 0x6b76 <__udivmodqi4>
    32bc:	88 2f       	mov	r24, r24
    32be:	90 e0       	ldi	r25, 0x00	; 0
    32c0:	9c 01       	movw	r18, r24
    32c2:	22 95       	swap	r18
    32c4:	32 95       	swap	r19
    32c6:	30 7f       	andi	r19, 0xF0	; 240
    32c8:	32 27       	eor	r19, r18
    32ca:	20 7f       	andi	r18, 0xF0	; 240
    32cc:	32 27       	eor	r19, r18
    32ce:	ee 85       	ldd	r30, Y+14	; 0x0e
    32d0:	ff 85       	ldd	r31, Y+15	; 0x0f
    32d2:	85 81       	ldd	r24, Z+5	; 0x05
    32d4:	9a e0       	ldi	r25, 0x0A	; 10
    32d6:	69 2f       	mov	r22, r25
    32d8:	0e 94 bb 35 	call	0x6b76	; 0x6b76 <__udivmodqi4>
    32dc:	89 2f       	mov	r24, r25
    32de:	88 2f       	mov	r24, r24
    32e0:	90 e0       	ldi	r25, 0x00	; 0
    32e2:	82 2b       	or	r24, r18
    32e4:	93 2b       	or	r25, r19
    32e6:	9d 87       	std	Y+13, r25	; 0x0d
    32e8:	8c 87       	std	Y+12, r24	; 0x0c
		I2C_Write(minutes);
    32ea:	8c 85       	ldd	r24, Y+12	; 0x0c
    32ec:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <I2C_Write>
		hourse = ((RTCData->hours/ 10) << 4) | (RTCData->hours % 10);
    32f0:	ee 85       	ldd	r30, Y+14	; 0x0e
    32f2:	ff 85       	ldd	r31, Y+15	; 0x0f
    32f4:	84 81       	ldd	r24, Z+4	; 0x04
    32f6:	9a e0       	ldi	r25, 0x0A	; 10
    32f8:	69 2f       	mov	r22, r25
    32fa:	0e 94 bb 35 	call	0x6b76	; 0x6b76 <__udivmodqi4>
    32fe:	88 2f       	mov	r24, r24
    3300:	90 e0       	ldi	r25, 0x00	; 0
    3302:	9c 01       	movw	r18, r24
    3304:	22 95       	swap	r18
    3306:	32 95       	swap	r19
    3308:	30 7f       	andi	r19, 0xF0	; 240
    330a:	32 27       	eor	r19, r18
    330c:	20 7f       	andi	r18, 0xF0	; 240
    330e:	32 27       	eor	r19, r18
    3310:	ee 85       	ldd	r30, Y+14	; 0x0e
    3312:	ff 85       	ldd	r31, Y+15	; 0x0f
    3314:	84 81       	ldd	r24, Z+4	; 0x04
    3316:	9a e0       	ldi	r25, 0x0A	; 10
    3318:	69 2f       	mov	r22, r25
    331a:	0e 94 bb 35 	call	0x6b76	; 0x6b76 <__udivmodqi4>
    331e:	89 2f       	mov	r24, r25
    3320:	88 2f       	mov	r24, r24
    3322:	90 e0       	ldi	r25, 0x00	; 0
    3324:	82 2b       	or	r24, r18
    3326:	93 2b       	or	r25, r19
    3328:	9b 87       	std	Y+11, r25	; 0x0b
    332a:	8a 87       	std	Y+10, r24	; 0x0a
		I2C_Write(hourse);
    332c:	8a 85       	ldd	r24, Y+10	; 0x0a
    332e:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <I2C_Write>

		I2C_Stop();
    3332:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <I2C_Stop>

		/*Write the Date format*/
		I2C_Start(Device_Write_address);			/* Start I2C communication with RTC */
    3336:	80 ed       	ldi	r24, 0xD0	; 208
    3338:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <I2C_Start>
		I2C_Write(READ_DATE_ADDRESS);								/* Write on 3 location for day value */
    333c:	83 e0       	ldi	r24, 0x03	; 3
    333e:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <I2C_Write>

		I2C_Write(RTCData->day);							/* Write day value on 03 location */
    3342:	ee 85       	ldd	r30, Y+14	; 0x0e
    3344:	ff 85       	ldd	r31, Y+15	; 0x0f
    3346:	83 81       	ldd	r24, Z+3	; 0x03
    3348:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <I2C_Write>
		days = ((RTCData->day_num / 10) << 4) | (RTCData->day_num % 10);
    334c:	ee 85       	ldd	r30, Y+14	; 0x0e
    334e:	ff 85       	ldd	r31, Y+15	; 0x0f
    3350:	80 81       	ld	r24, Z
    3352:	9a e0       	ldi	r25, 0x0A	; 10
    3354:	69 2f       	mov	r22, r25
    3356:	0e 94 bb 35 	call	0x6b76	; 0x6b76 <__udivmodqi4>
    335a:	88 2f       	mov	r24, r24
    335c:	90 e0       	ldi	r25, 0x00	; 0
    335e:	9c 01       	movw	r18, r24
    3360:	22 95       	swap	r18
    3362:	32 95       	swap	r19
    3364:	30 7f       	andi	r19, 0xF0	; 240
    3366:	32 27       	eor	r19, r18
    3368:	20 7f       	andi	r18, 0xF0	; 240
    336a:	32 27       	eor	r19, r18
    336c:	ee 85       	ldd	r30, Y+14	; 0x0e
    336e:	ff 85       	ldd	r31, Y+15	; 0x0f
    3370:	80 81       	ld	r24, Z
    3372:	9a e0       	ldi	r25, 0x0A	; 10
    3374:	69 2f       	mov	r22, r25
    3376:	0e 94 bb 35 	call	0x6b76	; 0x6b76 <__udivmodqi4>
    337a:	89 2f       	mov	r24, r25
    337c:	88 2f       	mov	r24, r24
    337e:	90 e0       	ldi	r25, 0x00	; 0
    3380:	82 2b       	or	r24, r18
    3382:	93 2b       	or	r25, r19
    3384:	99 87       	std	Y+9, r25	; 0x09
    3386:	88 87       	std	Y+8, r24	; 0x08
		I2C_Write(days);							//I2C_Write(_date);
    3388:	88 85       	ldd	r24, Y+8	; 0x08
    338a:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <I2C_Write>
		month = ((RTCData->month / 10) << 4) | (RTCData->month % 10);
    338e:	ee 85       	ldd	r30, Y+14	; 0x0e
    3390:	ff 85       	ldd	r31, Y+15	; 0x0f
    3392:	81 81       	ldd	r24, Z+1	; 0x01
    3394:	9a e0       	ldi	r25, 0x0A	; 10
    3396:	69 2f       	mov	r22, r25
    3398:	0e 94 bb 35 	call	0x6b76	; 0x6b76 <__udivmodqi4>
    339c:	88 2f       	mov	r24, r24
    339e:	90 e0       	ldi	r25, 0x00	; 0
    33a0:	9c 01       	movw	r18, r24
    33a2:	22 95       	swap	r18
    33a4:	32 95       	swap	r19
    33a6:	30 7f       	andi	r19, 0xF0	; 240
    33a8:	32 27       	eor	r19, r18
    33aa:	20 7f       	andi	r18, 0xF0	; 240
    33ac:	32 27       	eor	r19, r18
    33ae:	ee 85       	ldd	r30, Y+14	; 0x0e
    33b0:	ff 85       	ldd	r31, Y+15	; 0x0f
    33b2:	81 81       	ldd	r24, Z+1	; 0x01
    33b4:	9a e0       	ldi	r25, 0x0A	; 10
    33b6:	69 2f       	mov	r22, r25
    33b8:	0e 94 bb 35 	call	0x6b76	; 0x6b76 <__udivmodqi4>
    33bc:	89 2f       	mov	r24, r25
    33be:	88 2f       	mov	r24, r24
    33c0:	90 e0       	ldi	r25, 0x00	; 0
    33c2:	82 2b       	or	r24, r18
    33c4:	93 2b       	or	r25, r19
    33c6:	9f 83       	std	Y+7, r25	; 0x07
    33c8:	8e 83       	std	Y+6, r24	; 0x06
		I2C_Write(month);							/* Write month value on 05 location */
    33ca:	8e 81       	ldd	r24, Y+6	; 0x06
    33cc:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <I2C_Write>
		year = ((RTCData->year / 10) << 4) | (RTCData->year % 10);
    33d0:	ee 85       	ldd	r30, Y+14	; 0x0e
    33d2:	ff 85       	ldd	r31, Y+15	; 0x0f
    33d4:	82 81       	ldd	r24, Z+2	; 0x02
    33d6:	9a e0       	ldi	r25, 0x0A	; 10
    33d8:	69 2f       	mov	r22, r25
    33da:	0e 94 bb 35 	call	0x6b76	; 0x6b76 <__udivmodqi4>
    33de:	88 2f       	mov	r24, r24
    33e0:	90 e0       	ldi	r25, 0x00	; 0
    33e2:	9c 01       	movw	r18, r24
    33e4:	22 95       	swap	r18
    33e6:	32 95       	swap	r19
    33e8:	30 7f       	andi	r19, 0xF0	; 240
    33ea:	32 27       	eor	r19, r18
    33ec:	20 7f       	andi	r18, 0xF0	; 240
    33ee:	32 27       	eor	r19, r18
    33f0:	ee 85       	ldd	r30, Y+14	; 0x0e
    33f2:	ff 85       	ldd	r31, Y+15	; 0x0f
    33f4:	82 81       	ldd	r24, Z+2	; 0x02
    33f6:	9a e0       	ldi	r25, 0x0A	; 10
    33f8:	69 2f       	mov	r22, r25
    33fa:	0e 94 bb 35 	call	0x6b76	; 0x6b76 <__udivmodqi4>
    33fe:	89 2f       	mov	r24, r25
    3400:	88 2f       	mov	r24, r24
    3402:	90 e0       	ldi	r25, 0x00	; 0
    3404:	82 2b       	or	r24, r18
    3406:	93 2b       	or	r25, r19
    3408:	9d 83       	std	Y+5, r25	; 0x05
    340a:	8c 83       	std	Y+4, r24	; 0x04
		I2C_Write(year);							/* Write year value on 06 location */
    340c:	8c 81       	ldd	r24, Y+4	; 0x04
    340e:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <I2C_Write>

		I2C_Stop();
    3412:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <I2C_Stop>
	}

	return error;
    3416:	8b 81       	ldd	r24, Y+3	; 0x03

}
    3418:	2f 96       	adiw	r28, 0x0f	; 15
    341a:	0f b6       	in	r0, 0x3f	; 63
    341c:	f8 94       	cli
    341e:	de bf       	out	0x3e, r29	; 62
    3420:	0f be       	out	0x3f, r0	; 63
    3422:	cd bf       	out	0x3d, r28	; 61
    3424:	cf 91       	pop	r28
    3426:	df 91       	pop	r29
    3428:	08 95       	ret

0000342a <HAL_RTC_ReadTime>:


E_RTC_ErrorType HAL_RTC_ReadTime(S_RTCData *RTCData)
{
    342a:	df 93       	push	r29
    342c:	cf 93       	push	r28
    342e:	00 d0       	rcall	.+0      	; 0x3430 <HAL_RTC_ReadTime+0x6>
    3430:	0f 92       	push	r0
    3432:	cd b7       	in	r28, 0x3d	; 61
    3434:	de b7       	in	r29, 0x3e	; 62
    3436:	9b 83       	std	Y+3, r25	; 0x03
    3438:	8a 83       	std	Y+2, r24	; 0x02
	E_RTC_ErrorType error = RTC_E_OK;
    343a:	19 82       	std	Y+1, r1	; 0x01
	{
		error = RTC_E_NOT_OK;
	}
	else
	{
		I2C_Start(Device_Write_address);				/* Start I2C communication with RTC */
    343c:	80 ed       	ldi	r24, 0xD0	; 208
    343e:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <I2C_Start>
		I2C_Write(READ_CLOCK_ADDRESS);					/* Write address to read */
    3442:	80 e0       	ldi	r24, 0x00	; 0
    3444:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <I2C_Write>
		I2C_Repeated_Start(Device_Read_address);		/* Repeated start with device read address */
    3448:	81 ed       	ldi	r24, 0xD1	; 209
    344a:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <I2C_Repeated_Start>
		RTCData->seconds = I2C_Read_Ack();						/* Read second */
    344e:	0e 94 77 0f 	call	0x1eee	; 0x1eee <I2C_Read_Ack>
    3452:	ea 81       	ldd	r30, Y+2	; 0x02
    3454:	fb 81       	ldd	r31, Y+3	; 0x03
    3456:	86 83       	std	Z+6, r24	; 0x06
		RTCData->minutse = I2C_Read_Ack();						/* Read minute */
    3458:	0e 94 77 0f 	call	0x1eee	; 0x1eee <I2C_Read_Ack>
    345c:	ea 81       	ldd	r30, Y+2	; 0x02
    345e:	fb 81       	ldd	r31, Y+3	; 0x03
    3460:	85 83       	std	Z+5, r24	; 0x05
		RTCData->hours = I2C_Read_Nack();							/* Read hour with Nack */
    3462:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <I2C_Read_Nack>
    3466:	ea 81       	ldd	r30, Y+2	; 0x02
    3468:	fb 81       	ldd	r31, Y+3	; 0x03
    346a:	84 83       	std	Z+4, r24	; 0x04
		I2C_Stop();
    346c:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <I2C_Stop>

	}

	return error;
    3470:	89 81       	ldd	r24, Y+1	; 0x01
}
    3472:	0f 90       	pop	r0
    3474:	0f 90       	pop	r0
    3476:	0f 90       	pop	r0
    3478:	cf 91       	pop	r28
    347a:	df 91       	pop	r29
    347c:	08 95       	ret

0000347e <HAL_RTC_ReadDate>:

E_RTC_ErrorType HAL_RTC_ReadDate(S_RTCData *RTCData)
{
    347e:	df 93       	push	r29
    3480:	cf 93       	push	r28
    3482:	00 d0       	rcall	.+0      	; 0x3484 <HAL_RTC_ReadDate+0x6>
    3484:	0f 92       	push	r0
    3486:	cd b7       	in	r28, 0x3d	; 61
    3488:	de b7       	in	r29, 0x3e	; 62
    348a:	9b 83       	std	Y+3, r25	; 0x03
    348c:	8a 83       	std	Y+2, r24	; 0x02
	E_RTC_ErrorType error = RTC_E_OK;
    348e:	19 82       	std	Y+1, r1	; 0x01
	if(RTC_STATUS_ERROR== RTC_E_NOT_OK)
	{
		error = RTC_E_NOT_OK;
	}
	else if((RTCData->day_num > MAX_DAY_NUMBER) || (RTCData->month > MAX_MONTH_NUMBER))
    3490:	ea 81       	ldd	r30, Y+2	; 0x02
    3492:	fb 81       	ldd	r31, Y+3	; 0x03
    3494:	80 81       	ld	r24, Z
    3496:	80 32       	cpi	r24, 0x20	; 32
    3498:	28 f4       	brcc	.+10     	; 0x34a4 <HAL_RTC_ReadDate+0x26>
    349a:	ea 81       	ldd	r30, Y+2	; 0x02
    349c:	fb 81       	ldd	r31, Y+3	; 0x03
    349e:	81 81       	ldd	r24, Z+1	; 0x01
    34a0:	8d 30       	cpi	r24, 0x0D	; 13
    34a2:	18 f0       	brcs	.+6      	; 0x34aa <HAL_RTC_ReadDate+0x2c>
	{
		error = RTC_E_DATE_FORMAT;
    34a4:	82 e0       	ldi	r24, 0x02	; 2
    34a6:	89 83       	std	Y+1, r24	; 0x01
    34a8:	1f c0       	rjmp	.+62     	; 0x34e8 <HAL_RTC_ReadDate+0x6a>
	}
	else
	{
		I2C_Start(Device_Write_address);
    34aa:	80 ed       	ldi	r24, 0xD0	; 208
    34ac:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <I2C_Start>
		I2C_Write(READ_DATE_ADDRESS);
    34b0:	83 e0       	ldi	r24, 0x03	; 3
    34b2:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <I2C_Write>
		I2C_Repeated_Start(Device_Read_address);
    34b6:	81 ed       	ldi	r24, 0xD1	; 209
    34b8:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <I2C_Repeated_Start>

		RTCData->day = I2C_Read_Ack();							/* Read day */
    34bc:	0e 94 77 0f 	call	0x1eee	; 0x1eee <I2C_Read_Ack>
    34c0:	ea 81       	ldd	r30, Y+2	; 0x02
    34c2:	fb 81       	ldd	r31, Y+3	; 0x03
    34c4:	83 83       	std	Z+3, r24	; 0x03
		RTCData->day_num = I2C_Read_Ack();							/* Read date */
    34c6:	0e 94 77 0f 	call	0x1eee	; 0x1eee <I2C_Read_Ack>
    34ca:	ea 81       	ldd	r30, Y+2	; 0x02
    34cc:	fb 81       	ldd	r31, Y+3	; 0x03
    34ce:	80 83       	st	Z, r24
		RTCData->month = I2C_Read_Ack();							/* Read month */
    34d0:	0e 94 77 0f 	call	0x1eee	; 0x1eee <I2C_Read_Ack>
    34d4:	ea 81       	ldd	r30, Y+2	; 0x02
    34d6:	fb 81       	ldd	r31, Y+3	; 0x03
    34d8:	81 83       	std	Z+1, r24	; 0x01
		RTCData->year = I2C_Read_Nack();							/* Read the year with Nack */
    34da:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <I2C_Read_Nack>
    34de:	ea 81       	ldd	r30, Y+2	; 0x02
    34e0:	fb 81       	ldd	r31, Y+3	; 0x03
    34e2:	82 83       	std	Z+2, r24	; 0x02
		I2C_Stop();
    34e4:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <I2C_Stop>
	}

	return error;
    34e8:	89 81       	ldd	r24, Y+1	; 0x01

}
    34ea:	0f 90       	pop	r0
    34ec:	0f 90       	pop	r0
    34ee:	0f 90       	pop	r0
    34f0:	cf 91       	pop	r28
    34f2:	df 91       	pop	r29
    34f4:	08 95       	ret

000034f6 <Enter_Password>:
#include "Uart_interface.h"
#include "lcd_Interface.h"
#include "util/delay.h"

u8Value Enter_Password(void)
{
    34f6:	0f 93       	push	r16
    34f8:	1f 93       	push	r17
    34fa:	df 93       	push	r29
    34fc:	cf 93       	push	r28
    34fe:	cd b7       	in	r28, 0x3d	; 61
    3500:	de b7       	in	r29, 0x3e	; 62
    3502:	c6 57       	subi	r28, 0x76	; 118
    3504:	d0 40       	sbci	r29, 0x00	; 0
    3506:	0f b6       	in	r0, 0x3f	; 63
    3508:	f8 94       	cli
    350a:	de bf       	out	0x3e, r29	; 62
    350c:	0f be       	out	0x3f, r0	; 63
    350e:	cd bf       	out	0x3d, r28	; 61
	Set_flag=0;
    3510:	10 92 f9 01 	sts	0x01F9, r1

	int i=0;
    3514:	fe 01       	movw	r30, r28
    3516:	eb 58       	subi	r30, 0x8B	; 139
    3518:	ff 4f       	sbci	r31, 0xFF	; 255
    351a:	11 82       	std	Z+1, r1	; 0x01
    351c:	10 82       	st	Z, r1
	int j=0;
    351e:	fe 01       	movw	r30, r28
    3520:	ed 58       	subi	r30, 0x8D	; 141
    3522:	ff 4f       	sbci	r31, 0xFF	; 255
    3524:	11 82       	std	Z+1, r1	; 0x01
    3526:	10 82       	st	Z, r1
	HAL_LCD_clearScreen();
    3528:	0e 94 7a 31 	call	0x62f4	; 0x62f4 <HAL_LCD_clearScreen>
    352c:	fe 01       	movw	r30, r28
    352e:	e3 59       	subi	r30, 0x93	; 147
    3530:	ff 4f       	sbci	r31, 0xFF	; 255
    3532:	80 e0       	ldi	r24, 0x00	; 0
    3534:	90 e0       	ldi	r25, 0x00	; 0
    3536:	a8 e4       	ldi	r26, 0x48	; 72
    3538:	b2 e4       	ldi	r27, 0x42	; 66
    353a:	80 83       	st	Z, r24
    353c:	91 83       	std	Z+1, r25	; 0x01
    353e:	a2 83       	std	Z+2, r26	; 0x02
    3540:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3542:	8e 01       	movw	r16, r28
    3544:	07 59       	subi	r16, 0x97	; 151
    3546:	1f 4f       	sbci	r17, 0xFF	; 255
    3548:	fe 01       	movw	r30, r28
    354a:	e3 59       	subi	r30, 0x93	; 147
    354c:	ff 4f       	sbci	r31, 0xFF	; 255
    354e:	60 81       	ld	r22, Z
    3550:	71 81       	ldd	r23, Z+1	; 0x01
    3552:	82 81       	ldd	r24, Z+2	; 0x02
    3554:	93 81       	ldd	r25, Z+3	; 0x03
    3556:	20 e0       	ldi	r18, 0x00	; 0
    3558:	30 e0       	ldi	r19, 0x00	; 0
    355a:	4a e7       	ldi	r20, 0x7A	; 122
    355c:	55 e4       	ldi	r21, 0x45	; 69
    355e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3562:	dc 01       	movw	r26, r24
    3564:	cb 01       	movw	r24, r22
    3566:	f8 01       	movw	r30, r16
    3568:	80 83       	st	Z, r24
    356a:	91 83       	std	Z+1, r25	; 0x01
    356c:	a2 83       	std	Z+2, r26	; 0x02
    356e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3570:	fe 01       	movw	r30, r28
    3572:	e7 59       	subi	r30, 0x97	; 151
    3574:	ff 4f       	sbci	r31, 0xFF	; 255
    3576:	60 81       	ld	r22, Z
    3578:	71 81       	ldd	r23, Z+1	; 0x01
    357a:	82 81       	ldd	r24, Z+2	; 0x02
    357c:	93 81       	ldd	r25, Z+3	; 0x03
    357e:	20 e0       	ldi	r18, 0x00	; 0
    3580:	30 e0       	ldi	r19, 0x00	; 0
    3582:	40 e8       	ldi	r20, 0x80	; 128
    3584:	5f e3       	ldi	r21, 0x3F	; 63
    3586:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    358a:	88 23       	and	r24, r24
    358c:	44 f4       	brge	.+16     	; 0x359e <Enter_Password+0xa8>
		__ticks = 1;
    358e:	fe 01       	movw	r30, r28
    3590:	e9 59       	subi	r30, 0x99	; 153
    3592:	ff 4f       	sbci	r31, 0xFF	; 255
    3594:	81 e0       	ldi	r24, 0x01	; 1
    3596:	90 e0       	ldi	r25, 0x00	; 0
    3598:	91 83       	std	Z+1, r25	; 0x01
    359a:	80 83       	st	Z, r24
    359c:	64 c0       	rjmp	.+200    	; 0x3666 <Enter_Password+0x170>
	else if (__tmp > 65535)
    359e:	fe 01       	movw	r30, r28
    35a0:	e7 59       	subi	r30, 0x97	; 151
    35a2:	ff 4f       	sbci	r31, 0xFF	; 255
    35a4:	60 81       	ld	r22, Z
    35a6:	71 81       	ldd	r23, Z+1	; 0x01
    35a8:	82 81       	ldd	r24, Z+2	; 0x02
    35aa:	93 81       	ldd	r25, Z+3	; 0x03
    35ac:	20 e0       	ldi	r18, 0x00	; 0
    35ae:	3f ef       	ldi	r19, 0xFF	; 255
    35b0:	4f e7       	ldi	r20, 0x7F	; 127
    35b2:	57 e4       	ldi	r21, 0x47	; 71
    35b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35b8:	18 16       	cp	r1, r24
    35ba:	0c f0       	brlt	.+2      	; 0x35be <Enter_Password+0xc8>
    35bc:	43 c0       	rjmp	.+134    	; 0x3644 <Enter_Password+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35be:	fe 01       	movw	r30, r28
    35c0:	e3 59       	subi	r30, 0x93	; 147
    35c2:	ff 4f       	sbci	r31, 0xFF	; 255
    35c4:	60 81       	ld	r22, Z
    35c6:	71 81       	ldd	r23, Z+1	; 0x01
    35c8:	82 81       	ldd	r24, Z+2	; 0x02
    35ca:	93 81       	ldd	r25, Z+3	; 0x03
    35cc:	20 e0       	ldi	r18, 0x00	; 0
    35ce:	30 e0       	ldi	r19, 0x00	; 0
    35d0:	40 e2       	ldi	r20, 0x20	; 32
    35d2:	51 e4       	ldi	r21, 0x41	; 65
    35d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35d8:	dc 01       	movw	r26, r24
    35da:	cb 01       	movw	r24, r22
    35dc:	8e 01       	movw	r16, r28
    35de:	09 59       	subi	r16, 0x99	; 153
    35e0:	1f 4f       	sbci	r17, 0xFF	; 255
    35e2:	bc 01       	movw	r22, r24
    35e4:	cd 01       	movw	r24, r26
    35e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ea:	dc 01       	movw	r26, r24
    35ec:	cb 01       	movw	r24, r22
    35ee:	f8 01       	movw	r30, r16
    35f0:	91 83       	std	Z+1, r25	; 0x01
    35f2:	80 83       	st	Z, r24
    35f4:	1f c0       	rjmp	.+62     	; 0x3634 <Enter_Password+0x13e>
    35f6:	fe 01       	movw	r30, r28
    35f8:	eb 59       	subi	r30, 0x9B	; 155
    35fa:	ff 4f       	sbci	r31, 0xFF	; 255
    35fc:	80 e9       	ldi	r24, 0x90	; 144
    35fe:	91 e0       	ldi	r25, 0x01	; 1
    3600:	91 83       	std	Z+1, r25	; 0x01
    3602:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3604:	fe 01       	movw	r30, r28
    3606:	eb 59       	subi	r30, 0x9B	; 155
    3608:	ff 4f       	sbci	r31, 0xFF	; 255
    360a:	80 81       	ld	r24, Z
    360c:	91 81       	ldd	r25, Z+1	; 0x01
    360e:	01 97       	sbiw	r24, 0x01	; 1
    3610:	f1 f7       	brne	.-4      	; 0x360e <Enter_Password+0x118>
    3612:	fe 01       	movw	r30, r28
    3614:	eb 59       	subi	r30, 0x9B	; 155
    3616:	ff 4f       	sbci	r31, 0xFF	; 255
    3618:	91 83       	std	Z+1, r25	; 0x01
    361a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    361c:	de 01       	movw	r26, r28
    361e:	a9 59       	subi	r26, 0x99	; 153
    3620:	bf 4f       	sbci	r27, 0xFF	; 255
    3622:	fe 01       	movw	r30, r28
    3624:	e9 59       	subi	r30, 0x99	; 153
    3626:	ff 4f       	sbci	r31, 0xFF	; 255
    3628:	80 81       	ld	r24, Z
    362a:	91 81       	ldd	r25, Z+1	; 0x01
    362c:	01 97       	sbiw	r24, 0x01	; 1
    362e:	11 96       	adiw	r26, 0x01	; 1
    3630:	9c 93       	st	X, r25
    3632:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3634:	fe 01       	movw	r30, r28
    3636:	e9 59       	subi	r30, 0x99	; 153
    3638:	ff 4f       	sbci	r31, 0xFF	; 255
    363a:	80 81       	ld	r24, Z
    363c:	91 81       	ldd	r25, Z+1	; 0x01
    363e:	00 97       	sbiw	r24, 0x00	; 0
    3640:	d1 f6       	brne	.-76     	; 0x35f6 <Enter_Password+0x100>
    3642:	27 c0       	rjmp	.+78     	; 0x3692 <Enter_Password+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3644:	8e 01       	movw	r16, r28
    3646:	09 59       	subi	r16, 0x99	; 153
    3648:	1f 4f       	sbci	r17, 0xFF	; 255
    364a:	fe 01       	movw	r30, r28
    364c:	e7 59       	subi	r30, 0x97	; 151
    364e:	ff 4f       	sbci	r31, 0xFF	; 255
    3650:	60 81       	ld	r22, Z
    3652:	71 81       	ldd	r23, Z+1	; 0x01
    3654:	82 81       	ldd	r24, Z+2	; 0x02
    3656:	93 81       	ldd	r25, Z+3	; 0x03
    3658:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    365c:	dc 01       	movw	r26, r24
    365e:	cb 01       	movw	r24, r22
    3660:	f8 01       	movw	r30, r16
    3662:	91 83       	std	Z+1, r25	; 0x01
    3664:	80 83       	st	Z, r24
    3666:	de 01       	movw	r26, r28
    3668:	ad 59       	subi	r26, 0x9D	; 157
    366a:	bf 4f       	sbci	r27, 0xFF	; 255
    366c:	fe 01       	movw	r30, r28
    366e:	e9 59       	subi	r30, 0x99	; 153
    3670:	ff 4f       	sbci	r31, 0xFF	; 255
    3672:	80 81       	ld	r24, Z
    3674:	91 81       	ldd	r25, Z+1	; 0x01
    3676:	8d 93       	st	X+, r24
    3678:	9c 93       	st	X, r25
    367a:	fe 01       	movw	r30, r28
    367c:	ed 59       	subi	r30, 0x9D	; 157
    367e:	ff 4f       	sbci	r31, 0xFF	; 255
    3680:	80 81       	ld	r24, Z
    3682:	91 81       	ldd	r25, Z+1	; 0x01
    3684:	01 97       	sbiw	r24, 0x01	; 1
    3686:	f1 f7       	brne	.-4      	; 0x3684 <Enter_Password+0x18e>
    3688:	fe 01       	movw	r30, r28
    368a:	ed 59       	subi	r30, 0x9D	; 157
    368c:	ff 4f       	sbci	r31, 0xFF	; 255
    368e:	91 83       	std	Z+1, r25	; 0x01
    3690:	80 83       	st	Z, r24
	_delay_ms(50);

	HAL_LCD_displaystringRowColumn("EnterPassword", 1, 1);
    3692:	80 e6       	ldi	r24, 0x60	; 96
    3694:	90 e0       	ldi	r25, 0x00	; 0
    3696:	61 e0       	ldi	r22, 0x01	; 1
    3698:	41 e0       	ldi	r20, 0x01	; 1
    369a:	0e 94 0a 32 	call	0x6414	; 0x6414 <HAL_LCD_displaystringRowColumn>
    369e:	fe 01       	movw	r30, r28
    36a0:	e1 5a       	subi	r30, 0xA1	; 161
    36a2:	ff 4f       	sbci	r31, 0xFF	; 255
    36a4:	80 e0       	ldi	r24, 0x00	; 0
    36a6:	90 e4       	ldi	r25, 0x40	; 64
    36a8:	ac e9       	ldi	r26, 0x9C	; 156
    36aa:	b5 e4       	ldi	r27, 0x45	; 69
    36ac:	80 83       	st	Z, r24
    36ae:	91 83       	std	Z+1, r25	; 0x01
    36b0:	a2 83       	std	Z+2, r26	; 0x02
    36b2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36b4:	8e 01       	movw	r16, r28
    36b6:	05 5a       	subi	r16, 0xA5	; 165
    36b8:	1f 4f       	sbci	r17, 0xFF	; 255
    36ba:	fe 01       	movw	r30, r28
    36bc:	e1 5a       	subi	r30, 0xA1	; 161
    36be:	ff 4f       	sbci	r31, 0xFF	; 255
    36c0:	60 81       	ld	r22, Z
    36c2:	71 81       	ldd	r23, Z+1	; 0x01
    36c4:	82 81       	ldd	r24, Z+2	; 0x02
    36c6:	93 81       	ldd	r25, Z+3	; 0x03
    36c8:	20 e0       	ldi	r18, 0x00	; 0
    36ca:	30 e0       	ldi	r19, 0x00	; 0
    36cc:	4a e7       	ldi	r20, 0x7A	; 122
    36ce:	55 e4       	ldi	r21, 0x45	; 69
    36d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36d4:	dc 01       	movw	r26, r24
    36d6:	cb 01       	movw	r24, r22
    36d8:	f8 01       	movw	r30, r16
    36da:	80 83       	st	Z, r24
    36dc:	91 83       	std	Z+1, r25	; 0x01
    36de:	a2 83       	std	Z+2, r26	; 0x02
    36e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    36e2:	fe 01       	movw	r30, r28
    36e4:	e5 5a       	subi	r30, 0xA5	; 165
    36e6:	ff 4f       	sbci	r31, 0xFF	; 255
    36e8:	60 81       	ld	r22, Z
    36ea:	71 81       	ldd	r23, Z+1	; 0x01
    36ec:	82 81       	ldd	r24, Z+2	; 0x02
    36ee:	93 81       	ldd	r25, Z+3	; 0x03
    36f0:	20 e0       	ldi	r18, 0x00	; 0
    36f2:	30 e0       	ldi	r19, 0x00	; 0
    36f4:	40 e8       	ldi	r20, 0x80	; 128
    36f6:	5f e3       	ldi	r21, 0x3F	; 63
    36f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36fc:	88 23       	and	r24, r24
    36fe:	44 f4       	brge	.+16     	; 0x3710 <Enter_Password+0x21a>
		__ticks = 1;
    3700:	fe 01       	movw	r30, r28
    3702:	e7 5a       	subi	r30, 0xA7	; 167
    3704:	ff 4f       	sbci	r31, 0xFF	; 255
    3706:	81 e0       	ldi	r24, 0x01	; 1
    3708:	90 e0       	ldi	r25, 0x00	; 0
    370a:	91 83       	std	Z+1, r25	; 0x01
    370c:	80 83       	st	Z, r24
    370e:	64 c0       	rjmp	.+200    	; 0x37d8 <Enter_Password+0x2e2>
	else if (__tmp > 65535)
    3710:	fe 01       	movw	r30, r28
    3712:	e5 5a       	subi	r30, 0xA5	; 165
    3714:	ff 4f       	sbci	r31, 0xFF	; 255
    3716:	60 81       	ld	r22, Z
    3718:	71 81       	ldd	r23, Z+1	; 0x01
    371a:	82 81       	ldd	r24, Z+2	; 0x02
    371c:	93 81       	ldd	r25, Z+3	; 0x03
    371e:	20 e0       	ldi	r18, 0x00	; 0
    3720:	3f ef       	ldi	r19, 0xFF	; 255
    3722:	4f e7       	ldi	r20, 0x7F	; 127
    3724:	57 e4       	ldi	r21, 0x47	; 71
    3726:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    372a:	18 16       	cp	r1, r24
    372c:	0c f0       	brlt	.+2      	; 0x3730 <Enter_Password+0x23a>
    372e:	43 c0       	rjmp	.+134    	; 0x37b6 <Enter_Password+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3730:	fe 01       	movw	r30, r28
    3732:	e1 5a       	subi	r30, 0xA1	; 161
    3734:	ff 4f       	sbci	r31, 0xFF	; 255
    3736:	60 81       	ld	r22, Z
    3738:	71 81       	ldd	r23, Z+1	; 0x01
    373a:	82 81       	ldd	r24, Z+2	; 0x02
    373c:	93 81       	ldd	r25, Z+3	; 0x03
    373e:	20 e0       	ldi	r18, 0x00	; 0
    3740:	30 e0       	ldi	r19, 0x00	; 0
    3742:	40 e2       	ldi	r20, 0x20	; 32
    3744:	51 e4       	ldi	r21, 0x41	; 65
    3746:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    374a:	dc 01       	movw	r26, r24
    374c:	cb 01       	movw	r24, r22
    374e:	8e 01       	movw	r16, r28
    3750:	07 5a       	subi	r16, 0xA7	; 167
    3752:	1f 4f       	sbci	r17, 0xFF	; 255
    3754:	bc 01       	movw	r22, r24
    3756:	cd 01       	movw	r24, r26
    3758:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    375c:	dc 01       	movw	r26, r24
    375e:	cb 01       	movw	r24, r22
    3760:	f8 01       	movw	r30, r16
    3762:	91 83       	std	Z+1, r25	; 0x01
    3764:	80 83       	st	Z, r24
    3766:	1f c0       	rjmp	.+62     	; 0x37a6 <Enter_Password+0x2b0>
    3768:	fe 01       	movw	r30, r28
    376a:	e9 5a       	subi	r30, 0xA9	; 169
    376c:	ff 4f       	sbci	r31, 0xFF	; 255
    376e:	80 e9       	ldi	r24, 0x90	; 144
    3770:	91 e0       	ldi	r25, 0x01	; 1
    3772:	91 83       	std	Z+1, r25	; 0x01
    3774:	80 83       	st	Z, r24
    3776:	fe 01       	movw	r30, r28
    3778:	e9 5a       	subi	r30, 0xA9	; 169
    377a:	ff 4f       	sbci	r31, 0xFF	; 255
    377c:	80 81       	ld	r24, Z
    377e:	91 81       	ldd	r25, Z+1	; 0x01
    3780:	01 97       	sbiw	r24, 0x01	; 1
    3782:	f1 f7       	brne	.-4      	; 0x3780 <Enter_Password+0x28a>
    3784:	fe 01       	movw	r30, r28
    3786:	e9 5a       	subi	r30, 0xA9	; 169
    3788:	ff 4f       	sbci	r31, 0xFF	; 255
    378a:	91 83       	std	Z+1, r25	; 0x01
    378c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    378e:	de 01       	movw	r26, r28
    3790:	a7 5a       	subi	r26, 0xA7	; 167
    3792:	bf 4f       	sbci	r27, 0xFF	; 255
    3794:	fe 01       	movw	r30, r28
    3796:	e7 5a       	subi	r30, 0xA7	; 167
    3798:	ff 4f       	sbci	r31, 0xFF	; 255
    379a:	80 81       	ld	r24, Z
    379c:	91 81       	ldd	r25, Z+1	; 0x01
    379e:	01 97       	sbiw	r24, 0x01	; 1
    37a0:	11 96       	adiw	r26, 0x01	; 1
    37a2:	9c 93       	st	X, r25
    37a4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37a6:	fe 01       	movw	r30, r28
    37a8:	e7 5a       	subi	r30, 0xA7	; 167
    37aa:	ff 4f       	sbci	r31, 0xFF	; 255
    37ac:	80 81       	ld	r24, Z
    37ae:	91 81       	ldd	r25, Z+1	; 0x01
    37b0:	00 97       	sbiw	r24, 0x00	; 0
    37b2:	d1 f6       	brne	.-76     	; 0x3768 <Enter_Password+0x272>
    37b4:	28 c0       	rjmp	.+80     	; 0x3806 <Enter_Password+0x310>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37b6:	8e 01       	movw	r16, r28
    37b8:	07 5a       	subi	r16, 0xA7	; 167
    37ba:	1f 4f       	sbci	r17, 0xFF	; 255
    37bc:	fe 01       	movw	r30, r28
    37be:	e5 5a       	subi	r30, 0xA5	; 165
    37c0:	ff 4f       	sbci	r31, 0xFF	; 255
    37c2:	60 81       	ld	r22, Z
    37c4:	71 81       	ldd	r23, Z+1	; 0x01
    37c6:	82 81       	ldd	r24, Z+2	; 0x02
    37c8:	93 81       	ldd	r25, Z+3	; 0x03
    37ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ce:	dc 01       	movw	r26, r24
    37d0:	cb 01       	movw	r24, r22
    37d2:	f8 01       	movw	r30, r16
    37d4:	91 83       	std	Z+1, r25	; 0x01
    37d6:	80 83       	st	Z, r24
    37d8:	de 01       	movw	r26, r28
    37da:	ab 5a       	subi	r26, 0xAB	; 171
    37dc:	bf 4f       	sbci	r27, 0xFF	; 255
    37de:	fe 01       	movw	r30, r28
    37e0:	e7 5a       	subi	r30, 0xA7	; 167
    37e2:	ff 4f       	sbci	r31, 0xFF	; 255
    37e4:	80 81       	ld	r24, Z
    37e6:	91 81       	ldd	r25, Z+1	; 0x01
    37e8:	11 96       	adiw	r26, 0x01	; 1
    37ea:	9c 93       	st	X, r25
    37ec:	8e 93       	st	-X, r24
    37ee:	fe 01       	movw	r30, r28
    37f0:	eb 5a       	subi	r30, 0xAB	; 171
    37f2:	ff 4f       	sbci	r31, 0xFF	; 255
    37f4:	80 81       	ld	r24, Z
    37f6:	91 81       	ldd	r25, Z+1	; 0x01
    37f8:	01 97       	sbiw	r24, 0x01	; 1
    37fa:	f1 f7       	brne	.-4      	; 0x37f8 <Enter_Password+0x302>
    37fc:	fe 01       	movw	r30, r28
    37fe:	eb 5a       	subi	r30, 0xAB	; 171
    3800:	ff 4f       	sbci	r31, 0xFF	; 255
    3802:	91 83       	std	Z+1, r25	; 0x01
    3804:	80 83       	st	Z, r24
	_delay_ms(5000);

	for(i=0;i<4;i++)
    3806:	fe 01       	movw	r30, r28
    3808:	eb 58       	subi	r30, 0x8B	; 139
    380a:	ff 4f       	sbci	r31, 0xFF	; 255
    380c:	11 82       	std	Z+1, r1	; 0x01
    380e:	10 82       	st	Z, r1
    3810:	2e c0       	rjmp	.+92     	; 0x386e <Enter_Password+0x378>
	{
		HAL_LCD_integerToString(51);
    3812:	63 e3       	ldi	r22, 0x33	; 51
    3814:	70 e0       	ldi	r23, 0x00	; 0
    3816:	80 e0       	ldi	r24, 0x00	; 0
    3818:	90 e0       	ldi	r25, 0x00	; 0
    381a:	0e 94 79 32 	call	0x64f2	; 0x64f2 <HAL_LCD_integerToString>
		Get_character= MCAL_UART_receive_sysch();
    381e:	0e 94 c9 07 	call	0xf92	; 0xf92 <MCAL_UART_receive_sysch>
    3822:	80 93 f4 01 	sts	0x01F4, r24
		temp_password[i]=Get_character;
    3826:	fe 01       	movw	r30, r28
    3828:	eb 58       	subi	r30, 0x8B	; 139
    382a:	ff 4f       	sbci	r31, 0xFF	; 255
    382c:	80 81       	ld	r24, Z
    382e:	91 81       	ldd	r25, Z+1	; 0x01
    3830:	20 91 f4 01 	lds	r18, 0x01F4
    3834:	fc 01       	movw	r30, r24
    3836:	e0 51       	subi	r30, 0x10	; 16
    3838:	fe 4f       	sbci	r31, 0xFE	; 254
    383a:	20 83       	st	Z, r18
		HAL_LCD_goToRowColumn(2, i+1);
    383c:	fe 01       	movw	r30, r28
    383e:	eb 58       	subi	r30, 0x8B	; 139
    3840:	ff 4f       	sbci	r31, 0xFF	; 255
    3842:	80 81       	ld	r24, Z
    3844:	98 2f       	mov	r25, r24
    3846:	9f 5f       	subi	r25, 0xFF	; 255
    3848:	82 e0       	ldi	r24, 0x02	; 2
    384a:	69 2f       	mov	r22, r25
    384c:	0e 94 2a 32 	call	0x6454	; 0x6454 <HAL_LCD_goToRowColumn>
		HAL_LCD_sendCharacter('*');
    3850:	8a e2       	ldi	r24, 0x2A	; 42
    3852:	0e 94 18 2c 	call	0x5830	; 0x5830 <HAL_LCD_sendCharacter>
	_delay_ms(50);

	HAL_LCD_displaystringRowColumn("EnterPassword", 1, 1);
	_delay_ms(5000);

	for(i=0;i<4;i++)
    3856:	de 01       	movw	r26, r28
    3858:	ab 58       	subi	r26, 0x8B	; 139
    385a:	bf 4f       	sbci	r27, 0xFF	; 255
    385c:	fe 01       	movw	r30, r28
    385e:	eb 58       	subi	r30, 0x8B	; 139
    3860:	ff 4f       	sbci	r31, 0xFF	; 255
    3862:	80 81       	ld	r24, Z
    3864:	91 81       	ldd	r25, Z+1	; 0x01
    3866:	01 96       	adiw	r24, 0x01	; 1
    3868:	11 96       	adiw	r26, 0x01	; 1
    386a:	9c 93       	st	X, r25
    386c:	8e 93       	st	-X, r24
    386e:	fe 01       	movw	r30, r28
    3870:	eb 58       	subi	r30, 0x8B	; 139
    3872:	ff 4f       	sbci	r31, 0xFF	; 255
    3874:	80 81       	ld	r24, Z
    3876:	91 81       	ldd	r25, Z+1	; 0x01
    3878:	84 30       	cpi	r24, 0x04	; 4
    387a:	91 05       	cpc	r25, r1
    387c:	54 f2       	brlt	.-108    	; 0x3812 <Enter_Password+0x31c>
    387e:	fe 01       	movw	r30, r28
    3880:	ef 5a       	subi	r30, 0xAF	; 175
    3882:	ff 4f       	sbci	r31, 0xFF	; 255
    3884:	80 e0       	ldi	r24, 0x00	; 0
    3886:	90 e0       	ldi	r25, 0x00	; 0
    3888:	a8 e4       	ldi	r26, 0x48	; 72
    388a:	b2 e4       	ldi	r27, 0x42	; 66
    388c:	80 83       	st	Z, r24
    388e:	91 83       	std	Z+1, r25	; 0x01
    3890:	a2 83       	std	Z+2, r26	; 0x02
    3892:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3894:	8e 01       	movw	r16, r28
    3896:	03 5b       	subi	r16, 0xB3	; 179
    3898:	1f 4f       	sbci	r17, 0xFF	; 255
    389a:	fe 01       	movw	r30, r28
    389c:	ef 5a       	subi	r30, 0xAF	; 175
    389e:	ff 4f       	sbci	r31, 0xFF	; 255
    38a0:	60 81       	ld	r22, Z
    38a2:	71 81       	ldd	r23, Z+1	; 0x01
    38a4:	82 81       	ldd	r24, Z+2	; 0x02
    38a6:	93 81       	ldd	r25, Z+3	; 0x03
    38a8:	20 e0       	ldi	r18, 0x00	; 0
    38aa:	30 e0       	ldi	r19, 0x00	; 0
    38ac:	4a e7       	ldi	r20, 0x7A	; 122
    38ae:	55 e4       	ldi	r21, 0x45	; 69
    38b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38b4:	dc 01       	movw	r26, r24
    38b6:	cb 01       	movw	r24, r22
    38b8:	f8 01       	movw	r30, r16
    38ba:	80 83       	st	Z, r24
    38bc:	91 83       	std	Z+1, r25	; 0x01
    38be:	a2 83       	std	Z+2, r26	; 0x02
    38c0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    38c2:	fe 01       	movw	r30, r28
    38c4:	e3 5b       	subi	r30, 0xB3	; 179
    38c6:	ff 4f       	sbci	r31, 0xFF	; 255
    38c8:	60 81       	ld	r22, Z
    38ca:	71 81       	ldd	r23, Z+1	; 0x01
    38cc:	82 81       	ldd	r24, Z+2	; 0x02
    38ce:	93 81       	ldd	r25, Z+3	; 0x03
    38d0:	20 e0       	ldi	r18, 0x00	; 0
    38d2:	30 e0       	ldi	r19, 0x00	; 0
    38d4:	40 e8       	ldi	r20, 0x80	; 128
    38d6:	5f e3       	ldi	r21, 0x3F	; 63
    38d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38dc:	88 23       	and	r24, r24
    38de:	44 f4       	brge	.+16     	; 0x38f0 <Enter_Password+0x3fa>
		__ticks = 1;
    38e0:	fe 01       	movw	r30, r28
    38e2:	e5 5b       	subi	r30, 0xB5	; 181
    38e4:	ff 4f       	sbci	r31, 0xFF	; 255
    38e6:	81 e0       	ldi	r24, 0x01	; 1
    38e8:	90 e0       	ldi	r25, 0x00	; 0
    38ea:	91 83       	std	Z+1, r25	; 0x01
    38ec:	80 83       	st	Z, r24
    38ee:	64 c0       	rjmp	.+200    	; 0x39b8 <Enter_Password+0x4c2>
	else if (__tmp > 65535)
    38f0:	fe 01       	movw	r30, r28
    38f2:	e3 5b       	subi	r30, 0xB3	; 179
    38f4:	ff 4f       	sbci	r31, 0xFF	; 255
    38f6:	60 81       	ld	r22, Z
    38f8:	71 81       	ldd	r23, Z+1	; 0x01
    38fa:	82 81       	ldd	r24, Z+2	; 0x02
    38fc:	93 81       	ldd	r25, Z+3	; 0x03
    38fe:	20 e0       	ldi	r18, 0x00	; 0
    3900:	3f ef       	ldi	r19, 0xFF	; 255
    3902:	4f e7       	ldi	r20, 0x7F	; 127
    3904:	57 e4       	ldi	r21, 0x47	; 71
    3906:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    390a:	18 16       	cp	r1, r24
    390c:	0c f0       	brlt	.+2      	; 0x3910 <Enter_Password+0x41a>
    390e:	43 c0       	rjmp	.+134    	; 0x3996 <Enter_Password+0x4a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3910:	fe 01       	movw	r30, r28
    3912:	ef 5a       	subi	r30, 0xAF	; 175
    3914:	ff 4f       	sbci	r31, 0xFF	; 255
    3916:	60 81       	ld	r22, Z
    3918:	71 81       	ldd	r23, Z+1	; 0x01
    391a:	82 81       	ldd	r24, Z+2	; 0x02
    391c:	93 81       	ldd	r25, Z+3	; 0x03
    391e:	20 e0       	ldi	r18, 0x00	; 0
    3920:	30 e0       	ldi	r19, 0x00	; 0
    3922:	40 e2       	ldi	r20, 0x20	; 32
    3924:	51 e4       	ldi	r21, 0x41	; 65
    3926:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    392a:	dc 01       	movw	r26, r24
    392c:	cb 01       	movw	r24, r22
    392e:	8e 01       	movw	r16, r28
    3930:	05 5b       	subi	r16, 0xB5	; 181
    3932:	1f 4f       	sbci	r17, 0xFF	; 255
    3934:	bc 01       	movw	r22, r24
    3936:	cd 01       	movw	r24, r26
    3938:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    393c:	dc 01       	movw	r26, r24
    393e:	cb 01       	movw	r24, r22
    3940:	f8 01       	movw	r30, r16
    3942:	91 83       	std	Z+1, r25	; 0x01
    3944:	80 83       	st	Z, r24
    3946:	1f c0       	rjmp	.+62     	; 0x3986 <Enter_Password+0x490>
    3948:	fe 01       	movw	r30, r28
    394a:	e7 5b       	subi	r30, 0xB7	; 183
    394c:	ff 4f       	sbci	r31, 0xFF	; 255
    394e:	80 e9       	ldi	r24, 0x90	; 144
    3950:	91 e0       	ldi	r25, 0x01	; 1
    3952:	91 83       	std	Z+1, r25	; 0x01
    3954:	80 83       	st	Z, r24
    3956:	fe 01       	movw	r30, r28
    3958:	e7 5b       	subi	r30, 0xB7	; 183
    395a:	ff 4f       	sbci	r31, 0xFF	; 255
    395c:	80 81       	ld	r24, Z
    395e:	91 81       	ldd	r25, Z+1	; 0x01
    3960:	01 97       	sbiw	r24, 0x01	; 1
    3962:	f1 f7       	brne	.-4      	; 0x3960 <Enter_Password+0x46a>
    3964:	fe 01       	movw	r30, r28
    3966:	e7 5b       	subi	r30, 0xB7	; 183
    3968:	ff 4f       	sbci	r31, 0xFF	; 255
    396a:	91 83       	std	Z+1, r25	; 0x01
    396c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    396e:	de 01       	movw	r26, r28
    3970:	a5 5b       	subi	r26, 0xB5	; 181
    3972:	bf 4f       	sbci	r27, 0xFF	; 255
    3974:	fe 01       	movw	r30, r28
    3976:	e5 5b       	subi	r30, 0xB5	; 181
    3978:	ff 4f       	sbci	r31, 0xFF	; 255
    397a:	80 81       	ld	r24, Z
    397c:	91 81       	ldd	r25, Z+1	; 0x01
    397e:	01 97       	sbiw	r24, 0x01	; 1
    3980:	11 96       	adiw	r26, 0x01	; 1
    3982:	9c 93       	st	X, r25
    3984:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3986:	fe 01       	movw	r30, r28
    3988:	e5 5b       	subi	r30, 0xB5	; 181
    398a:	ff 4f       	sbci	r31, 0xFF	; 255
    398c:	80 81       	ld	r24, Z
    398e:	91 81       	ldd	r25, Z+1	; 0x01
    3990:	00 97       	sbiw	r24, 0x00	; 0
    3992:	d1 f6       	brne	.-76     	; 0x3948 <Enter_Password+0x452>
    3994:	27 c0       	rjmp	.+78     	; 0x39e4 <Enter_Password+0x4ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3996:	8e 01       	movw	r16, r28
    3998:	05 5b       	subi	r16, 0xB5	; 181
    399a:	1f 4f       	sbci	r17, 0xFF	; 255
    399c:	fe 01       	movw	r30, r28
    399e:	e3 5b       	subi	r30, 0xB3	; 179
    39a0:	ff 4f       	sbci	r31, 0xFF	; 255
    39a2:	60 81       	ld	r22, Z
    39a4:	71 81       	ldd	r23, Z+1	; 0x01
    39a6:	82 81       	ldd	r24, Z+2	; 0x02
    39a8:	93 81       	ldd	r25, Z+3	; 0x03
    39aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39ae:	dc 01       	movw	r26, r24
    39b0:	cb 01       	movw	r24, r22
    39b2:	f8 01       	movw	r30, r16
    39b4:	91 83       	std	Z+1, r25	; 0x01
    39b6:	80 83       	st	Z, r24
    39b8:	de 01       	movw	r26, r28
    39ba:	a9 5b       	subi	r26, 0xB9	; 185
    39bc:	bf 4f       	sbci	r27, 0xFF	; 255
    39be:	fe 01       	movw	r30, r28
    39c0:	e5 5b       	subi	r30, 0xB5	; 181
    39c2:	ff 4f       	sbci	r31, 0xFF	; 255
    39c4:	80 81       	ld	r24, Z
    39c6:	91 81       	ldd	r25, Z+1	; 0x01
    39c8:	8d 93       	st	X+, r24
    39ca:	9c 93       	st	X, r25
    39cc:	fe 01       	movw	r30, r28
    39ce:	e9 5b       	subi	r30, 0xB9	; 185
    39d0:	ff 4f       	sbci	r31, 0xFF	; 255
    39d2:	80 81       	ld	r24, Z
    39d4:	91 81       	ldd	r25, Z+1	; 0x01
    39d6:	01 97       	sbiw	r24, 0x01	; 1
    39d8:	f1 f7       	brne	.-4      	; 0x39d6 <Enter_Password+0x4e0>
    39da:	fe 01       	movw	r30, r28
    39dc:	e9 5b       	subi	r30, 0xB9	; 185
    39de:	ff 4f       	sbci	r31, 0xFF	; 255
    39e0:	91 83       	std	Z+1, r25	; 0x01
    39e2:	80 83       	st	Z, r24
		HAL_LCD_goToRowColumn(2, i+1);
		HAL_LCD_sendCharacter('*');
		//LCD_Send_Char_Pos('*',2,i+1);
	}
	_delay_ms(50);
	j=0;
    39e4:	fe 01       	movw	r30, r28
    39e6:	ed 58       	subi	r30, 0x8D	; 141
    39e8:	ff 4f       	sbci	r31, 0xFF	; 255
    39ea:	11 82       	std	Z+1, r1	; 0x01
    39ec:	10 82       	st	Z, r1
	HAL_LCD_clearScreen();
    39ee:	0e 94 7a 31 	call	0x62f4	; 0x62f4 <HAL_LCD_clearScreen>
	HAL_LCD_displaystringRowColumn("EnterPasswordagain", 1, 1);
    39f2:	8e e6       	ldi	r24, 0x6E	; 110
    39f4:	90 e0       	ldi	r25, 0x00	; 0
    39f6:	61 e0       	ldi	r22, 0x01	; 1
    39f8:	41 e0       	ldi	r20, 0x01	; 1
    39fa:	0e 94 0a 32 	call	0x6414	; 0x6414 <HAL_LCD_displaystringRowColumn>
    39fe:	fe 01       	movw	r30, r28
    3a00:	ed 5b       	subi	r30, 0xBD	; 189
    3a02:	ff 4f       	sbci	r31, 0xFF	; 255
    3a04:	80 e0       	ldi	r24, 0x00	; 0
    3a06:	90 e4       	ldi	r25, 0x40	; 64
    3a08:	ac e9       	ldi	r26, 0x9C	; 156
    3a0a:	b5 e4       	ldi	r27, 0x45	; 69
    3a0c:	80 83       	st	Z, r24
    3a0e:	91 83       	std	Z+1, r25	; 0x01
    3a10:	a2 83       	std	Z+2, r26	; 0x02
    3a12:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a14:	8e 01       	movw	r16, r28
    3a16:	01 5c       	subi	r16, 0xC1	; 193
    3a18:	1f 4f       	sbci	r17, 0xFF	; 255
    3a1a:	fe 01       	movw	r30, r28
    3a1c:	ed 5b       	subi	r30, 0xBD	; 189
    3a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a20:	60 81       	ld	r22, Z
    3a22:	71 81       	ldd	r23, Z+1	; 0x01
    3a24:	82 81       	ldd	r24, Z+2	; 0x02
    3a26:	93 81       	ldd	r25, Z+3	; 0x03
    3a28:	20 e0       	ldi	r18, 0x00	; 0
    3a2a:	30 e0       	ldi	r19, 0x00	; 0
    3a2c:	4a e7       	ldi	r20, 0x7A	; 122
    3a2e:	55 e4       	ldi	r21, 0x45	; 69
    3a30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a34:	dc 01       	movw	r26, r24
    3a36:	cb 01       	movw	r24, r22
    3a38:	f8 01       	movw	r30, r16
    3a3a:	80 83       	st	Z, r24
    3a3c:	91 83       	std	Z+1, r25	; 0x01
    3a3e:	a2 83       	std	Z+2, r26	; 0x02
    3a40:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a42:	fe 01       	movw	r30, r28
    3a44:	ff 96       	adiw	r30, 0x3f	; 63
    3a46:	60 81       	ld	r22, Z
    3a48:	71 81       	ldd	r23, Z+1	; 0x01
    3a4a:	82 81       	ldd	r24, Z+2	; 0x02
    3a4c:	93 81       	ldd	r25, Z+3	; 0x03
    3a4e:	20 e0       	ldi	r18, 0x00	; 0
    3a50:	30 e0       	ldi	r19, 0x00	; 0
    3a52:	40 e8       	ldi	r20, 0x80	; 128
    3a54:	5f e3       	ldi	r21, 0x3F	; 63
    3a56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a5a:	88 23       	and	r24, r24
    3a5c:	2c f4       	brge	.+10     	; 0x3a68 <Enter_Password+0x572>
		__ticks = 1;
    3a5e:	81 e0       	ldi	r24, 0x01	; 1
    3a60:	90 e0       	ldi	r25, 0x00	; 0
    3a62:	9e af       	std	Y+62, r25	; 0x3e
    3a64:	8d af       	std	Y+61, r24	; 0x3d
    3a66:	46 c0       	rjmp	.+140    	; 0x3af4 <Enter_Password+0x5fe>
	else if (__tmp > 65535)
    3a68:	fe 01       	movw	r30, r28
    3a6a:	ff 96       	adiw	r30, 0x3f	; 63
    3a6c:	60 81       	ld	r22, Z
    3a6e:	71 81       	ldd	r23, Z+1	; 0x01
    3a70:	82 81       	ldd	r24, Z+2	; 0x02
    3a72:	93 81       	ldd	r25, Z+3	; 0x03
    3a74:	20 e0       	ldi	r18, 0x00	; 0
    3a76:	3f ef       	ldi	r19, 0xFF	; 255
    3a78:	4f e7       	ldi	r20, 0x7F	; 127
    3a7a:	57 e4       	ldi	r21, 0x47	; 71
    3a7c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a80:	18 16       	cp	r1, r24
    3a82:	64 f5       	brge	.+88     	; 0x3adc <Enter_Password+0x5e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a84:	fe 01       	movw	r30, r28
    3a86:	ed 5b       	subi	r30, 0xBD	; 189
    3a88:	ff 4f       	sbci	r31, 0xFF	; 255
    3a8a:	60 81       	ld	r22, Z
    3a8c:	71 81       	ldd	r23, Z+1	; 0x01
    3a8e:	82 81       	ldd	r24, Z+2	; 0x02
    3a90:	93 81       	ldd	r25, Z+3	; 0x03
    3a92:	20 e0       	ldi	r18, 0x00	; 0
    3a94:	30 e0       	ldi	r19, 0x00	; 0
    3a96:	40 e2       	ldi	r20, 0x20	; 32
    3a98:	51 e4       	ldi	r21, 0x41	; 65
    3a9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a9e:	dc 01       	movw	r26, r24
    3aa0:	cb 01       	movw	r24, r22
    3aa2:	bc 01       	movw	r22, r24
    3aa4:	cd 01       	movw	r24, r26
    3aa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aaa:	dc 01       	movw	r26, r24
    3aac:	cb 01       	movw	r24, r22
    3aae:	9e af       	std	Y+62, r25	; 0x3e
    3ab0:	8d af       	std	Y+61, r24	; 0x3d
    3ab2:	0f c0       	rjmp	.+30     	; 0x3ad2 <Enter_Password+0x5dc>
    3ab4:	80 e9       	ldi	r24, 0x90	; 144
    3ab6:	91 e0       	ldi	r25, 0x01	; 1
    3ab8:	9c af       	std	Y+60, r25	; 0x3c
    3aba:	8b af       	std	Y+59, r24	; 0x3b
    3abc:	8b ad       	ldd	r24, Y+59	; 0x3b
    3abe:	9c ad       	ldd	r25, Y+60	; 0x3c
    3ac0:	01 97       	sbiw	r24, 0x01	; 1
    3ac2:	f1 f7       	brne	.-4      	; 0x3ac0 <Enter_Password+0x5ca>
    3ac4:	9c af       	std	Y+60, r25	; 0x3c
    3ac6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ac8:	8d ad       	ldd	r24, Y+61	; 0x3d
    3aca:	9e ad       	ldd	r25, Y+62	; 0x3e
    3acc:	01 97       	sbiw	r24, 0x01	; 1
    3ace:	9e af       	std	Y+62, r25	; 0x3e
    3ad0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ad2:	8d ad       	ldd	r24, Y+61	; 0x3d
    3ad4:	9e ad       	ldd	r25, Y+62	; 0x3e
    3ad6:	00 97       	sbiw	r24, 0x00	; 0
    3ad8:	69 f7       	brne	.-38     	; 0x3ab4 <Enter_Password+0x5be>
    3ada:	23 c1       	rjmp	.+582    	; 0x3d22 <Enter_Password+0x82c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3adc:	fe 01       	movw	r30, r28
    3ade:	ff 96       	adiw	r30, 0x3f	; 63
    3ae0:	60 81       	ld	r22, Z
    3ae2:	71 81       	ldd	r23, Z+1	; 0x01
    3ae4:	82 81       	ldd	r24, Z+2	; 0x02
    3ae6:	93 81       	ldd	r25, Z+3	; 0x03
    3ae8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aec:	dc 01       	movw	r26, r24
    3aee:	cb 01       	movw	r24, r22
    3af0:	9e af       	std	Y+62, r25	; 0x3e
    3af2:	8d af       	std	Y+61, r24	; 0x3d
    3af4:	8d ad       	ldd	r24, Y+61	; 0x3d
    3af6:	9e ad       	ldd	r25, Y+62	; 0x3e
    3af8:	9a af       	std	Y+58, r25	; 0x3a
    3afa:	89 af       	std	Y+57, r24	; 0x39
    3afc:	89 ad       	ldd	r24, Y+57	; 0x39
    3afe:	9a ad       	ldd	r25, Y+58	; 0x3a
    3b00:	01 97       	sbiw	r24, 0x01	; 1
    3b02:	f1 f7       	brne	.-4      	; 0x3b00 <Enter_Password+0x60a>
    3b04:	9a af       	std	Y+58, r25	; 0x3a
    3b06:	89 af       	std	Y+57, r24	; 0x39
    3b08:	0c c1       	rjmp	.+536    	; 0x3d22 <Enter_Password+0x82c>
	_delay_ms(5000);
	while(j<PASSWORD_LENGTH)
	{
		Get_character= MCAL_UART_receive_sysch();
    3b0a:	0e 94 c9 07 	call	0xf92	; 0xf92 <MCAL_UART_receive_sysch>
    3b0e:	80 93 f4 01 	sts	0x01F4, r24
    3b12:	80 e0       	ldi	r24, 0x00	; 0
    3b14:	90 e0       	ldi	r25, 0x00	; 0
    3b16:	a8 ec       	ldi	r26, 0xC8	; 200
    3b18:	b2 e4       	ldi	r27, 0x42	; 66
    3b1a:	8d ab       	std	Y+53, r24	; 0x35
    3b1c:	9e ab       	std	Y+54, r25	; 0x36
    3b1e:	af ab       	std	Y+55, r26	; 0x37
    3b20:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b22:	6d a9       	ldd	r22, Y+53	; 0x35
    3b24:	7e a9       	ldd	r23, Y+54	; 0x36
    3b26:	8f a9       	ldd	r24, Y+55	; 0x37
    3b28:	98 ad       	ldd	r25, Y+56	; 0x38
    3b2a:	20 e0       	ldi	r18, 0x00	; 0
    3b2c:	30 e0       	ldi	r19, 0x00	; 0
    3b2e:	4a e7       	ldi	r20, 0x7A	; 122
    3b30:	55 e4       	ldi	r21, 0x45	; 69
    3b32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b36:	dc 01       	movw	r26, r24
    3b38:	cb 01       	movw	r24, r22
    3b3a:	89 ab       	std	Y+49, r24	; 0x31
    3b3c:	9a ab       	std	Y+50, r25	; 0x32
    3b3e:	ab ab       	std	Y+51, r26	; 0x33
    3b40:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3b42:	69 a9       	ldd	r22, Y+49	; 0x31
    3b44:	7a a9       	ldd	r23, Y+50	; 0x32
    3b46:	8b a9       	ldd	r24, Y+51	; 0x33
    3b48:	9c a9       	ldd	r25, Y+52	; 0x34
    3b4a:	20 e0       	ldi	r18, 0x00	; 0
    3b4c:	30 e0       	ldi	r19, 0x00	; 0
    3b4e:	40 e8       	ldi	r20, 0x80	; 128
    3b50:	5f e3       	ldi	r21, 0x3F	; 63
    3b52:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b56:	88 23       	and	r24, r24
    3b58:	2c f4       	brge	.+10     	; 0x3b64 <Enter_Password+0x66e>
		__ticks = 1;
    3b5a:	81 e0       	ldi	r24, 0x01	; 1
    3b5c:	90 e0       	ldi	r25, 0x00	; 0
    3b5e:	98 ab       	std	Y+48, r25	; 0x30
    3b60:	8f a7       	std	Y+47, r24	; 0x2f
    3b62:	3f c0       	rjmp	.+126    	; 0x3be2 <Enter_Password+0x6ec>
	else if (__tmp > 65535)
    3b64:	69 a9       	ldd	r22, Y+49	; 0x31
    3b66:	7a a9       	ldd	r23, Y+50	; 0x32
    3b68:	8b a9       	ldd	r24, Y+51	; 0x33
    3b6a:	9c a9       	ldd	r25, Y+52	; 0x34
    3b6c:	20 e0       	ldi	r18, 0x00	; 0
    3b6e:	3f ef       	ldi	r19, 0xFF	; 255
    3b70:	4f e7       	ldi	r20, 0x7F	; 127
    3b72:	57 e4       	ldi	r21, 0x47	; 71
    3b74:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b78:	18 16       	cp	r1, r24
    3b7a:	4c f5       	brge	.+82     	; 0x3bce <Enter_Password+0x6d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b7c:	6d a9       	ldd	r22, Y+53	; 0x35
    3b7e:	7e a9       	ldd	r23, Y+54	; 0x36
    3b80:	8f a9       	ldd	r24, Y+55	; 0x37
    3b82:	98 ad       	ldd	r25, Y+56	; 0x38
    3b84:	20 e0       	ldi	r18, 0x00	; 0
    3b86:	30 e0       	ldi	r19, 0x00	; 0
    3b88:	40 e2       	ldi	r20, 0x20	; 32
    3b8a:	51 e4       	ldi	r21, 0x41	; 65
    3b8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b90:	dc 01       	movw	r26, r24
    3b92:	cb 01       	movw	r24, r22
    3b94:	bc 01       	movw	r22, r24
    3b96:	cd 01       	movw	r24, r26
    3b98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b9c:	dc 01       	movw	r26, r24
    3b9e:	cb 01       	movw	r24, r22
    3ba0:	98 ab       	std	Y+48, r25	; 0x30
    3ba2:	8f a7       	std	Y+47, r24	; 0x2f
    3ba4:	0f c0       	rjmp	.+30     	; 0x3bc4 <Enter_Password+0x6ce>
    3ba6:	80 e9       	ldi	r24, 0x90	; 144
    3ba8:	91 e0       	ldi	r25, 0x01	; 1
    3baa:	9e a7       	std	Y+46, r25	; 0x2e
    3bac:	8d a7       	std	Y+45, r24	; 0x2d
    3bae:	8d a5       	ldd	r24, Y+45	; 0x2d
    3bb0:	9e a5       	ldd	r25, Y+46	; 0x2e
    3bb2:	01 97       	sbiw	r24, 0x01	; 1
    3bb4:	f1 f7       	brne	.-4      	; 0x3bb2 <Enter_Password+0x6bc>
    3bb6:	9e a7       	std	Y+46, r25	; 0x2e
    3bb8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bba:	8f a5       	ldd	r24, Y+47	; 0x2f
    3bbc:	98 a9       	ldd	r25, Y+48	; 0x30
    3bbe:	01 97       	sbiw	r24, 0x01	; 1
    3bc0:	98 ab       	std	Y+48, r25	; 0x30
    3bc2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bc4:	8f a5       	ldd	r24, Y+47	; 0x2f
    3bc6:	98 a9       	ldd	r25, Y+48	; 0x30
    3bc8:	00 97       	sbiw	r24, 0x00	; 0
    3bca:	69 f7       	brne	.-38     	; 0x3ba6 <Enter_Password+0x6b0>
    3bcc:	14 c0       	rjmp	.+40     	; 0x3bf6 <Enter_Password+0x700>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bce:	69 a9       	ldd	r22, Y+49	; 0x31
    3bd0:	7a a9       	ldd	r23, Y+50	; 0x32
    3bd2:	8b a9       	ldd	r24, Y+51	; 0x33
    3bd4:	9c a9       	ldd	r25, Y+52	; 0x34
    3bd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bda:	dc 01       	movw	r26, r24
    3bdc:	cb 01       	movw	r24, r22
    3bde:	98 ab       	std	Y+48, r25	; 0x30
    3be0:	8f a7       	std	Y+47, r24	; 0x2f
    3be2:	8f a5       	ldd	r24, Y+47	; 0x2f
    3be4:	98 a9       	ldd	r25, Y+48	; 0x30
    3be6:	9c a7       	std	Y+44, r25	; 0x2c
    3be8:	8b a7       	std	Y+43, r24	; 0x2b
    3bea:	8b a5       	ldd	r24, Y+43	; 0x2b
    3bec:	9c a5       	ldd	r25, Y+44	; 0x2c
    3bee:	01 97       	sbiw	r24, 0x01	; 1
    3bf0:	f1 f7       	brne	.-4      	; 0x3bee <Enter_Password+0x6f8>
    3bf2:	9c a7       	std	Y+44, r25	; 0x2c
    3bf4:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(100);
		temp2_password[j] = Get_character;
    3bf6:	fe 01       	movw	r30, r28
    3bf8:	ed 58       	subi	r30, 0x8D	; 141
    3bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    3bfc:	80 81       	ld	r24, Z
    3bfe:	91 81       	ldd	r25, Z+1	; 0x01
    3c00:	20 91 f4 01 	lds	r18, 0x01F4
    3c04:	fc 01       	movw	r30, r24
    3c06:	ea 50       	subi	r30, 0x0A	; 10
    3c08:	fe 4f       	sbci	r31, 0xFE	; 254
    3c0a:	20 83       	st	Z, r18
		HAL_LCD_goToRowColumn(2, i+1);
    3c0c:	fe 01       	movw	r30, r28
    3c0e:	eb 58       	subi	r30, 0x8B	; 139
    3c10:	ff 4f       	sbci	r31, 0xFF	; 255
    3c12:	80 81       	ld	r24, Z
    3c14:	98 2f       	mov	r25, r24
    3c16:	9f 5f       	subi	r25, 0xFF	; 255
    3c18:	82 e0       	ldi	r24, 0x02	; 2
    3c1a:	69 2f       	mov	r22, r25
    3c1c:	0e 94 2a 32 	call	0x6454	; 0x6454 <HAL_LCD_goToRowColumn>
		HAL_LCD_sendCharacter('*');
    3c20:	8a e2       	ldi	r24, 0x2A	; 42
    3c22:	0e 94 18 2c 	call	0x5830	; 0x5830 <HAL_LCD_sendCharacter>
    3c26:	80 e0       	ldi	r24, 0x00	; 0
    3c28:	90 e0       	ldi	r25, 0x00	; 0
    3c2a:	a8 e4       	ldi	r26, 0x48	; 72
    3c2c:	b2 e4       	ldi	r27, 0x42	; 66
    3c2e:	8f a3       	std	Y+39, r24	; 0x27
    3c30:	98 a7       	std	Y+40, r25	; 0x28
    3c32:	a9 a7       	std	Y+41, r26	; 0x29
    3c34:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c36:	6f a1       	ldd	r22, Y+39	; 0x27
    3c38:	78 a5       	ldd	r23, Y+40	; 0x28
    3c3a:	89 a5       	ldd	r24, Y+41	; 0x29
    3c3c:	9a a5       	ldd	r25, Y+42	; 0x2a
    3c3e:	20 e0       	ldi	r18, 0x00	; 0
    3c40:	30 e0       	ldi	r19, 0x00	; 0
    3c42:	4a e7       	ldi	r20, 0x7A	; 122
    3c44:	55 e4       	ldi	r21, 0x45	; 69
    3c46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c4a:	dc 01       	movw	r26, r24
    3c4c:	cb 01       	movw	r24, r22
    3c4e:	8b a3       	std	Y+35, r24	; 0x23
    3c50:	9c a3       	std	Y+36, r25	; 0x24
    3c52:	ad a3       	std	Y+37, r26	; 0x25
    3c54:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3c56:	6b a1       	ldd	r22, Y+35	; 0x23
    3c58:	7c a1       	ldd	r23, Y+36	; 0x24
    3c5a:	8d a1       	ldd	r24, Y+37	; 0x25
    3c5c:	9e a1       	ldd	r25, Y+38	; 0x26
    3c5e:	20 e0       	ldi	r18, 0x00	; 0
    3c60:	30 e0       	ldi	r19, 0x00	; 0
    3c62:	40 e8       	ldi	r20, 0x80	; 128
    3c64:	5f e3       	ldi	r21, 0x3F	; 63
    3c66:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c6a:	88 23       	and	r24, r24
    3c6c:	2c f4       	brge	.+10     	; 0x3c78 <Enter_Password+0x782>
		__ticks = 1;
    3c6e:	81 e0       	ldi	r24, 0x01	; 1
    3c70:	90 e0       	ldi	r25, 0x00	; 0
    3c72:	9a a3       	std	Y+34, r25	; 0x22
    3c74:	89 a3       	std	Y+33, r24	; 0x21
    3c76:	3f c0       	rjmp	.+126    	; 0x3cf6 <Enter_Password+0x800>
	else if (__tmp > 65535)
    3c78:	6b a1       	ldd	r22, Y+35	; 0x23
    3c7a:	7c a1       	ldd	r23, Y+36	; 0x24
    3c7c:	8d a1       	ldd	r24, Y+37	; 0x25
    3c7e:	9e a1       	ldd	r25, Y+38	; 0x26
    3c80:	20 e0       	ldi	r18, 0x00	; 0
    3c82:	3f ef       	ldi	r19, 0xFF	; 255
    3c84:	4f e7       	ldi	r20, 0x7F	; 127
    3c86:	57 e4       	ldi	r21, 0x47	; 71
    3c88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c8c:	18 16       	cp	r1, r24
    3c8e:	4c f5       	brge	.+82     	; 0x3ce2 <Enter_Password+0x7ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c90:	6f a1       	ldd	r22, Y+39	; 0x27
    3c92:	78 a5       	ldd	r23, Y+40	; 0x28
    3c94:	89 a5       	ldd	r24, Y+41	; 0x29
    3c96:	9a a5       	ldd	r25, Y+42	; 0x2a
    3c98:	20 e0       	ldi	r18, 0x00	; 0
    3c9a:	30 e0       	ldi	r19, 0x00	; 0
    3c9c:	40 e2       	ldi	r20, 0x20	; 32
    3c9e:	51 e4       	ldi	r21, 0x41	; 65
    3ca0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ca4:	dc 01       	movw	r26, r24
    3ca6:	cb 01       	movw	r24, r22
    3ca8:	bc 01       	movw	r22, r24
    3caa:	cd 01       	movw	r24, r26
    3cac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cb0:	dc 01       	movw	r26, r24
    3cb2:	cb 01       	movw	r24, r22
    3cb4:	9a a3       	std	Y+34, r25	; 0x22
    3cb6:	89 a3       	std	Y+33, r24	; 0x21
    3cb8:	0f c0       	rjmp	.+30     	; 0x3cd8 <Enter_Password+0x7e2>
    3cba:	80 e9       	ldi	r24, 0x90	; 144
    3cbc:	91 e0       	ldi	r25, 0x01	; 1
    3cbe:	98 a3       	std	Y+32, r25	; 0x20
    3cc0:	8f 8f       	std	Y+31, r24	; 0x1f
    3cc2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3cc4:	98 a1       	ldd	r25, Y+32	; 0x20
    3cc6:	01 97       	sbiw	r24, 0x01	; 1
    3cc8:	f1 f7       	brne	.-4      	; 0x3cc6 <Enter_Password+0x7d0>
    3cca:	98 a3       	std	Y+32, r25	; 0x20
    3ccc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cce:	89 a1       	ldd	r24, Y+33	; 0x21
    3cd0:	9a a1       	ldd	r25, Y+34	; 0x22
    3cd2:	01 97       	sbiw	r24, 0x01	; 1
    3cd4:	9a a3       	std	Y+34, r25	; 0x22
    3cd6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cd8:	89 a1       	ldd	r24, Y+33	; 0x21
    3cda:	9a a1       	ldd	r25, Y+34	; 0x22
    3cdc:	00 97       	sbiw	r24, 0x00	; 0
    3cde:	69 f7       	brne	.-38     	; 0x3cba <Enter_Password+0x7c4>
    3ce0:	14 c0       	rjmp	.+40     	; 0x3d0a <Enter_Password+0x814>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ce2:	6b a1       	ldd	r22, Y+35	; 0x23
    3ce4:	7c a1       	ldd	r23, Y+36	; 0x24
    3ce6:	8d a1       	ldd	r24, Y+37	; 0x25
    3ce8:	9e a1       	ldd	r25, Y+38	; 0x26
    3cea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cee:	dc 01       	movw	r26, r24
    3cf0:	cb 01       	movw	r24, r22
    3cf2:	9a a3       	std	Y+34, r25	; 0x22
    3cf4:	89 a3       	std	Y+33, r24	; 0x21
    3cf6:	89 a1       	ldd	r24, Y+33	; 0x21
    3cf8:	9a a1       	ldd	r25, Y+34	; 0x22
    3cfa:	9e 8f       	std	Y+30, r25	; 0x1e
    3cfc:	8d 8f       	std	Y+29, r24	; 0x1d
    3cfe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3d00:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3d02:	01 97       	sbiw	r24, 0x01	; 1
    3d04:	f1 f7       	brne	.-4      	; 0x3d02 <Enter_Password+0x80c>
    3d06:	9e 8f       	std	Y+30, r25	; 0x1e
    3d08:	8d 8f       	std	Y+29, r24	; 0x1d

		_delay_ms(50);
		j++;
    3d0a:	de 01       	movw	r26, r28
    3d0c:	ad 58       	subi	r26, 0x8D	; 141
    3d0e:	bf 4f       	sbci	r27, 0xFF	; 255
    3d10:	fe 01       	movw	r30, r28
    3d12:	ed 58       	subi	r30, 0x8D	; 141
    3d14:	ff 4f       	sbci	r31, 0xFF	; 255
    3d16:	80 81       	ld	r24, Z
    3d18:	91 81       	ldd	r25, Z+1	; 0x01
    3d1a:	01 96       	adiw	r24, 0x01	; 1
    3d1c:	11 96       	adiw	r26, 0x01	; 1
    3d1e:	9c 93       	st	X, r25
    3d20:	8e 93       	st	-X, r24
	_delay_ms(50);
	j=0;
	HAL_LCD_clearScreen();
	HAL_LCD_displaystringRowColumn("EnterPasswordagain", 1, 1);
	_delay_ms(5000);
	while(j<PASSWORD_LENGTH)
    3d22:	fe 01       	movw	r30, r28
    3d24:	ed 58       	subi	r30, 0x8D	; 141
    3d26:	ff 4f       	sbci	r31, 0xFF	; 255
    3d28:	80 81       	ld	r24, Z
    3d2a:	91 81       	ldd	r25, Z+1	; 0x01
    3d2c:	84 30       	cpi	r24, 0x04	; 4
    3d2e:	91 05       	cpc	r25, r1
    3d30:	0c f4       	brge	.+2      	; 0x3d34 <Enter_Password+0x83e>
    3d32:	eb ce       	rjmp	.-554    	; 0x3b0a <Enter_Password+0x614>
    3d34:	80 e0       	ldi	r24, 0x00	; 0
    3d36:	90 e0       	ldi	r25, 0x00	; 0
    3d38:	aa ef       	ldi	r26, 0xFA	; 250
    3d3a:	b3 e4       	ldi	r27, 0x43	; 67
    3d3c:	89 8f       	std	Y+25, r24	; 0x19
    3d3e:	9a 8f       	std	Y+26, r25	; 0x1a
    3d40:	ab 8f       	std	Y+27, r26	; 0x1b
    3d42:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d44:	69 8d       	ldd	r22, Y+25	; 0x19
    3d46:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d48:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d4c:	20 e0       	ldi	r18, 0x00	; 0
    3d4e:	30 e0       	ldi	r19, 0x00	; 0
    3d50:	4a e7       	ldi	r20, 0x7A	; 122
    3d52:	55 e4       	ldi	r21, 0x45	; 69
    3d54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d58:	dc 01       	movw	r26, r24
    3d5a:	cb 01       	movw	r24, r22
    3d5c:	8d 8b       	std	Y+21, r24	; 0x15
    3d5e:	9e 8b       	std	Y+22, r25	; 0x16
    3d60:	af 8b       	std	Y+23, r26	; 0x17
    3d62:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3d64:	6d 89       	ldd	r22, Y+21	; 0x15
    3d66:	7e 89       	ldd	r23, Y+22	; 0x16
    3d68:	8f 89       	ldd	r24, Y+23	; 0x17
    3d6a:	98 8d       	ldd	r25, Y+24	; 0x18
    3d6c:	20 e0       	ldi	r18, 0x00	; 0
    3d6e:	30 e0       	ldi	r19, 0x00	; 0
    3d70:	40 e8       	ldi	r20, 0x80	; 128
    3d72:	5f e3       	ldi	r21, 0x3F	; 63
    3d74:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d78:	88 23       	and	r24, r24
    3d7a:	2c f4       	brge	.+10     	; 0x3d86 <Enter_Password+0x890>
		__ticks = 1;
    3d7c:	81 e0       	ldi	r24, 0x01	; 1
    3d7e:	90 e0       	ldi	r25, 0x00	; 0
    3d80:	9c 8b       	std	Y+20, r25	; 0x14
    3d82:	8b 8b       	std	Y+19, r24	; 0x13
    3d84:	3f c0       	rjmp	.+126    	; 0x3e04 <Enter_Password+0x90e>
	else if (__tmp > 65535)
    3d86:	6d 89       	ldd	r22, Y+21	; 0x15
    3d88:	7e 89       	ldd	r23, Y+22	; 0x16
    3d8a:	8f 89       	ldd	r24, Y+23	; 0x17
    3d8c:	98 8d       	ldd	r25, Y+24	; 0x18
    3d8e:	20 e0       	ldi	r18, 0x00	; 0
    3d90:	3f ef       	ldi	r19, 0xFF	; 255
    3d92:	4f e7       	ldi	r20, 0x7F	; 127
    3d94:	57 e4       	ldi	r21, 0x47	; 71
    3d96:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d9a:	18 16       	cp	r1, r24
    3d9c:	4c f5       	brge	.+82     	; 0x3df0 <Enter_Password+0x8fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d9e:	69 8d       	ldd	r22, Y+25	; 0x19
    3da0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3da2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3da4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3da6:	20 e0       	ldi	r18, 0x00	; 0
    3da8:	30 e0       	ldi	r19, 0x00	; 0
    3daa:	40 e2       	ldi	r20, 0x20	; 32
    3dac:	51 e4       	ldi	r21, 0x41	; 65
    3dae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3db2:	dc 01       	movw	r26, r24
    3db4:	cb 01       	movw	r24, r22
    3db6:	bc 01       	movw	r22, r24
    3db8:	cd 01       	movw	r24, r26
    3dba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dbe:	dc 01       	movw	r26, r24
    3dc0:	cb 01       	movw	r24, r22
    3dc2:	9c 8b       	std	Y+20, r25	; 0x14
    3dc4:	8b 8b       	std	Y+19, r24	; 0x13
    3dc6:	0f c0       	rjmp	.+30     	; 0x3de6 <Enter_Password+0x8f0>
    3dc8:	80 e9       	ldi	r24, 0x90	; 144
    3dca:	91 e0       	ldi	r25, 0x01	; 1
    3dcc:	9a 8b       	std	Y+18, r25	; 0x12
    3dce:	89 8b       	std	Y+17, r24	; 0x11
    3dd0:	89 89       	ldd	r24, Y+17	; 0x11
    3dd2:	9a 89       	ldd	r25, Y+18	; 0x12
    3dd4:	01 97       	sbiw	r24, 0x01	; 1
    3dd6:	f1 f7       	brne	.-4      	; 0x3dd4 <Enter_Password+0x8de>
    3dd8:	9a 8b       	std	Y+18, r25	; 0x12
    3dda:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ddc:	8b 89       	ldd	r24, Y+19	; 0x13
    3dde:	9c 89       	ldd	r25, Y+20	; 0x14
    3de0:	01 97       	sbiw	r24, 0x01	; 1
    3de2:	9c 8b       	std	Y+20, r25	; 0x14
    3de4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3de6:	8b 89       	ldd	r24, Y+19	; 0x13
    3de8:	9c 89       	ldd	r25, Y+20	; 0x14
    3dea:	00 97       	sbiw	r24, 0x00	; 0
    3dec:	69 f7       	brne	.-38     	; 0x3dc8 <Enter_Password+0x8d2>
    3dee:	14 c0       	rjmp	.+40     	; 0x3e18 <Enter_Password+0x922>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3df0:	6d 89       	ldd	r22, Y+21	; 0x15
    3df2:	7e 89       	ldd	r23, Y+22	; 0x16
    3df4:	8f 89       	ldd	r24, Y+23	; 0x17
    3df6:	98 8d       	ldd	r25, Y+24	; 0x18
    3df8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dfc:	dc 01       	movw	r26, r24
    3dfe:	cb 01       	movw	r24, r22
    3e00:	9c 8b       	std	Y+20, r25	; 0x14
    3e02:	8b 8b       	std	Y+19, r24	; 0x13
    3e04:	8b 89       	ldd	r24, Y+19	; 0x13
    3e06:	9c 89       	ldd	r25, Y+20	; 0x14
    3e08:	98 8b       	std	Y+16, r25	; 0x10
    3e0a:	8f 87       	std	Y+15, r24	; 0x0f
    3e0c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e0e:	98 89       	ldd	r25, Y+16	; 0x10
    3e10:	01 97       	sbiw	r24, 0x01	; 1
    3e12:	f1 f7       	brne	.-4      	; 0x3e10 <Enter_Password+0x91a>
    3e14:	98 8b       	std	Y+16, r25	; 0x10
    3e16:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(50);
		j++;
	}
	_delay_ms(500);

	for(int x=0;x<PASSWORD_LENGTH;x++)
    3e18:	fe 01       	movw	r30, r28
    3e1a:	ef 58       	subi	r30, 0x8F	; 143
    3e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e1e:	11 82       	std	Z+1, r1	; 0x01
    3e20:	10 82       	st	Z, r1
    3e22:	23 c0       	rjmp	.+70     	; 0x3e6a <Enter_Password+0x974>
	{
		if(temp_password[x]!=temp2_password[x])
    3e24:	fe 01       	movw	r30, r28
    3e26:	ef 58       	subi	r30, 0x8F	; 143
    3e28:	ff 4f       	sbci	r31, 0xFF	; 255
    3e2a:	80 81       	ld	r24, Z
    3e2c:	91 81       	ldd	r25, Z+1	; 0x01
    3e2e:	fc 01       	movw	r30, r24
    3e30:	e0 51       	subi	r30, 0x10	; 16
    3e32:	fe 4f       	sbci	r31, 0xFE	; 254
    3e34:	20 81       	ld	r18, Z
    3e36:	fe 01       	movw	r30, r28
    3e38:	ef 58       	subi	r30, 0x8F	; 143
    3e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e3c:	80 81       	ld	r24, Z
    3e3e:	91 81       	ldd	r25, Z+1	; 0x01
    3e40:	fc 01       	movw	r30, r24
    3e42:	ea 50       	subi	r30, 0x0A	; 10
    3e44:	fe 4f       	sbci	r31, 0xFE	; 254
    3e46:	80 81       	ld	r24, Z
    3e48:	28 17       	cp	r18, r24
    3e4a:	19 f0       	breq	.+6      	; 0x3e52 <Enter_Password+0x95c>
		{

			Set_flag=1;
    3e4c:	81 e0       	ldi	r24, 0x01	; 1
    3e4e:	80 93 f9 01 	sts	0x01F9, r24
		_delay_ms(50);
		j++;
	}
	_delay_ms(500);

	for(int x=0;x<PASSWORD_LENGTH;x++)
    3e52:	de 01       	movw	r26, r28
    3e54:	af 58       	subi	r26, 0x8F	; 143
    3e56:	bf 4f       	sbci	r27, 0xFF	; 255
    3e58:	fe 01       	movw	r30, r28
    3e5a:	ef 58       	subi	r30, 0x8F	; 143
    3e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e5e:	80 81       	ld	r24, Z
    3e60:	91 81       	ldd	r25, Z+1	; 0x01
    3e62:	01 96       	adiw	r24, 0x01	; 1
    3e64:	11 96       	adiw	r26, 0x01	; 1
    3e66:	9c 93       	st	X, r25
    3e68:	8e 93       	st	-X, r24
    3e6a:	fe 01       	movw	r30, r28
    3e6c:	ef 58       	subi	r30, 0x8F	; 143
    3e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e70:	80 81       	ld	r24, Z
    3e72:	91 81       	ldd	r25, Z+1	; 0x01
    3e74:	84 30       	cpi	r24, 0x04	; 4
    3e76:	91 05       	cpc	r25, r1
    3e78:	ac f2       	brlt	.-86     	; 0x3e24 <Enter_Password+0x92e>

			Set_flag=1;
		}
	}

	if(Set_flag == 0)
    3e7a:	80 91 f9 01 	lds	r24, 0x01F9
    3e7e:	88 23       	and	r24, r24
    3e80:	09 f0       	breq	.+2      	; 0x3e84 <Enter_Password+0x98e>
    3e82:	ae c0       	rjmp	.+348    	; 0x3fe0 <Enter_Password+0xaea>
	{
		first=temp_password[0];
    3e84:	80 91 f0 01 	lds	r24, 0x01F0
    3e88:	80 93 f8 01 	sts	0x01F8, r24
		second=temp_password[1];
    3e8c:	80 91 f1 01 	lds	r24, 0x01F1
    3e90:	80 93 f3 01 	sts	0x01F3, r24
		third =temp_password[2];
    3e94:	80 91 f2 01 	lds	r24, 0x01F2
    3e98:	80 93 f7 01 	sts	0x01F7, r24
		fourth=temp_password[3];
    3e9c:	80 91 f3 01 	lds	r24, 0x01F3
    3ea0:	80 93 f1 01 	sts	0x01F1, r24
		EEPROM_writeByte(EEPROM3_ADDR,first);
    3ea4:	80 91 f8 01 	lds	r24, 0x01F8
    3ea8:	28 2f       	mov	r18, r24
    3eaa:	30 e0       	ldi	r19, 0x00	; 0
    3eac:	81 e1       	ldi	r24, 0x11	; 17
    3eae:	93 e0       	ldi	r25, 0x03	; 3
    3eb0:	b9 01       	movw	r22, r18
    3eb2:	0e 94 09 12 	call	0x2412	; 0x2412 <EEPROM_writeByte>
		EEPROM_writeByte(EEPROM4_ADDR,second);
    3eb6:	80 91 f3 01 	lds	r24, 0x01F3
    3eba:	28 2f       	mov	r18, r24
    3ebc:	30 e0       	ldi	r19, 0x00	; 0
    3ebe:	81 e2       	ldi	r24, 0x21	; 33
    3ec0:	93 e0       	ldi	r25, 0x03	; 3
    3ec2:	b9 01       	movw	r22, r18
    3ec4:	0e 94 09 12 	call	0x2412	; 0x2412 <EEPROM_writeByte>
		EEPROM_writeByte(EEPROM5_ADDR,third);
    3ec8:	80 91 f7 01 	lds	r24, 0x01F7
    3ecc:	28 2f       	mov	r18, r24
    3ece:	30 e0       	ldi	r19, 0x00	; 0
    3ed0:	81 e3       	ldi	r24, 0x31	; 49
    3ed2:	93 e0       	ldi	r25, 0x03	; 3
    3ed4:	b9 01       	movw	r22, r18
    3ed6:	0e 94 09 12 	call	0x2412	; 0x2412 <EEPROM_writeByte>
		EEPROM_writeByte(EEPROM6_ADDR,fourth);
    3eda:	80 91 f1 01 	lds	r24, 0x01F1
    3ede:	28 2f       	mov	r18, r24
    3ee0:	30 e0       	ldi	r19, 0x00	; 0
    3ee2:	81 e4       	ldi	r24, 0x41	; 65
    3ee4:	93 e0       	ldi	r25, 0x03	; 3
    3ee6:	b9 01       	movw	r22, r18
    3ee8:	0e 94 09 12 	call	0x2412	; 0x2412 <EEPROM_writeByte>

		HAL_LCD_clearScreen();
    3eec:	0e 94 7a 31 	call	0x62f4	; 0x62f4 <HAL_LCD_clearScreen>
		HAL_LCD_displaystringRowColumn("Done", 1, 1);
    3ef0:	81 e8       	ldi	r24, 0x81	; 129
    3ef2:	90 e0       	ldi	r25, 0x00	; 0
    3ef4:	61 e0       	ldi	r22, 0x01	; 1
    3ef6:	41 e0       	ldi	r20, 0x01	; 1
    3ef8:	0e 94 0a 32 	call	0x6414	; 0x6414 <HAL_LCD_displaystringRowColumn>
    3efc:	80 e0       	ldi	r24, 0x00	; 0
    3efe:	90 e0       	ldi	r25, 0x00	; 0
    3f00:	aa ef       	ldi	r26, 0xFA	; 250
    3f02:	b3 e4       	ldi	r27, 0x43	; 67
    3f04:	8b 87       	std	Y+11, r24	; 0x0b
    3f06:	9c 87       	std	Y+12, r25	; 0x0c
    3f08:	ad 87       	std	Y+13, r26	; 0x0d
    3f0a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f10:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f12:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f14:	20 e0       	ldi	r18, 0x00	; 0
    3f16:	30 e0       	ldi	r19, 0x00	; 0
    3f18:	4a e7       	ldi	r20, 0x7A	; 122
    3f1a:	55 e4       	ldi	r21, 0x45	; 69
    3f1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f20:	dc 01       	movw	r26, r24
    3f22:	cb 01       	movw	r24, r22
    3f24:	8f 83       	std	Y+7, r24	; 0x07
    3f26:	98 87       	std	Y+8, r25	; 0x08
    3f28:	a9 87       	std	Y+9, r26	; 0x09
    3f2a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f2c:	6f 81       	ldd	r22, Y+7	; 0x07
    3f2e:	78 85       	ldd	r23, Y+8	; 0x08
    3f30:	89 85       	ldd	r24, Y+9	; 0x09
    3f32:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f34:	20 e0       	ldi	r18, 0x00	; 0
    3f36:	30 e0       	ldi	r19, 0x00	; 0
    3f38:	40 e8       	ldi	r20, 0x80	; 128
    3f3a:	5f e3       	ldi	r21, 0x3F	; 63
    3f3c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f40:	88 23       	and	r24, r24
    3f42:	2c f4       	brge	.+10     	; 0x3f4e <Enter_Password+0xa58>
		__ticks = 1;
    3f44:	81 e0       	ldi	r24, 0x01	; 1
    3f46:	90 e0       	ldi	r25, 0x00	; 0
    3f48:	9e 83       	std	Y+6, r25	; 0x06
    3f4a:	8d 83       	std	Y+5, r24	; 0x05
    3f4c:	3f c0       	rjmp	.+126    	; 0x3fcc <Enter_Password+0xad6>
	else if (__tmp > 65535)
    3f4e:	6f 81       	ldd	r22, Y+7	; 0x07
    3f50:	78 85       	ldd	r23, Y+8	; 0x08
    3f52:	89 85       	ldd	r24, Y+9	; 0x09
    3f54:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f56:	20 e0       	ldi	r18, 0x00	; 0
    3f58:	3f ef       	ldi	r19, 0xFF	; 255
    3f5a:	4f e7       	ldi	r20, 0x7F	; 127
    3f5c:	57 e4       	ldi	r21, 0x47	; 71
    3f5e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f62:	18 16       	cp	r1, r24
    3f64:	4c f5       	brge	.+82     	; 0x3fb8 <Enter_Password+0xac2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f66:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f68:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f6e:	20 e0       	ldi	r18, 0x00	; 0
    3f70:	30 e0       	ldi	r19, 0x00	; 0
    3f72:	40 e2       	ldi	r20, 0x20	; 32
    3f74:	51 e4       	ldi	r21, 0x41	; 65
    3f76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f7a:	dc 01       	movw	r26, r24
    3f7c:	cb 01       	movw	r24, r22
    3f7e:	bc 01       	movw	r22, r24
    3f80:	cd 01       	movw	r24, r26
    3f82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f86:	dc 01       	movw	r26, r24
    3f88:	cb 01       	movw	r24, r22
    3f8a:	9e 83       	std	Y+6, r25	; 0x06
    3f8c:	8d 83       	std	Y+5, r24	; 0x05
    3f8e:	0f c0       	rjmp	.+30     	; 0x3fae <Enter_Password+0xab8>
    3f90:	80 e9       	ldi	r24, 0x90	; 144
    3f92:	91 e0       	ldi	r25, 0x01	; 1
    3f94:	9c 83       	std	Y+4, r25	; 0x04
    3f96:	8b 83       	std	Y+3, r24	; 0x03
    3f98:	8b 81       	ldd	r24, Y+3	; 0x03
    3f9a:	9c 81       	ldd	r25, Y+4	; 0x04
    3f9c:	01 97       	sbiw	r24, 0x01	; 1
    3f9e:	f1 f7       	brne	.-4      	; 0x3f9c <Enter_Password+0xaa6>
    3fa0:	9c 83       	std	Y+4, r25	; 0x04
    3fa2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fa4:	8d 81       	ldd	r24, Y+5	; 0x05
    3fa6:	9e 81       	ldd	r25, Y+6	; 0x06
    3fa8:	01 97       	sbiw	r24, 0x01	; 1
    3faa:	9e 83       	std	Y+6, r25	; 0x06
    3fac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fae:	8d 81       	ldd	r24, Y+5	; 0x05
    3fb0:	9e 81       	ldd	r25, Y+6	; 0x06
    3fb2:	00 97       	sbiw	r24, 0x00	; 0
    3fb4:	69 f7       	brne	.-38     	; 0x3f90 <Enter_Password+0xa9a>
    3fb6:	14 c0       	rjmp	.+40     	; 0x3fe0 <Enter_Password+0xaea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fb8:	6f 81       	ldd	r22, Y+7	; 0x07
    3fba:	78 85       	ldd	r23, Y+8	; 0x08
    3fbc:	89 85       	ldd	r24, Y+9	; 0x09
    3fbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fc4:	dc 01       	movw	r26, r24
    3fc6:	cb 01       	movw	r24, r22
    3fc8:	9e 83       	std	Y+6, r25	; 0x06
    3fca:	8d 83       	std	Y+5, r24	; 0x05
    3fcc:	8d 81       	ldd	r24, Y+5	; 0x05
    3fce:	9e 81       	ldd	r25, Y+6	; 0x06
    3fd0:	9a 83       	std	Y+2, r25	; 0x02
    3fd2:	89 83       	std	Y+1, r24	; 0x01
    3fd4:	89 81       	ldd	r24, Y+1	; 0x01
    3fd6:	9a 81       	ldd	r25, Y+2	; 0x02
    3fd8:	01 97       	sbiw	r24, 0x01	; 1
    3fda:	f1 f7       	brne	.-4      	; 0x3fd8 <Enter_Password+0xae2>
    3fdc:	9a 83       	std	Y+2, r25	; 0x02
    3fde:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);


	}
	return Set_flag;
    3fe0:	80 91 f9 01 	lds	r24, 0x01F9
}
    3fe4:	ca 58       	subi	r28, 0x8A	; 138
    3fe6:	df 4f       	sbci	r29, 0xFF	; 255
    3fe8:	0f b6       	in	r0, 0x3f	; 63
    3fea:	f8 94       	cli
    3fec:	de bf       	out	0x3e, r29	; 62
    3fee:	0f be       	out	0x3f, r0	; 63
    3ff0:	cd bf       	out	0x3d, r28	; 61
    3ff2:	cf 91       	pop	r28
    3ff4:	df 91       	pop	r29
    3ff6:	1f 91       	pop	r17
    3ff8:	0f 91       	pop	r16
    3ffa:	08 95       	ret

00003ffc <Login>:

u8Value Login()
{
    3ffc:	df 93       	push	r29
    3ffe:	cf 93       	push	r28
    4000:	cd b7       	in	r28, 0x3d	; 61
    4002:	de b7       	in	r29, 0x3e	; 62
    4004:	ae 97       	sbiw	r28, 0x2e	; 46
    4006:	0f b6       	in	r0, 0x3f	; 63
    4008:	f8 94       	cli
    400a:	de bf       	out	0x3e, r29	; 62
    400c:	0f be       	out	0x3f, r0	; 63
    400e:	cd bf       	out	0x3d, r28	; 61
	int m=0;
    4010:	1e a6       	std	Y+46, r1	; 0x2e
    4012:	1d a6       	std	Y+45, r1	; 0x2d

	HAL_LCD_clearScreen();
    4014:	0e 94 7a 31 	call	0x62f4	; 0x62f4 <HAL_LCD_clearScreen>
    4018:	80 e0       	ldi	r24, 0x00	; 0
    401a:	90 e0       	ldi	r25, 0x00	; 0
    401c:	a8 e4       	ldi	r26, 0x48	; 72
    401e:	b2 e4       	ldi	r27, 0x42	; 66
    4020:	8f a3       	std	Y+39, r24	; 0x27
    4022:	98 a7       	std	Y+40, r25	; 0x28
    4024:	a9 a7       	std	Y+41, r26	; 0x29
    4026:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4028:	6f a1       	ldd	r22, Y+39	; 0x27
    402a:	78 a5       	ldd	r23, Y+40	; 0x28
    402c:	89 a5       	ldd	r24, Y+41	; 0x29
    402e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4030:	20 e0       	ldi	r18, 0x00	; 0
    4032:	30 e0       	ldi	r19, 0x00	; 0
    4034:	4a e7       	ldi	r20, 0x7A	; 122
    4036:	55 e4       	ldi	r21, 0x45	; 69
    4038:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    403c:	dc 01       	movw	r26, r24
    403e:	cb 01       	movw	r24, r22
    4040:	8b a3       	std	Y+35, r24	; 0x23
    4042:	9c a3       	std	Y+36, r25	; 0x24
    4044:	ad a3       	std	Y+37, r26	; 0x25
    4046:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4048:	6b a1       	ldd	r22, Y+35	; 0x23
    404a:	7c a1       	ldd	r23, Y+36	; 0x24
    404c:	8d a1       	ldd	r24, Y+37	; 0x25
    404e:	9e a1       	ldd	r25, Y+38	; 0x26
    4050:	20 e0       	ldi	r18, 0x00	; 0
    4052:	30 e0       	ldi	r19, 0x00	; 0
    4054:	40 e8       	ldi	r20, 0x80	; 128
    4056:	5f e3       	ldi	r21, 0x3F	; 63
    4058:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    405c:	88 23       	and	r24, r24
    405e:	2c f4       	brge	.+10     	; 0x406a <Login+0x6e>
		__ticks = 1;
    4060:	81 e0       	ldi	r24, 0x01	; 1
    4062:	90 e0       	ldi	r25, 0x00	; 0
    4064:	9a a3       	std	Y+34, r25	; 0x22
    4066:	89 a3       	std	Y+33, r24	; 0x21
    4068:	3f c0       	rjmp	.+126    	; 0x40e8 <Login+0xec>
	else if (__tmp > 65535)
    406a:	6b a1       	ldd	r22, Y+35	; 0x23
    406c:	7c a1       	ldd	r23, Y+36	; 0x24
    406e:	8d a1       	ldd	r24, Y+37	; 0x25
    4070:	9e a1       	ldd	r25, Y+38	; 0x26
    4072:	20 e0       	ldi	r18, 0x00	; 0
    4074:	3f ef       	ldi	r19, 0xFF	; 255
    4076:	4f e7       	ldi	r20, 0x7F	; 127
    4078:	57 e4       	ldi	r21, 0x47	; 71
    407a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    407e:	18 16       	cp	r1, r24
    4080:	4c f5       	brge	.+82     	; 0x40d4 <Login+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4082:	6f a1       	ldd	r22, Y+39	; 0x27
    4084:	78 a5       	ldd	r23, Y+40	; 0x28
    4086:	89 a5       	ldd	r24, Y+41	; 0x29
    4088:	9a a5       	ldd	r25, Y+42	; 0x2a
    408a:	20 e0       	ldi	r18, 0x00	; 0
    408c:	30 e0       	ldi	r19, 0x00	; 0
    408e:	40 e2       	ldi	r20, 0x20	; 32
    4090:	51 e4       	ldi	r21, 0x41	; 65
    4092:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4096:	dc 01       	movw	r26, r24
    4098:	cb 01       	movw	r24, r22
    409a:	bc 01       	movw	r22, r24
    409c:	cd 01       	movw	r24, r26
    409e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40a2:	dc 01       	movw	r26, r24
    40a4:	cb 01       	movw	r24, r22
    40a6:	9a a3       	std	Y+34, r25	; 0x22
    40a8:	89 a3       	std	Y+33, r24	; 0x21
    40aa:	0f c0       	rjmp	.+30     	; 0x40ca <Login+0xce>
    40ac:	80 e9       	ldi	r24, 0x90	; 144
    40ae:	91 e0       	ldi	r25, 0x01	; 1
    40b0:	98 a3       	std	Y+32, r25	; 0x20
    40b2:	8f 8f       	std	Y+31, r24	; 0x1f
    40b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    40b6:	98 a1       	ldd	r25, Y+32	; 0x20
    40b8:	01 97       	sbiw	r24, 0x01	; 1
    40ba:	f1 f7       	brne	.-4      	; 0x40b8 <Login+0xbc>
    40bc:	98 a3       	std	Y+32, r25	; 0x20
    40be:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40c0:	89 a1       	ldd	r24, Y+33	; 0x21
    40c2:	9a a1       	ldd	r25, Y+34	; 0x22
    40c4:	01 97       	sbiw	r24, 0x01	; 1
    40c6:	9a a3       	std	Y+34, r25	; 0x22
    40c8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40ca:	89 a1       	ldd	r24, Y+33	; 0x21
    40cc:	9a a1       	ldd	r25, Y+34	; 0x22
    40ce:	00 97       	sbiw	r24, 0x00	; 0
    40d0:	69 f7       	brne	.-38     	; 0x40ac <Login+0xb0>
    40d2:	14 c0       	rjmp	.+40     	; 0x40fc <Login+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40d4:	6b a1       	ldd	r22, Y+35	; 0x23
    40d6:	7c a1       	ldd	r23, Y+36	; 0x24
    40d8:	8d a1       	ldd	r24, Y+37	; 0x25
    40da:	9e a1       	ldd	r25, Y+38	; 0x26
    40dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40e0:	dc 01       	movw	r26, r24
    40e2:	cb 01       	movw	r24, r22
    40e4:	9a a3       	std	Y+34, r25	; 0x22
    40e6:	89 a3       	std	Y+33, r24	; 0x21
    40e8:	89 a1       	ldd	r24, Y+33	; 0x21
    40ea:	9a a1       	ldd	r25, Y+34	; 0x22
    40ec:	9e 8f       	std	Y+30, r25	; 0x1e
    40ee:	8d 8f       	std	Y+29, r24	; 0x1d
    40f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    40f2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    40f4:	01 97       	sbiw	r24, 0x01	; 1
    40f6:	f1 f7       	brne	.-4      	; 0x40f4 <Login+0xf8>
    40f8:	9e 8f       	std	Y+30, r25	; 0x1e
    40fa:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(50);
	HAL_LCD_displaystringRowColumn("EnterPassword", 1, 1);
    40fc:	80 e6       	ldi	r24, 0x60	; 96
    40fe:	90 e0       	ldi	r25, 0x00	; 0
    4100:	61 e0       	ldi	r22, 0x01	; 1
    4102:	41 e0       	ldi	r20, 0x01	; 1
    4104:	0e 94 0a 32 	call	0x6414	; 0x6414 <HAL_LCD_displaystringRowColumn>
    4108:	80 e0       	ldi	r24, 0x00	; 0
    410a:	90 e0       	ldi	r25, 0x00	; 0
    410c:	a8 e4       	ldi	r26, 0x48	; 72
    410e:	b2 e4       	ldi	r27, 0x42	; 66
    4110:	89 8f       	std	Y+25, r24	; 0x19
    4112:	9a 8f       	std	Y+26, r25	; 0x1a
    4114:	ab 8f       	std	Y+27, r26	; 0x1b
    4116:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4118:	69 8d       	ldd	r22, Y+25	; 0x19
    411a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    411c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    411e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4120:	20 e0       	ldi	r18, 0x00	; 0
    4122:	30 e0       	ldi	r19, 0x00	; 0
    4124:	4a e7       	ldi	r20, 0x7A	; 122
    4126:	55 e4       	ldi	r21, 0x45	; 69
    4128:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    412c:	dc 01       	movw	r26, r24
    412e:	cb 01       	movw	r24, r22
    4130:	8d 8b       	std	Y+21, r24	; 0x15
    4132:	9e 8b       	std	Y+22, r25	; 0x16
    4134:	af 8b       	std	Y+23, r26	; 0x17
    4136:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4138:	6d 89       	ldd	r22, Y+21	; 0x15
    413a:	7e 89       	ldd	r23, Y+22	; 0x16
    413c:	8f 89       	ldd	r24, Y+23	; 0x17
    413e:	98 8d       	ldd	r25, Y+24	; 0x18
    4140:	20 e0       	ldi	r18, 0x00	; 0
    4142:	30 e0       	ldi	r19, 0x00	; 0
    4144:	40 e8       	ldi	r20, 0x80	; 128
    4146:	5f e3       	ldi	r21, 0x3F	; 63
    4148:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    414c:	88 23       	and	r24, r24
    414e:	2c f4       	brge	.+10     	; 0x415a <Login+0x15e>
		__ticks = 1;
    4150:	81 e0       	ldi	r24, 0x01	; 1
    4152:	90 e0       	ldi	r25, 0x00	; 0
    4154:	9c 8b       	std	Y+20, r25	; 0x14
    4156:	8b 8b       	std	Y+19, r24	; 0x13
    4158:	3f c0       	rjmp	.+126    	; 0x41d8 <Login+0x1dc>
	else if (__tmp > 65535)
    415a:	6d 89       	ldd	r22, Y+21	; 0x15
    415c:	7e 89       	ldd	r23, Y+22	; 0x16
    415e:	8f 89       	ldd	r24, Y+23	; 0x17
    4160:	98 8d       	ldd	r25, Y+24	; 0x18
    4162:	20 e0       	ldi	r18, 0x00	; 0
    4164:	3f ef       	ldi	r19, 0xFF	; 255
    4166:	4f e7       	ldi	r20, 0x7F	; 127
    4168:	57 e4       	ldi	r21, 0x47	; 71
    416a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    416e:	18 16       	cp	r1, r24
    4170:	4c f5       	brge	.+82     	; 0x41c4 <Login+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4172:	69 8d       	ldd	r22, Y+25	; 0x19
    4174:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4176:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4178:	9c 8d       	ldd	r25, Y+28	; 0x1c
    417a:	20 e0       	ldi	r18, 0x00	; 0
    417c:	30 e0       	ldi	r19, 0x00	; 0
    417e:	40 e2       	ldi	r20, 0x20	; 32
    4180:	51 e4       	ldi	r21, 0x41	; 65
    4182:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4186:	dc 01       	movw	r26, r24
    4188:	cb 01       	movw	r24, r22
    418a:	bc 01       	movw	r22, r24
    418c:	cd 01       	movw	r24, r26
    418e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4192:	dc 01       	movw	r26, r24
    4194:	cb 01       	movw	r24, r22
    4196:	9c 8b       	std	Y+20, r25	; 0x14
    4198:	8b 8b       	std	Y+19, r24	; 0x13
    419a:	0f c0       	rjmp	.+30     	; 0x41ba <Login+0x1be>
    419c:	80 e9       	ldi	r24, 0x90	; 144
    419e:	91 e0       	ldi	r25, 0x01	; 1
    41a0:	9a 8b       	std	Y+18, r25	; 0x12
    41a2:	89 8b       	std	Y+17, r24	; 0x11
    41a4:	89 89       	ldd	r24, Y+17	; 0x11
    41a6:	9a 89       	ldd	r25, Y+18	; 0x12
    41a8:	01 97       	sbiw	r24, 0x01	; 1
    41aa:	f1 f7       	brne	.-4      	; 0x41a8 <Login+0x1ac>
    41ac:	9a 8b       	std	Y+18, r25	; 0x12
    41ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41b0:	8b 89       	ldd	r24, Y+19	; 0x13
    41b2:	9c 89       	ldd	r25, Y+20	; 0x14
    41b4:	01 97       	sbiw	r24, 0x01	; 1
    41b6:	9c 8b       	std	Y+20, r25	; 0x14
    41b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41ba:	8b 89       	ldd	r24, Y+19	; 0x13
    41bc:	9c 89       	ldd	r25, Y+20	; 0x14
    41be:	00 97       	sbiw	r24, 0x00	; 0
    41c0:	69 f7       	brne	.-38     	; 0x419c <Login+0x1a0>
    41c2:	14 c0       	rjmp	.+40     	; 0x41ec <Login+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41c4:	6d 89       	ldd	r22, Y+21	; 0x15
    41c6:	7e 89       	ldd	r23, Y+22	; 0x16
    41c8:	8f 89       	ldd	r24, Y+23	; 0x17
    41ca:	98 8d       	ldd	r25, Y+24	; 0x18
    41cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41d0:	dc 01       	movw	r26, r24
    41d2:	cb 01       	movw	r24, r22
    41d4:	9c 8b       	std	Y+20, r25	; 0x14
    41d6:	8b 8b       	std	Y+19, r24	; 0x13
    41d8:	8b 89       	ldd	r24, Y+19	; 0x13
    41da:	9c 89       	ldd	r25, Y+20	; 0x14
    41dc:	98 8b       	std	Y+16, r25	; 0x10
    41de:	8f 87       	std	Y+15, r24	; 0x0f
    41e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    41e2:	98 89       	ldd	r25, Y+16	; 0x10
    41e4:	01 97       	sbiw	r24, 0x01	; 1
    41e6:	f1 f7       	brne	.-4      	; 0x41e4 <Login+0x1e8>
    41e8:	98 8b       	std	Y+16, r25	; 0x10
    41ea:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(50);
	int j=0;
    41ec:	1c a6       	std	Y+44, r1	; 0x2c
    41ee:	1b a6       	std	Y+43, r1	; 0x2b
    41f0:	86 c0       	rjmp	.+268    	; 0x42fe <Login+0x302>
	while(j<PASSWORD_LENGTH)
	{

		Get_character= MCAL_UART_receive_sysch();
    41f2:	0e 94 c9 07 	call	0xf92	; 0xf92 <MCAL_UART_receive_sysch>
    41f6:	80 93 f4 01 	sts	0x01F4, r24

		//LCD_moveCursor(1,1);
		temp_password[j] = Get_character;
    41fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    41fc:	9c a5       	ldd	r25, Y+44	; 0x2c
    41fe:	20 91 f4 01 	lds	r18, 0x01F4
    4202:	fc 01       	movw	r30, r24
    4204:	e0 51       	subi	r30, 0x10	; 16
    4206:	fe 4f       	sbci	r31, 0xFE	; 254
    4208:	20 83       	st	Z, r18
		HAL_LCD_sendCharacter('*');
    420a:	8a e2       	ldi	r24, 0x2A	; 42
    420c:	0e 94 18 2c 	call	0x5830	; 0x5830 <HAL_LCD_sendCharacter>
		j++;
    4210:	8b a5       	ldd	r24, Y+43	; 0x2b
    4212:	9c a5       	ldd	r25, Y+44	; 0x2c
    4214:	01 96       	adiw	r24, 0x01	; 1
    4216:	9c a7       	std	Y+44, r25	; 0x2c
    4218:	8b a7       	std	Y+43, r24	; 0x2b
    421a:	80 e0       	ldi	r24, 0x00	; 0
    421c:	90 e0       	ldi	r25, 0x00	; 0
    421e:	a8 ec       	ldi	r26, 0xC8	; 200
    4220:	b2 e4       	ldi	r27, 0x42	; 66
    4222:	8b 87       	std	Y+11, r24	; 0x0b
    4224:	9c 87       	std	Y+12, r25	; 0x0c
    4226:	ad 87       	std	Y+13, r26	; 0x0d
    4228:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    422a:	6b 85       	ldd	r22, Y+11	; 0x0b
    422c:	7c 85       	ldd	r23, Y+12	; 0x0c
    422e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4230:	9e 85       	ldd	r25, Y+14	; 0x0e
    4232:	20 e0       	ldi	r18, 0x00	; 0
    4234:	30 e0       	ldi	r19, 0x00	; 0
    4236:	4a e7       	ldi	r20, 0x7A	; 122
    4238:	55 e4       	ldi	r21, 0x45	; 69
    423a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    423e:	dc 01       	movw	r26, r24
    4240:	cb 01       	movw	r24, r22
    4242:	8f 83       	std	Y+7, r24	; 0x07
    4244:	98 87       	std	Y+8, r25	; 0x08
    4246:	a9 87       	std	Y+9, r26	; 0x09
    4248:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    424a:	6f 81       	ldd	r22, Y+7	; 0x07
    424c:	78 85       	ldd	r23, Y+8	; 0x08
    424e:	89 85       	ldd	r24, Y+9	; 0x09
    4250:	9a 85       	ldd	r25, Y+10	; 0x0a
    4252:	20 e0       	ldi	r18, 0x00	; 0
    4254:	30 e0       	ldi	r19, 0x00	; 0
    4256:	40 e8       	ldi	r20, 0x80	; 128
    4258:	5f e3       	ldi	r21, 0x3F	; 63
    425a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    425e:	88 23       	and	r24, r24
    4260:	2c f4       	brge	.+10     	; 0x426c <Login+0x270>
		__ticks = 1;
    4262:	81 e0       	ldi	r24, 0x01	; 1
    4264:	90 e0       	ldi	r25, 0x00	; 0
    4266:	9e 83       	std	Y+6, r25	; 0x06
    4268:	8d 83       	std	Y+5, r24	; 0x05
    426a:	3f c0       	rjmp	.+126    	; 0x42ea <Login+0x2ee>
	else if (__tmp > 65535)
    426c:	6f 81       	ldd	r22, Y+7	; 0x07
    426e:	78 85       	ldd	r23, Y+8	; 0x08
    4270:	89 85       	ldd	r24, Y+9	; 0x09
    4272:	9a 85       	ldd	r25, Y+10	; 0x0a
    4274:	20 e0       	ldi	r18, 0x00	; 0
    4276:	3f ef       	ldi	r19, 0xFF	; 255
    4278:	4f e7       	ldi	r20, 0x7F	; 127
    427a:	57 e4       	ldi	r21, 0x47	; 71
    427c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4280:	18 16       	cp	r1, r24
    4282:	4c f5       	brge	.+82     	; 0x42d6 <Login+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4284:	6b 85       	ldd	r22, Y+11	; 0x0b
    4286:	7c 85       	ldd	r23, Y+12	; 0x0c
    4288:	8d 85       	ldd	r24, Y+13	; 0x0d
    428a:	9e 85       	ldd	r25, Y+14	; 0x0e
    428c:	20 e0       	ldi	r18, 0x00	; 0
    428e:	30 e0       	ldi	r19, 0x00	; 0
    4290:	40 e2       	ldi	r20, 0x20	; 32
    4292:	51 e4       	ldi	r21, 0x41	; 65
    4294:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4298:	dc 01       	movw	r26, r24
    429a:	cb 01       	movw	r24, r22
    429c:	bc 01       	movw	r22, r24
    429e:	cd 01       	movw	r24, r26
    42a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42a4:	dc 01       	movw	r26, r24
    42a6:	cb 01       	movw	r24, r22
    42a8:	9e 83       	std	Y+6, r25	; 0x06
    42aa:	8d 83       	std	Y+5, r24	; 0x05
    42ac:	0f c0       	rjmp	.+30     	; 0x42cc <Login+0x2d0>
    42ae:	80 e9       	ldi	r24, 0x90	; 144
    42b0:	91 e0       	ldi	r25, 0x01	; 1
    42b2:	9c 83       	std	Y+4, r25	; 0x04
    42b4:	8b 83       	std	Y+3, r24	; 0x03
    42b6:	8b 81       	ldd	r24, Y+3	; 0x03
    42b8:	9c 81       	ldd	r25, Y+4	; 0x04
    42ba:	01 97       	sbiw	r24, 0x01	; 1
    42bc:	f1 f7       	brne	.-4      	; 0x42ba <Login+0x2be>
    42be:	9c 83       	std	Y+4, r25	; 0x04
    42c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42c2:	8d 81       	ldd	r24, Y+5	; 0x05
    42c4:	9e 81       	ldd	r25, Y+6	; 0x06
    42c6:	01 97       	sbiw	r24, 0x01	; 1
    42c8:	9e 83       	std	Y+6, r25	; 0x06
    42ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42cc:	8d 81       	ldd	r24, Y+5	; 0x05
    42ce:	9e 81       	ldd	r25, Y+6	; 0x06
    42d0:	00 97       	sbiw	r24, 0x00	; 0
    42d2:	69 f7       	brne	.-38     	; 0x42ae <Login+0x2b2>
    42d4:	14 c0       	rjmp	.+40     	; 0x42fe <Login+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42d6:	6f 81       	ldd	r22, Y+7	; 0x07
    42d8:	78 85       	ldd	r23, Y+8	; 0x08
    42da:	89 85       	ldd	r24, Y+9	; 0x09
    42dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    42de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42e2:	dc 01       	movw	r26, r24
    42e4:	cb 01       	movw	r24, r22
    42e6:	9e 83       	std	Y+6, r25	; 0x06
    42e8:	8d 83       	std	Y+5, r24	; 0x05
    42ea:	8d 81       	ldd	r24, Y+5	; 0x05
    42ec:	9e 81       	ldd	r25, Y+6	; 0x06
    42ee:	9a 83       	std	Y+2, r25	; 0x02
    42f0:	89 83       	std	Y+1, r24	; 0x01
    42f2:	89 81       	ldd	r24, Y+1	; 0x01
    42f4:	9a 81       	ldd	r25, Y+2	; 0x02
    42f6:	01 97       	sbiw	r24, 0x01	; 1
    42f8:	f1 f7       	brne	.-4      	; 0x42f6 <Login+0x2fa>
    42fa:	9a 83       	std	Y+2, r25	; 0x02
    42fc:	89 83       	std	Y+1, r24	; 0x01
	HAL_LCD_clearScreen();
	_delay_ms(50);
	HAL_LCD_displaystringRowColumn("EnterPassword", 1, 1);
	_delay_ms(50);
	int j=0;
	while(j<PASSWORD_LENGTH)
    42fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    4300:	9c a5       	ldd	r25, Y+44	; 0x2c
    4302:	84 30       	cpi	r24, 0x04	; 4
    4304:	91 05       	cpc	r25, r1
    4306:	0c f4       	brge	.+2      	; 0x430a <Login+0x30e>
    4308:	74 cf       	rjmp	.-280    	; 0x41f2 <Login+0x1f6>
		temp_password[j] = Get_character;
		HAL_LCD_sendCharacter('*');
		j++;
		_delay_ms(100);
	}
	EEPROM_readByte(EEPROM3_ADDR, &first);
    430a:	28 ef       	ldi	r18, 0xF8	; 248
    430c:	31 e0       	ldi	r19, 0x01	; 1
    430e:	81 e1       	ldi	r24, 0x11	; 17
    4310:	93 e0       	ldi	r25, 0x03	; 3
    4312:	b9 01       	movw	r22, r18
    4314:	0e 94 4a 12 	call	0x2494	; 0x2494 <EEPROM_readByte>
	EEPROM_readByte(EEPROM3_ADDR, &second);
    4318:	23 ef       	ldi	r18, 0xF3	; 243
    431a:	31 e0       	ldi	r19, 0x01	; 1
    431c:	81 e1       	ldi	r24, 0x11	; 17
    431e:	93 e0       	ldi	r25, 0x03	; 3
    4320:	b9 01       	movw	r22, r18
    4322:	0e 94 4a 12 	call	0x2494	; 0x2494 <EEPROM_readByte>
	EEPROM_readByte(EEPROM3_ADDR, &third);
    4326:	27 ef       	ldi	r18, 0xF7	; 247
    4328:	31 e0       	ldi	r19, 0x01	; 1
    432a:	81 e1       	ldi	r24, 0x11	; 17
    432c:	93 e0       	ldi	r25, 0x03	; 3
    432e:	b9 01       	movw	r22, r18
    4330:	0e 94 4a 12 	call	0x2494	; 0x2494 <EEPROM_readByte>
	EEPROM_readByte(EEPROM3_ADDR, &fourth);
    4334:	21 ef       	ldi	r18, 0xF1	; 241
    4336:	31 e0       	ldi	r19, 0x01	; 1
    4338:	81 e1       	ldi	r24, 0x11	; 17
    433a:	93 e0       	ldi	r25, 0x03	; 3
    433c:	b9 01       	movw	r22, r18
    433e:	0e 94 4a 12 	call	0x2494	; 0x2494 <EEPROM_readByte>
	if(first== (char)temp_password[0] && second == (char)temp_password[1] && third == (char)temp_password[2] && fourth == (char)temp_password[1])
    4342:	90 91 f0 01 	lds	r25, 0x01F0
    4346:	80 91 f8 01 	lds	r24, 0x01F8
    434a:	98 17       	cp	r25, r24
    434c:	a9 f4       	brne	.+42     	; 0x4378 <Login+0x37c>
    434e:	90 91 f1 01 	lds	r25, 0x01F1
    4352:	80 91 f3 01 	lds	r24, 0x01F3
    4356:	98 17       	cp	r25, r24
    4358:	79 f4       	brne	.+30     	; 0x4378 <Login+0x37c>
    435a:	90 91 f2 01 	lds	r25, 0x01F2
    435e:	80 91 f7 01 	lds	r24, 0x01F7
    4362:	98 17       	cp	r25, r24
    4364:	49 f4       	brne	.+18     	; 0x4378 <Login+0x37c>
    4366:	90 91 f1 01 	lds	r25, 0x01F1
    436a:	80 91 f1 01 	lds	r24, 0x01F1
    436e:	98 17       	cp	r25, r24
    4370:	19 f4       	brne	.+6      	; 0x4378 <Login+0x37c>
	{
		login_flag =1;
    4372:	81 e0       	ldi	r24, 0x01	; 1
    4374:	80 93 f5 01 	sts	0x01F5, r24

	}

	return login_flag;
    4378:	80 91 f5 01 	lds	r24, 0x01F5

}
    437c:	ae 96       	adiw	r28, 0x2e	; 46
    437e:	0f b6       	in	r0, 0x3f	; 63
    4380:	f8 94       	cli
    4382:	de bf       	out	0x3e, r29	; 62
    4384:	0f be       	out	0x3f, r0	; 63
    4386:	cd bf       	out	0x3d, r28	; 61
    4388:	cf 91       	pop	r28
    438a:	df 91       	pop	r29
    438c:	08 95       	ret

0000438e <HAL_LED_INIT>:

#include "LED_Interface.h"
#include "LED_Types.h"
#include "LED_cfg.h"

E_ErrorType_ HAL_LED_INIT(E_DioPort ledPORT, E_DioPin LEDPin){
    438e:	df 93       	push	r29
    4390:	cf 93       	push	r28
    4392:	00 d0       	rcall	.+0      	; 0x4394 <HAL_LED_INIT+0x6>
    4394:	00 d0       	rcall	.+0      	; 0x4396 <HAL_LED_INIT+0x8>
    4396:	00 d0       	rcall	.+0      	; 0x4398 <HAL_LED_INIT+0xa>
    4398:	cd b7       	in	r28, 0x3d	; 61
    439a:	de b7       	in	r29, 0x3e	; 62
    439c:	8d 83       	std	Y+5, r24	; 0x05
    439e:	6e 83       	std	Y+6, r22	; 0x06
	S_Dio P2 = {ledPORT, LEDPin, OUTPUT};
    43a0:	8d 81       	ldd	r24, Y+5	; 0x05
    43a2:	8a 83       	std	Y+2, r24	; 0x02
    43a4:	8e 81       	ldd	r24, Y+6	; 0x06
    43a6:	8b 83       	std	Y+3, r24	; 0x03
    43a8:	8f ef       	ldi	r24, 0xFF	; 255
    43aa:	8c 83       	std	Y+4, r24	; 0x04
	E_ErrorType_ u8LocalReturn = E_NOT_OK__ ;
    43ac:	81 e0       	ldi	r24, 0x01	; 1
    43ae:	89 83       	std	Y+1, r24	; 0x01
	u8LocalReturn = MCAL_Dio_Init(&P2);
    43b0:	ce 01       	movw	r24, r28
    43b2:	02 96       	adiw	r24, 0x02	; 2
    43b4:	0e 94 aa 12 	call	0x2554	; 0x2554 <MCAL_Dio_Init>
    43b8:	89 83       	std	Y+1, r24	; 0x01
	return u8LocalReturn;
    43ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    43bc:	26 96       	adiw	r28, 0x06	; 6
    43be:	0f b6       	in	r0, 0x3f	; 63
    43c0:	f8 94       	cli
    43c2:	de bf       	out	0x3e, r29	; 62
    43c4:	0f be       	out	0x3f, r0	; 63
    43c6:	cd bf       	out	0x3d, r28	; 61
    43c8:	cf 91       	pop	r28
    43ca:	df 91       	pop	r29
    43cc:	08 95       	ret

000043ce <HAL_LED_ON>:

E_ErrorType_ HAL_LED_ON(E_DioPort ledPORT, E_DioPin LEDPin){
    43ce:	df 93       	push	r29
    43d0:	cf 93       	push	r28
    43d2:	00 d0       	rcall	.+0      	; 0x43d4 <HAL_LED_ON+0x6>
    43d4:	00 d0       	rcall	.+0      	; 0x43d6 <HAL_LED_ON+0x8>
    43d6:	00 d0       	rcall	.+0      	; 0x43d8 <HAL_LED_ON+0xa>
    43d8:	cd b7       	in	r28, 0x3d	; 61
    43da:	de b7       	in	r29, 0x3e	; 62
    43dc:	8d 83       	std	Y+5, r24	; 0x05
    43de:	6e 83       	std	Y+6, r22	; 0x06
	S_Dio P2 = {ledPORT, LEDPin, PIN_LOW};
    43e0:	8d 81       	ldd	r24, Y+5	; 0x05
    43e2:	8a 83       	std	Y+2, r24	; 0x02
    43e4:	8e 81       	ldd	r24, Y+6	; 0x06
    43e6:	8b 83       	std	Y+3, r24	; 0x03
    43e8:	1c 82       	std	Y+4, r1	; 0x04
	E_ErrorType_ u8LocalReturn = E_NOT_OK__;
    43ea:	81 e0       	ldi	r24, 0x01	; 1
    43ec:	89 83       	std	Y+1, r24	; 0x01
	u8LocalReturn = MCAL_Dio_WritePin(&P2, PIN_HIGH);
    43ee:	ce 01       	movw	r24, r28
    43f0:	02 96       	adiw	r24, 0x02	; 2
    43f2:	6f ef       	ldi	r22, 0xFF	; 255
    43f4:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <MCAL_Dio_WritePin>
    43f8:	89 83       	std	Y+1, r24	; 0x01
	return u8LocalReturn;
    43fa:	89 81       	ldd	r24, Y+1	; 0x01

}
    43fc:	26 96       	adiw	r28, 0x06	; 6
    43fe:	0f b6       	in	r0, 0x3f	; 63
    4400:	f8 94       	cli
    4402:	de bf       	out	0x3e, r29	; 62
    4404:	0f be       	out	0x3f, r0	; 63
    4406:	cd bf       	out	0x3d, r28	; 61
    4408:	cf 91       	pop	r28
    440a:	df 91       	pop	r29
    440c:	08 95       	ret

0000440e <HAL_LED_OFF>:

E_ErrorType_ HAL_LED_OFF(E_DioPort ledPORT, E_DioPin LEDPin){
    440e:	df 93       	push	r29
    4410:	cf 93       	push	r28
    4412:	00 d0       	rcall	.+0      	; 0x4414 <HAL_LED_OFF+0x6>
    4414:	00 d0       	rcall	.+0      	; 0x4416 <HAL_LED_OFF+0x8>
    4416:	00 d0       	rcall	.+0      	; 0x4418 <HAL_LED_OFF+0xa>
    4418:	cd b7       	in	r28, 0x3d	; 61
    441a:	de b7       	in	r29, 0x3e	; 62
    441c:	8d 83       	std	Y+5, r24	; 0x05
    441e:	6e 83       	std	Y+6, r22	; 0x06
	S_Dio P2 = {ledPORT, LEDPin, PIN_LOW};
    4420:	8d 81       	ldd	r24, Y+5	; 0x05
    4422:	8a 83       	std	Y+2, r24	; 0x02
    4424:	8e 81       	ldd	r24, Y+6	; 0x06
    4426:	8b 83       	std	Y+3, r24	; 0x03
    4428:	1c 82       	std	Y+4, r1	; 0x04
	E_ErrorType_ u8LocalReturn = E_NOT_OK__;
    442a:	81 e0       	ldi	r24, 0x01	; 1
    442c:	89 83       	std	Y+1, r24	; 0x01
	u8LocalReturn = MCAL_Dio_WritePin(&P2, PIN_LOW);
    442e:	ce 01       	movw	r24, r28
    4430:	02 96       	adiw	r24, 0x02	; 2
    4432:	60 e0       	ldi	r22, 0x00	; 0
    4434:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <MCAL_Dio_WritePin>
    4438:	89 83       	std	Y+1, r24	; 0x01
	return u8LocalReturn;
    443a:	89 81       	ldd	r24, Y+1	; 0x01

}
    443c:	26 96       	adiw	r28, 0x06	; 6
    443e:	0f b6       	in	r0, 0x3f	; 63
    4440:	f8 94       	cli
    4442:	de bf       	out	0x3e, r29	; 62
    4444:	0f be       	out	0x3f, r0	; 63
    4446:	cd bf       	out	0x3d, r28	; 61
    4448:	cf 91       	pop	r28
    444a:	df 91       	pop	r29
    444c:	08 95       	ret

0000444e <HAL_LED_TOGGLE>:

E_ErrorType_ HAL_LED_TOGGLE(E_DioPort ledPORT, E_DioPin LEDPin){
    444e:	df 93       	push	r29
    4450:	cf 93       	push	r28
    4452:	cd b7       	in	r28, 0x3d	; 61
    4454:	de b7       	in	r29, 0x3e	; 62
    4456:	a2 97       	sbiw	r28, 0x22	; 34
    4458:	0f b6       	in	r0, 0x3f	; 63
    445a:	f8 94       	cli
    445c:	de bf       	out	0x3e, r29	; 62
    445e:	0f be       	out	0x3f, r0	; 63
    4460:	cd bf       	out	0x3d, r28	; 61
    4462:	89 a3       	std	Y+33, r24	; 0x21
    4464:	6a a3       	std	Y+34, r22	; 0x22
	S_Dio P2 = {ledPORT, LEDPin, PIN_LOW};
    4466:	89 a1       	ldd	r24, Y+33	; 0x21
    4468:	8e 8f       	std	Y+30, r24	; 0x1e
    446a:	8a a1       	ldd	r24, Y+34	; 0x22
    446c:	8f 8f       	std	Y+31, r24	; 0x1f
    446e:	18 a2       	std	Y+32, r1	; 0x20
	E_ErrorType_ u8LocalReturn = E_NOT_OK__;
    4470:	81 e0       	ldi	r24, 0x01	; 1
    4472:	8d 8f       	std	Y+29, r24	; 0x1d
	u8LocalReturn = MCAL_Dio_WritePin(&P2, PIN_HIGH);
    4474:	ce 01       	movw	r24, r28
    4476:	4e 96       	adiw	r24, 0x1e	; 30
    4478:	6f ef       	ldi	r22, 0xFF	; 255
    447a:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <MCAL_Dio_WritePin>
    447e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(time);
    4480:	80 91 95 01 	lds	r24, 0x0195
    4484:	90 91 96 01 	lds	r25, 0x0196
    4488:	aa 27       	eor	r26, r26
    448a:	97 fd       	sbrc	r25, 7
    448c:	a0 95       	com	r26
    448e:	ba 2f       	mov	r27, r26
    4490:	bc 01       	movw	r22, r24
    4492:	cd 01       	movw	r24, r26
    4494:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    4498:	dc 01       	movw	r26, r24
    449a:	cb 01       	movw	r24, r22
    449c:	89 8f       	std	Y+25, r24	; 0x19
    449e:	9a 8f       	std	Y+26, r25	; 0x1a
    44a0:	ab 8f       	std	Y+27, r26	; 0x1b
    44a2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44a4:	69 8d       	ldd	r22, Y+25	; 0x19
    44a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    44a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    44aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    44ac:	20 e0       	ldi	r18, 0x00	; 0
    44ae:	30 e0       	ldi	r19, 0x00	; 0
    44b0:	4a e7       	ldi	r20, 0x7A	; 122
    44b2:	55 e4       	ldi	r21, 0x45	; 69
    44b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44b8:	dc 01       	movw	r26, r24
    44ba:	cb 01       	movw	r24, r22
    44bc:	8d 8b       	std	Y+21, r24	; 0x15
    44be:	9e 8b       	std	Y+22, r25	; 0x16
    44c0:	af 8b       	std	Y+23, r26	; 0x17
    44c2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    44c4:	6d 89       	ldd	r22, Y+21	; 0x15
    44c6:	7e 89       	ldd	r23, Y+22	; 0x16
    44c8:	8f 89       	ldd	r24, Y+23	; 0x17
    44ca:	98 8d       	ldd	r25, Y+24	; 0x18
    44cc:	20 e0       	ldi	r18, 0x00	; 0
    44ce:	30 e0       	ldi	r19, 0x00	; 0
    44d0:	40 e8       	ldi	r20, 0x80	; 128
    44d2:	5f e3       	ldi	r21, 0x3F	; 63
    44d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    44d8:	88 23       	and	r24, r24
    44da:	2c f4       	brge	.+10     	; 0x44e6 <HAL_LED_TOGGLE+0x98>
		__ticks = 1;
    44dc:	81 e0       	ldi	r24, 0x01	; 1
    44de:	90 e0       	ldi	r25, 0x00	; 0
    44e0:	9c 8b       	std	Y+20, r25	; 0x14
    44e2:	8b 8b       	std	Y+19, r24	; 0x13
    44e4:	3f c0       	rjmp	.+126    	; 0x4564 <HAL_LED_TOGGLE+0x116>
	else if (__tmp > 65535)
    44e6:	6d 89       	ldd	r22, Y+21	; 0x15
    44e8:	7e 89       	ldd	r23, Y+22	; 0x16
    44ea:	8f 89       	ldd	r24, Y+23	; 0x17
    44ec:	98 8d       	ldd	r25, Y+24	; 0x18
    44ee:	20 e0       	ldi	r18, 0x00	; 0
    44f0:	3f ef       	ldi	r19, 0xFF	; 255
    44f2:	4f e7       	ldi	r20, 0x7F	; 127
    44f4:	57 e4       	ldi	r21, 0x47	; 71
    44f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    44fa:	18 16       	cp	r1, r24
    44fc:	4c f5       	brge	.+82     	; 0x4550 <HAL_LED_TOGGLE+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44fe:	69 8d       	ldd	r22, Y+25	; 0x19
    4500:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4502:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4504:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4506:	20 e0       	ldi	r18, 0x00	; 0
    4508:	30 e0       	ldi	r19, 0x00	; 0
    450a:	40 e2       	ldi	r20, 0x20	; 32
    450c:	51 e4       	ldi	r21, 0x41	; 65
    450e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4512:	dc 01       	movw	r26, r24
    4514:	cb 01       	movw	r24, r22
    4516:	bc 01       	movw	r22, r24
    4518:	cd 01       	movw	r24, r26
    451a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    451e:	dc 01       	movw	r26, r24
    4520:	cb 01       	movw	r24, r22
    4522:	9c 8b       	std	Y+20, r25	; 0x14
    4524:	8b 8b       	std	Y+19, r24	; 0x13
    4526:	0f c0       	rjmp	.+30     	; 0x4546 <HAL_LED_TOGGLE+0xf8>
    4528:	80 e9       	ldi	r24, 0x90	; 144
    452a:	91 e0       	ldi	r25, 0x01	; 1
    452c:	9a 8b       	std	Y+18, r25	; 0x12
    452e:	89 8b       	std	Y+17, r24	; 0x11
    4530:	89 89       	ldd	r24, Y+17	; 0x11
    4532:	9a 89       	ldd	r25, Y+18	; 0x12
    4534:	01 97       	sbiw	r24, 0x01	; 1
    4536:	f1 f7       	brne	.-4      	; 0x4534 <HAL_LED_TOGGLE+0xe6>
    4538:	9a 8b       	std	Y+18, r25	; 0x12
    453a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    453c:	8b 89       	ldd	r24, Y+19	; 0x13
    453e:	9c 89       	ldd	r25, Y+20	; 0x14
    4540:	01 97       	sbiw	r24, 0x01	; 1
    4542:	9c 8b       	std	Y+20, r25	; 0x14
    4544:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4546:	8b 89       	ldd	r24, Y+19	; 0x13
    4548:	9c 89       	ldd	r25, Y+20	; 0x14
    454a:	00 97       	sbiw	r24, 0x00	; 0
    454c:	69 f7       	brne	.-38     	; 0x4528 <HAL_LED_TOGGLE+0xda>
    454e:	14 c0       	rjmp	.+40     	; 0x4578 <HAL_LED_TOGGLE+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4550:	6d 89       	ldd	r22, Y+21	; 0x15
    4552:	7e 89       	ldd	r23, Y+22	; 0x16
    4554:	8f 89       	ldd	r24, Y+23	; 0x17
    4556:	98 8d       	ldd	r25, Y+24	; 0x18
    4558:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    455c:	dc 01       	movw	r26, r24
    455e:	cb 01       	movw	r24, r22
    4560:	9c 8b       	std	Y+20, r25	; 0x14
    4562:	8b 8b       	std	Y+19, r24	; 0x13
    4564:	8b 89       	ldd	r24, Y+19	; 0x13
    4566:	9c 89       	ldd	r25, Y+20	; 0x14
    4568:	98 8b       	std	Y+16, r25	; 0x10
    456a:	8f 87       	std	Y+15, r24	; 0x0f
    456c:	8f 85       	ldd	r24, Y+15	; 0x0f
    456e:	98 89       	ldd	r25, Y+16	; 0x10
    4570:	01 97       	sbiw	r24, 0x01	; 1
    4572:	f1 f7       	brne	.-4      	; 0x4570 <HAL_LED_TOGGLE+0x122>
    4574:	98 8b       	std	Y+16, r25	; 0x10
    4576:	8f 87       	std	Y+15, r24	; 0x0f
	u8LocalReturn = MCAL_Dio_WritePin(&P2, PIN_LOW);
    4578:	ce 01       	movw	r24, r28
    457a:	4e 96       	adiw	r24, 0x1e	; 30
    457c:	60 e0       	ldi	r22, 0x00	; 0
    457e:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <MCAL_Dio_WritePin>
    4582:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(time);
    4584:	80 91 95 01 	lds	r24, 0x0195
    4588:	90 91 96 01 	lds	r25, 0x0196
    458c:	aa 27       	eor	r26, r26
    458e:	97 fd       	sbrc	r25, 7
    4590:	a0 95       	com	r26
    4592:	ba 2f       	mov	r27, r26
    4594:	bc 01       	movw	r22, r24
    4596:	cd 01       	movw	r24, r26
    4598:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    459c:	dc 01       	movw	r26, r24
    459e:	cb 01       	movw	r24, r22
    45a0:	8b 87       	std	Y+11, r24	; 0x0b
    45a2:	9c 87       	std	Y+12, r25	; 0x0c
    45a4:	ad 87       	std	Y+13, r26	; 0x0d
    45a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    45aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    45ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    45ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    45b0:	20 e0       	ldi	r18, 0x00	; 0
    45b2:	30 e0       	ldi	r19, 0x00	; 0
    45b4:	4a e7       	ldi	r20, 0x7A	; 122
    45b6:	55 e4       	ldi	r21, 0x45	; 69
    45b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45bc:	dc 01       	movw	r26, r24
    45be:	cb 01       	movw	r24, r22
    45c0:	8f 83       	std	Y+7, r24	; 0x07
    45c2:	98 87       	std	Y+8, r25	; 0x08
    45c4:	a9 87       	std	Y+9, r26	; 0x09
    45c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    45c8:	6f 81       	ldd	r22, Y+7	; 0x07
    45ca:	78 85       	ldd	r23, Y+8	; 0x08
    45cc:	89 85       	ldd	r24, Y+9	; 0x09
    45ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    45d0:	20 e0       	ldi	r18, 0x00	; 0
    45d2:	30 e0       	ldi	r19, 0x00	; 0
    45d4:	40 e8       	ldi	r20, 0x80	; 128
    45d6:	5f e3       	ldi	r21, 0x3F	; 63
    45d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    45dc:	88 23       	and	r24, r24
    45de:	2c f4       	brge	.+10     	; 0x45ea <HAL_LED_TOGGLE+0x19c>
		__ticks = 1;
    45e0:	81 e0       	ldi	r24, 0x01	; 1
    45e2:	90 e0       	ldi	r25, 0x00	; 0
    45e4:	9e 83       	std	Y+6, r25	; 0x06
    45e6:	8d 83       	std	Y+5, r24	; 0x05
    45e8:	3f c0       	rjmp	.+126    	; 0x4668 <HAL_LED_TOGGLE+0x21a>
	else if (__tmp > 65535)
    45ea:	6f 81       	ldd	r22, Y+7	; 0x07
    45ec:	78 85       	ldd	r23, Y+8	; 0x08
    45ee:	89 85       	ldd	r24, Y+9	; 0x09
    45f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    45f2:	20 e0       	ldi	r18, 0x00	; 0
    45f4:	3f ef       	ldi	r19, 0xFF	; 255
    45f6:	4f e7       	ldi	r20, 0x7F	; 127
    45f8:	57 e4       	ldi	r21, 0x47	; 71
    45fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    45fe:	18 16       	cp	r1, r24
    4600:	4c f5       	brge	.+82     	; 0x4654 <HAL_LED_TOGGLE+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4602:	6b 85       	ldd	r22, Y+11	; 0x0b
    4604:	7c 85       	ldd	r23, Y+12	; 0x0c
    4606:	8d 85       	ldd	r24, Y+13	; 0x0d
    4608:	9e 85       	ldd	r25, Y+14	; 0x0e
    460a:	20 e0       	ldi	r18, 0x00	; 0
    460c:	30 e0       	ldi	r19, 0x00	; 0
    460e:	40 e2       	ldi	r20, 0x20	; 32
    4610:	51 e4       	ldi	r21, 0x41	; 65
    4612:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4616:	dc 01       	movw	r26, r24
    4618:	cb 01       	movw	r24, r22
    461a:	bc 01       	movw	r22, r24
    461c:	cd 01       	movw	r24, r26
    461e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4622:	dc 01       	movw	r26, r24
    4624:	cb 01       	movw	r24, r22
    4626:	9e 83       	std	Y+6, r25	; 0x06
    4628:	8d 83       	std	Y+5, r24	; 0x05
    462a:	0f c0       	rjmp	.+30     	; 0x464a <HAL_LED_TOGGLE+0x1fc>
    462c:	80 e9       	ldi	r24, 0x90	; 144
    462e:	91 e0       	ldi	r25, 0x01	; 1
    4630:	9c 83       	std	Y+4, r25	; 0x04
    4632:	8b 83       	std	Y+3, r24	; 0x03
    4634:	8b 81       	ldd	r24, Y+3	; 0x03
    4636:	9c 81       	ldd	r25, Y+4	; 0x04
    4638:	01 97       	sbiw	r24, 0x01	; 1
    463a:	f1 f7       	brne	.-4      	; 0x4638 <HAL_LED_TOGGLE+0x1ea>
    463c:	9c 83       	std	Y+4, r25	; 0x04
    463e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4640:	8d 81       	ldd	r24, Y+5	; 0x05
    4642:	9e 81       	ldd	r25, Y+6	; 0x06
    4644:	01 97       	sbiw	r24, 0x01	; 1
    4646:	9e 83       	std	Y+6, r25	; 0x06
    4648:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    464a:	8d 81       	ldd	r24, Y+5	; 0x05
    464c:	9e 81       	ldd	r25, Y+6	; 0x06
    464e:	00 97       	sbiw	r24, 0x00	; 0
    4650:	69 f7       	brne	.-38     	; 0x462c <HAL_LED_TOGGLE+0x1de>
    4652:	14 c0       	rjmp	.+40     	; 0x467c <HAL_LED_TOGGLE+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4654:	6f 81       	ldd	r22, Y+7	; 0x07
    4656:	78 85       	ldd	r23, Y+8	; 0x08
    4658:	89 85       	ldd	r24, Y+9	; 0x09
    465a:	9a 85       	ldd	r25, Y+10	; 0x0a
    465c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4660:	dc 01       	movw	r26, r24
    4662:	cb 01       	movw	r24, r22
    4664:	9e 83       	std	Y+6, r25	; 0x06
    4666:	8d 83       	std	Y+5, r24	; 0x05
    4668:	8d 81       	ldd	r24, Y+5	; 0x05
    466a:	9e 81       	ldd	r25, Y+6	; 0x06
    466c:	9a 83       	std	Y+2, r25	; 0x02
    466e:	89 83       	std	Y+1, r24	; 0x01
    4670:	89 81       	ldd	r24, Y+1	; 0x01
    4672:	9a 81       	ldd	r25, Y+2	; 0x02
    4674:	01 97       	sbiw	r24, 0x01	; 1
    4676:	f1 f7       	brne	.-4      	; 0x4674 <HAL_LED_TOGGLE+0x226>
    4678:	9a 83       	std	Y+2, r25	; 0x02
    467a:	89 83       	std	Y+1, r24	; 0x01
	return u8LocalReturn;
    467c:	8d 8d       	ldd	r24, Y+29	; 0x1d

}
    467e:	a2 96       	adiw	r28, 0x22	; 34
    4680:	0f b6       	in	r0, 0x3f	; 63
    4682:	f8 94       	cli
    4684:	de bf       	out	0x3e, r29	; 62
    4686:	0f be       	out	0x3f, r0	; 63
    4688:	cd bf       	out	0x3d, r28	; 61
    468a:	cf 91       	pop	r28
    468c:	df 91       	pop	r29
    468e:	08 95       	ret

00004690 <HAL_LCD_init>:
#include <util/delay.h>


/* Function to initialize the LCD */
E_ErrorType HAL_LCD_init()
{
    4690:	df 93       	push	r29
    4692:	cf 93       	push	r28
    4694:	cd b7       	in	r28, 0x3d	; 61
    4696:	de b7       	in	r29, 0x3e	; 62
    4698:	c1 55       	subi	r28, 0x51	; 81
    469a:	d0 40       	sbci	r29, 0x00	; 0
    469c:	0f b6       	in	r0, 0x3f	; 63
    469e:	f8 94       	cli
    46a0:	de bf       	out	0x3e, r29	; 62
    46a2:	0f be       	out	0x3f, r0	; 63
    46a4:	cd bf       	out	0x3d, r28	; 61
	E_ErrorType u8LocalReturn = E_NOT_OK;
    46a6:	81 e0       	ldi	r24, 0x01	; 1
    46a8:	89 af       	std	Y+57, r24	; 0x39
	/* Initialize control pins as output */
	S_Dio LCD_RS_interface= {LCD_RS_PORT , LCD_RS_PIN , OUTPUT};
    46aa:	ce 01       	movw	r24, r28
    46ac:	ca 96       	adiw	r24, 0x3a	; 58
    46ae:	25 96       	adiw	r28, 0x05	; 5
    46b0:	9f af       	std	Y+63, r25	; 0x3f
    46b2:	8e af       	std	Y+62, r24	; 0x3e
    46b4:	25 97       	sbiw	r28, 0x05	; 5
    46b6:	ed ea       	ldi	r30, 0xAD	; 173
    46b8:	f1 e0       	ldi	r31, 0x01	; 1
    46ba:	27 96       	adiw	r28, 0x07	; 7
    46bc:	ff af       	std	Y+63, r31	; 0x3f
    46be:	ee af       	std	Y+62, r30	; 0x3e
    46c0:	27 97       	sbiw	r28, 0x07	; 7
    46c2:	f3 e0       	ldi	r31, 0x03	; 3
    46c4:	28 96       	adiw	r28, 0x08	; 8
    46c6:	ff af       	std	Y+63, r31	; 0x3f
    46c8:	28 97       	sbiw	r28, 0x08	; 8
    46ca:	27 96       	adiw	r28, 0x07	; 7
    46cc:	ee ad       	ldd	r30, Y+62	; 0x3e
    46ce:	ff ad       	ldd	r31, Y+63	; 0x3f
    46d0:	27 97       	sbiw	r28, 0x07	; 7
    46d2:	00 80       	ld	r0, Z
    46d4:	27 96       	adiw	r28, 0x07	; 7
    46d6:	8e ad       	ldd	r24, Y+62	; 0x3e
    46d8:	9f ad       	ldd	r25, Y+63	; 0x3f
    46da:	27 97       	sbiw	r28, 0x07	; 7
    46dc:	01 96       	adiw	r24, 0x01	; 1
    46de:	27 96       	adiw	r28, 0x07	; 7
    46e0:	9f af       	std	Y+63, r25	; 0x3f
    46e2:	8e af       	std	Y+62, r24	; 0x3e
    46e4:	27 97       	sbiw	r28, 0x07	; 7
    46e6:	25 96       	adiw	r28, 0x05	; 5
    46e8:	ee ad       	ldd	r30, Y+62	; 0x3e
    46ea:	ff ad       	ldd	r31, Y+63	; 0x3f
    46ec:	25 97       	sbiw	r28, 0x05	; 5
    46ee:	00 82       	st	Z, r0
    46f0:	25 96       	adiw	r28, 0x05	; 5
    46f2:	8e ad       	ldd	r24, Y+62	; 0x3e
    46f4:	9f ad       	ldd	r25, Y+63	; 0x3f
    46f6:	25 97       	sbiw	r28, 0x05	; 5
    46f8:	01 96       	adiw	r24, 0x01	; 1
    46fa:	25 96       	adiw	r28, 0x05	; 5
    46fc:	9f af       	std	Y+63, r25	; 0x3f
    46fe:	8e af       	std	Y+62, r24	; 0x3e
    4700:	25 97       	sbiw	r28, 0x05	; 5
    4702:	28 96       	adiw	r28, 0x08	; 8
    4704:	9f ad       	ldd	r25, Y+63	; 0x3f
    4706:	28 97       	sbiw	r28, 0x08	; 8
    4708:	91 50       	subi	r25, 0x01	; 1
    470a:	28 96       	adiw	r28, 0x08	; 8
    470c:	9f af       	std	Y+63, r25	; 0x3f
    470e:	28 97       	sbiw	r28, 0x08	; 8
    4710:	28 96       	adiw	r28, 0x08	; 8
    4712:	ef ad       	ldd	r30, Y+63	; 0x3f
    4714:	28 97       	sbiw	r28, 0x08	; 8
    4716:	ee 23       	and	r30, r30
    4718:	c1 f6       	brne	.-80     	; 0x46ca <HAL_LCD_init+0x3a>

	u8LocalReturn = MCAL_Dio_Init(&LCD_RS_interface);
    471a:	ce 01       	movw	r24, r28
    471c:	ca 96       	adiw	r24, 0x3a	; 58
    471e:	0e 94 aa 12 	call	0x2554	; 0x2554 <MCAL_Dio_Init>
    4722:	89 af       	std	Y+57, r24	; 0x39
	S_Dio LCD_E_interface= {LCD_E_PORT , LCD_E_PIN , OUTPUT};
    4724:	ce 01       	movw	r24, r28
    4726:	cd 96       	adiw	r24, 0x3d	; 61
    4728:	2a 96       	adiw	r28, 0x0a	; 10
    472a:	9f af       	std	Y+63, r25	; 0x3f
    472c:	8e af       	std	Y+62, r24	; 0x3e
    472e:	2a 97       	sbiw	r28, 0x0a	; 10
    4730:	ea ea       	ldi	r30, 0xAA	; 170
    4732:	f1 e0       	ldi	r31, 0x01	; 1
    4734:	2c 96       	adiw	r28, 0x0c	; 12
    4736:	ff af       	std	Y+63, r31	; 0x3f
    4738:	ee af       	std	Y+62, r30	; 0x3e
    473a:	2c 97       	sbiw	r28, 0x0c	; 12
    473c:	f3 e0       	ldi	r31, 0x03	; 3
    473e:	2d 96       	adiw	r28, 0x0d	; 13
    4740:	ff af       	std	Y+63, r31	; 0x3f
    4742:	2d 97       	sbiw	r28, 0x0d	; 13
    4744:	2c 96       	adiw	r28, 0x0c	; 12
    4746:	ee ad       	ldd	r30, Y+62	; 0x3e
    4748:	ff ad       	ldd	r31, Y+63	; 0x3f
    474a:	2c 97       	sbiw	r28, 0x0c	; 12
    474c:	00 80       	ld	r0, Z
    474e:	2c 96       	adiw	r28, 0x0c	; 12
    4750:	8e ad       	ldd	r24, Y+62	; 0x3e
    4752:	9f ad       	ldd	r25, Y+63	; 0x3f
    4754:	2c 97       	sbiw	r28, 0x0c	; 12
    4756:	01 96       	adiw	r24, 0x01	; 1
    4758:	2c 96       	adiw	r28, 0x0c	; 12
    475a:	9f af       	std	Y+63, r25	; 0x3f
    475c:	8e af       	std	Y+62, r24	; 0x3e
    475e:	2c 97       	sbiw	r28, 0x0c	; 12
    4760:	2a 96       	adiw	r28, 0x0a	; 10
    4762:	ee ad       	ldd	r30, Y+62	; 0x3e
    4764:	ff ad       	ldd	r31, Y+63	; 0x3f
    4766:	2a 97       	sbiw	r28, 0x0a	; 10
    4768:	00 82       	st	Z, r0
    476a:	2a 96       	adiw	r28, 0x0a	; 10
    476c:	8e ad       	ldd	r24, Y+62	; 0x3e
    476e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4770:	2a 97       	sbiw	r28, 0x0a	; 10
    4772:	01 96       	adiw	r24, 0x01	; 1
    4774:	2a 96       	adiw	r28, 0x0a	; 10
    4776:	9f af       	std	Y+63, r25	; 0x3f
    4778:	8e af       	std	Y+62, r24	; 0x3e
    477a:	2a 97       	sbiw	r28, 0x0a	; 10
    477c:	2d 96       	adiw	r28, 0x0d	; 13
    477e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4780:	2d 97       	sbiw	r28, 0x0d	; 13
    4782:	91 50       	subi	r25, 0x01	; 1
    4784:	2d 96       	adiw	r28, 0x0d	; 13
    4786:	9f af       	std	Y+63, r25	; 0x3f
    4788:	2d 97       	sbiw	r28, 0x0d	; 13
    478a:	2d 96       	adiw	r28, 0x0d	; 13
    478c:	ef ad       	ldd	r30, Y+63	; 0x3f
    478e:	2d 97       	sbiw	r28, 0x0d	; 13
    4790:	ee 23       	and	r30, r30
    4792:	c1 f6       	brne	.-80     	; 0x4744 <HAL_LCD_init+0xb4>

	u8LocalReturn = MCAL_Dio_Init(&LCD_E_interface);
    4794:	ce 01       	movw	r24, r28
    4796:	cd 96       	adiw	r24, 0x3d	; 61
    4798:	0e 94 aa 12 	call	0x2554	; 0x2554 <MCAL_Dio_Init>
    479c:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(40);
	#elif (LCD_DATA_BITS_MODE == 4)
		/* 4 bits mode */
		#ifdef LOWER_PORT_PINS
			/* Using upper data pins */
			S_Dio LCD_DATA_interface = {LCD_DATA_PORT, (LCD_D4_PIN | LCD_D5_PIN | LCD_D6_PIN |LCD_D7_PIN), OUTPUT};
    479e:	ce 01       	movw	r24, r28
    47a0:	80 5c       	subi	r24, 0xC0	; 192
    47a2:	9f 4f       	sbci	r25, 0xFF	; 255
    47a4:	2f 96       	adiw	r28, 0x0f	; 15
    47a6:	9f af       	std	Y+63, r25	; 0x3f
    47a8:	8e af       	std	Y+62, r24	; 0x3e
    47aa:	2f 97       	sbiw	r28, 0x0f	; 15
    47ac:	e7 ea       	ldi	r30, 0xA7	; 167
    47ae:	f1 e0       	ldi	r31, 0x01	; 1
    47b0:	61 96       	adiw	r28, 0x11	; 17
    47b2:	ff af       	std	Y+63, r31	; 0x3f
    47b4:	ee af       	std	Y+62, r30	; 0x3e
    47b6:	61 97       	sbiw	r28, 0x11	; 17
    47b8:	f3 e0       	ldi	r31, 0x03	; 3
    47ba:	62 96       	adiw	r28, 0x12	; 18
    47bc:	ff af       	std	Y+63, r31	; 0x3f
    47be:	62 97       	sbiw	r28, 0x12	; 18
    47c0:	61 96       	adiw	r28, 0x11	; 17
    47c2:	ee ad       	ldd	r30, Y+62	; 0x3e
    47c4:	ff ad       	ldd	r31, Y+63	; 0x3f
    47c6:	61 97       	sbiw	r28, 0x11	; 17
    47c8:	00 80       	ld	r0, Z
    47ca:	61 96       	adiw	r28, 0x11	; 17
    47cc:	8e ad       	ldd	r24, Y+62	; 0x3e
    47ce:	9f ad       	ldd	r25, Y+63	; 0x3f
    47d0:	61 97       	sbiw	r28, 0x11	; 17
    47d2:	01 96       	adiw	r24, 0x01	; 1
    47d4:	61 96       	adiw	r28, 0x11	; 17
    47d6:	9f af       	std	Y+63, r25	; 0x3f
    47d8:	8e af       	std	Y+62, r24	; 0x3e
    47da:	61 97       	sbiw	r28, 0x11	; 17
    47dc:	2f 96       	adiw	r28, 0x0f	; 15
    47de:	ee ad       	ldd	r30, Y+62	; 0x3e
    47e0:	ff ad       	ldd	r31, Y+63	; 0x3f
    47e2:	2f 97       	sbiw	r28, 0x0f	; 15
    47e4:	00 82       	st	Z, r0
    47e6:	2f 96       	adiw	r28, 0x0f	; 15
    47e8:	8e ad       	ldd	r24, Y+62	; 0x3e
    47ea:	9f ad       	ldd	r25, Y+63	; 0x3f
    47ec:	2f 97       	sbiw	r28, 0x0f	; 15
    47ee:	01 96       	adiw	r24, 0x01	; 1
    47f0:	2f 96       	adiw	r28, 0x0f	; 15
    47f2:	9f af       	std	Y+63, r25	; 0x3f
    47f4:	8e af       	std	Y+62, r24	; 0x3e
    47f6:	2f 97       	sbiw	r28, 0x0f	; 15
    47f8:	62 96       	adiw	r28, 0x12	; 18
    47fa:	9f ad       	ldd	r25, Y+63	; 0x3f
    47fc:	62 97       	sbiw	r28, 0x12	; 18
    47fe:	91 50       	subi	r25, 0x01	; 1
    4800:	62 96       	adiw	r28, 0x12	; 18
    4802:	9f af       	std	Y+63, r25	; 0x3f
    4804:	62 97       	sbiw	r28, 0x12	; 18
    4806:	62 96       	adiw	r28, 0x12	; 18
    4808:	ef ad       	ldd	r30, Y+63	; 0x3f
    480a:	62 97       	sbiw	r28, 0x12	; 18
    480c:	ee 23       	and	r30, r30
    480e:	c1 f6       	brne	.-80     	; 0x47c0 <HAL_LCD_init+0x130>
			u8LocalReturn = MCAL_Dio_Init(&LCD_DATA_interface);
    4810:	ce 01       	movw	r24, r28
    4812:	80 5c       	subi	r24, 0xC0	; 192
    4814:	9f 4f       	sbci	r25, 0xFF	; 255
    4816:	0e 94 aa 12 	call	0x2554	; 0x2554 <MCAL_Dio_Init>
    481a:	89 af       	std	Y+57, r24	; 0x39
    481c:	80 e0       	ldi	r24, 0x00	; 0
    481e:	90 e0       	ldi	r25, 0x00	; 0
    4820:	ac e0       	ldi	r26, 0x0C	; 12
    4822:	b2 e4       	ldi	r27, 0x42	; 66
    4824:	8d ab       	std	Y+53, r24	; 0x35
    4826:	9e ab       	std	Y+54, r25	; 0x36
    4828:	af ab       	std	Y+55, r26	; 0x37
    482a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    482c:	6d a9       	ldd	r22, Y+53	; 0x35
    482e:	7e a9       	ldd	r23, Y+54	; 0x36
    4830:	8f a9       	ldd	r24, Y+55	; 0x37
    4832:	98 ad       	ldd	r25, Y+56	; 0x38
    4834:	20 e0       	ldi	r18, 0x00	; 0
    4836:	30 e0       	ldi	r19, 0x00	; 0
    4838:	4a e7       	ldi	r20, 0x7A	; 122
    483a:	55 e4       	ldi	r21, 0x45	; 69
    483c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4840:	dc 01       	movw	r26, r24
    4842:	cb 01       	movw	r24, r22
    4844:	89 ab       	std	Y+49, r24	; 0x31
    4846:	9a ab       	std	Y+50, r25	; 0x32
    4848:	ab ab       	std	Y+51, r26	; 0x33
    484a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    484c:	69 a9       	ldd	r22, Y+49	; 0x31
    484e:	7a a9       	ldd	r23, Y+50	; 0x32
    4850:	8b a9       	ldd	r24, Y+51	; 0x33
    4852:	9c a9       	ldd	r25, Y+52	; 0x34
    4854:	20 e0       	ldi	r18, 0x00	; 0
    4856:	30 e0       	ldi	r19, 0x00	; 0
    4858:	40 e8       	ldi	r20, 0x80	; 128
    485a:	5f e3       	ldi	r21, 0x3F	; 63
    485c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4860:	88 23       	and	r24, r24
    4862:	2c f4       	brge	.+10     	; 0x486e <HAL_LCD_init+0x1de>
		__ticks = 1;
    4864:	81 e0       	ldi	r24, 0x01	; 1
    4866:	90 e0       	ldi	r25, 0x00	; 0
    4868:	98 ab       	std	Y+48, r25	; 0x30
    486a:	8f a7       	std	Y+47, r24	; 0x2f
    486c:	3f c0       	rjmp	.+126    	; 0x48ec <HAL_LCD_init+0x25c>
	else if (__tmp > 65535)
    486e:	69 a9       	ldd	r22, Y+49	; 0x31
    4870:	7a a9       	ldd	r23, Y+50	; 0x32
    4872:	8b a9       	ldd	r24, Y+51	; 0x33
    4874:	9c a9       	ldd	r25, Y+52	; 0x34
    4876:	20 e0       	ldi	r18, 0x00	; 0
    4878:	3f ef       	ldi	r19, 0xFF	; 255
    487a:	4f e7       	ldi	r20, 0x7F	; 127
    487c:	57 e4       	ldi	r21, 0x47	; 71
    487e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4882:	18 16       	cp	r1, r24
    4884:	4c f5       	brge	.+82     	; 0x48d8 <HAL_LCD_init+0x248>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4886:	6d a9       	ldd	r22, Y+53	; 0x35
    4888:	7e a9       	ldd	r23, Y+54	; 0x36
    488a:	8f a9       	ldd	r24, Y+55	; 0x37
    488c:	98 ad       	ldd	r25, Y+56	; 0x38
    488e:	20 e0       	ldi	r18, 0x00	; 0
    4890:	30 e0       	ldi	r19, 0x00	; 0
    4892:	40 e2       	ldi	r20, 0x20	; 32
    4894:	51 e4       	ldi	r21, 0x41	; 65
    4896:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    489a:	dc 01       	movw	r26, r24
    489c:	cb 01       	movw	r24, r22
    489e:	bc 01       	movw	r22, r24
    48a0:	cd 01       	movw	r24, r26
    48a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48a6:	dc 01       	movw	r26, r24
    48a8:	cb 01       	movw	r24, r22
    48aa:	98 ab       	std	Y+48, r25	; 0x30
    48ac:	8f a7       	std	Y+47, r24	; 0x2f
    48ae:	0f c0       	rjmp	.+30     	; 0x48ce <HAL_LCD_init+0x23e>
    48b0:	80 e9       	ldi	r24, 0x90	; 144
    48b2:	91 e0       	ldi	r25, 0x01	; 1
    48b4:	9e a7       	std	Y+46, r25	; 0x2e
    48b6:	8d a7       	std	Y+45, r24	; 0x2d
    48b8:	8d a5       	ldd	r24, Y+45	; 0x2d
    48ba:	9e a5       	ldd	r25, Y+46	; 0x2e
    48bc:	01 97       	sbiw	r24, 0x01	; 1
    48be:	f1 f7       	brne	.-4      	; 0x48bc <HAL_LCD_init+0x22c>
    48c0:	9e a7       	std	Y+46, r25	; 0x2e
    48c2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    48c6:	98 a9       	ldd	r25, Y+48	; 0x30
    48c8:	01 97       	sbiw	r24, 0x01	; 1
    48ca:	98 ab       	std	Y+48, r25	; 0x30
    48cc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    48d0:	98 a9       	ldd	r25, Y+48	; 0x30
    48d2:	00 97       	sbiw	r24, 0x00	; 0
    48d4:	69 f7       	brne	.-38     	; 0x48b0 <HAL_LCD_init+0x220>
    48d6:	14 c0       	rjmp	.+40     	; 0x4900 <HAL_LCD_init+0x270>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48d8:	69 a9       	ldd	r22, Y+49	; 0x31
    48da:	7a a9       	ldd	r23, Y+50	; 0x32
    48dc:	8b a9       	ldd	r24, Y+51	; 0x33
    48de:	9c a9       	ldd	r25, Y+52	; 0x34
    48e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48e4:	dc 01       	movw	r26, r24
    48e6:	cb 01       	movw	r24, r22
    48e8:	98 ab       	std	Y+48, r25	; 0x30
    48ea:	8f a7       	std	Y+47, r24	; 0x2f
    48ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    48ee:	98 a9       	ldd	r25, Y+48	; 0x30
    48f0:	9c a7       	std	Y+44, r25	; 0x2c
    48f2:	8b a7       	std	Y+43, r24	; 0x2b
    48f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    48f6:	9c a5       	ldd	r25, Y+44	; 0x2c
    48f8:	01 97       	sbiw	r24, 0x01	; 1
    48fa:	f1 f7       	brne	.-4      	; 0x48f8 <HAL_LCD_init+0x268>
    48fc:	9c a7       	std	Y+44, r25	; 0x2c
    48fe:	8b a7       	std	Y+43, r24	; 0x2b
			/* Using lower data pins */
			S_Dio LCD_DATA_interface = {LCD_DATA_PORT, (LCD_D0_PIN | LCD_D1_PIN | LCD_D2_PIN |LCD_D3_PIN), OUTPUT};
			u8LocalReturn = MCAL_Dio_Init(&LCD_DATA_interface);
		#endif
		_delay_ms(35);
		HAL_LCD_sendCommand(FOUR_BITS_DATA_MODE);
    4900:	82 e0       	ldi	r24, 0x02	; 2
    4902:	0e 94 f0 25 	call	0x4be0	; 0x4be0 <HAL_LCD_sendCommand>
		HAL_LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE);
    4906:	88 e2       	ldi	r24, 0x28	; 40
    4908:	0e 94 f0 25 	call	0x4be0	; 0x4be0 <HAL_LCD_sendCommand>
    490c:	80 e0       	ldi	r24, 0x00	; 0
    490e:	90 e0       	ldi	r25, 0x00	; 0
    4910:	a0 e2       	ldi	r26, 0x20	; 32
    4912:	b2 e4       	ldi	r27, 0x42	; 66
    4914:	8f a3       	std	Y+39, r24	; 0x27
    4916:	98 a7       	std	Y+40, r25	; 0x28
    4918:	a9 a7       	std	Y+41, r26	; 0x29
    491a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    491c:	6f a1       	ldd	r22, Y+39	; 0x27
    491e:	78 a5       	ldd	r23, Y+40	; 0x28
    4920:	89 a5       	ldd	r24, Y+41	; 0x29
    4922:	9a a5       	ldd	r25, Y+42	; 0x2a
    4924:	20 e0       	ldi	r18, 0x00	; 0
    4926:	30 e0       	ldi	r19, 0x00	; 0
    4928:	4a e7       	ldi	r20, 0x7A	; 122
    492a:	55 e4       	ldi	r21, 0x45	; 69
    492c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4930:	dc 01       	movw	r26, r24
    4932:	cb 01       	movw	r24, r22
    4934:	8b a3       	std	Y+35, r24	; 0x23
    4936:	9c a3       	std	Y+36, r25	; 0x24
    4938:	ad a3       	std	Y+37, r26	; 0x25
    493a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    493c:	6b a1       	ldd	r22, Y+35	; 0x23
    493e:	7c a1       	ldd	r23, Y+36	; 0x24
    4940:	8d a1       	ldd	r24, Y+37	; 0x25
    4942:	9e a1       	ldd	r25, Y+38	; 0x26
    4944:	20 e0       	ldi	r18, 0x00	; 0
    4946:	30 e0       	ldi	r19, 0x00	; 0
    4948:	40 e8       	ldi	r20, 0x80	; 128
    494a:	5f e3       	ldi	r21, 0x3F	; 63
    494c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4950:	88 23       	and	r24, r24
    4952:	2c f4       	brge	.+10     	; 0x495e <HAL_LCD_init+0x2ce>
		__ticks = 1;
    4954:	81 e0       	ldi	r24, 0x01	; 1
    4956:	90 e0       	ldi	r25, 0x00	; 0
    4958:	9a a3       	std	Y+34, r25	; 0x22
    495a:	89 a3       	std	Y+33, r24	; 0x21
    495c:	3f c0       	rjmp	.+126    	; 0x49dc <HAL_LCD_init+0x34c>
	else if (__tmp > 65535)
    495e:	6b a1       	ldd	r22, Y+35	; 0x23
    4960:	7c a1       	ldd	r23, Y+36	; 0x24
    4962:	8d a1       	ldd	r24, Y+37	; 0x25
    4964:	9e a1       	ldd	r25, Y+38	; 0x26
    4966:	20 e0       	ldi	r18, 0x00	; 0
    4968:	3f ef       	ldi	r19, 0xFF	; 255
    496a:	4f e7       	ldi	r20, 0x7F	; 127
    496c:	57 e4       	ldi	r21, 0x47	; 71
    496e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4972:	18 16       	cp	r1, r24
    4974:	4c f5       	brge	.+82     	; 0x49c8 <HAL_LCD_init+0x338>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4976:	6f a1       	ldd	r22, Y+39	; 0x27
    4978:	78 a5       	ldd	r23, Y+40	; 0x28
    497a:	89 a5       	ldd	r24, Y+41	; 0x29
    497c:	9a a5       	ldd	r25, Y+42	; 0x2a
    497e:	20 e0       	ldi	r18, 0x00	; 0
    4980:	30 e0       	ldi	r19, 0x00	; 0
    4982:	40 e2       	ldi	r20, 0x20	; 32
    4984:	51 e4       	ldi	r21, 0x41	; 65
    4986:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    498a:	dc 01       	movw	r26, r24
    498c:	cb 01       	movw	r24, r22
    498e:	bc 01       	movw	r22, r24
    4990:	cd 01       	movw	r24, r26
    4992:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4996:	dc 01       	movw	r26, r24
    4998:	cb 01       	movw	r24, r22
    499a:	9a a3       	std	Y+34, r25	; 0x22
    499c:	89 a3       	std	Y+33, r24	; 0x21
    499e:	0f c0       	rjmp	.+30     	; 0x49be <HAL_LCD_init+0x32e>
    49a0:	80 e9       	ldi	r24, 0x90	; 144
    49a2:	91 e0       	ldi	r25, 0x01	; 1
    49a4:	98 a3       	std	Y+32, r25	; 0x20
    49a6:	8f 8f       	std	Y+31, r24	; 0x1f
    49a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    49aa:	98 a1       	ldd	r25, Y+32	; 0x20
    49ac:	01 97       	sbiw	r24, 0x01	; 1
    49ae:	f1 f7       	brne	.-4      	; 0x49ac <HAL_LCD_init+0x31c>
    49b0:	98 a3       	std	Y+32, r25	; 0x20
    49b2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49b4:	89 a1       	ldd	r24, Y+33	; 0x21
    49b6:	9a a1       	ldd	r25, Y+34	; 0x22
    49b8:	01 97       	sbiw	r24, 0x01	; 1
    49ba:	9a a3       	std	Y+34, r25	; 0x22
    49bc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49be:	89 a1       	ldd	r24, Y+33	; 0x21
    49c0:	9a a1       	ldd	r25, Y+34	; 0x22
    49c2:	00 97       	sbiw	r24, 0x00	; 0
    49c4:	69 f7       	brne	.-38     	; 0x49a0 <HAL_LCD_init+0x310>
    49c6:	14 c0       	rjmp	.+40     	; 0x49f0 <HAL_LCD_init+0x360>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49c8:	6b a1       	ldd	r22, Y+35	; 0x23
    49ca:	7c a1       	ldd	r23, Y+36	; 0x24
    49cc:	8d a1       	ldd	r24, Y+37	; 0x25
    49ce:	9e a1       	ldd	r25, Y+38	; 0x26
    49d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49d4:	dc 01       	movw	r26, r24
    49d6:	cb 01       	movw	r24, r22
    49d8:	9a a3       	std	Y+34, r25	; 0x22
    49da:	89 a3       	std	Y+33, r24	; 0x21
    49dc:	89 a1       	ldd	r24, Y+33	; 0x21
    49de:	9a a1       	ldd	r25, Y+34	; 0x22
    49e0:	9e 8f       	std	Y+30, r25	; 0x1e
    49e2:	8d 8f       	std	Y+29, r24	; 0x1d
    49e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    49e6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    49e8:	01 97       	sbiw	r24, 0x01	; 1
    49ea:	f1 f7       	brne	.-4      	; 0x49e8 <HAL_LCD_init+0x358>
    49ec:	9e 8f       	std	Y+30, r25	; 0x1e
    49ee:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(40);
	#endif

	HAL_LCD_sendCommand(CURSOR_ON);
    49f0:	8e e0       	ldi	r24, 0x0E	; 14
    49f2:	0e 94 f0 25 	call	0x4be0	; 0x4be0 <HAL_LCD_sendCommand>
    49f6:	80 e0       	ldi	r24, 0x00	; 0
    49f8:	90 e0       	ldi	r25, 0x00	; 0
    49fa:	a0 e2       	ldi	r26, 0x20	; 32
    49fc:	b2 e4       	ldi	r27, 0x42	; 66
    49fe:	89 8f       	std	Y+25, r24	; 0x19
    4a00:	9a 8f       	std	Y+26, r25	; 0x1a
    4a02:	ab 8f       	std	Y+27, r26	; 0x1b
    4a04:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a06:	69 8d       	ldd	r22, Y+25	; 0x19
    4a08:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4a0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4a0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4a0e:	20 e0       	ldi	r18, 0x00	; 0
    4a10:	30 e0       	ldi	r19, 0x00	; 0
    4a12:	4a e7       	ldi	r20, 0x7A	; 122
    4a14:	55 e4       	ldi	r21, 0x45	; 69
    4a16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a1a:	dc 01       	movw	r26, r24
    4a1c:	cb 01       	movw	r24, r22
    4a1e:	8d 8b       	std	Y+21, r24	; 0x15
    4a20:	9e 8b       	std	Y+22, r25	; 0x16
    4a22:	af 8b       	std	Y+23, r26	; 0x17
    4a24:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4a26:	6d 89       	ldd	r22, Y+21	; 0x15
    4a28:	7e 89       	ldd	r23, Y+22	; 0x16
    4a2a:	8f 89       	ldd	r24, Y+23	; 0x17
    4a2c:	98 8d       	ldd	r25, Y+24	; 0x18
    4a2e:	20 e0       	ldi	r18, 0x00	; 0
    4a30:	30 e0       	ldi	r19, 0x00	; 0
    4a32:	40 e8       	ldi	r20, 0x80	; 128
    4a34:	5f e3       	ldi	r21, 0x3F	; 63
    4a36:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a3a:	88 23       	and	r24, r24
    4a3c:	2c f4       	brge	.+10     	; 0x4a48 <HAL_LCD_init+0x3b8>
		__ticks = 1;
    4a3e:	81 e0       	ldi	r24, 0x01	; 1
    4a40:	90 e0       	ldi	r25, 0x00	; 0
    4a42:	9c 8b       	std	Y+20, r25	; 0x14
    4a44:	8b 8b       	std	Y+19, r24	; 0x13
    4a46:	3f c0       	rjmp	.+126    	; 0x4ac6 <HAL_LCD_init+0x436>
	else if (__tmp > 65535)
    4a48:	6d 89       	ldd	r22, Y+21	; 0x15
    4a4a:	7e 89       	ldd	r23, Y+22	; 0x16
    4a4c:	8f 89       	ldd	r24, Y+23	; 0x17
    4a4e:	98 8d       	ldd	r25, Y+24	; 0x18
    4a50:	20 e0       	ldi	r18, 0x00	; 0
    4a52:	3f ef       	ldi	r19, 0xFF	; 255
    4a54:	4f e7       	ldi	r20, 0x7F	; 127
    4a56:	57 e4       	ldi	r21, 0x47	; 71
    4a58:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a5c:	18 16       	cp	r1, r24
    4a5e:	4c f5       	brge	.+82     	; 0x4ab2 <HAL_LCD_init+0x422>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a60:	69 8d       	ldd	r22, Y+25	; 0x19
    4a62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4a64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4a66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4a68:	20 e0       	ldi	r18, 0x00	; 0
    4a6a:	30 e0       	ldi	r19, 0x00	; 0
    4a6c:	40 e2       	ldi	r20, 0x20	; 32
    4a6e:	51 e4       	ldi	r21, 0x41	; 65
    4a70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a74:	dc 01       	movw	r26, r24
    4a76:	cb 01       	movw	r24, r22
    4a78:	bc 01       	movw	r22, r24
    4a7a:	cd 01       	movw	r24, r26
    4a7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a80:	dc 01       	movw	r26, r24
    4a82:	cb 01       	movw	r24, r22
    4a84:	9c 8b       	std	Y+20, r25	; 0x14
    4a86:	8b 8b       	std	Y+19, r24	; 0x13
    4a88:	0f c0       	rjmp	.+30     	; 0x4aa8 <HAL_LCD_init+0x418>
    4a8a:	80 e9       	ldi	r24, 0x90	; 144
    4a8c:	91 e0       	ldi	r25, 0x01	; 1
    4a8e:	9a 8b       	std	Y+18, r25	; 0x12
    4a90:	89 8b       	std	Y+17, r24	; 0x11
    4a92:	89 89       	ldd	r24, Y+17	; 0x11
    4a94:	9a 89       	ldd	r25, Y+18	; 0x12
    4a96:	01 97       	sbiw	r24, 0x01	; 1
    4a98:	f1 f7       	brne	.-4      	; 0x4a96 <HAL_LCD_init+0x406>
    4a9a:	9a 8b       	std	Y+18, r25	; 0x12
    4a9c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a9e:	8b 89       	ldd	r24, Y+19	; 0x13
    4aa0:	9c 89       	ldd	r25, Y+20	; 0x14
    4aa2:	01 97       	sbiw	r24, 0x01	; 1
    4aa4:	9c 8b       	std	Y+20, r25	; 0x14
    4aa6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4aa8:	8b 89       	ldd	r24, Y+19	; 0x13
    4aaa:	9c 89       	ldd	r25, Y+20	; 0x14
    4aac:	00 97       	sbiw	r24, 0x00	; 0
    4aae:	69 f7       	brne	.-38     	; 0x4a8a <HAL_LCD_init+0x3fa>
    4ab0:	14 c0       	rjmp	.+40     	; 0x4ada <HAL_LCD_init+0x44a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ab2:	6d 89       	ldd	r22, Y+21	; 0x15
    4ab4:	7e 89       	ldd	r23, Y+22	; 0x16
    4ab6:	8f 89       	ldd	r24, Y+23	; 0x17
    4ab8:	98 8d       	ldd	r25, Y+24	; 0x18
    4aba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4abe:	dc 01       	movw	r26, r24
    4ac0:	cb 01       	movw	r24, r22
    4ac2:	9c 8b       	std	Y+20, r25	; 0x14
    4ac4:	8b 8b       	std	Y+19, r24	; 0x13
    4ac6:	8b 89       	ldd	r24, Y+19	; 0x13
    4ac8:	9c 89       	ldd	r25, Y+20	; 0x14
    4aca:	98 8b       	std	Y+16, r25	; 0x10
    4acc:	8f 87       	std	Y+15, r24	; 0x0f
    4ace:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ad0:	98 89       	ldd	r25, Y+16	; 0x10
    4ad2:	01 97       	sbiw	r24, 0x01	; 1
    4ad4:	f1 f7       	brne	.-4      	; 0x4ad2 <HAL_LCD_init+0x442>
    4ad6:	98 8b       	std	Y+16, r25	; 0x10
    4ad8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(40);
	HAL_LCD_sendCommand(CLEAR_COMMAND);
    4ada:	81 e0       	ldi	r24, 0x01	; 1
    4adc:	0e 94 f0 25 	call	0x4be0	; 0x4be0 <HAL_LCD_sendCommand>
    4ae0:	80 e0       	ldi	r24, 0x00	; 0
    4ae2:	90 e0       	ldi	r25, 0x00	; 0
    4ae4:	a0 e0       	ldi	r26, 0x00	; 0
    4ae6:	b0 e4       	ldi	r27, 0x40	; 64
    4ae8:	8b 87       	std	Y+11, r24	; 0x0b
    4aea:	9c 87       	std	Y+12, r25	; 0x0c
    4aec:	ad 87       	std	Y+13, r26	; 0x0d
    4aee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4af0:	6b 85       	ldd	r22, Y+11	; 0x0b
    4af2:	7c 85       	ldd	r23, Y+12	; 0x0c
    4af4:	8d 85       	ldd	r24, Y+13	; 0x0d
    4af6:	9e 85       	ldd	r25, Y+14	; 0x0e
    4af8:	20 e0       	ldi	r18, 0x00	; 0
    4afa:	30 e0       	ldi	r19, 0x00	; 0
    4afc:	4a e7       	ldi	r20, 0x7A	; 122
    4afe:	55 e4       	ldi	r21, 0x45	; 69
    4b00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b04:	dc 01       	movw	r26, r24
    4b06:	cb 01       	movw	r24, r22
    4b08:	8f 83       	std	Y+7, r24	; 0x07
    4b0a:	98 87       	std	Y+8, r25	; 0x08
    4b0c:	a9 87       	std	Y+9, r26	; 0x09
    4b0e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4b10:	6f 81       	ldd	r22, Y+7	; 0x07
    4b12:	78 85       	ldd	r23, Y+8	; 0x08
    4b14:	89 85       	ldd	r24, Y+9	; 0x09
    4b16:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b18:	20 e0       	ldi	r18, 0x00	; 0
    4b1a:	30 e0       	ldi	r19, 0x00	; 0
    4b1c:	40 e8       	ldi	r20, 0x80	; 128
    4b1e:	5f e3       	ldi	r21, 0x3F	; 63
    4b20:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b24:	88 23       	and	r24, r24
    4b26:	2c f4       	brge	.+10     	; 0x4b32 <HAL_LCD_init+0x4a2>
		__ticks = 1;
    4b28:	81 e0       	ldi	r24, 0x01	; 1
    4b2a:	90 e0       	ldi	r25, 0x00	; 0
    4b2c:	9e 83       	std	Y+6, r25	; 0x06
    4b2e:	8d 83       	std	Y+5, r24	; 0x05
    4b30:	3f c0       	rjmp	.+126    	; 0x4bb0 <HAL_LCD_init+0x520>
	else if (__tmp > 65535)
    4b32:	6f 81       	ldd	r22, Y+7	; 0x07
    4b34:	78 85       	ldd	r23, Y+8	; 0x08
    4b36:	89 85       	ldd	r24, Y+9	; 0x09
    4b38:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b3a:	20 e0       	ldi	r18, 0x00	; 0
    4b3c:	3f ef       	ldi	r19, 0xFF	; 255
    4b3e:	4f e7       	ldi	r20, 0x7F	; 127
    4b40:	57 e4       	ldi	r21, 0x47	; 71
    4b42:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b46:	18 16       	cp	r1, r24
    4b48:	4c f5       	brge	.+82     	; 0x4b9c <HAL_LCD_init+0x50c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b50:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b52:	20 e0       	ldi	r18, 0x00	; 0
    4b54:	30 e0       	ldi	r19, 0x00	; 0
    4b56:	40 e2       	ldi	r20, 0x20	; 32
    4b58:	51 e4       	ldi	r21, 0x41	; 65
    4b5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b5e:	dc 01       	movw	r26, r24
    4b60:	cb 01       	movw	r24, r22
    4b62:	bc 01       	movw	r22, r24
    4b64:	cd 01       	movw	r24, r26
    4b66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b6a:	dc 01       	movw	r26, r24
    4b6c:	cb 01       	movw	r24, r22
    4b6e:	9e 83       	std	Y+6, r25	; 0x06
    4b70:	8d 83       	std	Y+5, r24	; 0x05
    4b72:	0f c0       	rjmp	.+30     	; 0x4b92 <HAL_LCD_init+0x502>
    4b74:	80 e9       	ldi	r24, 0x90	; 144
    4b76:	91 e0       	ldi	r25, 0x01	; 1
    4b78:	9c 83       	std	Y+4, r25	; 0x04
    4b7a:	8b 83       	std	Y+3, r24	; 0x03
    4b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    4b7e:	9c 81       	ldd	r25, Y+4	; 0x04
    4b80:	01 97       	sbiw	r24, 0x01	; 1
    4b82:	f1 f7       	brne	.-4      	; 0x4b80 <HAL_LCD_init+0x4f0>
    4b84:	9c 83       	std	Y+4, r25	; 0x04
    4b86:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b88:	8d 81       	ldd	r24, Y+5	; 0x05
    4b8a:	9e 81       	ldd	r25, Y+6	; 0x06
    4b8c:	01 97       	sbiw	r24, 0x01	; 1
    4b8e:	9e 83       	std	Y+6, r25	; 0x06
    4b90:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b92:	8d 81       	ldd	r24, Y+5	; 0x05
    4b94:	9e 81       	ldd	r25, Y+6	; 0x06
    4b96:	00 97       	sbiw	r24, 0x00	; 0
    4b98:	69 f7       	brne	.-38     	; 0x4b74 <HAL_LCD_init+0x4e4>
    4b9a:	14 c0       	rjmp	.+40     	; 0x4bc4 <HAL_LCD_init+0x534>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b9c:	6f 81       	ldd	r22, Y+7	; 0x07
    4b9e:	78 85       	ldd	r23, Y+8	; 0x08
    4ba0:	89 85       	ldd	r24, Y+9	; 0x09
    4ba2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ba4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ba8:	dc 01       	movw	r26, r24
    4baa:	cb 01       	movw	r24, r22
    4bac:	9e 83       	std	Y+6, r25	; 0x06
    4bae:	8d 83       	std	Y+5, r24	; 0x05
    4bb0:	8d 81       	ldd	r24, Y+5	; 0x05
    4bb2:	9e 81       	ldd	r25, Y+6	; 0x06
    4bb4:	9a 83       	std	Y+2, r25	; 0x02
    4bb6:	89 83       	std	Y+1, r24	; 0x01
    4bb8:	89 81       	ldd	r24, Y+1	; 0x01
    4bba:	9a 81       	ldd	r25, Y+2	; 0x02
    4bbc:	01 97       	sbiw	r24, 0x01	; 1
    4bbe:	f1 f7       	brne	.-4      	; 0x4bbc <HAL_LCD_init+0x52c>
    4bc0:	9a 83       	std	Y+2, r25	; 0x02
    4bc2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	HAL_LCD_sendCommand(SHIFT_CURSOR_RIGHT);
    4bc4:	86 e0       	ldi	r24, 0x06	; 6
    4bc6:	0e 94 f0 25 	call	0x4be0	; 0x4be0 <HAL_LCD_sendCommand>

	return u8LocalReturn;
    4bca:	89 ad       	ldd	r24, Y+57	; 0x39
}
    4bcc:	cf 5a       	subi	r28, 0xAF	; 175
    4bce:	df 4f       	sbci	r29, 0xFF	; 255
    4bd0:	0f b6       	in	r0, 0x3f	; 63
    4bd2:	f8 94       	cli
    4bd4:	de bf       	out	0x3e, r29	; 62
    4bd6:	0f be       	out	0x3f, r0	; 63
    4bd8:	cd bf       	out	0x3d, r28	; 61
    4bda:	cf 91       	pop	r28
    4bdc:	df 91       	pop	r29
    4bde:	08 95       	ret

00004be0 <HAL_LCD_sendCommand>:

/* Function to send command to LCD */
E_ErrorType HAL_LCD_sendCommand(LCD_commandType command)
{
    4be0:	0f 93       	push	r16
    4be2:	1f 93       	push	r17
    4be4:	df 93       	push	r29
    4be6:	cf 93       	push	r28
    4be8:	cd b7       	in	r28, 0x3d	; 61
    4bea:	de b7       	in	r29, 0x3e	; 62
    4bec:	ca 58       	subi	r28, 0x8A	; 138
    4bee:	d0 40       	sbci	r29, 0x00	; 0
    4bf0:	0f b6       	in	r0, 0x3f	; 63
    4bf2:	f8 94       	cli
    4bf4:	de bf       	out	0x3e, r29	; 62
    4bf6:	0f be       	out	0x3f, r0	; 63
    4bf8:	cd bf       	out	0x3d, r28	; 61
    4bfa:	fe 01       	movw	r30, r28
    4bfc:	e5 58       	subi	r30, 0x85	; 133
    4bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    4c00:	80 83       	st	Z, r24
	E_ErrorType u8LocalReturn = E_NOT_OK;
    4c02:	fe 01       	movw	r30, r28
    4c04:	ef 58       	subi	r30, 0x8F	; 143
    4c06:	ff 4f       	sbci	r31, 0xFF	; 255
    4c08:	81 e0       	ldi	r24, 0x01	; 1
    4c0a:	80 83       	st	Z, r24
	S_Dio LCD_RS_interface = {LCD_RS_PORT , LCD_RS_PIN , PIN_LOW};
    4c0c:	ce 01       	movw	r24, r28
    4c0e:	8e 58       	subi	r24, 0x8E	; 142
    4c10:	9f 4f       	sbci	r25, 0xFF	; 255
    4c12:	ee 96       	adiw	r28, 0x3e	; 62
    4c14:	9f af       	std	Y+63, r25	; 0x3f
    4c16:	8e af       	std	Y+62, r24	; 0x3e
    4c18:	ee 97       	sbiw	r28, 0x3e	; 62
    4c1a:	86 eb       	ldi	r24, 0xB6	; 182
    4c1c:	91 e0       	ldi	r25, 0x01	; 1
    4c1e:	c2 58       	subi	r28, 0x82	; 130
    4c20:	df 4f       	sbci	r29, 0xFF	; 255
    4c22:	99 83       	std	Y+1, r25	; 0x01
    4c24:	88 83       	st	Y, r24
    4c26:	ce 57       	subi	r28, 0x7E	; 126
    4c28:	d0 40       	sbci	r29, 0x00	; 0
    4c2a:	93 e0       	ldi	r25, 0x03	; 3
    4c2c:	c0 58       	subi	r28, 0x80	; 128
    4c2e:	df 4f       	sbci	r29, 0xFF	; 255
    4c30:	98 83       	st	Y, r25
    4c32:	c0 58       	subi	r28, 0x80	; 128
    4c34:	d0 40       	sbci	r29, 0x00	; 0
    4c36:	c2 58       	subi	r28, 0x82	; 130
    4c38:	df 4f       	sbci	r29, 0xFF	; 255
    4c3a:	e8 81       	ld	r30, Y
    4c3c:	f9 81       	ldd	r31, Y+1	; 0x01
    4c3e:	ce 57       	subi	r28, 0x7E	; 126
    4c40:	d0 40       	sbci	r29, 0x00	; 0
    4c42:	00 80       	ld	r0, Z
    4c44:	c2 58       	subi	r28, 0x82	; 130
    4c46:	df 4f       	sbci	r29, 0xFF	; 255
    4c48:	88 81       	ld	r24, Y
    4c4a:	99 81       	ldd	r25, Y+1	; 0x01
    4c4c:	ce 57       	subi	r28, 0x7E	; 126
    4c4e:	d0 40       	sbci	r29, 0x00	; 0
    4c50:	01 96       	adiw	r24, 0x01	; 1
    4c52:	c2 58       	subi	r28, 0x82	; 130
    4c54:	df 4f       	sbci	r29, 0xFF	; 255
    4c56:	99 83       	std	Y+1, r25	; 0x01
    4c58:	88 83       	st	Y, r24
    4c5a:	ce 57       	subi	r28, 0x7E	; 126
    4c5c:	d0 40       	sbci	r29, 0x00	; 0
    4c5e:	ee 96       	adiw	r28, 0x3e	; 62
    4c60:	ee ad       	ldd	r30, Y+62	; 0x3e
    4c62:	ff ad       	ldd	r31, Y+63	; 0x3f
    4c64:	ee 97       	sbiw	r28, 0x3e	; 62
    4c66:	00 82       	st	Z, r0
    4c68:	ee 96       	adiw	r28, 0x3e	; 62
    4c6a:	8e ad       	ldd	r24, Y+62	; 0x3e
    4c6c:	9f ad       	ldd	r25, Y+63	; 0x3f
    4c6e:	ee 97       	sbiw	r28, 0x3e	; 62
    4c70:	01 96       	adiw	r24, 0x01	; 1
    4c72:	ee 96       	adiw	r28, 0x3e	; 62
    4c74:	9f af       	std	Y+63, r25	; 0x3f
    4c76:	8e af       	std	Y+62, r24	; 0x3e
    4c78:	ee 97       	sbiw	r28, 0x3e	; 62
    4c7a:	c0 58       	subi	r28, 0x80	; 128
    4c7c:	df 4f       	sbci	r29, 0xFF	; 255
    4c7e:	98 81       	ld	r25, Y
    4c80:	c0 58       	subi	r28, 0x80	; 128
    4c82:	d0 40       	sbci	r29, 0x00	; 0
    4c84:	91 50       	subi	r25, 0x01	; 1
    4c86:	c0 58       	subi	r28, 0x80	; 128
    4c88:	df 4f       	sbci	r29, 0xFF	; 255
    4c8a:	98 83       	st	Y, r25
    4c8c:	c0 58       	subi	r28, 0x80	; 128
    4c8e:	d0 40       	sbci	r29, 0x00	; 0
    4c90:	c0 58       	subi	r28, 0x80	; 128
    4c92:	df 4f       	sbci	r29, 0xFF	; 255
    4c94:	e8 81       	ld	r30, Y
    4c96:	c0 58       	subi	r28, 0x80	; 128
    4c98:	d0 40       	sbci	r29, 0x00	; 0
    4c9a:	ee 23       	and	r30, r30
    4c9c:	61 f6       	brne	.-104    	; 0x4c36 <HAL_LCD_sendCommand+0x56>
	u8LocalReturn = MCAL_Dio_WritePin(&LCD_RS_interface, PIN_LOW);
    4c9e:	ce 01       	movw	r24, r28
    4ca0:	8e 58       	subi	r24, 0x8E	; 142
    4ca2:	9f 4f       	sbci	r25, 0xFF	; 255
    4ca4:	60 e0       	ldi	r22, 0x00	; 0
    4ca6:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <MCAL_Dio_WritePin>
    4caa:	fe 01       	movw	r30, r28
    4cac:	ef 58       	subi	r30, 0x8F	; 143
    4cae:	ff 4f       	sbci	r31, 0xFF	; 255
    4cb0:	80 83       	st	Z, r24
    4cb2:	fe 01       	movw	r30, r28
    4cb4:	e3 59       	subi	r30, 0x93	; 147
    4cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    4cb8:	80 e0       	ldi	r24, 0x00	; 0
    4cba:	90 e0       	ldi	r25, 0x00	; 0
    4cbc:	a0 e8       	ldi	r26, 0x80	; 128
    4cbe:	bf e3       	ldi	r27, 0x3F	; 63
    4cc0:	80 83       	st	Z, r24
    4cc2:	91 83       	std	Z+1, r25	; 0x01
    4cc4:	a2 83       	std	Z+2, r26	; 0x02
    4cc6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4cc8:	8e 01       	movw	r16, r28
    4cca:	07 59       	subi	r16, 0x97	; 151
    4ccc:	1f 4f       	sbci	r17, 0xFF	; 255
    4cce:	fe 01       	movw	r30, r28
    4cd0:	e3 59       	subi	r30, 0x93	; 147
    4cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    4cd4:	60 81       	ld	r22, Z
    4cd6:	71 81       	ldd	r23, Z+1	; 0x01
    4cd8:	82 81       	ldd	r24, Z+2	; 0x02
    4cda:	93 81       	ldd	r25, Z+3	; 0x03
    4cdc:	20 e0       	ldi	r18, 0x00	; 0
    4cde:	30 e0       	ldi	r19, 0x00	; 0
    4ce0:	4a e7       	ldi	r20, 0x7A	; 122
    4ce2:	55 e4       	ldi	r21, 0x45	; 69
    4ce4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ce8:	dc 01       	movw	r26, r24
    4cea:	cb 01       	movw	r24, r22
    4cec:	f8 01       	movw	r30, r16
    4cee:	80 83       	st	Z, r24
    4cf0:	91 83       	std	Z+1, r25	; 0x01
    4cf2:	a2 83       	std	Z+2, r26	; 0x02
    4cf4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4cf6:	fe 01       	movw	r30, r28
    4cf8:	e7 59       	subi	r30, 0x97	; 151
    4cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    4cfc:	60 81       	ld	r22, Z
    4cfe:	71 81       	ldd	r23, Z+1	; 0x01
    4d00:	82 81       	ldd	r24, Z+2	; 0x02
    4d02:	93 81       	ldd	r25, Z+3	; 0x03
    4d04:	20 e0       	ldi	r18, 0x00	; 0
    4d06:	30 e0       	ldi	r19, 0x00	; 0
    4d08:	40 e8       	ldi	r20, 0x80	; 128
    4d0a:	5f e3       	ldi	r21, 0x3F	; 63
    4d0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d10:	88 23       	and	r24, r24
    4d12:	44 f4       	brge	.+16     	; 0x4d24 <HAL_LCD_sendCommand+0x144>
		__ticks = 1;
    4d14:	fe 01       	movw	r30, r28
    4d16:	e9 59       	subi	r30, 0x99	; 153
    4d18:	ff 4f       	sbci	r31, 0xFF	; 255
    4d1a:	81 e0       	ldi	r24, 0x01	; 1
    4d1c:	90 e0       	ldi	r25, 0x00	; 0
    4d1e:	91 83       	std	Z+1, r25	; 0x01
    4d20:	80 83       	st	Z, r24
    4d22:	64 c0       	rjmp	.+200    	; 0x4dec <HAL_LCD_sendCommand+0x20c>
	else if (__tmp > 65535)
    4d24:	fe 01       	movw	r30, r28
    4d26:	e7 59       	subi	r30, 0x97	; 151
    4d28:	ff 4f       	sbci	r31, 0xFF	; 255
    4d2a:	60 81       	ld	r22, Z
    4d2c:	71 81       	ldd	r23, Z+1	; 0x01
    4d2e:	82 81       	ldd	r24, Z+2	; 0x02
    4d30:	93 81       	ldd	r25, Z+3	; 0x03
    4d32:	20 e0       	ldi	r18, 0x00	; 0
    4d34:	3f ef       	ldi	r19, 0xFF	; 255
    4d36:	4f e7       	ldi	r20, 0x7F	; 127
    4d38:	57 e4       	ldi	r21, 0x47	; 71
    4d3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d3e:	18 16       	cp	r1, r24
    4d40:	0c f0       	brlt	.+2      	; 0x4d44 <HAL_LCD_sendCommand+0x164>
    4d42:	43 c0       	rjmp	.+134    	; 0x4dca <HAL_LCD_sendCommand+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d44:	fe 01       	movw	r30, r28
    4d46:	e3 59       	subi	r30, 0x93	; 147
    4d48:	ff 4f       	sbci	r31, 0xFF	; 255
    4d4a:	60 81       	ld	r22, Z
    4d4c:	71 81       	ldd	r23, Z+1	; 0x01
    4d4e:	82 81       	ldd	r24, Z+2	; 0x02
    4d50:	93 81       	ldd	r25, Z+3	; 0x03
    4d52:	20 e0       	ldi	r18, 0x00	; 0
    4d54:	30 e0       	ldi	r19, 0x00	; 0
    4d56:	40 e2       	ldi	r20, 0x20	; 32
    4d58:	51 e4       	ldi	r21, 0x41	; 65
    4d5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d5e:	dc 01       	movw	r26, r24
    4d60:	cb 01       	movw	r24, r22
    4d62:	8e 01       	movw	r16, r28
    4d64:	09 59       	subi	r16, 0x99	; 153
    4d66:	1f 4f       	sbci	r17, 0xFF	; 255
    4d68:	bc 01       	movw	r22, r24
    4d6a:	cd 01       	movw	r24, r26
    4d6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d70:	dc 01       	movw	r26, r24
    4d72:	cb 01       	movw	r24, r22
    4d74:	f8 01       	movw	r30, r16
    4d76:	91 83       	std	Z+1, r25	; 0x01
    4d78:	80 83       	st	Z, r24
    4d7a:	1f c0       	rjmp	.+62     	; 0x4dba <HAL_LCD_sendCommand+0x1da>
    4d7c:	fe 01       	movw	r30, r28
    4d7e:	eb 59       	subi	r30, 0x9B	; 155
    4d80:	ff 4f       	sbci	r31, 0xFF	; 255
    4d82:	80 e9       	ldi	r24, 0x90	; 144
    4d84:	91 e0       	ldi	r25, 0x01	; 1
    4d86:	91 83       	std	Z+1, r25	; 0x01
    4d88:	80 83       	st	Z, r24
    4d8a:	fe 01       	movw	r30, r28
    4d8c:	eb 59       	subi	r30, 0x9B	; 155
    4d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d90:	80 81       	ld	r24, Z
    4d92:	91 81       	ldd	r25, Z+1	; 0x01
    4d94:	01 97       	sbiw	r24, 0x01	; 1
    4d96:	f1 f7       	brne	.-4      	; 0x4d94 <HAL_LCD_sendCommand+0x1b4>
    4d98:	fe 01       	movw	r30, r28
    4d9a:	eb 59       	subi	r30, 0x9B	; 155
    4d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d9e:	91 83       	std	Z+1, r25	; 0x01
    4da0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4da2:	de 01       	movw	r26, r28
    4da4:	a9 59       	subi	r26, 0x99	; 153
    4da6:	bf 4f       	sbci	r27, 0xFF	; 255
    4da8:	fe 01       	movw	r30, r28
    4daa:	e9 59       	subi	r30, 0x99	; 153
    4dac:	ff 4f       	sbci	r31, 0xFF	; 255
    4dae:	80 81       	ld	r24, Z
    4db0:	91 81       	ldd	r25, Z+1	; 0x01
    4db2:	01 97       	sbiw	r24, 0x01	; 1
    4db4:	11 96       	adiw	r26, 0x01	; 1
    4db6:	9c 93       	st	X, r25
    4db8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4dba:	fe 01       	movw	r30, r28
    4dbc:	e9 59       	subi	r30, 0x99	; 153
    4dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    4dc0:	80 81       	ld	r24, Z
    4dc2:	91 81       	ldd	r25, Z+1	; 0x01
    4dc4:	00 97       	sbiw	r24, 0x00	; 0
    4dc6:	d1 f6       	brne	.-76     	; 0x4d7c <HAL_LCD_sendCommand+0x19c>
    4dc8:	28 c0       	rjmp	.+80     	; 0x4e1a <HAL_LCD_sendCommand+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4dca:	8e 01       	movw	r16, r28
    4dcc:	09 59       	subi	r16, 0x99	; 153
    4dce:	1f 4f       	sbci	r17, 0xFF	; 255
    4dd0:	fe 01       	movw	r30, r28
    4dd2:	e7 59       	subi	r30, 0x97	; 151
    4dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    4dd6:	60 81       	ld	r22, Z
    4dd8:	71 81       	ldd	r23, Z+1	; 0x01
    4dda:	82 81       	ldd	r24, Z+2	; 0x02
    4ddc:	93 81       	ldd	r25, Z+3	; 0x03
    4dde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4de2:	dc 01       	movw	r26, r24
    4de4:	cb 01       	movw	r24, r22
    4de6:	f8 01       	movw	r30, r16
    4de8:	91 83       	std	Z+1, r25	; 0x01
    4dea:	80 83       	st	Z, r24
    4dec:	de 01       	movw	r26, r28
    4dee:	ad 59       	subi	r26, 0x9D	; 157
    4df0:	bf 4f       	sbci	r27, 0xFF	; 255
    4df2:	fe 01       	movw	r30, r28
    4df4:	e9 59       	subi	r30, 0x99	; 153
    4df6:	ff 4f       	sbci	r31, 0xFF	; 255
    4df8:	80 81       	ld	r24, Z
    4dfa:	91 81       	ldd	r25, Z+1	; 0x01
    4dfc:	11 96       	adiw	r26, 0x01	; 1
    4dfe:	9c 93       	st	X, r25
    4e00:	8e 93       	st	-X, r24
    4e02:	fe 01       	movw	r30, r28
    4e04:	ed 59       	subi	r30, 0x9D	; 157
    4e06:	ff 4f       	sbci	r31, 0xFF	; 255
    4e08:	80 81       	ld	r24, Z
    4e0a:	91 81       	ldd	r25, Z+1	; 0x01
    4e0c:	01 97       	sbiw	r24, 0x01	; 1
    4e0e:	f1 f7       	brne	.-4      	; 0x4e0c <HAL_LCD_sendCommand+0x22c>
    4e10:	fe 01       	movw	r30, r28
    4e12:	ed 59       	subi	r30, 0x9D	; 157
    4e14:	ff 4f       	sbci	r31, 0xFF	; 255
    4e16:	91 83       	std	Z+1, r25	; 0x01
    4e18:	80 83       	st	Z, r24
		u8LocalReturn = MCAL_Dio_WritePin(&LCD_RW_interface, PIN_LOW);
	#else
		//Do nothing
	#endif

	S_Dio LCD_E_interface = {LCD_E_PORT , LCD_E_PIN , PIN_LOW};
    4e1a:	ce 01       	movw	r24, r28
    4e1c:	8b 58       	subi	r24, 0x8B	; 139
    4e1e:	9f 4f       	sbci	r25, 0xFF	; 255
    4e20:	cf 57       	subi	r28, 0x7F	; 127
    4e22:	df 4f       	sbci	r29, 0xFF	; 255
    4e24:	99 83       	std	Y+1, r25	; 0x01
    4e26:	88 83       	st	Y, r24
    4e28:	c1 58       	subi	r28, 0x81	; 129
    4e2a:	d0 40       	sbci	r29, 0x00	; 0
    4e2c:	83 eb       	ldi	r24, 0xB3	; 179
    4e2e:	91 e0       	ldi	r25, 0x01	; 1
    4e30:	cd 57       	subi	r28, 0x7D	; 125
    4e32:	df 4f       	sbci	r29, 0xFF	; 255
    4e34:	99 83       	std	Y+1, r25	; 0x01
    4e36:	88 83       	st	Y, r24
    4e38:	c3 58       	subi	r28, 0x83	; 131
    4e3a:	d0 40       	sbci	r29, 0x00	; 0
    4e3c:	93 e0       	ldi	r25, 0x03	; 3
    4e3e:	cb 57       	subi	r28, 0x7B	; 123
    4e40:	df 4f       	sbci	r29, 0xFF	; 255
    4e42:	98 83       	st	Y, r25
    4e44:	c5 58       	subi	r28, 0x85	; 133
    4e46:	d0 40       	sbci	r29, 0x00	; 0
    4e48:	cd 57       	subi	r28, 0x7D	; 125
    4e4a:	df 4f       	sbci	r29, 0xFF	; 255
    4e4c:	e8 81       	ld	r30, Y
    4e4e:	f9 81       	ldd	r31, Y+1	; 0x01
    4e50:	c3 58       	subi	r28, 0x83	; 131
    4e52:	d0 40       	sbci	r29, 0x00	; 0
    4e54:	00 80       	ld	r0, Z
    4e56:	cd 57       	subi	r28, 0x7D	; 125
    4e58:	df 4f       	sbci	r29, 0xFF	; 255
    4e5a:	88 81       	ld	r24, Y
    4e5c:	99 81       	ldd	r25, Y+1	; 0x01
    4e5e:	c3 58       	subi	r28, 0x83	; 131
    4e60:	d0 40       	sbci	r29, 0x00	; 0
    4e62:	01 96       	adiw	r24, 0x01	; 1
    4e64:	cd 57       	subi	r28, 0x7D	; 125
    4e66:	df 4f       	sbci	r29, 0xFF	; 255
    4e68:	99 83       	std	Y+1, r25	; 0x01
    4e6a:	88 83       	st	Y, r24
    4e6c:	c3 58       	subi	r28, 0x83	; 131
    4e6e:	d0 40       	sbci	r29, 0x00	; 0
    4e70:	cf 57       	subi	r28, 0x7F	; 127
    4e72:	df 4f       	sbci	r29, 0xFF	; 255
    4e74:	e8 81       	ld	r30, Y
    4e76:	f9 81       	ldd	r31, Y+1	; 0x01
    4e78:	c1 58       	subi	r28, 0x81	; 129
    4e7a:	d0 40       	sbci	r29, 0x00	; 0
    4e7c:	00 82       	st	Z, r0
    4e7e:	cf 57       	subi	r28, 0x7F	; 127
    4e80:	df 4f       	sbci	r29, 0xFF	; 255
    4e82:	88 81       	ld	r24, Y
    4e84:	99 81       	ldd	r25, Y+1	; 0x01
    4e86:	c1 58       	subi	r28, 0x81	; 129
    4e88:	d0 40       	sbci	r29, 0x00	; 0
    4e8a:	01 96       	adiw	r24, 0x01	; 1
    4e8c:	cf 57       	subi	r28, 0x7F	; 127
    4e8e:	df 4f       	sbci	r29, 0xFF	; 255
    4e90:	99 83       	std	Y+1, r25	; 0x01
    4e92:	88 83       	st	Y, r24
    4e94:	c1 58       	subi	r28, 0x81	; 129
    4e96:	d0 40       	sbci	r29, 0x00	; 0
    4e98:	cb 57       	subi	r28, 0x7B	; 123
    4e9a:	df 4f       	sbci	r29, 0xFF	; 255
    4e9c:	98 81       	ld	r25, Y
    4e9e:	c5 58       	subi	r28, 0x85	; 133
    4ea0:	d0 40       	sbci	r29, 0x00	; 0
    4ea2:	91 50       	subi	r25, 0x01	; 1
    4ea4:	cb 57       	subi	r28, 0x7B	; 123
    4ea6:	df 4f       	sbci	r29, 0xFF	; 255
    4ea8:	98 83       	st	Y, r25
    4eaa:	c5 58       	subi	r28, 0x85	; 133
    4eac:	d0 40       	sbci	r29, 0x00	; 0
    4eae:	cb 57       	subi	r28, 0x7B	; 123
    4eb0:	df 4f       	sbci	r29, 0xFF	; 255
    4eb2:	e8 81       	ld	r30, Y
    4eb4:	c5 58       	subi	r28, 0x85	; 133
    4eb6:	d0 40       	sbci	r29, 0x00	; 0
    4eb8:	ee 23       	and	r30, r30
    4eba:	31 f6       	brne	.-116    	; 0x4e48 <HAL_LCD_sendCommand+0x268>
    4ebc:	fe 01       	movw	r30, r28
    4ebe:	e1 5a       	subi	r30, 0xA1	; 161
    4ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ec2:	80 e0       	ldi	r24, 0x00	; 0
    4ec4:	90 e0       	ldi	r25, 0x00	; 0
    4ec6:	a0 e8       	ldi	r26, 0x80	; 128
    4ec8:	bf e3       	ldi	r27, 0x3F	; 63
    4eca:	80 83       	st	Z, r24
    4ecc:	91 83       	std	Z+1, r25	; 0x01
    4ece:	a2 83       	std	Z+2, r26	; 0x02
    4ed0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ed2:	8e 01       	movw	r16, r28
    4ed4:	05 5a       	subi	r16, 0xA5	; 165
    4ed6:	1f 4f       	sbci	r17, 0xFF	; 255
    4ed8:	fe 01       	movw	r30, r28
    4eda:	e1 5a       	subi	r30, 0xA1	; 161
    4edc:	ff 4f       	sbci	r31, 0xFF	; 255
    4ede:	60 81       	ld	r22, Z
    4ee0:	71 81       	ldd	r23, Z+1	; 0x01
    4ee2:	82 81       	ldd	r24, Z+2	; 0x02
    4ee4:	93 81       	ldd	r25, Z+3	; 0x03
    4ee6:	20 e0       	ldi	r18, 0x00	; 0
    4ee8:	30 e0       	ldi	r19, 0x00	; 0
    4eea:	4a e7       	ldi	r20, 0x7A	; 122
    4eec:	55 e4       	ldi	r21, 0x45	; 69
    4eee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ef2:	dc 01       	movw	r26, r24
    4ef4:	cb 01       	movw	r24, r22
    4ef6:	f8 01       	movw	r30, r16
    4ef8:	80 83       	st	Z, r24
    4efa:	91 83       	std	Z+1, r25	; 0x01
    4efc:	a2 83       	std	Z+2, r26	; 0x02
    4efe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4f00:	fe 01       	movw	r30, r28
    4f02:	e5 5a       	subi	r30, 0xA5	; 165
    4f04:	ff 4f       	sbci	r31, 0xFF	; 255
    4f06:	60 81       	ld	r22, Z
    4f08:	71 81       	ldd	r23, Z+1	; 0x01
    4f0a:	82 81       	ldd	r24, Z+2	; 0x02
    4f0c:	93 81       	ldd	r25, Z+3	; 0x03
    4f0e:	20 e0       	ldi	r18, 0x00	; 0
    4f10:	30 e0       	ldi	r19, 0x00	; 0
    4f12:	40 e8       	ldi	r20, 0x80	; 128
    4f14:	5f e3       	ldi	r21, 0x3F	; 63
    4f16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4f1a:	88 23       	and	r24, r24
    4f1c:	44 f4       	brge	.+16     	; 0x4f2e <HAL_LCD_sendCommand+0x34e>
		__ticks = 1;
    4f1e:	fe 01       	movw	r30, r28
    4f20:	e7 5a       	subi	r30, 0xA7	; 167
    4f22:	ff 4f       	sbci	r31, 0xFF	; 255
    4f24:	81 e0       	ldi	r24, 0x01	; 1
    4f26:	90 e0       	ldi	r25, 0x00	; 0
    4f28:	91 83       	std	Z+1, r25	; 0x01
    4f2a:	80 83       	st	Z, r24
    4f2c:	64 c0       	rjmp	.+200    	; 0x4ff6 <HAL_LCD_sendCommand+0x416>
	else if (__tmp > 65535)
    4f2e:	fe 01       	movw	r30, r28
    4f30:	e5 5a       	subi	r30, 0xA5	; 165
    4f32:	ff 4f       	sbci	r31, 0xFF	; 255
    4f34:	60 81       	ld	r22, Z
    4f36:	71 81       	ldd	r23, Z+1	; 0x01
    4f38:	82 81       	ldd	r24, Z+2	; 0x02
    4f3a:	93 81       	ldd	r25, Z+3	; 0x03
    4f3c:	20 e0       	ldi	r18, 0x00	; 0
    4f3e:	3f ef       	ldi	r19, 0xFF	; 255
    4f40:	4f e7       	ldi	r20, 0x7F	; 127
    4f42:	57 e4       	ldi	r21, 0x47	; 71
    4f44:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4f48:	18 16       	cp	r1, r24
    4f4a:	0c f0       	brlt	.+2      	; 0x4f4e <HAL_LCD_sendCommand+0x36e>
    4f4c:	43 c0       	rjmp	.+134    	; 0x4fd4 <HAL_LCD_sendCommand+0x3f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f4e:	fe 01       	movw	r30, r28
    4f50:	e1 5a       	subi	r30, 0xA1	; 161
    4f52:	ff 4f       	sbci	r31, 0xFF	; 255
    4f54:	60 81       	ld	r22, Z
    4f56:	71 81       	ldd	r23, Z+1	; 0x01
    4f58:	82 81       	ldd	r24, Z+2	; 0x02
    4f5a:	93 81       	ldd	r25, Z+3	; 0x03
    4f5c:	20 e0       	ldi	r18, 0x00	; 0
    4f5e:	30 e0       	ldi	r19, 0x00	; 0
    4f60:	40 e2       	ldi	r20, 0x20	; 32
    4f62:	51 e4       	ldi	r21, 0x41	; 65
    4f64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f68:	dc 01       	movw	r26, r24
    4f6a:	cb 01       	movw	r24, r22
    4f6c:	8e 01       	movw	r16, r28
    4f6e:	07 5a       	subi	r16, 0xA7	; 167
    4f70:	1f 4f       	sbci	r17, 0xFF	; 255
    4f72:	bc 01       	movw	r22, r24
    4f74:	cd 01       	movw	r24, r26
    4f76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f7a:	dc 01       	movw	r26, r24
    4f7c:	cb 01       	movw	r24, r22
    4f7e:	f8 01       	movw	r30, r16
    4f80:	91 83       	std	Z+1, r25	; 0x01
    4f82:	80 83       	st	Z, r24
    4f84:	1f c0       	rjmp	.+62     	; 0x4fc4 <HAL_LCD_sendCommand+0x3e4>
    4f86:	fe 01       	movw	r30, r28
    4f88:	e9 5a       	subi	r30, 0xA9	; 169
    4f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f8c:	80 e9       	ldi	r24, 0x90	; 144
    4f8e:	91 e0       	ldi	r25, 0x01	; 1
    4f90:	91 83       	std	Z+1, r25	; 0x01
    4f92:	80 83       	st	Z, r24
    4f94:	fe 01       	movw	r30, r28
    4f96:	e9 5a       	subi	r30, 0xA9	; 169
    4f98:	ff 4f       	sbci	r31, 0xFF	; 255
    4f9a:	80 81       	ld	r24, Z
    4f9c:	91 81       	ldd	r25, Z+1	; 0x01
    4f9e:	01 97       	sbiw	r24, 0x01	; 1
    4fa0:	f1 f7       	brne	.-4      	; 0x4f9e <HAL_LCD_sendCommand+0x3be>
    4fa2:	fe 01       	movw	r30, r28
    4fa4:	e9 5a       	subi	r30, 0xA9	; 169
    4fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    4fa8:	91 83       	std	Z+1, r25	; 0x01
    4faa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fac:	de 01       	movw	r26, r28
    4fae:	a7 5a       	subi	r26, 0xA7	; 167
    4fb0:	bf 4f       	sbci	r27, 0xFF	; 255
    4fb2:	fe 01       	movw	r30, r28
    4fb4:	e7 5a       	subi	r30, 0xA7	; 167
    4fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    4fb8:	80 81       	ld	r24, Z
    4fba:	91 81       	ldd	r25, Z+1	; 0x01
    4fbc:	01 97       	sbiw	r24, 0x01	; 1
    4fbe:	11 96       	adiw	r26, 0x01	; 1
    4fc0:	9c 93       	st	X, r25
    4fc2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4fc4:	fe 01       	movw	r30, r28
    4fc6:	e7 5a       	subi	r30, 0xA7	; 167
    4fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    4fca:	80 81       	ld	r24, Z
    4fcc:	91 81       	ldd	r25, Z+1	; 0x01
    4fce:	00 97       	sbiw	r24, 0x00	; 0
    4fd0:	d1 f6       	brne	.-76     	; 0x4f86 <HAL_LCD_sendCommand+0x3a6>
    4fd2:	28 c0       	rjmp	.+80     	; 0x5024 <HAL_LCD_sendCommand+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4fd4:	8e 01       	movw	r16, r28
    4fd6:	07 5a       	subi	r16, 0xA7	; 167
    4fd8:	1f 4f       	sbci	r17, 0xFF	; 255
    4fda:	fe 01       	movw	r30, r28
    4fdc:	e5 5a       	subi	r30, 0xA5	; 165
    4fde:	ff 4f       	sbci	r31, 0xFF	; 255
    4fe0:	60 81       	ld	r22, Z
    4fe2:	71 81       	ldd	r23, Z+1	; 0x01
    4fe4:	82 81       	ldd	r24, Z+2	; 0x02
    4fe6:	93 81       	ldd	r25, Z+3	; 0x03
    4fe8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fec:	dc 01       	movw	r26, r24
    4fee:	cb 01       	movw	r24, r22
    4ff0:	f8 01       	movw	r30, r16
    4ff2:	91 83       	std	Z+1, r25	; 0x01
    4ff4:	80 83       	st	Z, r24
    4ff6:	de 01       	movw	r26, r28
    4ff8:	ab 5a       	subi	r26, 0xAB	; 171
    4ffa:	bf 4f       	sbci	r27, 0xFF	; 255
    4ffc:	fe 01       	movw	r30, r28
    4ffe:	e7 5a       	subi	r30, 0xA7	; 167
    5000:	ff 4f       	sbci	r31, 0xFF	; 255
    5002:	80 81       	ld	r24, Z
    5004:	91 81       	ldd	r25, Z+1	; 0x01
    5006:	11 96       	adiw	r26, 0x01	; 1
    5008:	9c 93       	st	X, r25
    500a:	8e 93       	st	-X, r24
    500c:	fe 01       	movw	r30, r28
    500e:	eb 5a       	subi	r30, 0xAB	; 171
    5010:	ff 4f       	sbci	r31, 0xFF	; 255
    5012:	80 81       	ld	r24, Z
    5014:	91 81       	ldd	r25, Z+1	; 0x01
    5016:	01 97       	sbiw	r24, 0x01	; 1
    5018:	f1 f7       	brne	.-4      	; 0x5016 <HAL_LCD_sendCommand+0x436>
    501a:	fe 01       	movw	r30, r28
    501c:	eb 5a       	subi	r30, 0xAB	; 171
    501e:	ff 4f       	sbci	r31, 0xFF	; 255
    5020:	91 83       	std	Z+1, r25	; 0x01
    5022:	80 83       	st	Z, r24
		_delay_ms(1);
		u8LocalReturn = MCAL_Dio_WritePin(&LCD_E_interface, PIN_LOW);
		_delay_ms(1);
	#elif (LCD_DATA_BITS_MODE == 4)
	#ifdef LOWER_PORT_PINS
		S_Dio LCD_DATA_interface = {LCD_DATA_PORT, (LCD_D4_PIN | LCD_D5_PIN | LCD_D6_PIN |LCD_D7_PIN), OUTPUT};
    5024:	ce 01       	movw	r24, r28
    5026:	88 58       	subi	r24, 0x88	; 136
    5028:	9f 4f       	sbci	r25, 0xFF	; 255
    502a:	ca 57       	subi	r28, 0x7A	; 122
    502c:	df 4f       	sbci	r29, 0xFF	; 255
    502e:	99 83       	std	Y+1, r25	; 0x01
    5030:	88 83       	st	Y, r24
    5032:	c6 58       	subi	r28, 0x86	; 134
    5034:	d0 40       	sbci	r29, 0x00	; 0
    5036:	80 eb       	ldi	r24, 0xB0	; 176
    5038:	91 e0       	ldi	r25, 0x01	; 1
    503a:	c8 57       	subi	r28, 0x78	; 120
    503c:	df 4f       	sbci	r29, 0xFF	; 255
    503e:	99 83       	std	Y+1, r25	; 0x01
    5040:	88 83       	st	Y, r24
    5042:	c8 58       	subi	r28, 0x88	; 136
    5044:	d0 40       	sbci	r29, 0x00	; 0
    5046:	93 e0       	ldi	r25, 0x03	; 3
    5048:	c6 57       	subi	r28, 0x76	; 118
    504a:	df 4f       	sbci	r29, 0xFF	; 255
    504c:	98 83       	st	Y, r25
    504e:	ca 58       	subi	r28, 0x8A	; 138
    5050:	d0 40       	sbci	r29, 0x00	; 0
    5052:	c8 57       	subi	r28, 0x78	; 120
    5054:	df 4f       	sbci	r29, 0xFF	; 255
    5056:	e8 81       	ld	r30, Y
    5058:	f9 81       	ldd	r31, Y+1	; 0x01
    505a:	c8 58       	subi	r28, 0x88	; 136
    505c:	d0 40       	sbci	r29, 0x00	; 0
    505e:	00 80       	ld	r0, Z
    5060:	c8 57       	subi	r28, 0x78	; 120
    5062:	df 4f       	sbci	r29, 0xFF	; 255
    5064:	88 81       	ld	r24, Y
    5066:	99 81       	ldd	r25, Y+1	; 0x01
    5068:	c8 58       	subi	r28, 0x88	; 136
    506a:	d0 40       	sbci	r29, 0x00	; 0
    506c:	01 96       	adiw	r24, 0x01	; 1
    506e:	c8 57       	subi	r28, 0x78	; 120
    5070:	df 4f       	sbci	r29, 0xFF	; 255
    5072:	99 83       	std	Y+1, r25	; 0x01
    5074:	88 83       	st	Y, r24
    5076:	c8 58       	subi	r28, 0x88	; 136
    5078:	d0 40       	sbci	r29, 0x00	; 0
    507a:	ca 57       	subi	r28, 0x7A	; 122
    507c:	df 4f       	sbci	r29, 0xFF	; 255
    507e:	e8 81       	ld	r30, Y
    5080:	f9 81       	ldd	r31, Y+1	; 0x01
    5082:	c6 58       	subi	r28, 0x86	; 134
    5084:	d0 40       	sbci	r29, 0x00	; 0
    5086:	00 82       	st	Z, r0
    5088:	ca 57       	subi	r28, 0x7A	; 122
    508a:	df 4f       	sbci	r29, 0xFF	; 255
    508c:	88 81       	ld	r24, Y
    508e:	99 81       	ldd	r25, Y+1	; 0x01
    5090:	c6 58       	subi	r28, 0x86	; 134
    5092:	d0 40       	sbci	r29, 0x00	; 0
    5094:	01 96       	adiw	r24, 0x01	; 1
    5096:	ca 57       	subi	r28, 0x7A	; 122
    5098:	df 4f       	sbci	r29, 0xFF	; 255
    509a:	99 83       	std	Y+1, r25	; 0x01
    509c:	88 83       	st	Y, r24
    509e:	c6 58       	subi	r28, 0x86	; 134
    50a0:	d0 40       	sbci	r29, 0x00	; 0
    50a2:	c6 57       	subi	r28, 0x76	; 118
    50a4:	df 4f       	sbci	r29, 0xFF	; 255
    50a6:	98 81       	ld	r25, Y
    50a8:	ca 58       	subi	r28, 0x8A	; 138
    50aa:	d0 40       	sbci	r29, 0x00	; 0
    50ac:	91 50       	subi	r25, 0x01	; 1
    50ae:	c6 57       	subi	r28, 0x76	; 118
    50b0:	df 4f       	sbci	r29, 0xFF	; 255
    50b2:	98 83       	st	Y, r25
    50b4:	ca 58       	subi	r28, 0x8A	; 138
    50b6:	d0 40       	sbci	r29, 0x00	; 0
    50b8:	c6 57       	subi	r28, 0x76	; 118
    50ba:	df 4f       	sbci	r29, 0xFF	; 255
    50bc:	e8 81       	ld	r30, Y
    50be:	ca 58       	subi	r28, 0x8A	; 138
    50c0:	d0 40       	sbci	r29, 0x00	; 0
    50c2:	ee 23       	and	r30, r30
    50c4:	31 f6       	brne	.-116    	; 0x5052 <HAL_LCD_sendCommand+0x472>
		MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D4_PIN, GET_BIT(command, 4));
    50c6:	fe 01       	movw	r30, r28
    50c8:	e5 58       	subi	r30, 0x85	; 133
    50ca:	ff 4f       	sbci	r31, 0xFF	; 255
    50cc:	80 81       	ld	r24, Z
    50ce:	85 95       	asr	r24
    50d0:	85 95       	asr	r24
    50d2:	85 95       	asr	r24
    50d4:	85 95       	asr	r24
    50d6:	28 2f       	mov	r18, r24
    50d8:	21 70       	andi	r18, 0x01	; 1
    50da:	ce 01       	movw	r24, r28
    50dc:	88 58       	subi	r24, 0x88	; 136
    50de:	9f 4f       	sbci	r25, 0xFF	; 255
    50e0:	61 e0       	ldi	r22, 0x01	; 1
    50e2:	42 2f       	mov	r20, r18
    50e4:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <MCAL_Dio_WriteSinglePin>
		MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D5_PIN, GET_BIT(command, 5));
    50e8:	fe 01       	movw	r30, r28
    50ea:	e5 58       	subi	r30, 0x85	; 133
    50ec:	ff 4f       	sbci	r31, 0xFF	; 255
    50ee:	80 81       	ld	r24, Z
    50f0:	85 95       	asr	r24
    50f2:	85 95       	asr	r24
    50f4:	85 95       	asr	r24
    50f6:	85 95       	asr	r24
    50f8:	85 95       	asr	r24
    50fa:	28 2f       	mov	r18, r24
    50fc:	21 70       	andi	r18, 0x01	; 1
    50fe:	ce 01       	movw	r24, r28
    5100:	88 58       	subi	r24, 0x88	; 136
    5102:	9f 4f       	sbci	r25, 0xFF	; 255
    5104:	62 e0       	ldi	r22, 0x02	; 2
    5106:	42 2f       	mov	r20, r18
    5108:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <MCAL_Dio_WriteSinglePin>
		MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D6_PIN, GET_BIT(command, 6));
    510c:	fe 01       	movw	r30, r28
    510e:	e5 58       	subi	r30, 0x85	; 133
    5110:	ff 4f       	sbci	r31, 0xFF	; 255
    5112:	80 81       	ld	r24, Z
    5114:	86 fb       	bst	r24, 6
    5116:	88 0f       	add	r24, r24
    5118:	88 0b       	sbc	r24, r24
    511a:	80 f9       	bld	r24, 0
    511c:	28 2f       	mov	r18, r24
    511e:	21 70       	andi	r18, 0x01	; 1
    5120:	ce 01       	movw	r24, r28
    5122:	88 58       	subi	r24, 0x88	; 136
    5124:	9f 4f       	sbci	r25, 0xFF	; 255
    5126:	64 e0       	ldi	r22, 0x04	; 4
    5128:	42 2f       	mov	r20, r18
    512a:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <MCAL_Dio_WriteSinglePin>
		MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D7_PIN, GET_BIT(command, 7));
    512e:	fe 01       	movw	r30, r28
    5130:	e5 58       	subi	r30, 0x85	; 133
    5132:	ff 4f       	sbci	r31, 0xFF	; 255
    5134:	80 81       	ld	r24, Z
    5136:	28 2f       	mov	r18, r24
    5138:	22 1f       	adc	r18, r18
    513a:	22 27       	eor	r18, r18
    513c:	22 1f       	adc	r18, r18
    513e:	ce 01       	movw	r24, r28
    5140:	88 58       	subi	r24, 0x88	; 136
    5142:	9f 4f       	sbci	r25, 0xFF	; 255
    5144:	60 e1       	ldi	r22, 0x10	; 16
    5146:	42 2f       	mov	r20, r18
    5148:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <MCAL_Dio_WriteSinglePin>
    514c:	fe 01       	movw	r30, r28
    514e:	ef 5a       	subi	r30, 0xAF	; 175
    5150:	ff 4f       	sbci	r31, 0xFF	; 255
    5152:	80 e0       	ldi	r24, 0x00	; 0
    5154:	90 e0       	ldi	r25, 0x00	; 0
    5156:	a0 e8       	ldi	r26, 0x80	; 128
    5158:	bf e3       	ldi	r27, 0x3F	; 63
    515a:	80 83       	st	Z, r24
    515c:	91 83       	std	Z+1, r25	; 0x01
    515e:	a2 83       	std	Z+2, r26	; 0x02
    5160:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5162:	8e 01       	movw	r16, r28
    5164:	03 5b       	subi	r16, 0xB3	; 179
    5166:	1f 4f       	sbci	r17, 0xFF	; 255
    5168:	fe 01       	movw	r30, r28
    516a:	ef 5a       	subi	r30, 0xAF	; 175
    516c:	ff 4f       	sbci	r31, 0xFF	; 255
    516e:	60 81       	ld	r22, Z
    5170:	71 81       	ldd	r23, Z+1	; 0x01
    5172:	82 81       	ldd	r24, Z+2	; 0x02
    5174:	93 81       	ldd	r25, Z+3	; 0x03
    5176:	20 e0       	ldi	r18, 0x00	; 0
    5178:	30 e0       	ldi	r19, 0x00	; 0
    517a:	4a e7       	ldi	r20, 0x7A	; 122
    517c:	55 e4       	ldi	r21, 0x45	; 69
    517e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5182:	dc 01       	movw	r26, r24
    5184:	cb 01       	movw	r24, r22
    5186:	f8 01       	movw	r30, r16
    5188:	80 83       	st	Z, r24
    518a:	91 83       	std	Z+1, r25	; 0x01
    518c:	a2 83       	std	Z+2, r26	; 0x02
    518e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5190:	fe 01       	movw	r30, r28
    5192:	e3 5b       	subi	r30, 0xB3	; 179
    5194:	ff 4f       	sbci	r31, 0xFF	; 255
    5196:	60 81       	ld	r22, Z
    5198:	71 81       	ldd	r23, Z+1	; 0x01
    519a:	82 81       	ldd	r24, Z+2	; 0x02
    519c:	93 81       	ldd	r25, Z+3	; 0x03
    519e:	20 e0       	ldi	r18, 0x00	; 0
    51a0:	30 e0       	ldi	r19, 0x00	; 0
    51a2:	40 e8       	ldi	r20, 0x80	; 128
    51a4:	5f e3       	ldi	r21, 0x3F	; 63
    51a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    51aa:	88 23       	and	r24, r24
    51ac:	44 f4       	brge	.+16     	; 0x51be <HAL_LCD_sendCommand+0x5de>
		__ticks = 1;
    51ae:	fe 01       	movw	r30, r28
    51b0:	e5 5b       	subi	r30, 0xB5	; 181
    51b2:	ff 4f       	sbci	r31, 0xFF	; 255
    51b4:	81 e0       	ldi	r24, 0x01	; 1
    51b6:	90 e0       	ldi	r25, 0x00	; 0
    51b8:	91 83       	std	Z+1, r25	; 0x01
    51ba:	80 83       	st	Z, r24
    51bc:	64 c0       	rjmp	.+200    	; 0x5286 <HAL_LCD_sendCommand+0x6a6>
	else if (__tmp > 65535)
    51be:	fe 01       	movw	r30, r28
    51c0:	e3 5b       	subi	r30, 0xB3	; 179
    51c2:	ff 4f       	sbci	r31, 0xFF	; 255
    51c4:	60 81       	ld	r22, Z
    51c6:	71 81       	ldd	r23, Z+1	; 0x01
    51c8:	82 81       	ldd	r24, Z+2	; 0x02
    51ca:	93 81       	ldd	r25, Z+3	; 0x03
    51cc:	20 e0       	ldi	r18, 0x00	; 0
    51ce:	3f ef       	ldi	r19, 0xFF	; 255
    51d0:	4f e7       	ldi	r20, 0x7F	; 127
    51d2:	57 e4       	ldi	r21, 0x47	; 71
    51d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    51d8:	18 16       	cp	r1, r24
    51da:	0c f0       	brlt	.+2      	; 0x51de <HAL_LCD_sendCommand+0x5fe>
    51dc:	43 c0       	rjmp	.+134    	; 0x5264 <HAL_LCD_sendCommand+0x684>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51de:	fe 01       	movw	r30, r28
    51e0:	ef 5a       	subi	r30, 0xAF	; 175
    51e2:	ff 4f       	sbci	r31, 0xFF	; 255
    51e4:	60 81       	ld	r22, Z
    51e6:	71 81       	ldd	r23, Z+1	; 0x01
    51e8:	82 81       	ldd	r24, Z+2	; 0x02
    51ea:	93 81       	ldd	r25, Z+3	; 0x03
    51ec:	20 e0       	ldi	r18, 0x00	; 0
    51ee:	30 e0       	ldi	r19, 0x00	; 0
    51f0:	40 e2       	ldi	r20, 0x20	; 32
    51f2:	51 e4       	ldi	r21, 0x41	; 65
    51f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51f8:	dc 01       	movw	r26, r24
    51fa:	cb 01       	movw	r24, r22
    51fc:	8e 01       	movw	r16, r28
    51fe:	05 5b       	subi	r16, 0xB5	; 181
    5200:	1f 4f       	sbci	r17, 0xFF	; 255
    5202:	bc 01       	movw	r22, r24
    5204:	cd 01       	movw	r24, r26
    5206:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    520a:	dc 01       	movw	r26, r24
    520c:	cb 01       	movw	r24, r22
    520e:	f8 01       	movw	r30, r16
    5210:	91 83       	std	Z+1, r25	; 0x01
    5212:	80 83       	st	Z, r24
    5214:	1f c0       	rjmp	.+62     	; 0x5254 <HAL_LCD_sendCommand+0x674>
    5216:	fe 01       	movw	r30, r28
    5218:	e7 5b       	subi	r30, 0xB7	; 183
    521a:	ff 4f       	sbci	r31, 0xFF	; 255
    521c:	80 e9       	ldi	r24, 0x90	; 144
    521e:	91 e0       	ldi	r25, 0x01	; 1
    5220:	91 83       	std	Z+1, r25	; 0x01
    5222:	80 83       	st	Z, r24
    5224:	fe 01       	movw	r30, r28
    5226:	e7 5b       	subi	r30, 0xB7	; 183
    5228:	ff 4f       	sbci	r31, 0xFF	; 255
    522a:	80 81       	ld	r24, Z
    522c:	91 81       	ldd	r25, Z+1	; 0x01
    522e:	01 97       	sbiw	r24, 0x01	; 1
    5230:	f1 f7       	brne	.-4      	; 0x522e <HAL_LCD_sendCommand+0x64e>
    5232:	fe 01       	movw	r30, r28
    5234:	e7 5b       	subi	r30, 0xB7	; 183
    5236:	ff 4f       	sbci	r31, 0xFF	; 255
    5238:	91 83       	std	Z+1, r25	; 0x01
    523a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    523c:	de 01       	movw	r26, r28
    523e:	a5 5b       	subi	r26, 0xB5	; 181
    5240:	bf 4f       	sbci	r27, 0xFF	; 255
    5242:	fe 01       	movw	r30, r28
    5244:	e5 5b       	subi	r30, 0xB5	; 181
    5246:	ff 4f       	sbci	r31, 0xFF	; 255
    5248:	80 81       	ld	r24, Z
    524a:	91 81       	ldd	r25, Z+1	; 0x01
    524c:	01 97       	sbiw	r24, 0x01	; 1
    524e:	11 96       	adiw	r26, 0x01	; 1
    5250:	9c 93       	st	X, r25
    5252:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5254:	fe 01       	movw	r30, r28
    5256:	e5 5b       	subi	r30, 0xB5	; 181
    5258:	ff 4f       	sbci	r31, 0xFF	; 255
    525a:	80 81       	ld	r24, Z
    525c:	91 81       	ldd	r25, Z+1	; 0x01
    525e:	00 97       	sbiw	r24, 0x00	; 0
    5260:	d1 f6       	brne	.-76     	; 0x5216 <HAL_LCD_sendCommand+0x636>
    5262:	27 c0       	rjmp	.+78     	; 0x52b2 <HAL_LCD_sendCommand+0x6d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5264:	8e 01       	movw	r16, r28
    5266:	05 5b       	subi	r16, 0xB5	; 181
    5268:	1f 4f       	sbci	r17, 0xFF	; 255
    526a:	fe 01       	movw	r30, r28
    526c:	e3 5b       	subi	r30, 0xB3	; 179
    526e:	ff 4f       	sbci	r31, 0xFF	; 255
    5270:	60 81       	ld	r22, Z
    5272:	71 81       	ldd	r23, Z+1	; 0x01
    5274:	82 81       	ldd	r24, Z+2	; 0x02
    5276:	93 81       	ldd	r25, Z+3	; 0x03
    5278:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    527c:	dc 01       	movw	r26, r24
    527e:	cb 01       	movw	r24, r22
    5280:	f8 01       	movw	r30, r16
    5282:	91 83       	std	Z+1, r25	; 0x01
    5284:	80 83       	st	Z, r24
    5286:	de 01       	movw	r26, r28
    5288:	a9 5b       	subi	r26, 0xB9	; 185
    528a:	bf 4f       	sbci	r27, 0xFF	; 255
    528c:	fe 01       	movw	r30, r28
    528e:	e5 5b       	subi	r30, 0xB5	; 181
    5290:	ff 4f       	sbci	r31, 0xFF	; 255
    5292:	80 81       	ld	r24, Z
    5294:	91 81       	ldd	r25, Z+1	; 0x01
    5296:	8d 93       	st	X+, r24
    5298:	9c 93       	st	X, r25
    529a:	fe 01       	movw	r30, r28
    529c:	e9 5b       	subi	r30, 0xB9	; 185
    529e:	ff 4f       	sbci	r31, 0xFF	; 255
    52a0:	80 81       	ld	r24, Z
    52a2:	91 81       	ldd	r25, Z+1	; 0x01
    52a4:	01 97       	sbiw	r24, 0x01	; 1
    52a6:	f1 f7       	brne	.-4      	; 0x52a4 <HAL_LCD_sendCommand+0x6c4>
    52a8:	fe 01       	movw	r30, r28
    52aa:	e9 5b       	subi	r30, 0xB9	; 185
    52ac:	ff 4f       	sbci	r31, 0xFF	; 255
    52ae:	91 83       	std	Z+1, r25	; 0x01
    52b0:	80 83       	st	Z, r24
		MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D0_PIN, GET_BIT(command, 4));
		MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D1_PIN, GET_BIT(command, 5));
		MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D2_PIN, GET_BIT(command, 6));
		MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D3_PIN, GET_BIT(command, 7));
	#endif
	u8LocalReturn = MCAL_Dio_WritePin(&LCD_E_interface, PIN_HIGH);
    52b2:	ce 01       	movw	r24, r28
    52b4:	8b 58       	subi	r24, 0x8B	; 139
    52b6:	9f 4f       	sbci	r25, 0xFF	; 255
    52b8:	6f ef       	ldi	r22, 0xFF	; 255
    52ba:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <MCAL_Dio_WritePin>
    52be:	fe 01       	movw	r30, r28
    52c0:	ef 58       	subi	r30, 0x8F	; 143
    52c2:	ff 4f       	sbci	r31, 0xFF	; 255
    52c4:	80 83       	st	Z, r24
    52c6:	fe 01       	movw	r30, r28
    52c8:	ed 5b       	subi	r30, 0xBD	; 189
    52ca:	ff 4f       	sbci	r31, 0xFF	; 255
    52cc:	80 e0       	ldi	r24, 0x00	; 0
    52ce:	90 e0       	ldi	r25, 0x00	; 0
    52d0:	a0 e8       	ldi	r26, 0x80	; 128
    52d2:	bf e3       	ldi	r27, 0x3F	; 63
    52d4:	80 83       	st	Z, r24
    52d6:	91 83       	std	Z+1, r25	; 0x01
    52d8:	a2 83       	std	Z+2, r26	; 0x02
    52da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    52dc:	8e 01       	movw	r16, r28
    52de:	01 5c       	subi	r16, 0xC1	; 193
    52e0:	1f 4f       	sbci	r17, 0xFF	; 255
    52e2:	fe 01       	movw	r30, r28
    52e4:	ed 5b       	subi	r30, 0xBD	; 189
    52e6:	ff 4f       	sbci	r31, 0xFF	; 255
    52e8:	60 81       	ld	r22, Z
    52ea:	71 81       	ldd	r23, Z+1	; 0x01
    52ec:	82 81       	ldd	r24, Z+2	; 0x02
    52ee:	93 81       	ldd	r25, Z+3	; 0x03
    52f0:	20 e0       	ldi	r18, 0x00	; 0
    52f2:	30 e0       	ldi	r19, 0x00	; 0
    52f4:	4a e7       	ldi	r20, 0x7A	; 122
    52f6:	55 e4       	ldi	r21, 0x45	; 69
    52f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52fc:	dc 01       	movw	r26, r24
    52fe:	cb 01       	movw	r24, r22
    5300:	f8 01       	movw	r30, r16
    5302:	80 83       	st	Z, r24
    5304:	91 83       	std	Z+1, r25	; 0x01
    5306:	a2 83       	std	Z+2, r26	; 0x02
    5308:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    530a:	fe 01       	movw	r30, r28
    530c:	ff 96       	adiw	r30, 0x3f	; 63
    530e:	60 81       	ld	r22, Z
    5310:	71 81       	ldd	r23, Z+1	; 0x01
    5312:	82 81       	ldd	r24, Z+2	; 0x02
    5314:	93 81       	ldd	r25, Z+3	; 0x03
    5316:	20 e0       	ldi	r18, 0x00	; 0
    5318:	30 e0       	ldi	r19, 0x00	; 0
    531a:	40 e8       	ldi	r20, 0x80	; 128
    531c:	5f e3       	ldi	r21, 0x3F	; 63
    531e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5322:	88 23       	and	r24, r24
    5324:	2c f4       	brge	.+10     	; 0x5330 <HAL_LCD_sendCommand+0x750>
		__ticks = 1;
    5326:	81 e0       	ldi	r24, 0x01	; 1
    5328:	90 e0       	ldi	r25, 0x00	; 0
    532a:	9e af       	std	Y+62, r25	; 0x3e
    532c:	8d af       	std	Y+61, r24	; 0x3d
    532e:	46 c0       	rjmp	.+140    	; 0x53bc <HAL_LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    5330:	fe 01       	movw	r30, r28
    5332:	ff 96       	adiw	r30, 0x3f	; 63
    5334:	60 81       	ld	r22, Z
    5336:	71 81       	ldd	r23, Z+1	; 0x01
    5338:	82 81       	ldd	r24, Z+2	; 0x02
    533a:	93 81       	ldd	r25, Z+3	; 0x03
    533c:	20 e0       	ldi	r18, 0x00	; 0
    533e:	3f ef       	ldi	r19, 0xFF	; 255
    5340:	4f e7       	ldi	r20, 0x7F	; 127
    5342:	57 e4       	ldi	r21, 0x47	; 71
    5344:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5348:	18 16       	cp	r1, r24
    534a:	64 f5       	brge	.+88     	; 0x53a4 <HAL_LCD_sendCommand+0x7c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    534c:	fe 01       	movw	r30, r28
    534e:	ed 5b       	subi	r30, 0xBD	; 189
    5350:	ff 4f       	sbci	r31, 0xFF	; 255
    5352:	60 81       	ld	r22, Z
    5354:	71 81       	ldd	r23, Z+1	; 0x01
    5356:	82 81       	ldd	r24, Z+2	; 0x02
    5358:	93 81       	ldd	r25, Z+3	; 0x03
    535a:	20 e0       	ldi	r18, 0x00	; 0
    535c:	30 e0       	ldi	r19, 0x00	; 0
    535e:	40 e2       	ldi	r20, 0x20	; 32
    5360:	51 e4       	ldi	r21, 0x41	; 65
    5362:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5366:	dc 01       	movw	r26, r24
    5368:	cb 01       	movw	r24, r22
    536a:	bc 01       	movw	r22, r24
    536c:	cd 01       	movw	r24, r26
    536e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5372:	dc 01       	movw	r26, r24
    5374:	cb 01       	movw	r24, r22
    5376:	9e af       	std	Y+62, r25	; 0x3e
    5378:	8d af       	std	Y+61, r24	; 0x3d
    537a:	0f c0       	rjmp	.+30     	; 0x539a <HAL_LCD_sendCommand+0x7ba>
    537c:	80 e9       	ldi	r24, 0x90	; 144
    537e:	91 e0       	ldi	r25, 0x01	; 1
    5380:	9c af       	std	Y+60, r25	; 0x3c
    5382:	8b af       	std	Y+59, r24	; 0x3b
    5384:	8b ad       	ldd	r24, Y+59	; 0x3b
    5386:	9c ad       	ldd	r25, Y+60	; 0x3c
    5388:	01 97       	sbiw	r24, 0x01	; 1
    538a:	f1 f7       	brne	.-4      	; 0x5388 <HAL_LCD_sendCommand+0x7a8>
    538c:	9c af       	std	Y+60, r25	; 0x3c
    538e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5390:	8d ad       	ldd	r24, Y+61	; 0x3d
    5392:	9e ad       	ldd	r25, Y+62	; 0x3e
    5394:	01 97       	sbiw	r24, 0x01	; 1
    5396:	9e af       	std	Y+62, r25	; 0x3e
    5398:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    539a:	8d ad       	ldd	r24, Y+61	; 0x3d
    539c:	9e ad       	ldd	r25, Y+62	; 0x3e
    539e:	00 97       	sbiw	r24, 0x00	; 0
    53a0:	69 f7       	brne	.-38     	; 0x537c <HAL_LCD_sendCommand+0x79c>
    53a2:	16 c0       	rjmp	.+44     	; 0x53d0 <HAL_LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53a4:	fe 01       	movw	r30, r28
    53a6:	ff 96       	adiw	r30, 0x3f	; 63
    53a8:	60 81       	ld	r22, Z
    53aa:	71 81       	ldd	r23, Z+1	; 0x01
    53ac:	82 81       	ldd	r24, Z+2	; 0x02
    53ae:	93 81       	ldd	r25, Z+3	; 0x03
    53b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53b4:	dc 01       	movw	r26, r24
    53b6:	cb 01       	movw	r24, r22
    53b8:	9e af       	std	Y+62, r25	; 0x3e
    53ba:	8d af       	std	Y+61, r24	; 0x3d
    53bc:	8d ad       	ldd	r24, Y+61	; 0x3d
    53be:	9e ad       	ldd	r25, Y+62	; 0x3e
    53c0:	9a af       	std	Y+58, r25	; 0x3a
    53c2:	89 af       	std	Y+57, r24	; 0x39
    53c4:	89 ad       	ldd	r24, Y+57	; 0x39
    53c6:	9a ad       	ldd	r25, Y+58	; 0x3a
    53c8:	01 97       	sbiw	r24, 0x01	; 1
    53ca:	f1 f7       	brne	.-4      	; 0x53c8 <HAL_LCD_sendCommand+0x7e8>
    53cc:	9a af       	std	Y+58, r25	; 0x3a
    53ce:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	u8LocalReturn = MCAL_Dio_WritePin(&LCD_E_interface, PIN_LOW);
    53d0:	ce 01       	movw	r24, r28
    53d2:	8b 58       	subi	r24, 0x8B	; 139
    53d4:	9f 4f       	sbci	r25, 0xFF	; 255
    53d6:	60 e0       	ldi	r22, 0x00	; 0
    53d8:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <MCAL_Dio_WritePin>
    53dc:	fe 01       	movw	r30, r28
    53de:	ef 58       	subi	r30, 0x8F	; 143
    53e0:	ff 4f       	sbci	r31, 0xFF	; 255
    53e2:	80 83       	st	Z, r24
    53e4:	80 e0       	ldi	r24, 0x00	; 0
    53e6:	90 e0       	ldi	r25, 0x00	; 0
    53e8:	a0 e8       	ldi	r26, 0x80	; 128
    53ea:	bf e3       	ldi	r27, 0x3F	; 63
    53ec:	8d ab       	std	Y+53, r24	; 0x35
    53ee:	9e ab       	std	Y+54, r25	; 0x36
    53f0:	af ab       	std	Y+55, r26	; 0x37
    53f2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53f4:	6d a9       	ldd	r22, Y+53	; 0x35
    53f6:	7e a9       	ldd	r23, Y+54	; 0x36
    53f8:	8f a9       	ldd	r24, Y+55	; 0x37
    53fa:	98 ad       	ldd	r25, Y+56	; 0x38
    53fc:	20 e0       	ldi	r18, 0x00	; 0
    53fe:	30 e0       	ldi	r19, 0x00	; 0
    5400:	4a e7       	ldi	r20, 0x7A	; 122
    5402:	55 e4       	ldi	r21, 0x45	; 69
    5404:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5408:	dc 01       	movw	r26, r24
    540a:	cb 01       	movw	r24, r22
    540c:	89 ab       	std	Y+49, r24	; 0x31
    540e:	9a ab       	std	Y+50, r25	; 0x32
    5410:	ab ab       	std	Y+51, r26	; 0x33
    5412:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5414:	69 a9       	ldd	r22, Y+49	; 0x31
    5416:	7a a9       	ldd	r23, Y+50	; 0x32
    5418:	8b a9       	ldd	r24, Y+51	; 0x33
    541a:	9c a9       	ldd	r25, Y+52	; 0x34
    541c:	20 e0       	ldi	r18, 0x00	; 0
    541e:	30 e0       	ldi	r19, 0x00	; 0
    5420:	40 e8       	ldi	r20, 0x80	; 128
    5422:	5f e3       	ldi	r21, 0x3F	; 63
    5424:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5428:	88 23       	and	r24, r24
    542a:	2c f4       	brge	.+10     	; 0x5436 <HAL_LCD_sendCommand+0x856>
		__ticks = 1;
    542c:	81 e0       	ldi	r24, 0x01	; 1
    542e:	90 e0       	ldi	r25, 0x00	; 0
    5430:	98 ab       	std	Y+48, r25	; 0x30
    5432:	8f a7       	std	Y+47, r24	; 0x2f
    5434:	3f c0       	rjmp	.+126    	; 0x54b4 <HAL_LCD_sendCommand+0x8d4>
	else if (__tmp > 65535)
    5436:	69 a9       	ldd	r22, Y+49	; 0x31
    5438:	7a a9       	ldd	r23, Y+50	; 0x32
    543a:	8b a9       	ldd	r24, Y+51	; 0x33
    543c:	9c a9       	ldd	r25, Y+52	; 0x34
    543e:	20 e0       	ldi	r18, 0x00	; 0
    5440:	3f ef       	ldi	r19, 0xFF	; 255
    5442:	4f e7       	ldi	r20, 0x7F	; 127
    5444:	57 e4       	ldi	r21, 0x47	; 71
    5446:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    544a:	18 16       	cp	r1, r24
    544c:	4c f5       	brge	.+82     	; 0x54a0 <HAL_LCD_sendCommand+0x8c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    544e:	6d a9       	ldd	r22, Y+53	; 0x35
    5450:	7e a9       	ldd	r23, Y+54	; 0x36
    5452:	8f a9       	ldd	r24, Y+55	; 0x37
    5454:	98 ad       	ldd	r25, Y+56	; 0x38
    5456:	20 e0       	ldi	r18, 0x00	; 0
    5458:	30 e0       	ldi	r19, 0x00	; 0
    545a:	40 e2       	ldi	r20, 0x20	; 32
    545c:	51 e4       	ldi	r21, 0x41	; 65
    545e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5462:	dc 01       	movw	r26, r24
    5464:	cb 01       	movw	r24, r22
    5466:	bc 01       	movw	r22, r24
    5468:	cd 01       	movw	r24, r26
    546a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    546e:	dc 01       	movw	r26, r24
    5470:	cb 01       	movw	r24, r22
    5472:	98 ab       	std	Y+48, r25	; 0x30
    5474:	8f a7       	std	Y+47, r24	; 0x2f
    5476:	0f c0       	rjmp	.+30     	; 0x5496 <HAL_LCD_sendCommand+0x8b6>
    5478:	80 e9       	ldi	r24, 0x90	; 144
    547a:	91 e0       	ldi	r25, 0x01	; 1
    547c:	9e a7       	std	Y+46, r25	; 0x2e
    547e:	8d a7       	std	Y+45, r24	; 0x2d
    5480:	8d a5       	ldd	r24, Y+45	; 0x2d
    5482:	9e a5       	ldd	r25, Y+46	; 0x2e
    5484:	01 97       	sbiw	r24, 0x01	; 1
    5486:	f1 f7       	brne	.-4      	; 0x5484 <HAL_LCD_sendCommand+0x8a4>
    5488:	9e a7       	std	Y+46, r25	; 0x2e
    548a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    548c:	8f a5       	ldd	r24, Y+47	; 0x2f
    548e:	98 a9       	ldd	r25, Y+48	; 0x30
    5490:	01 97       	sbiw	r24, 0x01	; 1
    5492:	98 ab       	std	Y+48, r25	; 0x30
    5494:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5496:	8f a5       	ldd	r24, Y+47	; 0x2f
    5498:	98 a9       	ldd	r25, Y+48	; 0x30
    549a:	00 97       	sbiw	r24, 0x00	; 0
    549c:	69 f7       	brne	.-38     	; 0x5478 <HAL_LCD_sendCommand+0x898>
    549e:	14 c0       	rjmp	.+40     	; 0x54c8 <HAL_LCD_sendCommand+0x8e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    54a0:	69 a9       	ldd	r22, Y+49	; 0x31
    54a2:	7a a9       	ldd	r23, Y+50	; 0x32
    54a4:	8b a9       	ldd	r24, Y+51	; 0x33
    54a6:	9c a9       	ldd	r25, Y+52	; 0x34
    54a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54ac:	dc 01       	movw	r26, r24
    54ae:	cb 01       	movw	r24, r22
    54b0:	98 ab       	std	Y+48, r25	; 0x30
    54b2:	8f a7       	std	Y+47, r24	; 0x2f
    54b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    54b6:	98 a9       	ldd	r25, Y+48	; 0x30
    54b8:	9c a7       	std	Y+44, r25	; 0x2c
    54ba:	8b a7       	std	Y+43, r24	; 0x2b
    54bc:	8b a5       	ldd	r24, Y+43	; 0x2b
    54be:	9c a5       	ldd	r25, Y+44	; 0x2c
    54c0:	01 97       	sbiw	r24, 0x01	; 1
    54c2:	f1 f7       	brne	.-4      	; 0x54c0 <HAL_LCD_sendCommand+0x8e0>
    54c4:	9c a7       	std	Y+44, r25	; 0x2c
    54c6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	#ifdef LOWER_PORT_PINS
		MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D4_PIN, GET_BIT(command, 0));
    54c8:	fe 01       	movw	r30, r28
    54ca:	e5 58       	subi	r30, 0x85	; 133
    54cc:	ff 4f       	sbci	r31, 0xFF	; 255
    54ce:	80 81       	ld	r24, Z
    54d0:	28 2f       	mov	r18, r24
    54d2:	21 70       	andi	r18, 0x01	; 1
    54d4:	ce 01       	movw	r24, r28
    54d6:	88 58       	subi	r24, 0x88	; 136
    54d8:	9f 4f       	sbci	r25, 0xFF	; 255
    54da:	61 e0       	ldi	r22, 0x01	; 1
    54dc:	42 2f       	mov	r20, r18
    54de:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <MCAL_Dio_WriteSinglePin>
		MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D5_PIN, GET_BIT(command, 1));
    54e2:	fe 01       	movw	r30, r28
    54e4:	e5 58       	subi	r30, 0x85	; 133
    54e6:	ff 4f       	sbci	r31, 0xFF	; 255
    54e8:	80 81       	ld	r24, Z
    54ea:	85 95       	asr	r24
    54ec:	28 2f       	mov	r18, r24
    54ee:	21 70       	andi	r18, 0x01	; 1
    54f0:	ce 01       	movw	r24, r28
    54f2:	88 58       	subi	r24, 0x88	; 136
    54f4:	9f 4f       	sbci	r25, 0xFF	; 255
    54f6:	62 e0       	ldi	r22, 0x02	; 2
    54f8:	42 2f       	mov	r20, r18
    54fa:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <MCAL_Dio_WriteSinglePin>
		MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D6_PIN, GET_BIT(command, 2));
    54fe:	fe 01       	movw	r30, r28
    5500:	e5 58       	subi	r30, 0x85	; 133
    5502:	ff 4f       	sbci	r31, 0xFF	; 255
    5504:	80 81       	ld	r24, Z
    5506:	85 95       	asr	r24
    5508:	85 95       	asr	r24
    550a:	28 2f       	mov	r18, r24
    550c:	21 70       	andi	r18, 0x01	; 1
    550e:	ce 01       	movw	r24, r28
    5510:	88 58       	subi	r24, 0x88	; 136
    5512:	9f 4f       	sbci	r25, 0xFF	; 255
    5514:	64 e0       	ldi	r22, 0x04	; 4
    5516:	42 2f       	mov	r20, r18
    5518:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <MCAL_Dio_WriteSinglePin>
		MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D7_PIN, GET_BIT(command, 3));
    551c:	fe 01       	movw	r30, r28
    551e:	e5 58       	subi	r30, 0x85	; 133
    5520:	ff 4f       	sbci	r31, 0xFF	; 255
    5522:	80 81       	ld	r24, Z
    5524:	85 95       	asr	r24
    5526:	85 95       	asr	r24
    5528:	85 95       	asr	r24
    552a:	28 2f       	mov	r18, r24
    552c:	21 70       	andi	r18, 0x01	; 1
    552e:	ce 01       	movw	r24, r28
    5530:	88 58       	subi	r24, 0x88	; 136
    5532:	9f 4f       	sbci	r25, 0xFF	; 255
    5534:	60 e1       	ldi	r22, 0x10	; 16
    5536:	42 2f       	mov	r20, r18
    5538:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <MCAL_Dio_WriteSinglePin>
    553c:	80 e0       	ldi	r24, 0x00	; 0
    553e:	90 e0       	ldi	r25, 0x00	; 0
    5540:	a0 e8       	ldi	r26, 0x80	; 128
    5542:	bf e3       	ldi	r27, 0x3F	; 63
    5544:	8f a3       	std	Y+39, r24	; 0x27
    5546:	98 a7       	std	Y+40, r25	; 0x28
    5548:	a9 a7       	std	Y+41, r26	; 0x29
    554a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    554c:	6f a1       	ldd	r22, Y+39	; 0x27
    554e:	78 a5       	ldd	r23, Y+40	; 0x28
    5550:	89 a5       	ldd	r24, Y+41	; 0x29
    5552:	9a a5       	ldd	r25, Y+42	; 0x2a
    5554:	20 e0       	ldi	r18, 0x00	; 0
    5556:	30 e0       	ldi	r19, 0x00	; 0
    5558:	4a e7       	ldi	r20, 0x7A	; 122
    555a:	55 e4       	ldi	r21, 0x45	; 69
    555c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5560:	dc 01       	movw	r26, r24
    5562:	cb 01       	movw	r24, r22
    5564:	8b a3       	std	Y+35, r24	; 0x23
    5566:	9c a3       	std	Y+36, r25	; 0x24
    5568:	ad a3       	std	Y+37, r26	; 0x25
    556a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    556c:	6b a1       	ldd	r22, Y+35	; 0x23
    556e:	7c a1       	ldd	r23, Y+36	; 0x24
    5570:	8d a1       	ldd	r24, Y+37	; 0x25
    5572:	9e a1       	ldd	r25, Y+38	; 0x26
    5574:	20 e0       	ldi	r18, 0x00	; 0
    5576:	30 e0       	ldi	r19, 0x00	; 0
    5578:	40 e8       	ldi	r20, 0x80	; 128
    557a:	5f e3       	ldi	r21, 0x3F	; 63
    557c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5580:	88 23       	and	r24, r24
    5582:	2c f4       	brge	.+10     	; 0x558e <HAL_LCD_sendCommand+0x9ae>
		__ticks = 1;
    5584:	81 e0       	ldi	r24, 0x01	; 1
    5586:	90 e0       	ldi	r25, 0x00	; 0
    5588:	9a a3       	std	Y+34, r25	; 0x22
    558a:	89 a3       	std	Y+33, r24	; 0x21
    558c:	3f c0       	rjmp	.+126    	; 0x560c <HAL_LCD_sendCommand+0xa2c>
	else if (__tmp > 65535)
    558e:	6b a1       	ldd	r22, Y+35	; 0x23
    5590:	7c a1       	ldd	r23, Y+36	; 0x24
    5592:	8d a1       	ldd	r24, Y+37	; 0x25
    5594:	9e a1       	ldd	r25, Y+38	; 0x26
    5596:	20 e0       	ldi	r18, 0x00	; 0
    5598:	3f ef       	ldi	r19, 0xFF	; 255
    559a:	4f e7       	ldi	r20, 0x7F	; 127
    559c:	57 e4       	ldi	r21, 0x47	; 71
    559e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    55a2:	18 16       	cp	r1, r24
    55a4:	4c f5       	brge	.+82     	; 0x55f8 <HAL_LCD_sendCommand+0xa18>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    55a6:	6f a1       	ldd	r22, Y+39	; 0x27
    55a8:	78 a5       	ldd	r23, Y+40	; 0x28
    55aa:	89 a5       	ldd	r24, Y+41	; 0x29
    55ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    55ae:	20 e0       	ldi	r18, 0x00	; 0
    55b0:	30 e0       	ldi	r19, 0x00	; 0
    55b2:	40 e2       	ldi	r20, 0x20	; 32
    55b4:	51 e4       	ldi	r21, 0x41	; 65
    55b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55ba:	dc 01       	movw	r26, r24
    55bc:	cb 01       	movw	r24, r22
    55be:	bc 01       	movw	r22, r24
    55c0:	cd 01       	movw	r24, r26
    55c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55c6:	dc 01       	movw	r26, r24
    55c8:	cb 01       	movw	r24, r22
    55ca:	9a a3       	std	Y+34, r25	; 0x22
    55cc:	89 a3       	std	Y+33, r24	; 0x21
    55ce:	0f c0       	rjmp	.+30     	; 0x55ee <HAL_LCD_sendCommand+0xa0e>
    55d0:	80 e9       	ldi	r24, 0x90	; 144
    55d2:	91 e0       	ldi	r25, 0x01	; 1
    55d4:	98 a3       	std	Y+32, r25	; 0x20
    55d6:	8f 8f       	std	Y+31, r24	; 0x1f
    55d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    55da:	98 a1       	ldd	r25, Y+32	; 0x20
    55dc:	01 97       	sbiw	r24, 0x01	; 1
    55de:	f1 f7       	brne	.-4      	; 0x55dc <HAL_LCD_sendCommand+0x9fc>
    55e0:	98 a3       	std	Y+32, r25	; 0x20
    55e2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    55e4:	89 a1       	ldd	r24, Y+33	; 0x21
    55e6:	9a a1       	ldd	r25, Y+34	; 0x22
    55e8:	01 97       	sbiw	r24, 0x01	; 1
    55ea:	9a a3       	std	Y+34, r25	; 0x22
    55ec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    55ee:	89 a1       	ldd	r24, Y+33	; 0x21
    55f0:	9a a1       	ldd	r25, Y+34	; 0x22
    55f2:	00 97       	sbiw	r24, 0x00	; 0
    55f4:	69 f7       	brne	.-38     	; 0x55d0 <HAL_LCD_sendCommand+0x9f0>
    55f6:	14 c0       	rjmp	.+40     	; 0x5620 <HAL_LCD_sendCommand+0xa40>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    55f8:	6b a1       	ldd	r22, Y+35	; 0x23
    55fa:	7c a1       	ldd	r23, Y+36	; 0x24
    55fc:	8d a1       	ldd	r24, Y+37	; 0x25
    55fe:	9e a1       	ldd	r25, Y+38	; 0x26
    5600:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5604:	dc 01       	movw	r26, r24
    5606:	cb 01       	movw	r24, r22
    5608:	9a a3       	std	Y+34, r25	; 0x22
    560a:	89 a3       	std	Y+33, r24	; 0x21
    560c:	89 a1       	ldd	r24, Y+33	; 0x21
    560e:	9a a1       	ldd	r25, Y+34	; 0x22
    5610:	9e 8f       	std	Y+30, r25	; 0x1e
    5612:	8d 8f       	std	Y+29, r24	; 0x1d
    5614:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5616:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5618:	01 97       	sbiw	r24, 0x01	; 1
    561a:	f1 f7       	brne	.-4      	; 0x5618 <HAL_LCD_sendCommand+0xa38>
    561c:	9e 8f       	std	Y+30, r25	; 0x1e
    561e:	8d 8f       	std	Y+29, r24	; 0x1d
		MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D0_PIN, GET_BIT(command, 0));
		MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D1_PIN, GET_BIT(command, 1));
		MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D2_PIN, GET_BIT(command, 2));
		MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D3_PIN, GET_BIT(command, 3));
	#endif
	u8LocalReturn = MCAL_Dio_WritePin(&LCD_E_interface, PIN_HIGH);
    5620:	ce 01       	movw	r24, r28
    5622:	8b 58       	subi	r24, 0x8B	; 139
    5624:	9f 4f       	sbci	r25, 0xFF	; 255
    5626:	6f ef       	ldi	r22, 0xFF	; 255
    5628:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <MCAL_Dio_WritePin>
    562c:	fe 01       	movw	r30, r28
    562e:	ef 58       	subi	r30, 0x8F	; 143
    5630:	ff 4f       	sbci	r31, 0xFF	; 255
    5632:	80 83       	st	Z, r24
    5634:	80 e0       	ldi	r24, 0x00	; 0
    5636:	90 e0       	ldi	r25, 0x00	; 0
    5638:	a0 e8       	ldi	r26, 0x80	; 128
    563a:	bf e3       	ldi	r27, 0x3F	; 63
    563c:	89 8f       	std	Y+25, r24	; 0x19
    563e:	9a 8f       	std	Y+26, r25	; 0x1a
    5640:	ab 8f       	std	Y+27, r26	; 0x1b
    5642:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5644:	69 8d       	ldd	r22, Y+25	; 0x19
    5646:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5648:	8b 8d       	ldd	r24, Y+27	; 0x1b
    564a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    564c:	20 e0       	ldi	r18, 0x00	; 0
    564e:	30 e0       	ldi	r19, 0x00	; 0
    5650:	4a e7       	ldi	r20, 0x7A	; 122
    5652:	55 e4       	ldi	r21, 0x45	; 69
    5654:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5658:	dc 01       	movw	r26, r24
    565a:	cb 01       	movw	r24, r22
    565c:	8d 8b       	std	Y+21, r24	; 0x15
    565e:	9e 8b       	std	Y+22, r25	; 0x16
    5660:	af 8b       	std	Y+23, r26	; 0x17
    5662:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5664:	6d 89       	ldd	r22, Y+21	; 0x15
    5666:	7e 89       	ldd	r23, Y+22	; 0x16
    5668:	8f 89       	ldd	r24, Y+23	; 0x17
    566a:	98 8d       	ldd	r25, Y+24	; 0x18
    566c:	20 e0       	ldi	r18, 0x00	; 0
    566e:	30 e0       	ldi	r19, 0x00	; 0
    5670:	40 e8       	ldi	r20, 0x80	; 128
    5672:	5f e3       	ldi	r21, 0x3F	; 63
    5674:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5678:	88 23       	and	r24, r24
    567a:	2c f4       	brge	.+10     	; 0x5686 <HAL_LCD_sendCommand+0xaa6>
		__ticks = 1;
    567c:	81 e0       	ldi	r24, 0x01	; 1
    567e:	90 e0       	ldi	r25, 0x00	; 0
    5680:	9c 8b       	std	Y+20, r25	; 0x14
    5682:	8b 8b       	std	Y+19, r24	; 0x13
    5684:	3f c0       	rjmp	.+126    	; 0x5704 <HAL_LCD_sendCommand+0xb24>
	else if (__tmp > 65535)
    5686:	6d 89       	ldd	r22, Y+21	; 0x15
    5688:	7e 89       	ldd	r23, Y+22	; 0x16
    568a:	8f 89       	ldd	r24, Y+23	; 0x17
    568c:	98 8d       	ldd	r25, Y+24	; 0x18
    568e:	20 e0       	ldi	r18, 0x00	; 0
    5690:	3f ef       	ldi	r19, 0xFF	; 255
    5692:	4f e7       	ldi	r20, 0x7F	; 127
    5694:	57 e4       	ldi	r21, 0x47	; 71
    5696:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    569a:	18 16       	cp	r1, r24
    569c:	4c f5       	brge	.+82     	; 0x56f0 <HAL_LCD_sendCommand+0xb10>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    569e:	69 8d       	ldd	r22, Y+25	; 0x19
    56a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    56a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    56a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    56a6:	20 e0       	ldi	r18, 0x00	; 0
    56a8:	30 e0       	ldi	r19, 0x00	; 0
    56aa:	40 e2       	ldi	r20, 0x20	; 32
    56ac:	51 e4       	ldi	r21, 0x41	; 65
    56ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56b2:	dc 01       	movw	r26, r24
    56b4:	cb 01       	movw	r24, r22
    56b6:	bc 01       	movw	r22, r24
    56b8:	cd 01       	movw	r24, r26
    56ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56be:	dc 01       	movw	r26, r24
    56c0:	cb 01       	movw	r24, r22
    56c2:	9c 8b       	std	Y+20, r25	; 0x14
    56c4:	8b 8b       	std	Y+19, r24	; 0x13
    56c6:	0f c0       	rjmp	.+30     	; 0x56e6 <HAL_LCD_sendCommand+0xb06>
    56c8:	80 e9       	ldi	r24, 0x90	; 144
    56ca:	91 e0       	ldi	r25, 0x01	; 1
    56cc:	9a 8b       	std	Y+18, r25	; 0x12
    56ce:	89 8b       	std	Y+17, r24	; 0x11
    56d0:	89 89       	ldd	r24, Y+17	; 0x11
    56d2:	9a 89       	ldd	r25, Y+18	; 0x12
    56d4:	01 97       	sbiw	r24, 0x01	; 1
    56d6:	f1 f7       	brne	.-4      	; 0x56d4 <HAL_LCD_sendCommand+0xaf4>
    56d8:	9a 8b       	std	Y+18, r25	; 0x12
    56da:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    56dc:	8b 89       	ldd	r24, Y+19	; 0x13
    56de:	9c 89       	ldd	r25, Y+20	; 0x14
    56e0:	01 97       	sbiw	r24, 0x01	; 1
    56e2:	9c 8b       	std	Y+20, r25	; 0x14
    56e4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    56e6:	8b 89       	ldd	r24, Y+19	; 0x13
    56e8:	9c 89       	ldd	r25, Y+20	; 0x14
    56ea:	00 97       	sbiw	r24, 0x00	; 0
    56ec:	69 f7       	brne	.-38     	; 0x56c8 <HAL_LCD_sendCommand+0xae8>
    56ee:	14 c0       	rjmp	.+40     	; 0x5718 <HAL_LCD_sendCommand+0xb38>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    56f0:	6d 89       	ldd	r22, Y+21	; 0x15
    56f2:	7e 89       	ldd	r23, Y+22	; 0x16
    56f4:	8f 89       	ldd	r24, Y+23	; 0x17
    56f6:	98 8d       	ldd	r25, Y+24	; 0x18
    56f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56fc:	dc 01       	movw	r26, r24
    56fe:	cb 01       	movw	r24, r22
    5700:	9c 8b       	std	Y+20, r25	; 0x14
    5702:	8b 8b       	std	Y+19, r24	; 0x13
    5704:	8b 89       	ldd	r24, Y+19	; 0x13
    5706:	9c 89       	ldd	r25, Y+20	; 0x14
    5708:	98 8b       	std	Y+16, r25	; 0x10
    570a:	8f 87       	std	Y+15, r24	; 0x0f
    570c:	8f 85       	ldd	r24, Y+15	; 0x0f
    570e:	98 89       	ldd	r25, Y+16	; 0x10
    5710:	01 97       	sbiw	r24, 0x01	; 1
    5712:	f1 f7       	brne	.-4      	; 0x5710 <HAL_LCD_sendCommand+0xb30>
    5714:	98 8b       	std	Y+16, r25	; 0x10
    5716:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	u8LocalReturn = MCAL_Dio_WritePin(&LCD_E_interface, PIN_LOW);
    5718:	ce 01       	movw	r24, r28
    571a:	8b 58       	subi	r24, 0x8B	; 139
    571c:	9f 4f       	sbci	r25, 0xFF	; 255
    571e:	60 e0       	ldi	r22, 0x00	; 0
    5720:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <MCAL_Dio_WritePin>
    5724:	fe 01       	movw	r30, r28
    5726:	ef 58       	subi	r30, 0x8F	; 143
    5728:	ff 4f       	sbci	r31, 0xFF	; 255
    572a:	80 83       	st	Z, r24
    572c:	80 e0       	ldi	r24, 0x00	; 0
    572e:	90 e0       	ldi	r25, 0x00	; 0
    5730:	a0 e8       	ldi	r26, 0x80	; 128
    5732:	bf e3       	ldi	r27, 0x3F	; 63
    5734:	8b 87       	std	Y+11, r24	; 0x0b
    5736:	9c 87       	std	Y+12, r25	; 0x0c
    5738:	ad 87       	std	Y+13, r26	; 0x0d
    573a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    573c:	6b 85       	ldd	r22, Y+11	; 0x0b
    573e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5740:	8d 85       	ldd	r24, Y+13	; 0x0d
    5742:	9e 85       	ldd	r25, Y+14	; 0x0e
    5744:	20 e0       	ldi	r18, 0x00	; 0
    5746:	30 e0       	ldi	r19, 0x00	; 0
    5748:	4a e7       	ldi	r20, 0x7A	; 122
    574a:	55 e4       	ldi	r21, 0x45	; 69
    574c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5750:	dc 01       	movw	r26, r24
    5752:	cb 01       	movw	r24, r22
    5754:	8f 83       	std	Y+7, r24	; 0x07
    5756:	98 87       	std	Y+8, r25	; 0x08
    5758:	a9 87       	std	Y+9, r26	; 0x09
    575a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    575c:	6f 81       	ldd	r22, Y+7	; 0x07
    575e:	78 85       	ldd	r23, Y+8	; 0x08
    5760:	89 85       	ldd	r24, Y+9	; 0x09
    5762:	9a 85       	ldd	r25, Y+10	; 0x0a
    5764:	20 e0       	ldi	r18, 0x00	; 0
    5766:	30 e0       	ldi	r19, 0x00	; 0
    5768:	40 e8       	ldi	r20, 0x80	; 128
    576a:	5f e3       	ldi	r21, 0x3F	; 63
    576c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5770:	88 23       	and	r24, r24
    5772:	2c f4       	brge	.+10     	; 0x577e <HAL_LCD_sendCommand+0xb9e>
		__ticks = 1;
    5774:	81 e0       	ldi	r24, 0x01	; 1
    5776:	90 e0       	ldi	r25, 0x00	; 0
    5778:	9e 83       	std	Y+6, r25	; 0x06
    577a:	8d 83       	std	Y+5, r24	; 0x05
    577c:	3f c0       	rjmp	.+126    	; 0x57fc <HAL_LCD_sendCommand+0xc1c>
	else if (__tmp > 65535)
    577e:	6f 81       	ldd	r22, Y+7	; 0x07
    5780:	78 85       	ldd	r23, Y+8	; 0x08
    5782:	89 85       	ldd	r24, Y+9	; 0x09
    5784:	9a 85       	ldd	r25, Y+10	; 0x0a
    5786:	20 e0       	ldi	r18, 0x00	; 0
    5788:	3f ef       	ldi	r19, 0xFF	; 255
    578a:	4f e7       	ldi	r20, 0x7F	; 127
    578c:	57 e4       	ldi	r21, 0x47	; 71
    578e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5792:	18 16       	cp	r1, r24
    5794:	4c f5       	brge	.+82     	; 0x57e8 <HAL_LCD_sendCommand+0xc08>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5796:	6b 85       	ldd	r22, Y+11	; 0x0b
    5798:	7c 85       	ldd	r23, Y+12	; 0x0c
    579a:	8d 85       	ldd	r24, Y+13	; 0x0d
    579c:	9e 85       	ldd	r25, Y+14	; 0x0e
    579e:	20 e0       	ldi	r18, 0x00	; 0
    57a0:	30 e0       	ldi	r19, 0x00	; 0
    57a2:	40 e2       	ldi	r20, 0x20	; 32
    57a4:	51 e4       	ldi	r21, 0x41	; 65
    57a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57aa:	dc 01       	movw	r26, r24
    57ac:	cb 01       	movw	r24, r22
    57ae:	bc 01       	movw	r22, r24
    57b0:	cd 01       	movw	r24, r26
    57b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57b6:	dc 01       	movw	r26, r24
    57b8:	cb 01       	movw	r24, r22
    57ba:	9e 83       	std	Y+6, r25	; 0x06
    57bc:	8d 83       	std	Y+5, r24	; 0x05
    57be:	0f c0       	rjmp	.+30     	; 0x57de <HAL_LCD_sendCommand+0xbfe>
    57c0:	80 e9       	ldi	r24, 0x90	; 144
    57c2:	91 e0       	ldi	r25, 0x01	; 1
    57c4:	9c 83       	std	Y+4, r25	; 0x04
    57c6:	8b 83       	std	Y+3, r24	; 0x03
    57c8:	8b 81       	ldd	r24, Y+3	; 0x03
    57ca:	9c 81       	ldd	r25, Y+4	; 0x04
    57cc:	01 97       	sbiw	r24, 0x01	; 1
    57ce:	f1 f7       	brne	.-4      	; 0x57cc <HAL_LCD_sendCommand+0xbec>
    57d0:	9c 83       	std	Y+4, r25	; 0x04
    57d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    57d4:	8d 81       	ldd	r24, Y+5	; 0x05
    57d6:	9e 81       	ldd	r25, Y+6	; 0x06
    57d8:	01 97       	sbiw	r24, 0x01	; 1
    57da:	9e 83       	std	Y+6, r25	; 0x06
    57dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    57de:	8d 81       	ldd	r24, Y+5	; 0x05
    57e0:	9e 81       	ldd	r25, Y+6	; 0x06
    57e2:	00 97       	sbiw	r24, 0x00	; 0
    57e4:	69 f7       	brne	.-38     	; 0x57c0 <HAL_LCD_sendCommand+0xbe0>
    57e6:	14 c0       	rjmp	.+40     	; 0x5810 <HAL_LCD_sendCommand+0xc30>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57e8:	6f 81       	ldd	r22, Y+7	; 0x07
    57ea:	78 85       	ldd	r23, Y+8	; 0x08
    57ec:	89 85       	ldd	r24, Y+9	; 0x09
    57ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    57f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57f4:	dc 01       	movw	r26, r24
    57f6:	cb 01       	movw	r24, r22
    57f8:	9e 83       	std	Y+6, r25	; 0x06
    57fa:	8d 83       	std	Y+5, r24	; 0x05
    57fc:	8d 81       	ldd	r24, Y+5	; 0x05
    57fe:	9e 81       	ldd	r25, Y+6	; 0x06
    5800:	9a 83       	std	Y+2, r25	; 0x02
    5802:	89 83       	std	Y+1, r24	; 0x01
    5804:	89 81       	ldd	r24, Y+1	; 0x01
    5806:	9a 81       	ldd	r25, Y+2	; 0x02
    5808:	01 97       	sbiw	r24, 0x01	; 1
    580a:	f1 f7       	brne	.-4      	; 0x5808 <HAL_LCD_sendCommand+0xc28>
    580c:	9a 83       	std	Y+2, r25	; 0x02
    580e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	#endif

	return u8LocalReturn;
    5810:	fe 01       	movw	r30, r28
    5812:	ef 58       	subi	r30, 0x8F	; 143
    5814:	ff 4f       	sbci	r31, 0xFF	; 255
    5816:	80 81       	ld	r24, Z
}
    5818:	c6 57       	subi	r28, 0x76	; 118
    581a:	df 4f       	sbci	r29, 0xFF	; 255
    581c:	0f b6       	in	r0, 0x3f	; 63
    581e:	f8 94       	cli
    5820:	de bf       	out	0x3e, r29	; 62
    5822:	0f be       	out	0x3f, r0	; 63
    5824:	cd bf       	out	0x3d, r28	; 61
    5826:	cf 91       	pop	r28
    5828:	df 91       	pop	r29
    582a:	1f 91       	pop	r17
    582c:	0f 91       	pop	r16
    582e:	08 95       	ret

00005830 <HAL_LCD_sendCharacter>:

/* Function to display a character on the LCD */
E_ErrorType HAL_LCD_sendCharacter(LCD_dataType data)
{
    5830:	0f 93       	push	r16
    5832:	1f 93       	push	r17
    5834:	df 93       	push	r29
    5836:	cf 93       	push	r28
    5838:	cd b7       	in	r28, 0x3d	; 61
    583a:	de b7       	in	r29, 0x3e	; 62
    583c:	cc 57       	subi	r28, 0x7C	; 124
    583e:	d0 40       	sbci	r29, 0x00	; 0
    5840:	0f b6       	in	r0, 0x3f	; 63
    5842:	f8 94       	cli
    5844:	de bf       	out	0x3e, r29	; 62
    5846:	0f be       	out	0x3f, r0	; 63
    5848:	cd bf       	out	0x3d, r28	; 61
    584a:	fe 01       	movw	r30, r28
    584c:	e3 59       	subi	r30, 0x93	; 147
    584e:	ff 4f       	sbci	r31, 0xFF	; 255
    5850:	80 83       	st	Z, r24
	E_ErrorType u8LocalReturn = E_NOT_OK;
    5852:	fe 01       	movw	r30, r28
    5854:	ed 59       	subi	r30, 0x9D	; 157
    5856:	ff 4f       	sbci	r31, 0xFF	; 255
    5858:	81 e0       	ldi	r24, 0x01	; 1
    585a:	80 83       	st	Z, r24
	S_Dio LCD_RS_interface = {LCD_RS_PORT , LCD_RS_PIN , PIN_LOW};
    585c:	ce 01       	movw	r24, r28
    585e:	8c 59       	subi	r24, 0x9C	; 156
    5860:	9f 4f       	sbci	r25, 0xFF	; 255
    5862:	e0 96       	adiw	r28, 0x30	; 48
    5864:	9f af       	std	Y+63, r25	; 0x3f
    5866:	8e af       	std	Y+62, r24	; 0x3e
    5868:	e0 97       	sbiw	r28, 0x30	; 48
    586a:	8f eb       	ldi	r24, 0xBF	; 191
    586c:	91 e0       	ldi	r25, 0x01	; 1
    586e:	e2 96       	adiw	r28, 0x32	; 50
    5870:	9f af       	std	Y+63, r25	; 0x3f
    5872:	8e af       	std	Y+62, r24	; 0x3e
    5874:	e2 97       	sbiw	r28, 0x32	; 50
    5876:	93 e0       	ldi	r25, 0x03	; 3
    5878:	e3 96       	adiw	r28, 0x33	; 51
    587a:	9f af       	std	Y+63, r25	; 0x3f
    587c:	e3 97       	sbiw	r28, 0x33	; 51
    587e:	e2 96       	adiw	r28, 0x32	; 50
    5880:	ee ad       	ldd	r30, Y+62	; 0x3e
    5882:	ff ad       	ldd	r31, Y+63	; 0x3f
    5884:	e2 97       	sbiw	r28, 0x32	; 50
    5886:	00 80       	ld	r0, Z
    5888:	e2 96       	adiw	r28, 0x32	; 50
    588a:	8e ad       	ldd	r24, Y+62	; 0x3e
    588c:	9f ad       	ldd	r25, Y+63	; 0x3f
    588e:	e2 97       	sbiw	r28, 0x32	; 50
    5890:	01 96       	adiw	r24, 0x01	; 1
    5892:	e2 96       	adiw	r28, 0x32	; 50
    5894:	9f af       	std	Y+63, r25	; 0x3f
    5896:	8e af       	std	Y+62, r24	; 0x3e
    5898:	e2 97       	sbiw	r28, 0x32	; 50
    589a:	e0 96       	adiw	r28, 0x30	; 48
    589c:	ee ad       	ldd	r30, Y+62	; 0x3e
    589e:	ff ad       	ldd	r31, Y+63	; 0x3f
    58a0:	e0 97       	sbiw	r28, 0x30	; 48
    58a2:	00 82       	st	Z, r0
    58a4:	e0 96       	adiw	r28, 0x30	; 48
    58a6:	8e ad       	ldd	r24, Y+62	; 0x3e
    58a8:	9f ad       	ldd	r25, Y+63	; 0x3f
    58aa:	e0 97       	sbiw	r28, 0x30	; 48
    58ac:	01 96       	adiw	r24, 0x01	; 1
    58ae:	e0 96       	adiw	r28, 0x30	; 48
    58b0:	9f af       	std	Y+63, r25	; 0x3f
    58b2:	8e af       	std	Y+62, r24	; 0x3e
    58b4:	e0 97       	sbiw	r28, 0x30	; 48
    58b6:	e3 96       	adiw	r28, 0x33	; 51
    58b8:	9f ad       	ldd	r25, Y+63	; 0x3f
    58ba:	e3 97       	sbiw	r28, 0x33	; 51
    58bc:	91 50       	subi	r25, 0x01	; 1
    58be:	e3 96       	adiw	r28, 0x33	; 51
    58c0:	9f af       	std	Y+63, r25	; 0x3f
    58c2:	e3 97       	sbiw	r28, 0x33	; 51
    58c4:	e3 96       	adiw	r28, 0x33	; 51
    58c6:	ef ad       	ldd	r30, Y+63	; 0x3f
    58c8:	e3 97       	sbiw	r28, 0x33	; 51
    58ca:	ee 23       	and	r30, r30
    58cc:	c1 f6       	brne	.-80     	; 0x587e <HAL_LCD_sendCharacter+0x4e>
	u8LocalReturn = MCAL_Dio_WritePin(&LCD_RS_interface, PIN_HIGH);
    58ce:	ce 01       	movw	r24, r28
    58d0:	8c 59       	subi	r24, 0x9C	; 156
    58d2:	9f 4f       	sbci	r25, 0xFF	; 255
    58d4:	6f ef       	ldi	r22, 0xFF	; 255
    58d6:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <MCAL_Dio_WritePin>
    58da:	fe 01       	movw	r30, r28
    58dc:	ed 59       	subi	r30, 0x9D	; 157
    58de:	ff 4f       	sbci	r31, 0xFF	; 255
    58e0:	80 83       	st	Z, r24
		u8LocalReturn = MCAL_Dio_WritePin(&LCD_RW_interface, PIN_LOW);
	#else
		//Do nothing
	#endif

		S_Dio LCD_E_interface = {LCD_E_PORT , LCD_E_PIN , PIN_LOW};
    58e2:	ce 01       	movw	r24, r28
    58e4:	89 59       	subi	r24, 0x99	; 153
    58e6:	9f 4f       	sbci	r25, 0xFF	; 255
    58e8:	e5 96       	adiw	r28, 0x35	; 53
    58ea:	9f af       	std	Y+63, r25	; 0x3f
    58ec:	8e af       	std	Y+62, r24	; 0x3e
    58ee:	e5 97       	sbiw	r28, 0x35	; 53
    58f0:	8c eb       	ldi	r24, 0xBC	; 188
    58f2:	91 e0       	ldi	r25, 0x01	; 1
    58f4:	e7 96       	adiw	r28, 0x37	; 55
    58f6:	9f af       	std	Y+63, r25	; 0x3f
    58f8:	8e af       	std	Y+62, r24	; 0x3e
    58fa:	e7 97       	sbiw	r28, 0x37	; 55
    58fc:	93 e0       	ldi	r25, 0x03	; 3
    58fe:	e8 96       	adiw	r28, 0x38	; 56
    5900:	9f af       	std	Y+63, r25	; 0x3f
    5902:	e8 97       	sbiw	r28, 0x38	; 56
    5904:	e7 96       	adiw	r28, 0x37	; 55
    5906:	ee ad       	ldd	r30, Y+62	; 0x3e
    5908:	ff ad       	ldd	r31, Y+63	; 0x3f
    590a:	e7 97       	sbiw	r28, 0x37	; 55
    590c:	00 80       	ld	r0, Z
    590e:	e7 96       	adiw	r28, 0x37	; 55
    5910:	8e ad       	ldd	r24, Y+62	; 0x3e
    5912:	9f ad       	ldd	r25, Y+63	; 0x3f
    5914:	e7 97       	sbiw	r28, 0x37	; 55
    5916:	01 96       	adiw	r24, 0x01	; 1
    5918:	e7 96       	adiw	r28, 0x37	; 55
    591a:	9f af       	std	Y+63, r25	; 0x3f
    591c:	8e af       	std	Y+62, r24	; 0x3e
    591e:	e7 97       	sbiw	r28, 0x37	; 55
    5920:	e5 96       	adiw	r28, 0x35	; 53
    5922:	ee ad       	ldd	r30, Y+62	; 0x3e
    5924:	ff ad       	ldd	r31, Y+63	; 0x3f
    5926:	e5 97       	sbiw	r28, 0x35	; 53
    5928:	00 82       	st	Z, r0
    592a:	e5 96       	adiw	r28, 0x35	; 53
    592c:	8e ad       	ldd	r24, Y+62	; 0x3e
    592e:	9f ad       	ldd	r25, Y+63	; 0x3f
    5930:	e5 97       	sbiw	r28, 0x35	; 53
    5932:	01 96       	adiw	r24, 0x01	; 1
    5934:	e5 96       	adiw	r28, 0x35	; 53
    5936:	9f af       	std	Y+63, r25	; 0x3f
    5938:	8e af       	std	Y+62, r24	; 0x3e
    593a:	e5 97       	sbiw	r28, 0x35	; 53
    593c:	e8 96       	adiw	r28, 0x38	; 56
    593e:	9f ad       	ldd	r25, Y+63	; 0x3f
    5940:	e8 97       	sbiw	r28, 0x38	; 56
    5942:	91 50       	subi	r25, 0x01	; 1
    5944:	e8 96       	adiw	r28, 0x38	; 56
    5946:	9f af       	std	Y+63, r25	; 0x3f
    5948:	e8 97       	sbiw	r28, 0x38	; 56
    594a:	e8 96       	adiw	r28, 0x38	; 56
    594c:	ef ad       	ldd	r30, Y+63	; 0x3f
    594e:	e8 97       	sbiw	r28, 0x38	; 56
    5950:	ee 23       	and	r30, r30
    5952:	c1 f6       	brne	.-80     	; 0x5904 <HAL_LCD_sendCharacter+0xd4>
    5954:	fe 01       	movw	r30, r28
    5956:	e1 5a       	subi	r30, 0xA1	; 161
    5958:	ff 4f       	sbci	r31, 0xFF	; 255
    595a:	80 e0       	ldi	r24, 0x00	; 0
    595c:	90 e0       	ldi	r25, 0x00	; 0
    595e:	a0 e8       	ldi	r26, 0x80	; 128
    5960:	bf e3       	ldi	r27, 0x3F	; 63
    5962:	80 83       	st	Z, r24
    5964:	91 83       	std	Z+1, r25	; 0x01
    5966:	a2 83       	std	Z+2, r26	; 0x02
    5968:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    596a:	8e 01       	movw	r16, r28
    596c:	05 5a       	subi	r16, 0xA5	; 165
    596e:	1f 4f       	sbci	r17, 0xFF	; 255
    5970:	fe 01       	movw	r30, r28
    5972:	e1 5a       	subi	r30, 0xA1	; 161
    5974:	ff 4f       	sbci	r31, 0xFF	; 255
    5976:	60 81       	ld	r22, Z
    5978:	71 81       	ldd	r23, Z+1	; 0x01
    597a:	82 81       	ldd	r24, Z+2	; 0x02
    597c:	93 81       	ldd	r25, Z+3	; 0x03
    597e:	20 e0       	ldi	r18, 0x00	; 0
    5980:	30 e0       	ldi	r19, 0x00	; 0
    5982:	4a e7       	ldi	r20, 0x7A	; 122
    5984:	55 e4       	ldi	r21, 0x45	; 69
    5986:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    598a:	dc 01       	movw	r26, r24
    598c:	cb 01       	movw	r24, r22
    598e:	f8 01       	movw	r30, r16
    5990:	80 83       	st	Z, r24
    5992:	91 83       	std	Z+1, r25	; 0x01
    5994:	a2 83       	std	Z+2, r26	; 0x02
    5996:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5998:	fe 01       	movw	r30, r28
    599a:	e5 5a       	subi	r30, 0xA5	; 165
    599c:	ff 4f       	sbci	r31, 0xFF	; 255
    599e:	60 81       	ld	r22, Z
    59a0:	71 81       	ldd	r23, Z+1	; 0x01
    59a2:	82 81       	ldd	r24, Z+2	; 0x02
    59a4:	93 81       	ldd	r25, Z+3	; 0x03
    59a6:	20 e0       	ldi	r18, 0x00	; 0
    59a8:	30 e0       	ldi	r19, 0x00	; 0
    59aa:	40 e8       	ldi	r20, 0x80	; 128
    59ac:	5f e3       	ldi	r21, 0x3F	; 63
    59ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    59b2:	88 23       	and	r24, r24
    59b4:	44 f4       	brge	.+16     	; 0x59c6 <HAL_LCD_sendCharacter+0x196>
		__ticks = 1;
    59b6:	fe 01       	movw	r30, r28
    59b8:	e7 5a       	subi	r30, 0xA7	; 167
    59ba:	ff 4f       	sbci	r31, 0xFF	; 255
    59bc:	81 e0       	ldi	r24, 0x01	; 1
    59be:	90 e0       	ldi	r25, 0x00	; 0
    59c0:	91 83       	std	Z+1, r25	; 0x01
    59c2:	80 83       	st	Z, r24
    59c4:	64 c0       	rjmp	.+200    	; 0x5a8e <HAL_LCD_sendCharacter+0x25e>
	else if (__tmp > 65535)
    59c6:	fe 01       	movw	r30, r28
    59c8:	e5 5a       	subi	r30, 0xA5	; 165
    59ca:	ff 4f       	sbci	r31, 0xFF	; 255
    59cc:	60 81       	ld	r22, Z
    59ce:	71 81       	ldd	r23, Z+1	; 0x01
    59d0:	82 81       	ldd	r24, Z+2	; 0x02
    59d2:	93 81       	ldd	r25, Z+3	; 0x03
    59d4:	20 e0       	ldi	r18, 0x00	; 0
    59d6:	3f ef       	ldi	r19, 0xFF	; 255
    59d8:	4f e7       	ldi	r20, 0x7F	; 127
    59da:	57 e4       	ldi	r21, 0x47	; 71
    59dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    59e0:	18 16       	cp	r1, r24
    59e2:	0c f0       	brlt	.+2      	; 0x59e6 <HAL_LCD_sendCharacter+0x1b6>
    59e4:	43 c0       	rjmp	.+134    	; 0x5a6c <HAL_LCD_sendCharacter+0x23c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    59e6:	fe 01       	movw	r30, r28
    59e8:	e1 5a       	subi	r30, 0xA1	; 161
    59ea:	ff 4f       	sbci	r31, 0xFF	; 255
    59ec:	60 81       	ld	r22, Z
    59ee:	71 81       	ldd	r23, Z+1	; 0x01
    59f0:	82 81       	ldd	r24, Z+2	; 0x02
    59f2:	93 81       	ldd	r25, Z+3	; 0x03
    59f4:	20 e0       	ldi	r18, 0x00	; 0
    59f6:	30 e0       	ldi	r19, 0x00	; 0
    59f8:	40 e2       	ldi	r20, 0x20	; 32
    59fa:	51 e4       	ldi	r21, 0x41	; 65
    59fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a00:	dc 01       	movw	r26, r24
    5a02:	cb 01       	movw	r24, r22
    5a04:	8e 01       	movw	r16, r28
    5a06:	07 5a       	subi	r16, 0xA7	; 167
    5a08:	1f 4f       	sbci	r17, 0xFF	; 255
    5a0a:	bc 01       	movw	r22, r24
    5a0c:	cd 01       	movw	r24, r26
    5a0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a12:	dc 01       	movw	r26, r24
    5a14:	cb 01       	movw	r24, r22
    5a16:	f8 01       	movw	r30, r16
    5a18:	91 83       	std	Z+1, r25	; 0x01
    5a1a:	80 83       	st	Z, r24
    5a1c:	1f c0       	rjmp	.+62     	; 0x5a5c <HAL_LCD_sendCharacter+0x22c>
    5a1e:	fe 01       	movw	r30, r28
    5a20:	e9 5a       	subi	r30, 0xA9	; 169
    5a22:	ff 4f       	sbci	r31, 0xFF	; 255
    5a24:	80 e9       	ldi	r24, 0x90	; 144
    5a26:	91 e0       	ldi	r25, 0x01	; 1
    5a28:	91 83       	std	Z+1, r25	; 0x01
    5a2a:	80 83       	st	Z, r24
    5a2c:	fe 01       	movw	r30, r28
    5a2e:	e9 5a       	subi	r30, 0xA9	; 169
    5a30:	ff 4f       	sbci	r31, 0xFF	; 255
    5a32:	80 81       	ld	r24, Z
    5a34:	91 81       	ldd	r25, Z+1	; 0x01
    5a36:	01 97       	sbiw	r24, 0x01	; 1
    5a38:	f1 f7       	brne	.-4      	; 0x5a36 <HAL_LCD_sendCharacter+0x206>
    5a3a:	fe 01       	movw	r30, r28
    5a3c:	e9 5a       	subi	r30, 0xA9	; 169
    5a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    5a40:	91 83       	std	Z+1, r25	; 0x01
    5a42:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a44:	de 01       	movw	r26, r28
    5a46:	a7 5a       	subi	r26, 0xA7	; 167
    5a48:	bf 4f       	sbci	r27, 0xFF	; 255
    5a4a:	fe 01       	movw	r30, r28
    5a4c:	e7 5a       	subi	r30, 0xA7	; 167
    5a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    5a50:	80 81       	ld	r24, Z
    5a52:	91 81       	ldd	r25, Z+1	; 0x01
    5a54:	01 97       	sbiw	r24, 0x01	; 1
    5a56:	11 96       	adiw	r26, 0x01	; 1
    5a58:	9c 93       	st	X, r25
    5a5a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a5c:	fe 01       	movw	r30, r28
    5a5e:	e7 5a       	subi	r30, 0xA7	; 167
    5a60:	ff 4f       	sbci	r31, 0xFF	; 255
    5a62:	80 81       	ld	r24, Z
    5a64:	91 81       	ldd	r25, Z+1	; 0x01
    5a66:	00 97       	sbiw	r24, 0x00	; 0
    5a68:	d1 f6       	brne	.-76     	; 0x5a1e <HAL_LCD_sendCharacter+0x1ee>
    5a6a:	28 c0       	rjmp	.+80     	; 0x5abc <HAL_LCD_sendCharacter+0x28c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a6c:	8e 01       	movw	r16, r28
    5a6e:	07 5a       	subi	r16, 0xA7	; 167
    5a70:	1f 4f       	sbci	r17, 0xFF	; 255
    5a72:	fe 01       	movw	r30, r28
    5a74:	e5 5a       	subi	r30, 0xA5	; 165
    5a76:	ff 4f       	sbci	r31, 0xFF	; 255
    5a78:	60 81       	ld	r22, Z
    5a7a:	71 81       	ldd	r23, Z+1	; 0x01
    5a7c:	82 81       	ldd	r24, Z+2	; 0x02
    5a7e:	93 81       	ldd	r25, Z+3	; 0x03
    5a80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a84:	dc 01       	movw	r26, r24
    5a86:	cb 01       	movw	r24, r22
    5a88:	f8 01       	movw	r30, r16
    5a8a:	91 83       	std	Z+1, r25	; 0x01
    5a8c:	80 83       	st	Z, r24
    5a8e:	de 01       	movw	r26, r28
    5a90:	ab 5a       	subi	r26, 0xAB	; 171
    5a92:	bf 4f       	sbci	r27, 0xFF	; 255
    5a94:	fe 01       	movw	r30, r28
    5a96:	e7 5a       	subi	r30, 0xA7	; 167
    5a98:	ff 4f       	sbci	r31, 0xFF	; 255
    5a9a:	80 81       	ld	r24, Z
    5a9c:	91 81       	ldd	r25, Z+1	; 0x01
    5a9e:	11 96       	adiw	r26, 0x01	; 1
    5aa0:	9c 93       	st	X, r25
    5aa2:	8e 93       	st	-X, r24
    5aa4:	fe 01       	movw	r30, r28
    5aa6:	eb 5a       	subi	r30, 0xAB	; 171
    5aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    5aaa:	80 81       	ld	r24, Z
    5aac:	91 81       	ldd	r25, Z+1	; 0x01
    5aae:	01 97       	sbiw	r24, 0x01	; 1
    5ab0:	f1 f7       	brne	.-4      	; 0x5aae <HAL_LCD_sendCharacter+0x27e>
    5ab2:	fe 01       	movw	r30, r28
    5ab4:	eb 5a       	subi	r30, 0xAB	; 171
    5ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    5ab8:	91 83       	std	Z+1, r25	; 0x01
    5aba:	80 83       	st	Z, r24
			_delay_ms(1);
			u8LocalReturn = MCAL_Dio_WritePin(&LCD_E_interface, PIN_LOW);
			_delay_ms(1);
		#elif (LCD_DATA_BITS_MODE == 4)
		#ifdef LOWER_PORT_PINS
			S_Dio LCD_DATA_interface = {LCD_DATA_PORT, (LCD_D4_PIN | LCD_D5_PIN | LCD_D6_PIN |LCD_D7_PIN), OUTPUT};
    5abc:	ce 01       	movw	r24, r28
    5abe:	86 59       	subi	r24, 0x96	; 150
    5ac0:	9f 4f       	sbci	r25, 0xFF	; 255
    5ac2:	ea 96       	adiw	r28, 0x3a	; 58
    5ac4:	9f af       	std	Y+63, r25	; 0x3f
    5ac6:	8e af       	std	Y+62, r24	; 0x3e
    5ac8:	ea 97       	sbiw	r28, 0x3a	; 58
    5aca:	89 eb       	ldi	r24, 0xB9	; 185
    5acc:	91 e0       	ldi	r25, 0x01	; 1
    5ace:	ec 96       	adiw	r28, 0x3c	; 60
    5ad0:	9f af       	std	Y+63, r25	; 0x3f
    5ad2:	8e af       	std	Y+62, r24	; 0x3e
    5ad4:	ec 97       	sbiw	r28, 0x3c	; 60
    5ad6:	93 e0       	ldi	r25, 0x03	; 3
    5ad8:	ed 96       	adiw	r28, 0x3d	; 61
    5ada:	9f af       	std	Y+63, r25	; 0x3f
    5adc:	ed 97       	sbiw	r28, 0x3d	; 61
    5ade:	ec 96       	adiw	r28, 0x3c	; 60
    5ae0:	ee ad       	ldd	r30, Y+62	; 0x3e
    5ae2:	ff ad       	ldd	r31, Y+63	; 0x3f
    5ae4:	ec 97       	sbiw	r28, 0x3c	; 60
    5ae6:	00 80       	ld	r0, Z
    5ae8:	ec 96       	adiw	r28, 0x3c	; 60
    5aea:	8e ad       	ldd	r24, Y+62	; 0x3e
    5aec:	9f ad       	ldd	r25, Y+63	; 0x3f
    5aee:	ec 97       	sbiw	r28, 0x3c	; 60
    5af0:	01 96       	adiw	r24, 0x01	; 1
    5af2:	ec 96       	adiw	r28, 0x3c	; 60
    5af4:	9f af       	std	Y+63, r25	; 0x3f
    5af6:	8e af       	std	Y+62, r24	; 0x3e
    5af8:	ec 97       	sbiw	r28, 0x3c	; 60
    5afa:	ea 96       	adiw	r28, 0x3a	; 58
    5afc:	ee ad       	ldd	r30, Y+62	; 0x3e
    5afe:	ff ad       	ldd	r31, Y+63	; 0x3f
    5b00:	ea 97       	sbiw	r28, 0x3a	; 58
    5b02:	00 82       	st	Z, r0
    5b04:	ea 96       	adiw	r28, 0x3a	; 58
    5b06:	8e ad       	ldd	r24, Y+62	; 0x3e
    5b08:	9f ad       	ldd	r25, Y+63	; 0x3f
    5b0a:	ea 97       	sbiw	r28, 0x3a	; 58
    5b0c:	01 96       	adiw	r24, 0x01	; 1
    5b0e:	ea 96       	adiw	r28, 0x3a	; 58
    5b10:	9f af       	std	Y+63, r25	; 0x3f
    5b12:	8e af       	std	Y+62, r24	; 0x3e
    5b14:	ea 97       	sbiw	r28, 0x3a	; 58
    5b16:	ed 96       	adiw	r28, 0x3d	; 61
    5b18:	9f ad       	ldd	r25, Y+63	; 0x3f
    5b1a:	ed 97       	sbiw	r28, 0x3d	; 61
    5b1c:	91 50       	subi	r25, 0x01	; 1
    5b1e:	ed 96       	adiw	r28, 0x3d	; 61
    5b20:	9f af       	std	Y+63, r25	; 0x3f
    5b22:	ed 97       	sbiw	r28, 0x3d	; 61
    5b24:	ed 96       	adiw	r28, 0x3d	; 61
    5b26:	ef ad       	ldd	r30, Y+63	; 0x3f
    5b28:	ed 97       	sbiw	r28, 0x3d	; 61
    5b2a:	ee 23       	and	r30, r30
    5b2c:	c1 f6       	brne	.-80     	; 0x5ade <HAL_LCD_sendCharacter+0x2ae>
			MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D4_PIN, GET_BIT(data, 4));
    5b2e:	fe 01       	movw	r30, r28
    5b30:	e3 59       	subi	r30, 0x93	; 147
    5b32:	ff 4f       	sbci	r31, 0xFF	; 255
    5b34:	80 81       	ld	r24, Z
    5b36:	85 95       	asr	r24
    5b38:	85 95       	asr	r24
    5b3a:	85 95       	asr	r24
    5b3c:	85 95       	asr	r24
    5b3e:	28 2f       	mov	r18, r24
    5b40:	21 70       	andi	r18, 0x01	; 1
    5b42:	ce 01       	movw	r24, r28
    5b44:	86 59       	subi	r24, 0x96	; 150
    5b46:	9f 4f       	sbci	r25, 0xFF	; 255
    5b48:	61 e0       	ldi	r22, 0x01	; 1
    5b4a:	42 2f       	mov	r20, r18
    5b4c:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <MCAL_Dio_WriteSinglePin>
			MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D5_PIN, GET_BIT(data, 5));
    5b50:	fe 01       	movw	r30, r28
    5b52:	e3 59       	subi	r30, 0x93	; 147
    5b54:	ff 4f       	sbci	r31, 0xFF	; 255
    5b56:	80 81       	ld	r24, Z
    5b58:	85 95       	asr	r24
    5b5a:	85 95       	asr	r24
    5b5c:	85 95       	asr	r24
    5b5e:	85 95       	asr	r24
    5b60:	85 95       	asr	r24
    5b62:	28 2f       	mov	r18, r24
    5b64:	21 70       	andi	r18, 0x01	; 1
    5b66:	ce 01       	movw	r24, r28
    5b68:	86 59       	subi	r24, 0x96	; 150
    5b6a:	9f 4f       	sbci	r25, 0xFF	; 255
    5b6c:	62 e0       	ldi	r22, 0x02	; 2
    5b6e:	42 2f       	mov	r20, r18
    5b70:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <MCAL_Dio_WriteSinglePin>
			MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D6_PIN, GET_BIT(data, 6));
    5b74:	fe 01       	movw	r30, r28
    5b76:	e3 59       	subi	r30, 0x93	; 147
    5b78:	ff 4f       	sbci	r31, 0xFF	; 255
    5b7a:	80 81       	ld	r24, Z
    5b7c:	86 fb       	bst	r24, 6
    5b7e:	88 0f       	add	r24, r24
    5b80:	88 0b       	sbc	r24, r24
    5b82:	80 f9       	bld	r24, 0
    5b84:	28 2f       	mov	r18, r24
    5b86:	21 70       	andi	r18, 0x01	; 1
    5b88:	ce 01       	movw	r24, r28
    5b8a:	86 59       	subi	r24, 0x96	; 150
    5b8c:	9f 4f       	sbci	r25, 0xFF	; 255
    5b8e:	64 e0       	ldi	r22, 0x04	; 4
    5b90:	42 2f       	mov	r20, r18
    5b92:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <MCAL_Dio_WriteSinglePin>
			MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D7_PIN, GET_BIT(data, 7));
    5b96:	fe 01       	movw	r30, r28
    5b98:	e3 59       	subi	r30, 0x93	; 147
    5b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    5b9c:	80 81       	ld	r24, Z
    5b9e:	28 2f       	mov	r18, r24
    5ba0:	22 1f       	adc	r18, r18
    5ba2:	22 27       	eor	r18, r18
    5ba4:	22 1f       	adc	r18, r18
    5ba6:	ce 01       	movw	r24, r28
    5ba8:	86 59       	subi	r24, 0x96	; 150
    5baa:	9f 4f       	sbci	r25, 0xFF	; 255
    5bac:	60 e1       	ldi	r22, 0x10	; 16
    5bae:	42 2f       	mov	r20, r18
    5bb0:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <MCAL_Dio_WriteSinglePin>
    5bb4:	fe 01       	movw	r30, r28
    5bb6:	ef 5a       	subi	r30, 0xAF	; 175
    5bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    5bba:	80 e0       	ldi	r24, 0x00	; 0
    5bbc:	90 e0       	ldi	r25, 0x00	; 0
    5bbe:	a0 e8       	ldi	r26, 0x80	; 128
    5bc0:	bf e3       	ldi	r27, 0x3F	; 63
    5bc2:	80 83       	st	Z, r24
    5bc4:	91 83       	std	Z+1, r25	; 0x01
    5bc6:	a2 83       	std	Z+2, r26	; 0x02
    5bc8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5bca:	8e 01       	movw	r16, r28
    5bcc:	03 5b       	subi	r16, 0xB3	; 179
    5bce:	1f 4f       	sbci	r17, 0xFF	; 255
    5bd0:	fe 01       	movw	r30, r28
    5bd2:	ef 5a       	subi	r30, 0xAF	; 175
    5bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    5bd6:	60 81       	ld	r22, Z
    5bd8:	71 81       	ldd	r23, Z+1	; 0x01
    5bda:	82 81       	ldd	r24, Z+2	; 0x02
    5bdc:	93 81       	ldd	r25, Z+3	; 0x03
    5bde:	20 e0       	ldi	r18, 0x00	; 0
    5be0:	30 e0       	ldi	r19, 0x00	; 0
    5be2:	4a e7       	ldi	r20, 0x7A	; 122
    5be4:	55 e4       	ldi	r21, 0x45	; 69
    5be6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5bea:	dc 01       	movw	r26, r24
    5bec:	cb 01       	movw	r24, r22
    5bee:	f8 01       	movw	r30, r16
    5bf0:	80 83       	st	Z, r24
    5bf2:	91 83       	std	Z+1, r25	; 0x01
    5bf4:	a2 83       	std	Z+2, r26	; 0x02
    5bf6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5bf8:	fe 01       	movw	r30, r28
    5bfa:	e3 5b       	subi	r30, 0xB3	; 179
    5bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    5bfe:	60 81       	ld	r22, Z
    5c00:	71 81       	ldd	r23, Z+1	; 0x01
    5c02:	82 81       	ldd	r24, Z+2	; 0x02
    5c04:	93 81       	ldd	r25, Z+3	; 0x03
    5c06:	20 e0       	ldi	r18, 0x00	; 0
    5c08:	30 e0       	ldi	r19, 0x00	; 0
    5c0a:	40 e8       	ldi	r20, 0x80	; 128
    5c0c:	5f e3       	ldi	r21, 0x3F	; 63
    5c0e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5c12:	88 23       	and	r24, r24
    5c14:	44 f4       	brge	.+16     	; 0x5c26 <HAL_LCD_sendCharacter+0x3f6>
		__ticks = 1;
    5c16:	fe 01       	movw	r30, r28
    5c18:	e5 5b       	subi	r30, 0xB5	; 181
    5c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    5c1c:	81 e0       	ldi	r24, 0x01	; 1
    5c1e:	90 e0       	ldi	r25, 0x00	; 0
    5c20:	91 83       	std	Z+1, r25	; 0x01
    5c22:	80 83       	st	Z, r24
    5c24:	64 c0       	rjmp	.+200    	; 0x5cee <HAL_LCD_sendCharacter+0x4be>
	else if (__tmp > 65535)
    5c26:	fe 01       	movw	r30, r28
    5c28:	e3 5b       	subi	r30, 0xB3	; 179
    5c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    5c2c:	60 81       	ld	r22, Z
    5c2e:	71 81       	ldd	r23, Z+1	; 0x01
    5c30:	82 81       	ldd	r24, Z+2	; 0x02
    5c32:	93 81       	ldd	r25, Z+3	; 0x03
    5c34:	20 e0       	ldi	r18, 0x00	; 0
    5c36:	3f ef       	ldi	r19, 0xFF	; 255
    5c38:	4f e7       	ldi	r20, 0x7F	; 127
    5c3a:	57 e4       	ldi	r21, 0x47	; 71
    5c3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5c40:	18 16       	cp	r1, r24
    5c42:	0c f0       	brlt	.+2      	; 0x5c46 <HAL_LCD_sendCharacter+0x416>
    5c44:	43 c0       	rjmp	.+134    	; 0x5ccc <HAL_LCD_sendCharacter+0x49c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c46:	fe 01       	movw	r30, r28
    5c48:	ef 5a       	subi	r30, 0xAF	; 175
    5c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    5c4c:	60 81       	ld	r22, Z
    5c4e:	71 81       	ldd	r23, Z+1	; 0x01
    5c50:	82 81       	ldd	r24, Z+2	; 0x02
    5c52:	93 81       	ldd	r25, Z+3	; 0x03
    5c54:	20 e0       	ldi	r18, 0x00	; 0
    5c56:	30 e0       	ldi	r19, 0x00	; 0
    5c58:	40 e2       	ldi	r20, 0x20	; 32
    5c5a:	51 e4       	ldi	r21, 0x41	; 65
    5c5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c60:	dc 01       	movw	r26, r24
    5c62:	cb 01       	movw	r24, r22
    5c64:	8e 01       	movw	r16, r28
    5c66:	05 5b       	subi	r16, 0xB5	; 181
    5c68:	1f 4f       	sbci	r17, 0xFF	; 255
    5c6a:	bc 01       	movw	r22, r24
    5c6c:	cd 01       	movw	r24, r26
    5c6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c72:	dc 01       	movw	r26, r24
    5c74:	cb 01       	movw	r24, r22
    5c76:	f8 01       	movw	r30, r16
    5c78:	91 83       	std	Z+1, r25	; 0x01
    5c7a:	80 83       	st	Z, r24
    5c7c:	1f c0       	rjmp	.+62     	; 0x5cbc <HAL_LCD_sendCharacter+0x48c>
    5c7e:	fe 01       	movw	r30, r28
    5c80:	e7 5b       	subi	r30, 0xB7	; 183
    5c82:	ff 4f       	sbci	r31, 0xFF	; 255
    5c84:	80 e9       	ldi	r24, 0x90	; 144
    5c86:	91 e0       	ldi	r25, 0x01	; 1
    5c88:	91 83       	std	Z+1, r25	; 0x01
    5c8a:	80 83       	st	Z, r24
    5c8c:	fe 01       	movw	r30, r28
    5c8e:	e7 5b       	subi	r30, 0xB7	; 183
    5c90:	ff 4f       	sbci	r31, 0xFF	; 255
    5c92:	80 81       	ld	r24, Z
    5c94:	91 81       	ldd	r25, Z+1	; 0x01
    5c96:	01 97       	sbiw	r24, 0x01	; 1
    5c98:	f1 f7       	brne	.-4      	; 0x5c96 <HAL_LCD_sendCharacter+0x466>
    5c9a:	fe 01       	movw	r30, r28
    5c9c:	e7 5b       	subi	r30, 0xB7	; 183
    5c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    5ca0:	91 83       	std	Z+1, r25	; 0x01
    5ca2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5ca4:	de 01       	movw	r26, r28
    5ca6:	a5 5b       	subi	r26, 0xB5	; 181
    5ca8:	bf 4f       	sbci	r27, 0xFF	; 255
    5caa:	fe 01       	movw	r30, r28
    5cac:	e5 5b       	subi	r30, 0xB5	; 181
    5cae:	ff 4f       	sbci	r31, 0xFF	; 255
    5cb0:	80 81       	ld	r24, Z
    5cb2:	91 81       	ldd	r25, Z+1	; 0x01
    5cb4:	01 97       	sbiw	r24, 0x01	; 1
    5cb6:	11 96       	adiw	r26, 0x01	; 1
    5cb8:	9c 93       	st	X, r25
    5cba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5cbc:	fe 01       	movw	r30, r28
    5cbe:	e5 5b       	subi	r30, 0xB5	; 181
    5cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    5cc2:	80 81       	ld	r24, Z
    5cc4:	91 81       	ldd	r25, Z+1	; 0x01
    5cc6:	00 97       	sbiw	r24, 0x00	; 0
    5cc8:	d1 f6       	brne	.-76     	; 0x5c7e <HAL_LCD_sendCharacter+0x44e>
    5cca:	27 c0       	rjmp	.+78     	; 0x5d1a <HAL_LCD_sendCharacter+0x4ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5ccc:	8e 01       	movw	r16, r28
    5cce:	05 5b       	subi	r16, 0xB5	; 181
    5cd0:	1f 4f       	sbci	r17, 0xFF	; 255
    5cd2:	fe 01       	movw	r30, r28
    5cd4:	e3 5b       	subi	r30, 0xB3	; 179
    5cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    5cd8:	60 81       	ld	r22, Z
    5cda:	71 81       	ldd	r23, Z+1	; 0x01
    5cdc:	82 81       	ldd	r24, Z+2	; 0x02
    5cde:	93 81       	ldd	r25, Z+3	; 0x03
    5ce0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ce4:	dc 01       	movw	r26, r24
    5ce6:	cb 01       	movw	r24, r22
    5ce8:	f8 01       	movw	r30, r16
    5cea:	91 83       	std	Z+1, r25	; 0x01
    5cec:	80 83       	st	Z, r24
    5cee:	de 01       	movw	r26, r28
    5cf0:	a9 5b       	subi	r26, 0xB9	; 185
    5cf2:	bf 4f       	sbci	r27, 0xFF	; 255
    5cf4:	fe 01       	movw	r30, r28
    5cf6:	e5 5b       	subi	r30, 0xB5	; 181
    5cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    5cfa:	80 81       	ld	r24, Z
    5cfc:	91 81       	ldd	r25, Z+1	; 0x01
    5cfe:	8d 93       	st	X+, r24
    5d00:	9c 93       	st	X, r25
    5d02:	fe 01       	movw	r30, r28
    5d04:	e9 5b       	subi	r30, 0xB9	; 185
    5d06:	ff 4f       	sbci	r31, 0xFF	; 255
    5d08:	80 81       	ld	r24, Z
    5d0a:	91 81       	ldd	r25, Z+1	; 0x01
    5d0c:	01 97       	sbiw	r24, 0x01	; 1
    5d0e:	f1 f7       	brne	.-4      	; 0x5d0c <HAL_LCD_sendCharacter+0x4dc>
    5d10:	fe 01       	movw	r30, r28
    5d12:	e9 5b       	subi	r30, 0xB9	; 185
    5d14:	ff 4f       	sbci	r31, 0xFF	; 255
    5d16:	91 83       	std	Z+1, r25	; 0x01
    5d18:	80 83       	st	Z, r24
			MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D0_PIN, GET_BIT(data, 4));
			MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D1_PIN, GET_BIT(data, 5));
			MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D2_PIN, GET_BIT(data, 6));
			MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D3_PIN, GET_BIT(data, 7));
		#endif
		u8LocalReturn = MCAL_Dio_WritePin(&LCD_E_interface, PIN_HIGH);
    5d1a:	ce 01       	movw	r24, r28
    5d1c:	89 59       	subi	r24, 0x99	; 153
    5d1e:	9f 4f       	sbci	r25, 0xFF	; 255
    5d20:	6f ef       	ldi	r22, 0xFF	; 255
    5d22:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <MCAL_Dio_WritePin>
    5d26:	fe 01       	movw	r30, r28
    5d28:	ed 59       	subi	r30, 0x9D	; 157
    5d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    5d2c:	80 83       	st	Z, r24
    5d2e:	fe 01       	movw	r30, r28
    5d30:	ed 5b       	subi	r30, 0xBD	; 189
    5d32:	ff 4f       	sbci	r31, 0xFF	; 255
    5d34:	80 e0       	ldi	r24, 0x00	; 0
    5d36:	90 e0       	ldi	r25, 0x00	; 0
    5d38:	a0 e8       	ldi	r26, 0x80	; 128
    5d3a:	bf e3       	ldi	r27, 0x3F	; 63
    5d3c:	80 83       	st	Z, r24
    5d3e:	91 83       	std	Z+1, r25	; 0x01
    5d40:	a2 83       	std	Z+2, r26	; 0x02
    5d42:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5d44:	8e 01       	movw	r16, r28
    5d46:	01 5c       	subi	r16, 0xC1	; 193
    5d48:	1f 4f       	sbci	r17, 0xFF	; 255
    5d4a:	fe 01       	movw	r30, r28
    5d4c:	ed 5b       	subi	r30, 0xBD	; 189
    5d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    5d50:	60 81       	ld	r22, Z
    5d52:	71 81       	ldd	r23, Z+1	; 0x01
    5d54:	82 81       	ldd	r24, Z+2	; 0x02
    5d56:	93 81       	ldd	r25, Z+3	; 0x03
    5d58:	20 e0       	ldi	r18, 0x00	; 0
    5d5a:	30 e0       	ldi	r19, 0x00	; 0
    5d5c:	4a e7       	ldi	r20, 0x7A	; 122
    5d5e:	55 e4       	ldi	r21, 0x45	; 69
    5d60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d64:	dc 01       	movw	r26, r24
    5d66:	cb 01       	movw	r24, r22
    5d68:	f8 01       	movw	r30, r16
    5d6a:	80 83       	st	Z, r24
    5d6c:	91 83       	std	Z+1, r25	; 0x01
    5d6e:	a2 83       	std	Z+2, r26	; 0x02
    5d70:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5d72:	fe 01       	movw	r30, r28
    5d74:	ff 96       	adiw	r30, 0x3f	; 63
    5d76:	60 81       	ld	r22, Z
    5d78:	71 81       	ldd	r23, Z+1	; 0x01
    5d7a:	82 81       	ldd	r24, Z+2	; 0x02
    5d7c:	93 81       	ldd	r25, Z+3	; 0x03
    5d7e:	20 e0       	ldi	r18, 0x00	; 0
    5d80:	30 e0       	ldi	r19, 0x00	; 0
    5d82:	40 e8       	ldi	r20, 0x80	; 128
    5d84:	5f e3       	ldi	r21, 0x3F	; 63
    5d86:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5d8a:	88 23       	and	r24, r24
    5d8c:	2c f4       	brge	.+10     	; 0x5d98 <HAL_LCD_sendCharacter+0x568>
		__ticks = 1;
    5d8e:	81 e0       	ldi	r24, 0x01	; 1
    5d90:	90 e0       	ldi	r25, 0x00	; 0
    5d92:	9e af       	std	Y+62, r25	; 0x3e
    5d94:	8d af       	std	Y+61, r24	; 0x3d
    5d96:	46 c0       	rjmp	.+140    	; 0x5e24 <HAL_LCD_sendCharacter+0x5f4>
	else if (__tmp > 65535)
    5d98:	fe 01       	movw	r30, r28
    5d9a:	ff 96       	adiw	r30, 0x3f	; 63
    5d9c:	60 81       	ld	r22, Z
    5d9e:	71 81       	ldd	r23, Z+1	; 0x01
    5da0:	82 81       	ldd	r24, Z+2	; 0x02
    5da2:	93 81       	ldd	r25, Z+3	; 0x03
    5da4:	20 e0       	ldi	r18, 0x00	; 0
    5da6:	3f ef       	ldi	r19, 0xFF	; 255
    5da8:	4f e7       	ldi	r20, 0x7F	; 127
    5daa:	57 e4       	ldi	r21, 0x47	; 71
    5dac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5db0:	18 16       	cp	r1, r24
    5db2:	64 f5       	brge	.+88     	; 0x5e0c <HAL_LCD_sendCharacter+0x5dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5db4:	fe 01       	movw	r30, r28
    5db6:	ed 5b       	subi	r30, 0xBD	; 189
    5db8:	ff 4f       	sbci	r31, 0xFF	; 255
    5dba:	60 81       	ld	r22, Z
    5dbc:	71 81       	ldd	r23, Z+1	; 0x01
    5dbe:	82 81       	ldd	r24, Z+2	; 0x02
    5dc0:	93 81       	ldd	r25, Z+3	; 0x03
    5dc2:	20 e0       	ldi	r18, 0x00	; 0
    5dc4:	30 e0       	ldi	r19, 0x00	; 0
    5dc6:	40 e2       	ldi	r20, 0x20	; 32
    5dc8:	51 e4       	ldi	r21, 0x41	; 65
    5dca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5dce:	dc 01       	movw	r26, r24
    5dd0:	cb 01       	movw	r24, r22
    5dd2:	bc 01       	movw	r22, r24
    5dd4:	cd 01       	movw	r24, r26
    5dd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5dda:	dc 01       	movw	r26, r24
    5ddc:	cb 01       	movw	r24, r22
    5dde:	9e af       	std	Y+62, r25	; 0x3e
    5de0:	8d af       	std	Y+61, r24	; 0x3d
    5de2:	0f c0       	rjmp	.+30     	; 0x5e02 <HAL_LCD_sendCharacter+0x5d2>
    5de4:	80 e9       	ldi	r24, 0x90	; 144
    5de6:	91 e0       	ldi	r25, 0x01	; 1
    5de8:	9c af       	std	Y+60, r25	; 0x3c
    5dea:	8b af       	std	Y+59, r24	; 0x3b
    5dec:	8b ad       	ldd	r24, Y+59	; 0x3b
    5dee:	9c ad       	ldd	r25, Y+60	; 0x3c
    5df0:	01 97       	sbiw	r24, 0x01	; 1
    5df2:	f1 f7       	brne	.-4      	; 0x5df0 <HAL_LCD_sendCharacter+0x5c0>
    5df4:	9c af       	std	Y+60, r25	; 0x3c
    5df6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5df8:	8d ad       	ldd	r24, Y+61	; 0x3d
    5dfa:	9e ad       	ldd	r25, Y+62	; 0x3e
    5dfc:	01 97       	sbiw	r24, 0x01	; 1
    5dfe:	9e af       	std	Y+62, r25	; 0x3e
    5e00:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e02:	8d ad       	ldd	r24, Y+61	; 0x3d
    5e04:	9e ad       	ldd	r25, Y+62	; 0x3e
    5e06:	00 97       	sbiw	r24, 0x00	; 0
    5e08:	69 f7       	brne	.-38     	; 0x5de4 <HAL_LCD_sendCharacter+0x5b4>
    5e0a:	16 c0       	rjmp	.+44     	; 0x5e38 <HAL_LCD_sendCharacter+0x608>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5e0c:	fe 01       	movw	r30, r28
    5e0e:	ff 96       	adiw	r30, 0x3f	; 63
    5e10:	60 81       	ld	r22, Z
    5e12:	71 81       	ldd	r23, Z+1	; 0x01
    5e14:	82 81       	ldd	r24, Z+2	; 0x02
    5e16:	93 81       	ldd	r25, Z+3	; 0x03
    5e18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e1c:	dc 01       	movw	r26, r24
    5e1e:	cb 01       	movw	r24, r22
    5e20:	9e af       	std	Y+62, r25	; 0x3e
    5e22:	8d af       	std	Y+61, r24	; 0x3d
    5e24:	8d ad       	ldd	r24, Y+61	; 0x3d
    5e26:	9e ad       	ldd	r25, Y+62	; 0x3e
    5e28:	9a af       	std	Y+58, r25	; 0x3a
    5e2a:	89 af       	std	Y+57, r24	; 0x39
    5e2c:	89 ad       	ldd	r24, Y+57	; 0x39
    5e2e:	9a ad       	ldd	r25, Y+58	; 0x3a
    5e30:	01 97       	sbiw	r24, 0x01	; 1
    5e32:	f1 f7       	brne	.-4      	; 0x5e30 <HAL_LCD_sendCharacter+0x600>
    5e34:	9a af       	std	Y+58, r25	; 0x3a
    5e36:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1);
		u8LocalReturn = MCAL_Dio_WritePin(&LCD_E_interface, PIN_LOW);
    5e38:	ce 01       	movw	r24, r28
    5e3a:	89 59       	subi	r24, 0x99	; 153
    5e3c:	9f 4f       	sbci	r25, 0xFF	; 255
    5e3e:	60 e0       	ldi	r22, 0x00	; 0
    5e40:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <MCAL_Dio_WritePin>
    5e44:	fe 01       	movw	r30, r28
    5e46:	ed 59       	subi	r30, 0x9D	; 157
    5e48:	ff 4f       	sbci	r31, 0xFF	; 255
    5e4a:	80 83       	st	Z, r24
    5e4c:	80 e0       	ldi	r24, 0x00	; 0
    5e4e:	90 e0       	ldi	r25, 0x00	; 0
    5e50:	a0 e8       	ldi	r26, 0x80	; 128
    5e52:	bf e3       	ldi	r27, 0x3F	; 63
    5e54:	8d ab       	std	Y+53, r24	; 0x35
    5e56:	9e ab       	std	Y+54, r25	; 0x36
    5e58:	af ab       	std	Y+55, r26	; 0x37
    5e5a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5e5c:	6d a9       	ldd	r22, Y+53	; 0x35
    5e5e:	7e a9       	ldd	r23, Y+54	; 0x36
    5e60:	8f a9       	ldd	r24, Y+55	; 0x37
    5e62:	98 ad       	ldd	r25, Y+56	; 0x38
    5e64:	20 e0       	ldi	r18, 0x00	; 0
    5e66:	30 e0       	ldi	r19, 0x00	; 0
    5e68:	4a e7       	ldi	r20, 0x7A	; 122
    5e6a:	55 e4       	ldi	r21, 0x45	; 69
    5e6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e70:	dc 01       	movw	r26, r24
    5e72:	cb 01       	movw	r24, r22
    5e74:	89 ab       	std	Y+49, r24	; 0x31
    5e76:	9a ab       	std	Y+50, r25	; 0x32
    5e78:	ab ab       	std	Y+51, r26	; 0x33
    5e7a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5e7c:	69 a9       	ldd	r22, Y+49	; 0x31
    5e7e:	7a a9       	ldd	r23, Y+50	; 0x32
    5e80:	8b a9       	ldd	r24, Y+51	; 0x33
    5e82:	9c a9       	ldd	r25, Y+52	; 0x34
    5e84:	20 e0       	ldi	r18, 0x00	; 0
    5e86:	30 e0       	ldi	r19, 0x00	; 0
    5e88:	40 e8       	ldi	r20, 0x80	; 128
    5e8a:	5f e3       	ldi	r21, 0x3F	; 63
    5e8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5e90:	88 23       	and	r24, r24
    5e92:	2c f4       	brge	.+10     	; 0x5e9e <HAL_LCD_sendCharacter+0x66e>
		__ticks = 1;
    5e94:	81 e0       	ldi	r24, 0x01	; 1
    5e96:	90 e0       	ldi	r25, 0x00	; 0
    5e98:	98 ab       	std	Y+48, r25	; 0x30
    5e9a:	8f a7       	std	Y+47, r24	; 0x2f
    5e9c:	3f c0       	rjmp	.+126    	; 0x5f1c <HAL_LCD_sendCharacter+0x6ec>
	else if (__tmp > 65535)
    5e9e:	69 a9       	ldd	r22, Y+49	; 0x31
    5ea0:	7a a9       	ldd	r23, Y+50	; 0x32
    5ea2:	8b a9       	ldd	r24, Y+51	; 0x33
    5ea4:	9c a9       	ldd	r25, Y+52	; 0x34
    5ea6:	20 e0       	ldi	r18, 0x00	; 0
    5ea8:	3f ef       	ldi	r19, 0xFF	; 255
    5eaa:	4f e7       	ldi	r20, 0x7F	; 127
    5eac:	57 e4       	ldi	r21, 0x47	; 71
    5eae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5eb2:	18 16       	cp	r1, r24
    5eb4:	4c f5       	brge	.+82     	; 0x5f08 <HAL_LCD_sendCharacter+0x6d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5eb6:	6d a9       	ldd	r22, Y+53	; 0x35
    5eb8:	7e a9       	ldd	r23, Y+54	; 0x36
    5eba:	8f a9       	ldd	r24, Y+55	; 0x37
    5ebc:	98 ad       	ldd	r25, Y+56	; 0x38
    5ebe:	20 e0       	ldi	r18, 0x00	; 0
    5ec0:	30 e0       	ldi	r19, 0x00	; 0
    5ec2:	40 e2       	ldi	r20, 0x20	; 32
    5ec4:	51 e4       	ldi	r21, 0x41	; 65
    5ec6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5eca:	dc 01       	movw	r26, r24
    5ecc:	cb 01       	movw	r24, r22
    5ece:	bc 01       	movw	r22, r24
    5ed0:	cd 01       	movw	r24, r26
    5ed2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ed6:	dc 01       	movw	r26, r24
    5ed8:	cb 01       	movw	r24, r22
    5eda:	98 ab       	std	Y+48, r25	; 0x30
    5edc:	8f a7       	std	Y+47, r24	; 0x2f
    5ede:	0f c0       	rjmp	.+30     	; 0x5efe <HAL_LCD_sendCharacter+0x6ce>
    5ee0:	80 e9       	ldi	r24, 0x90	; 144
    5ee2:	91 e0       	ldi	r25, 0x01	; 1
    5ee4:	9e a7       	std	Y+46, r25	; 0x2e
    5ee6:	8d a7       	std	Y+45, r24	; 0x2d
    5ee8:	8d a5       	ldd	r24, Y+45	; 0x2d
    5eea:	9e a5       	ldd	r25, Y+46	; 0x2e
    5eec:	01 97       	sbiw	r24, 0x01	; 1
    5eee:	f1 f7       	brne	.-4      	; 0x5eec <HAL_LCD_sendCharacter+0x6bc>
    5ef0:	9e a7       	std	Y+46, r25	; 0x2e
    5ef2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5ef4:	8f a5       	ldd	r24, Y+47	; 0x2f
    5ef6:	98 a9       	ldd	r25, Y+48	; 0x30
    5ef8:	01 97       	sbiw	r24, 0x01	; 1
    5efa:	98 ab       	std	Y+48, r25	; 0x30
    5efc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5efe:	8f a5       	ldd	r24, Y+47	; 0x2f
    5f00:	98 a9       	ldd	r25, Y+48	; 0x30
    5f02:	00 97       	sbiw	r24, 0x00	; 0
    5f04:	69 f7       	brne	.-38     	; 0x5ee0 <HAL_LCD_sendCharacter+0x6b0>
    5f06:	14 c0       	rjmp	.+40     	; 0x5f30 <HAL_LCD_sendCharacter+0x700>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f08:	69 a9       	ldd	r22, Y+49	; 0x31
    5f0a:	7a a9       	ldd	r23, Y+50	; 0x32
    5f0c:	8b a9       	ldd	r24, Y+51	; 0x33
    5f0e:	9c a9       	ldd	r25, Y+52	; 0x34
    5f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f14:	dc 01       	movw	r26, r24
    5f16:	cb 01       	movw	r24, r22
    5f18:	98 ab       	std	Y+48, r25	; 0x30
    5f1a:	8f a7       	std	Y+47, r24	; 0x2f
    5f1c:	8f a5       	ldd	r24, Y+47	; 0x2f
    5f1e:	98 a9       	ldd	r25, Y+48	; 0x30
    5f20:	9c a7       	std	Y+44, r25	; 0x2c
    5f22:	8b a7       	std	Y+43, r24	; 0x2b
    5f24:	8b a5       	ldd	r24, Y+43	; 0x2b
    5f26:	9c a5       	ldd	r25, Y+44	; 0x2c
    5f28:	01 97       	sbiw	r24, 0x01	; 1
    5f2a:	f1 f7       	brne	.-4      	; 0x5f28 <HAL_LCD_sendCharacter+0x6f8>
    5f2c:	9c a7       	std	Y+44, r25	; 0x2c
    5f2e:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		#ifdef LOWER_PORT_PINS
			MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D4_PIN, GET_BIT(data, 0));
    5f30:	fe 01       	movw	r30, r28
    5f32:	e3 59       	subi	r30, 0x93	; 147
    5f34:	ff 4f       	sbci	r31, 0xFF	; 255
    5f36:	80 81       	ld	r24, Z
    5f38:	28 2f       	mov	r18, r24
    5f3a:	21 70       	andi	r18, 0x01	; 1
    5f3c:	ce 01       	movw	r24, r28
    5f3e:	86 59       	subi	r24, 0x96	; 150
    5f40:	9f 4f       	sbci	r25, 0xFF	; 255
    5f42:	61 e0       	ldi	r22, 0x01	; 1
    5f44:	42 2f       	mov	r20, r18
    5f46:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <MCAL_Dio_WriteSinglePin>
			MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D5_PIN, GET_BIT(data, 1));
    5f4a:	fe 01       	movw	r30, r28
    5f4c:	e3 59       	subi	r30, 0x93	; 147
    5f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    5f50:	80 81       	ld	r24, Z
    5f52:	85 95       	asr	r24
    5f54:	28 2f       	mov	r18, r24
    5f56:	21 70       	andi	r18, 0x01	; 1
    5f58:	ce 01       	movw	r24, r28
    5f5a:	86 59       	subi	r24, 0x96	; 150
    5f5c:	9f 4f       	sbci	r25, 0xFF	; 255
    5f5e:	62 e0       	ldi	r22, 0x02	; 2
    5f60:	42 2f       	mov	r20, r18
    5f62:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <MCAL_Dio_WriteSinglePin>
			MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D6_PIN, GET_BIT(data, 2));
    5f66:	fe 01       	movw	r30, r28
    5f68:	e3 59       	subi	r30, 0x93	; 147
    5f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    5f6c:	80 81       	ld	r24, Z
    5f6e:	85 95       	asr	r24
    5f70:	85 95       	asr	r24
    5f72:	28 2f       	mov	r18, r24
    5f74:	21 70       	andi	r18, 0x01	; 1
    5f76:	ce 01       	movw	r24, r28
    5f78:	86 59       	subi	r24, 0x96	; 150
    5f7a:	9f 4f       	sbci	r25, 0xFF	; 255
    5f7c:	64 e0       	ldi	r22, 0x04	; 4
    5f7e:	42 2f       	mov	r20, r18
    5f80:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <MCAL_Dio_WriteSinglePin>
			MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D7_PIN, GET_BIT(data, 3));
    5f84:	fe 01       	movw	r30, r28
    5f86:	e3 59       	subi	r30, 0x93	; 147
    5f88:	ff 4f       	sbci	r31, 0xFF	; 255
    5f8a:	80 81       	ld	r24, Z
    5f8c:	85 95       	asr	r24
    5f8e:	85 95       	asr	r24
    5f90:	85 95       	asr	r24
    5f92:	28 2f       	mov	r18, r24
    5f94:	21 70       	andi	r18, 0x01	; 1
    5f96:	ce 01       	movw	r24, r28
    5f98:	86 59       	subi	r24, 0x96	; 150
    5f9a:	9f 4f       	sbci	r25, 0xFF	; 255
    5f9c:	60 e1       	ldi	r22, 0x10	; 16
    5f9e:	42 2f       	mov	r20, r18
    5fa0:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <MCAL_Dio_WriteSinglePin>
    5fa4:	80 e0       	ldi	r24, 0x00	; 0
    5fa6:	90 e0       	ldi	r25, 0x00	; 0
    5fa8:	a0 e8       	ldi	r26, 0x80	; 128
    5faa:	bf e3       	ldi	r27, 0x3F	; 63
    5fac:	8f a3       	std	Y+39, r24	; 0x27
    5fae:	98 a7       	std	Y+40, r25	; 0x28
    5fb0:	a9 a7       	std	Y+41, r26	; 0x29
    5fb2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5fb4:	6f a1       	ldd	r22, Y+39	; 0x27
    5fb6:	78 a5       	ldd	r23, Y+40	; 0x28
    5fb8:	89 a5       	ldd	r24, Y+41	; 0x29
    5fba:	9a a5       	ldd	r25, Y+42	; 0x2a
    5fbc:	20 e0       	ldi	r18, 0x00	; 0
    5fbe:	30 e0       	ldi	r19, 0x00	; 0
    5fc0:	4a e7       	ldi	r20, 0x7A	; 122
    5fc2:	55 e4       	ldi	r21, 0x45	; 69
    5fc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5fc8:	dc 01       	movw	r26, r24
    5fca:	cb 01       	movw	r24, r22
    5fcc:	8b a3       	std	Y+35, r24	; 0x23
    5fce:	9c a3       	std	Y+36, r25	; 0x24
    5fd0:	ad a3       	std	Y+37, r26	; 0x25
    5fd2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5fd4:	6b a1       	ldd	r22, Y+35	; 0x23
    5fd6:	7c a1       	ldd	r23, Y+36	; 0x24
    5fd8:	8d a1       	ldd	r24, Y+37	; 0x25
    5fda:	9e a1       	ldd	r25, Y+38	; 0x26
    5fdc:	20 e0       	ldi	r18, 0x00	; 0
    5fde:	30 e0       	ldi	r19, 0x00	; 0
    5fe0:	40 e8       	ldi	r20, 0x80	; 128
    5fe2:	5f e3       	ldi	r21, 0x3F	; 63
    5fe4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5fe8:	88 23       	and	r24, r24
    5fea:	2c f4       	brge	.+10     	; 0x5ff6 <HAL_LCD_sendCharacter+0x7c6>
		__ticks = 1;
    5fec:	81 e0       	ldi	r24, 0x01	; 1
    5fee:	90 e0       	ldi	r25, 0x00	; 0
    5ff0:	9a a3       	std	Y+34, r25	; 0x22
    5ff2:	89 a3       	std	Y+33, r24	; 0x21
    5ff4:	3f c0       	rjmp	.+126    	; 0x6074 <HAL_LCD_sendCharacter+0x844>
	else if (__tmp > 65535)
    5ff6:	6b a1       	ldd	r22, Y+35	; 0x23
    5ff8:	7c a1       	ldd	r23, Y+36	; 0x24
    5ffa:	8d a1       	ldd	r24, Y+37	; 0x25
    5ffc:	9e a1       	ldd	r25, Y+38	; 0x26
    5ffe:	20 e0       	ldi	r18, 0x00	; 0
    6000:	3f ef       	ldi	r19, 0xFF	; 255
    6002:	4f e7       	ldi	r20, 0x7F	; 127
    6004:	57 e4       	ldi	r21, 0x47	; 71
    6006:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    600a:	18 16       	cp	r1, r24
    600c:	4c f5       	brge	.+82     	; 0x6060 <HAL_LCD_sendCharacter+0x830>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    600e:	6f a1       	ldd	r22, Y+39	; 0x27
    6010:	78 a5       	ldd	r23, Y+40	; 0x28
    6012:	89 a5       	ldd	r24, Y+41	; 0x29
    6014:	9a a5       	ldd	r25, Y+42	; 0x2a
    6016:	20 e0       	ldi	r18, 0x00	; 0
    6018:	30 e0       	ldi	r19, 0x00	; 0
    601a:	40 e2       	ldi	r20, 0x20	; 32
    601c:	51 e4       	ldi	r21, 0x41	; 65
    601e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6022:	dc 01       	movw	r26, r24
    6024:	cb 01       	movw	r24, r22
    6026:	bc 01       	movw	r22, r24
    6028:	cd 01       	movw	r24, r26
    602a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    602e:	dc 01       	movw	r26, r24
    6030:	cb 01       	movw	r24, r22
    6032:	9a a3       	std	Y+34, r25	; 0x22
    6034:	89 a3       	std	Y+33, r24	; 0x21
    6036:	0f c0       	rjmp	.+30     	; 0x6056 <HAL_LCD_sendCharacter+0x826>
    6038:	80 e9       	ldi	r24, 0x90	; 144
    603a:	91 e0       	ldi	r25, 0x01	; 1
    603c:	98 a3       	std	Y+32, r25	; 0x20
    603e:	8f 8f       	std	Y+31, r24	; 0x1f
    6040:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6042:	98 a1       	ldd	r25, Y+32	; 0x20
    6044:	01 97       	sbiw	r24, 0x01	; 1
    6046:	f1 f7       	brne	.-4      	; 0x6044 <HAL_LCD_sendCharacter+0x814>
    6048:	98 a3       	std	Y+32, r25	; 0x20
    604a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    604c:	89 a1       	ldd	r24, Y+33	; 0x21
    604e:	9a a1       	ldd	r25, Y+34	; 0x22
    6050:	01 97       	sbiw	r24, 0x01	; 1
    6052:	9a a3       	std	Y+34, r25	; 0x22
    6054:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6056:	89 a1       	ldd	r24, Y+33	; 0x21
    6058:	9a a1       	ldd	r25, Y+34	; 0x22
    605a:	00 97       	sbiw	r24, 0x00	; 0
    605c:	69 f7       	brne	.-38     	; 0x6038 <HAL_LCD_sendCharacter+0x808>
    605e:	14 c0       	rjmp	.+40     	; 0x6088 <HAL_LCD_sendCharacter+0x858>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6060:	6b a1       	ldd	r22, Y+35	; 0x23
    6062:	7c a1       	ldd	r23, Y+36	; 0x24
    6064:	8d a1       	ldd	r24, Y+37	; 0x25
    6066:	9e a1       	ldd	r25, Y+38	; 0x26
    6068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    606c:	dc 01       	movw	r26, r24
    606e:	cb 01       	movw	r24, r22
    6070:	9a a3       	std	Y+34, r25	; 0x22
    6072:	89 a3       	std	Y+33, r24	; 0x21
    6074:	89 a1       	ldd	r24, Y+33	; 0x21
    6076:	9a a1       	ldd	r25, Y+34	; 0x22
    6078:	9e 8f       	std	Y+30, r25	; 0x1e
    607a:	8d 8f       	std	Y+29, r24	; 0x1d
    607c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    607e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6080:	01 97       	sbiw	r24, 0x01	; 1
    6082:	f1 f7       	brne	.-4      	; 0x6080 <HAL_LCD_sendCharacter+0x850>
    6084:	9e 8f       	std	Y+30, r25	; 0x1e
    6086:	8d 8f       	std	Y+29, r24	; 0x1d
			MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D0_PIN, GET_BIT(data, 0));
			MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D1_PIN, GET_BIT(data, 1));
			MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D2_PIN, GET_BIT(data, 2));
			MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D3_PIN, GET_BIT(data, 3));
		#endif
		u8LocalReturn = MCAL_Dio_WritePin(&LCD_E_interface, PIN_HIGH);
    6088:	ce 01       	movw	r24, r28
    608a:	89 59       	subi	r24, 0x99	; 153
    608c:	9f 4f       	sbci	r25, 0xFF	; 255
    608e:	6f ef       	ldi	r22, 0xFF	; 255
    6090:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <MCAL_Dio_WritePin>
    6094:	fe 01       	movw	r30, r28
    6096:	ed 59       	subi	r30, 0x9D	; 157
    6098:	ff 4f       	sbci	r31, 0xFF	; 255
    609a:	80 83       	st	Z, r24
    609c:	80 e0       	ldi	r24, 0x00	; 0
    609e:	90 e0       	ldi	r25, 0x00	; 0
    60a0:	a0 e8       	ldi	r26, 0x80	; 128
    60a2:	bf e3       	ldi	r27, 0x3F	; 63
    60a4:	89 8f       	std	Y+25, r24	; 0x19
    60a6:	9a 8f       	std	Y+26, r25	; 0x1a
    60a8:	ab 8f       	std	Y+27, r26	; 0x1b
    60aa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    60ac:	69 8d       	ldd	r22, Y+25	; 0x19
    60ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    60b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    60b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    60b4:	20 e0       	ldi	r18, 0x00	; 0
    60b6:	30 e0       	ldi	r19, 0x00	; 0
    60b8:	4a e7       	ldi	r20, 0x7A	; 122
    60ba:	55 e4       	ldi	r21, 0x45	; 69
    60bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    60c0:	dc 01       	movw	r26, r24
    60c2:	cb 01       	movw	r24, r22
    60c4:	8d 8b       	std	Y+21, r24	; 0x15
    60c6:	9e 8b       	std	Y+22, r25	; 0x16
    60c8:	af 8b       	std	Y+23, r26	; 0x17
    60ca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    60cc:	6d 89       	ldd	r22, Y+21	; 0x15
    60ce:	7e 89       	ldd	r23, Y+22	; 0x16
    60d0:	8f 89       	ldd	r24, Y+23	; 0x17
    60d2:	98 8d       	ldd	r25, Y+24	; 0x18
    60d4:	20 e0       	ldi	r18, 0x00	; 0
    60d6:	30 e0       	ldi	r19, 0x00	; 0
    60d8:	40 e8       	ldi	r20, 0x80	; 128
    60da:	5f e3       	ldi	r21, 0x3F	; 63
    60dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    60e0:	88 23       	and	r24, r24
    60e2:	2c f4       	brge	.+10     	; 0x60ee <HAL_LCD_sendCharacter+0x8be>
		__ticks = 1;
    60e4:	81 e0       	ldi	r24, 0x01	; 1
    60e6:	90 e0       	ldi	r25, 0x00	; 0
    60e8:	9c 8b       	std	Y+20, r25	; 0x14
    60ea:	8b 8b       	std	Y+19, r24	; 0x13
    60ec:	3f c0       	rjmp	.+126    	; 0x616c <HAL_LCD_sendCharacter+0x93c>
	else if (__tmp > 65535)
    60ee:	6d 89       	ldd	r22, Y+21	; 0x15
    60f0:	7e 89       	ldd	r23, Y+22	; 0x16
    60f2:	8f 89       	ldd	r24, Y+23	; 0x17
    60f4:	98 8d       	ldd	r25, Y+24	; 0x18
    60f6:	20 e0       	ldi	r18, 0x00	; 0
    60f8:	3f ef       	ldi	r19, 0xFF	; 255
    60fa:	4f e7       	ldi	r20, 0x7F	; 127
    60fc:	57 e4       	ldi	r21, 0x47	; 71
    60fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6102:	18 16       	cp	r1, r24
    6104:	4c f5       	brge	.+82     	; 0x6158 <HAL_LCD_sendCharacter+0x928>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6106:	69 8d       	ldd	r22, Y+25	; 0x19
    6108:	7a 8d       	ldd	r23, Y+26	; 0x1a
    610a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    610c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    610e:	20 e0       	ldi	r18, 0x00	; 0
    6110:	30 e0       	ldi	r19, 0x00	; 0
    6112:	40 e2       	ldi	r20, 0x20	; 32
    6114:	51 e4       	ldi	r21, 0x41	; 65
    6116:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    611a:	dc 01       	movw	r26, r24
    611c:	cb 01       	movw	r24, r22
    611e:	bc 01       	movw	r22, r24
    6120:	cd 01       	movw	r24, r26
    6122:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6126:	dc 01       	movw	r26, r24
    6128:	cb 01       	movw	r24, r22
    612a:	9c 8b       	std	Y+20, r25	; 0x14
    612c:	8b 8b       	std	Y+19, r24	; 0x13
    612e:	0f c0       	rjmp	.+30     	; 0x614e <HAL_LCD_sendCharacter+0x91e>
    6130:	80 e9       	ldi	r24, 0x90	; 144
    6132:	91 e0       	ldi	r25, 0x01	; 1
    6134:	9a 8b       	std	Y+18, r25	; 0x12
    6136:	89 8b       	std	Y+17, r24	; 0x11
    6138:	89 89       	ldd	r24, Y+17	; 0x11
    613a:	9a 89       	ldd	r25, Y+18	; 0x12
    613c:	01 97       	sbiw	r24, 0x01	; 1
    613e:	f1 f7       	brne	.-4      	; 0x613c <HAL_LCD_sendCharacter+0x90c>
    6140:	9a 8b       	std	Y+18, r25	; 0x12
    6142:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6144:	8b 89       	ldd	r24, Y+19	; 0x13
    6146:	9c 89       	ldd	r25, Y+20	; 0x14
    6148:	01 97       	sbiw	r24, 0x01	; 1
    614a:	9c 8b       	std	Y+20, r25	; 0x14
    614c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    614e:	8b 89       	ldd	r24, Y+19	; 0x13
    6150:	9c 89       	ldd	r25, Y+20	; 0x14
    6152:	00 97       	sbiw	r24, 0x00	; 0
    6154:	69 f7       	brne	.-38     	; 0x6130 <HAL_LCD_sendCharacter+0x900>
    6156:	14 c0       	rjmp	.+40     	; 0x6180 <HAL_LCD_sendCharacter+0x950>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6158:	6d 89       	ldd	r22, Y+21	; 0x15
    615a:	7e 89       	ldd	r23, Y+22	; 0x16
    615c:	8f 89       	ldd	r24, Y+23	; 0x17
    615e:	98 8d       	ldd	r25, Y+24	; 0x18
    6160:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6164:	dc 01       	movw	r26, r24
    6166:	cb 01       	movw	r24, r22
    6168:	9c 8b       	std	Y+20, r25	; 0x14
    616a:	8b 8b       	std	Y+19, r24	; 0x13
    616c:	8b 89       	ldd	r24, Y+19	; 0x13
    616e:	9c 89       	ldd	r25, Y+20	; 0x14
    6170:	98 8b       	std	Y+16, r25	; 0x10
    6172:	8f 87       	std	Y+15, r24	; 0x0f
    6174:	8f 85       	ldd	r24, Y+15	; 0x0f
    6176:	98 89       	ldd	r25, Y+16	; 0x10
    6178:	01 97       	sbiw	r24, 0x01	; 1
    617a:	f1 f7       	brne	.-4      	; 0x6178 <HAL_LCD_sendCharacter+0x948>
    617c:	98 8b       	std	Y+16, r25	; 0x10
    617e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		u8LocalReturn = MCAL_Dio_WritePin(&LCD_E_interface, PIN_LOW);
    6180:	ce 01       	movw	r24, r28
    6182:	89 59       	subi	r24, 0x99	; 153
    6184:	9f 4f       	sbci	r25, 0xFF	; 255
    6186:	60 e0       	ldi	r22, 0x00	; 0
    6188:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <MCAL_Dio_WritePin>
    618c:	fe 01       	movw	r30, r28
    618e:	ed 59       	subi	r30, 0x9D	; 157
    6190:	ff 4f       	sbci	r31, 0xFF	; 255
    6192:	80 83       	st	Z, r24
    6194:	80 e0       	ldi	r24, 0x00	; 0
    6196:	90 e0       	ldi	r25, 0x00	; 0
    6198:	a0 e8       	ldi	r26, 0x80	; 128
    619a:	bf e3       	ldi	r27, 0x3F	; 63
    619c:	8b 87       	std	Y+11, r24	; 0x0b
    619e:	9c 87       	std	Y+12, r25	; 0x0c
    61a0:	ad 87       	std	Y+13, r26	; 0x0d
    61a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    61a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    61a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    61a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    61aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    61ac:	20 e0       	ldi	r18, 0x00	; 0
    61ae:	30 e0       	ldi	r19, 0x00	; 0
    61b0:	4a e7       	ldi	r20, 0x7A	; 122
    61b2:	55 e4       	ldi	r21, 0x45	; 69
    61b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    61b8:	dc 01       	movw	r26, r24
    61ba:	cb 01       	movw	r24, r22
    61bc:	8f 83       	std	Y+7, r24	; 0x07
    61be:	98 87       	std	Y+8, r25	; 0x08
    61c0:	a9 87       	std	Y+9, r26	; 0x09
    61c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    61c4:	6f 81       	ldd	r22, Y+7	; 0x07
    61c6:	78 85       	ldd	r23, Y+8	; 0x08
    61c8:	89 85       	ldd	r24, Y+9	; 0x09
    61ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    61cc:	20 e0       	ldi	r18, 0x00	; 0
    61ce:	30 e0       	ldi	r19, 0x00	; 0
    61d0:	40 e8       	ldi	r20, 0x80	; 128
    61d2:	5f e3       	ldi	r21, 0x3F	; 63
    61d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    61d8:	88 23       	and	r24, r24
    61da:	2c f4       	brge	.+10     	; 0x61e6 <HAL_LCD_sendCharacter+0x9b6>
		__ticks = 1;
    61dc:	81 e0       	ldi	r24, 0x01	; 1
    61de:	90 e0       	ldi	r25, 0x00	; 0
    61e0:	9e 83       	std	Y+6, r25	; 0x06
    61e2:	8d 83       	std	Y+5, r24	; 0x05
    61e4:	3f c0       	rjmp	.+126    	; 0x6264 <HAL_LCD_sendCharacter+0xa34>
	else if (__tmp > 65535)
    61e6:	6f 81       	ldd	r22, Y+7	; 0x07
    61e8:	78 85       	ldd	r23, Y+8	; 0x08
    61ea:	89 85       	ldd	r24, Y+9	; 0x09
    61ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    61ee:	20 e0       	ldi	r18, 0x00	; 0
    61f0:	3f ef       	ldi	r19, 0xFF	; 255
    61f2:	4f e7       	ldi	r20, 0x7F	; 127
    61f4:	57 e4       	ldi	r21, 0x47	; 71
    61f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    61fa:	18 16       	cp	r1, r24
    61fc:	4c f5       	brge	.+82     	; 0x6250 <HAL_LCD_sendCharacter+0xa20>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    61fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    6200:	7c 85       	ldd	r23, Y+12	; 0x0c
    6202:	8d 85       	ldd	r24, Y+13	; 0x0d
    6204:	9e 85       	ldd	r25, Y+14	; 0x0e
    6206:	20 e0       	ldi	r18, 0x00	; 0
    6208:	30 e0       	ldi	r19, 0x00	; 0
    620a:	40 e2       	ldi	r20, 0x20	; 32
    620c:	51 e4       	ldi	r21, 0x41	; 65
    620e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6212:	dc 01       	movw	r26, r24
    6214:	cb 01       	movw	r24, r22
    6216:	bc 01       	movw	r22, r24
    6218:	cd 01       	movw	r24, r26
    621a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    621e:	dc 01       	movw	r26, r24
    6220:	cb 01       	movw	r24, r22
    6222:	9e 83       	std	Y+6, r25	; 0x06
    6224:	8d 83       	std	Y+5, r24	; 0x05
    6226:	0f c0       	rjmp	.+30     	; 0x6246 <HAL_LCD_sendCharacter+0xa16>
    6228:	80 e9       	ldi	r24, 0x90	; 144
    622a:	91 e0       	ldi	r25, 0x01	; 1
    622c:	9c 83       	std	Y+4, r25	; 0x04
    622e:	8b 83       	std	Y+3, r24	; 0x03
    6230:	8b 81       	ldd	r24, Y+3	; 0x03
    6232:	9c 81       	ldd	r25, Y+4	; 0x04
    6234:	01 97       	sbiw	r24, 0x01	; 1
    6236:	f1 f7       	brne	.-4      	; 0x6234 <HAL_LCD_sendCharacter+0xa04>
    6238:	9c 83       	std	Y+4, r25	; 0x04
    623a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    623c:	8d 81       	ldd	r24, Y+5	; 0x05
    623e:	9e 81       	ldd	r25, Y+6	; 0x06
    6240:	01 97       	sbiw	r24, 0x01	; 1
    6242:	9e 83       	std	Y+6, r25	; 0x06
    6244:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6246:	8d 81       	ldd	r24, Y+5	; 0x05
    6248:	9e 81       	ldd	r25, Y+6	; 0x06
    624a:	00 97       	sbiw	r24, 0x00	; 0
    624c:	69 f7       	brne	.-38     	; 0x6228 <HAL_LCD_sendCharacter+0x9f8>
    624e:	14 c0       	rjmp	.+40     	; 0x6278 <HAL_LCD_sendCharacter+0xa48>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6250:	6f 81       	ldd	r22, Y+7	; 0x07
    6252:	78 85       	ldd	r23, Y+8	; 0x08
    6254:	89 85       	ldd	r24, Y+9	; 0x09
    6256:	9a 85       	ldd	r25, Y+10	; 0x0a
    6258:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    625c:	dc 01       	movw	r26, r24
    625e:	cb 01       	movw	r24, r22
    6260:	9e 83       	std	Y+6, r25	; 0x06
    6262:	8d 83       	std	Y+5, r24	; 0x05
    6264:	8d 81       	ldd	r24, Y+5	; 0x05
    6266:	9e 81       	ldd	r25, Y+6	; 0x06
    6268:	9a 83       	std	Y+2, r25	; 0x02
    626a:	89 83       	std	Y+1, r24	; 0x01
    626c:	89 81       	ldd	r24, Y+1	; 0x01
    626e:	9a 81       	ldd	r25, Y+2	; 0x02
    6270:	01 97       	sbiw	r24, 0x01	; 1
    6272:	f1 f7       	brne	.-4      	; 0x6270 <HAL_LCD_sendCharacter+0xa40>
    6274:	9a 83       	std	Y+2, r25	; 0x02
    6276:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		#endif

	return u8LocalReturn;
    6278:	fe 01       	movw	r30, r28
    627a:	ed 59       	subi	r30, 0x9D	; 157
    627c:	ff 4f       	sbci	r31, 0xFF	; 255
    627e:	80 81       	ld	r24, Z
}
    6280:	c4 58       	subi	r28, 0x84	; 132
    6282:	df 4f       	sbci	r29, 0xFF	; 255
    6284:	0f b6       	in	r0, 0x3f	; 63
    6286:	f8 94       	cli
    6288:	de bf       	out	0x3e, r29	; 62
    628a:	0f be       	out	0x3f, r0	; 63
    628c:	cd bf       	out	0x3d, r28	; 61
    628e:	cf 91       	pop	r28
    6290:	df 91       	pop	r29
    6292:	1f 91       	pop	r17
    6294:	0f 91       	pop	r16
    6296:	08 95       	ret

00006298 <HAL_LCD_sendString>:

/* Function to display a string on the LCD */
E_ErrorType HAL_LCD_sendString(const char *str)
{
    6298:	df 93       	push	r29
    629a:	cf 93       	push	r28
    629c:	00 d0       	rcall	.+0      	; 0x629e <HAL_LCD_sendString+0x6>
    629e:	00 d0       	rcall	.+0      	; 0x62a0 <HAL_LCD_sendString+0x8>
    62a0:	cd b7       	in	r28, 0x3d	; 61
    62a2:	de b7       	in	r29, 0x3e	; 62
    62a4:	9c 83       	std	Y+4, r25	; 0x04
    62a6:	8b 83       	std	Y+3, r24	; 0x03
	E_ErrorType u8LocalReturn = E_NOT_OK;
    62a8:	81 e0       	ldi	r24, 0x01	; 1
    62aa:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char i;
	for(i =0 ; str[i] != '\0'; i++)
    62ac:	19 82       	std	Y+1, r1	; 0x01
    62ae:	0f c0       	rjmp	.+30     	; 0x62ce <HAL_LCD_sendString+0x36>
	{
		u8LocalReturn = HAL_LCD_sendCharacter(str[i]);
    62b0:	89 81       	ldd	r24, Y+1	; 0x01
    62b2:	28 2f       	mov	r18, r24
    62b4:	30 e0       	ldi	r19, 0x00	; 0
    62b6:	8b 81       	ldd	r24, Y+3	; 0x03
    62b8:	9c 81       	ldd	r25, Y+4	; 0x04
    62ba:	fc 01       	movw	r30, r24
    62bc:	e2 0f       	add	r30, r18
    62be:	f3 1f       	adc	r31, r19
    62c0:	80 81       	ld	r24, Z
    62c2:	0e 94 18 2c 	call	0x5830	; 0x5830 <HAL_LCD_sendCharacter>
    62c6:	8a 83       	std	Y+2, r24	; 0x02
/* Function to display a string on the LCD */
E_ErrorType HAL_LCD_sendString(const char *str)
{
	E_ErrorType u8LocalReturn = E_NOT_OK;
	unsigned char i;
	for(i =0 ; str[i] != '\0'; i++)
    62c8:	89 81       	ldd	r24, Y+1	; 0x01
    62ca:	8f 5f       	subi	r24, 0xFF	; 255
    62cc:	89 83       	std	Y+1, r24	; 0x01
    62ce:	89 81       	ldd	r24, Y+1	; 0x01
    62d0:	28 2f       	mov	r18, r24
    62d2:	30 e0       	ldi	r19, 0x00	; 0
    62d4:	8b 81       	ldd	r24, Y+3	; 0x03
    62d6:	9c 81       	ldd	r25, Y+4	; 0x04
    62d8:	fc 01       	movw	r30, r24
    62da:	e2 0f       	add	r30, r18
    62dc:	f3 1f       	adc	r31, r19
    62de:	80 81       	ld	r24, Z
    62e0:	88 23       	and	r24, r24
    62e2:	31 f7       	brne	.-52     	; 0x62b0 <HAL_LCD_sendString+0x18>
	{
		u8LocalReturn = HAL_LCD_sendCharacter(str[i]);
	}
	return u8LocalReturn;
    62e4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    62e6:	0f 90       	pop	r0
    62e8:	0f 90       	pop	r0
    62ea:	0f 90       	pop	r0
    62ec:	0f 90       	pop	r0
    62ee:	cf 91       	pop	r28
    62f0:	df 91       	pop	r29
    62f2:	08 95       	ret

000062f4 <HAL_LCD_clearScreen>:

/* Function to clear the LCD screen */
E_ErrorType HAL_LCD_clearScreen()
{
    62f4:	df 93       	push	r29
    62f6:	cf 93       	push	r28
    62f8:	cd b7       	in	r28, 0x3d	; 61
    62fa:	de b7       	in	r29, 0x3e	; 62
    62fc:	2f 97       	sbiw	r28, 0x0f	; 15
    62fe:	0f b6       	in	r0, 0x3f	; 63
    6300:	f8 94       	cli
    6302:	de bf       	out	0x3e, r29	; 62
    6304:	0f be       	out	0x3f, r0	; 63
    6306:	cd bf       	out	0x3d, r28	; 61
	E_ErrorType u8LocalReturn = E_NOT_OK;
    6308:	81 e0       	ldi	r24, 0x01	; 1
    630a:	8f 87       	std	Y+15, r24	; 0x0f
	u8LocalReturn = HAL_LCD_sendCommand(CLEAR_COMMAND);
    630c:	81 e0       	ldi	r24, 0x01	; 1
    630e:	0e 94 f0 25 	call	0x4be0	; 0x4be0 <HAL_LCD_sendCommand>
    6312:	8f 87       	std	Y+15, r24	; 0x0f
    6314:	80 e0       	ldi	r24, 0x00	; 0
    6316:	90 e0       	ldi	r25, 0x00	; 0
    6318:	a0 e2       	ldi	r26, 0x20	; 32
    631a:	b1 e4       	ldi	r27, 0x41	; 65
    631c:	8b 87       	std	Y+11, r24	; 0x0b
    631e:	9c 87       	std	Y+12, r25	; 0x0c
    6320:	ad 87       	std	Y+13, r26	; 0x0d
    6322:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6324:	6b 85       	ldd	r22, Y+11	; 0x0b
    6326:	7c 85       	ldd	r23, Y+12	; 0x0c
    6328:	8d 85       	ldd	r24, Y+13	; 0x0d
    632a:	9e 85       	ldd	r25, Y+14	; 0x0e
    632c:	20 e0       	ldi	r18, 0x00	; 0
    632e:	30 e0       	ldi	r19, 0x00	; 0
    6330:	4a e7       	ldi	r20, 0x7A	; 122
    6332:	55 e4       	ldi	r21, 0x45	; 69
    6334:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6338:	dc 01       	movw	r26, r24
    633a:	cb 01       	movw	r24, r22
    633c:	8f 83       	std	Y+7, r24	; 0x07
    633e:	98 87       	std	Y+8, r25	; 0x08
    6340:	a9 87       	std	Y+9, r26	; 0x09
    6342:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6344:	6f 81       	ldd	r22, Y+7	; 0x07
    6346:	78 85       	ldd	r23, Y+8	; 0x08
    6348:	89 85       	ldd	r24, Y+9	; 0x09
    634a:	9a 85       	ldd	r25, Y+10	; 0x0a
    634c:	20 e0       	ldi	r18, 0x00	; 0
    634e:	30 e0       	ldi	r19, 0x00	; 0
    6350:	40 e8       	ldi	r20, 0x80	; 128
    6352:	5f e3       	ldi	r21, 0x3F	; 63
    6354:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6358:	88 23       	and	r24, r24
    635a:	2c f4       	brge	.+10     	; 0x6366 <HAL_LCD_clearScreen+0x72>
		__ticks = 1;
    635c:	81 e0       	ldi	r24, 0x01	; 1
    635e:	90 e0       	ldi	r25, 0x00	; 0
    6360:	9e 83       	std	Y+6, r25	; 0x06
    6362:	8d 83       	std	Y+5, r24	; 0x05
    6364:	3f c0       	rjmp	.+126    	; 0x63e4 <HAL_LCD_clearScreen+0xf0>
	else if (__tmp > 65535)
    6366:	6f 81       	ldd	r22, Y+7	; 0x07
    6368:	78 85       	ldd	r23, Y+8	; 0x08
    636a:	89 85       	ldd	r24, Y+9	; 0x09
    636c:	9a 85       	ldd	r25, Y+10	; 0x0a
    636e:	20 e0       	ldi	r18, 0x00	; 0
    6370:	3f ef       	ldi	r19, 0xFF	; 255
    6372:	4f e7       	ldi	r20, 0x7F	; 127
    6374:	57 e4       	ldi	r21, 0x47	; 71
    6376:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    637a:	18 16       	cp	r1, r24
    637c:	4c f5       	brge	.+82     	; 0x63d0 <HAL_LCD_clearScreen+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    637e:	6b 85       	ldd	r22, Y+11	; 0x0b
    6380:	7c 85       	ldd	r23, Y+12	; 0x0c
    6382:	8d 85       	ldd	r24, Y+13	; 0x0d
    6384:	9e 85       	ldd	r25, Y+14	; 0x0e
    6386:	20 e0       	ldi	r18, 0x00	; 0
    6388:	30 e0       	ldi	r19, 0x00	; 0
    638a:	40 e2       	ldi	r20, 0x20	; 32
    638c:	51 e4       	ldi	r21, 0x41	; 65
    638e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6392:	dc 01       	movw	r26, r24
    6394:	cb 01       	movw	r24, r22
    6396:	bc 01       	movw	r22, r24
    6398:	cd 01       	movw	r24, r26
    639a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    639e:	dc 01       	movw	r26, r24
    63a0:	cb 01       	movw	r24, r22
    63a2:	9e 83       	std	Y+6, r25	; 0x06
    63a4:	8d 83       	std	Y+5, r24	; 0x05
    63a6:	0f c0       	rjmp	.+30     	; 0x63c6 <HAL_LCD_clearScreen+0xd2>
    63a8:	80 e9       	ldi	r24, 0x90	; 144
    63aa:	91 e0       	ldi	r25, 0x01	; 1
    63ac:	9c 83       	std	Y+4, r25	; 0x04
    63ae:	8b 83       	std	Y+3, r24	; 0x03
    63b0:	8b 81       	ldd	r24, Y+3	; 0x03
    63b2:	9c 81       	ldd	r25, Y+4	; 0x04
    63b4:	01 97       	sbiw	r24, 0x01	; 1
    63b6:	f1 f7       	brne	.-4      	; 0x63b4 <HAL_LCD_clearScreen+0xc0>
    63b8:	9c 83       	std	Y+4, r25	; 0x04
    63ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    63bc:	8d 81       	ldd	r24, Y+5	; 0x05
    63be:	9e 81       	ldd	r25, Y+6	; 0x06
    63c0:	01 97       	sbiw	r24, 0x01	; 1
    63c2:	9e 83       	std	Y+6, r25	; 0x06
    63c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    63c6:	8d 81       	ldd	r24, Y+5	; 0x05
    63c8:	9e 81       	ldd	r25, Y+6	; 0x06
    63ca:	00 97       	sbiw	r24, 0x00	; 0
    63cc:	69 f7       	brne	.-38     	; 0x63a8 <HAL_LCD_clearScreen+0xb4>
    63ce:	14 c0       	rjmp	.+40     	; 0x63f8 <HAL_LCD_clearScreen+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    63d0:	6f 81       	ldd	r22, Y+7	; 0x07
    63d2:	78 85       	ldd	r23, Y+8	; 0x08
    63d4:	89 85       	ldd	r24, Y+9	; 0x09
    63d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    63d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    63dc:	dc 01       	movw	r26, r24
    63de:	cb 01       	movw	r24, r22
    63e0:	9e 83       	std	Y+6, r25	; 0x06
    63e2:	8d 83       	std	Y+5, r24	; 0x05
    63e4:	8d 81       	ldd	r24, Y+5	; 0x05
    63e6:	9e 81       	ldd	r25, Y+6	; 0x06
    63e8:	9a 83       	std	Y+2, r25	; 0x02
    63ea:	89 83       	std	Y+1, r24	; 0x01
    63ec:	89 81       	ldd	r24, Y+1	; 0x01
    63ee:	9a 81       	ldd	r25, Y+2	; 0x02
    63f0:	01 97       	sbiw	r24, 0x01	; 1
    63f2:	f1 f7       	brne	.-4      	; 0x63f0 <HAL_LCD_clearScreen+0xfc>
    63f4:	9a 83       	std	Y+2, r25	; 0x02
    63f6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	u8LocalReturn = HAL_LCD_sendCommand(SHIFT_CURSOR_RIGHT);
    63f8:	86 e0       	ldi	r24, 0x06	; 6
    63fa:	0e 94 f0 25 	call	0x4be0	; 0x4be0 <HAL_LCD_sendCommand>
    63fe:	8f 87       	std	Y+15, r24	; 0x0f
	return u8LocalReturn;
    6400:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    6402:	2f 96       	adiw	r28, 0x0f	; 15
    6404:	0f b6       	in	r0, 0x3f	; 63
    6406:	f8 94       	cli
    6408:	de bf       	out	0x3e, r29	; 62
    640a:	0f be       	out	0x3f, r0	; 63
    640c:	cd bf       	out	0x3d, r28	; 61
    640e:	cf 91       	pop	r28
    6410:	df 91       	pop	r29
    6412:	08 95       	ret

00006414 <HAL_LCD_displaystringRowColumn>:

/* Function to display a string on a certain row and column on the LCD screen */

E_ErrorType HAL_LCD_displaystringRowColumn(const char *Str ,LCD_row row,LCD_column col)
{
    6414:	df 93       	push	r29
    6416:	cf 93       	push	r28
    6418:	00 d0       	rcall	.+0      	; 0x641a <HAL_LCD_displaystringRowColumn+0x6>
    641a:	00 d0       	rcall	.+0      	; 0x641c <HAL_LCD_displaystringRowColumn+0x8>
    641c:	0f 92       	push	r0
    641e:	cd b7       	in	r28, 0x3d	; 61
    6420:	de b7       	in	r29, 0x3e	; 62
    6422:	9b 83       	std	Y+3, r25	; 0x03
    6424:	8a 83       	std	Y+2, r24	; 0x02
    6426:	6c 83       	std	Y+4, r22	; 0x04
    6428:	4d 83       	std	Y+5, r20	; 0x05
	E_ErrorType u8LocalReturn = E_NOT_OK;
    642a:	81 e0       	ldi	r24, 0x01	; 1
    642c:	89 83       	std	Y+1, r24	; 0x01
	u8LocalReturn = HAL_LCD_goToRowColumn(row, col);
    642e:	8c 81       	ldd	r24, Y+4	; 0x04
    6430:	6d 81       	ldd	r22, Y+5	; 0x05
    6432:	0e 94 2a 32 	call	0x6454	; 0x6454 <HAL_LCD_goToRowColumn>
    6436:	89 83       	std	Y+1, r24	; 0x01
	u8LocalReturn = HAL_LCD_sendString(Str);
    6438:	8a 81       	ldd	r24, Y+2	; 0x02
    643a:	9b 81       	ldd	r25, Y+3	; 0x03
    643c:	0e 94 4c 31 	call	0x6298	; 0x6298 <HAL_LCD_sendString>
    6440:	89 83       	std	Y+1, r24	; 0x01
	return u8LocalReturn;
    6442:	89 81       	ldd	r24, Y+1	; 0x01
}
    6444:	0f 90       	pop	r0
    6446:	0f 90       	pop	r0
    6448:	0f 90       	pop	r0
    644a:	0f 90       	pop	r0
    644c:	0f 90       	pop	r0
    644e:	cf 91       	pop	r28
    6450:	df 91       	pop	r29
    6452:	08 95       	ret

00006454 <HAL_LCD_goToRowColumn>:

/* Function to move the cursor to a certain row and column on the LCD screen */
E_ErrorType HAL_LCD_goToRowColumn(LCD_row row, LCD_column col)
{
    6454:	df 93       	push	r29
    6456:	cf 93       	push	r28
    6458:	00 d0       	rcall	.+0      	; 0x645a <HAL_LCD_goToRowColumn+0x6>
    645a:	00 d0       	rcall	.+0      	; 0x645c <HAL_LCD_goToRowColumn+0x8>
    645c:	00 d0       	rcall	.+0      	; 0x645e <HAL_LCD_goToRowColumn+0xa>
    645e:	cd b7       	in	r28, 0x3d	; 61
    6460:	de b7       	in	r29, 0x3e	; 62
    6462:	8b 83       	std	Y+3, r24	; 0x03
    6464:	6c 83       	std	Y+4, r22	; 0x04
	E_ErrorType u8LocalReturn = E_NOT_OK;
    6466:	81 e0       	ldi	r24, 0x01	; 1
    6468:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char Address = 0;
    646a:	19 82       	std	Y+1, r1	; 0x01
	/* calculate the required address */
	switch(row)
    646c:	8b 81       	ldd	r24, Y+3	; 0x03
    646e:	28 2f       	mov	r18, r24
    6470:	30 e0       	ldi	r19, 0x00	; 0
    6472:	3e 83       	std	Y+6, r19	; 0x06
    6474:	2d 83       	std	Y+5, r18	; 0x05
    6476:	8d 81       	ldd	r24, Y+5	; 0x05
    6478:	9e 81       	ldd	r25, Y+6	; 0x06
    647a:	81 30       	cpi	r24, 0x01	; 1
    647c:	91 05       	cpc	r25, r1
    647e:	c9 f0       	breq	.+50     	; 0x64b2 <HAL_LCD_goToRowColumn+0x5e>
    6480:	2d 81       	ldd	r18, Y+5	; 0x05
    6482:	3e 81       	ldd	r19, Y+6	; 0x06
    6484:	22 30       	cpi	r18, 0x02	; 2
    6486:	31 05       	cpc	r19, r1
    6488:	2c f4       	brge	.+10     	; 0x6494 <HAL_LCD_goToRowColumn+0x40>
    648a:	8d 81       	ldd	r24, Y+5	; 0x05
    648c:	9e 81       	ldd	r25, Y+6	; 0x06
    648e:	00 97       	sbiw	r24, 0x00	; 0
    6490:	61 f0       	breq	.+24     	; 0x64aa <HAL_LCD_goToRowColumn+0x56>
    6492:	1e c0       	rjmp	.+60     	; 0x64d0 <HAL_LCD_goToRowColumn+0x7c>
    6494:	2d 81       	ldd	r18, Y+5	; 0x05
    6496:	3e 81       	ldd	r19, Y+6	; 0x06
    6498:	22 30       	cpi	r18, 0x02	; 2
    649a:	31 05       	cpc	r19, r1
    649c:	79 f0       	breq	.+30     	; 0x64bc <HAL_LCD_goToRowColumn+0x68>
    649e:	8d 81       	ldd	r24, Y+5	; 0x05
    64a0:	9e 81       	ldd	r25, Y+6	; 0x06
    64a2:	83 30       	cpi	r24, 0x03	; 3
    64a4:	91 05       	cpc	r25, r1
    64a6:	79 f0       	breq	.+30     	; 0x64c6 <HAL_LCD_goToRowColumn+0x72>
    64a8:	13 c0       	rjmp	.+38     	; 0x64d0 <HAL_LCD_goToRowColumn+0x7c>
	{
		case 0:
			Address = col;
    64aa:	8c 81       	ldd	r24, Y+4	; 0x04
    64ac:	89 83       	std	Y+1, r24	; 0x01
			u8LocalReturn = E_OK;
    64ae:	1a 82       	std	Y+2, r1	; 0x02
    64b0:	11 c0       	rjmp	.+34     	; 0x64d4 <HAL_LCD_goToRowColumn+0x80>
			break;
		case 1:
			Address = col + row1col1;
    64b2:	8c 81       	ldd	r24, Y+4	; 0x04
    64b4:	80 5c       	subi	r24, 0xC0	; 192
    64b6:	89 83       	std	Y+1, r24	; 0x01
			u8LocalReturn = E_OK;
    64b8:	1a 82       	std	Y+2, r1	; 0x02
    64ba:	0c c0       	rjmp	.+24     	; 0x64d4 <HAL_LCD_goToRowColumn+0x80>
			break;
		case 2:
			Address = col + row2col1;
    64bc:	8c 81       	ldd	r24, Y+4	; 0x04
    64be:	8c 5e       	subi	r24, 0xEC	; 236
    64c0:	89 83       	std	Y+1, r24	; 0x01
			u8LocalReturn = E_OK;
    64c2:	1a 82       	std	Y+2, r1	; 0x02
    64c4:	07 c0       	rjmp	.+14     	; 0x64d4 <HAL_LCD_goToRowColumn+0x80>
			break;
		case 3:
			Address = col + row3col1;
    64c6:	8c 81       	ldd	r24, Y+4	; 0x04
    64c8:	8c 5a       	subi	r24, 0xAC	; 172
    64ca:	89 83       	std	Y+1, r24	; 0x01
			u8LocalReturn = E_OK;
    64cc:	1a 82       	std	Y+2, r1	; 0x02
    64ce:	02 c0       	rjmp	.+4      	; 0x64d4 <HAL_LCD_goToRowColumn+0x80>
			break;
		default :
			u8LocalReturn = E_NOT_OK;
    64d0:	81 e0       	ldi	r24, 0x01	; 1
    64d2:	8a 83       	std	Y+2, r24	; 0x02
			break;
	}
	u8LocalReturn = HAL_LCD_sendCommand(SET_CURSOR_LOCATION | Address);
    64d4:	89 81       	ldd	r24, Y+1	; 0x01
    64d6:	80 68       	ori	r24, 0x80	; 128
    64d8:	0e 94 f0 25 	call	0x4be0	; 0x4be0 <HAL_LCD_sendCommand>
    64dc:	8a 83       	std	Y+2, r24	; 0x02
	return u8LocalReturn;
    64de:	8a 81       	ldd	r24, Y+2	; 0x02
}
    64e0:	26 96       	adiw	r28, 0x06	; 6
    64e2:	0f b6       	in	r0, 0x3f	; 63
    64e4:	f8 94       	cli
    64e6:	de bf       	out	0x3e, r29	; 62
    64e8:	0f be       	out	0x3f, r0	; 63
    64ea:	cd bf       	out	0x3d, r28	; 61
    64ec:	cf 91       	pop	r28
    64ee:	df 91       	pop	r29
    64f0:	08 95       	ret

000064f2 <HAL_LCD_integerToString>:

/* Function to convert an integer to string */
E_ErrorType HAL_LCD_integerToString(LCD_integer num)
{
    64f2:	df 93       	push	r29
    64f4:	cf 93       	push	r28
    64f6:	cd b7       	in	r28, 0x3d	; 61
    64f8:	de b7       	in	r29, 0x3e	; 62
    64fa:	6d 97       	sbiw	r28, 0x1d	; 29
    64fc:	0f b6       	in	r0, 0x3f	; 63
    64fe:	f8 94       	cli
    6500:	de bf       	out	0x3e, r29	; 62
    6502:	0f be       	out	0x3f, r0	; 63
    6504:	cd bf       	out	0x3d, r28	; 61
    6506:	69 8f       	std	Y+25, r22	; 0x19
    6508:	7a 8f       	std	Y+26, r23	; 0x1a
    650a:	8b 8f       	std	Y+27, r24	; 0x1b
    650c:	9c 8f       	std	Y+28, r25	; 0x1c
	E_ErrorType u8LocalReturn = E_NOT_OK;
    650e:	81 e0       	ldi	r24, 0x01	; 1
    6510:	88 87       	std	Y+8, r24	; 0x08
	signed char str[16];
	unsigned char i, rem, len=0;
    6512:	1d 82       	std	Y+5, r1	; 0x05
	LCD_integer n = num;
    6514:	89 8d       	ldd	r24, Y+25	; 0x19
    6516:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6518:	ab 8d       	ldd	r26, Y+27	; 0x1b
    651a:	bc 8d       	ldd	r27, Y+28	; 0x1c
    651c:	89 83       	std	Y+1, r24	; 0x01
    651e:	9a 83       	std	Y+2, r25	; 0x02
    6520:	ab 83       	std	Y+3, r26	; 0x03
    6522:	bc 83       	std	Y+4, r27	; 0x04
	if(n ==0)
    6524:	89 81       	ldd	r24, Y+1	; 0x01
    6526:	9a 81       	ldd	r25, Y+2	; 0x02
    6528:	ab 81       	ldd	r26, Y+3	; 0x03
    652a:	bc 81       	ldd	r27, Y+4	; 0x04
    652c:	00 97       	sbiw	r24, 0x00	; 0
    652e:	a1 05       	cpc	r26, r1
    6530:	b1 05       	cpc	r27, r1
    6532:	c1 f4       	brne	.+48     	; 0x6564 <HAL_LCD_integerToString+0x72>
	{
		len = 1;
    6534:	81 e0       	ldi	r24, 0x01	; 1
    6536:	8d 83       	std	Y+5, r24	; 0x05
    6538:	1d c0       	rjmp	.+58     	; 0x6574 <HAL_LCD_integerToString+0x82>
	}
	else
	{
		while(n != 0)
		{
			len++;
    653a:	8d 81       	ldd	r24, Y+5	; 0x05
    653c:	8f 5f       	subi	r24, 0xFF	; 255
    653e:	8d 83       	std	Y+5, r24	; 0x05
			n /= 10;
    6540:	89 81       	ldd	r24, Y+1	; 0x01
    6542:	9a 81       	ldd	r25, Y+2	; 0x02
    6544:	ab 81       	ldd	r26, Y+3	; 0x03
    6546:	bc 81       	ldd	r27, Y+4	; 0x04
    6548:	2a e0       	ldi	r18, 0x0A	; 10
    654a:	30 e0       	ldi	r19, 0x00	; 0
    654c:	40 e0       	ldi	r20, 0x00	; 0
    654e:	50 e0       	ldi	r21, 0x00	; 0
    6550:	bc 01       	movw	r22, r24
    6552:	cd 01       	movw	r24, r26
    6554:	0e 94 c7 35 	call	0x6b8e	; 0x6b8e <__udivmodsi4>
    6558:	da 01       	movw	r26, r20
    655a:	c9 01       	movw	r24, r18
    655c:	89 83       	std	Y+1, r24	; 0x01
    655e:	9a 83       	std	Y+2, r25	; 0x02
    6560:	ab 83       	std	Y+3, r26	; 0x03
    6562:	bc 83       	std	Y+4, r27	; 0x04
	{
		len = 1;
	}
	else
	{
		while(n != 0)
    6564:	89 81       	ldd	r24, Y+1	; 0x01
    6566:	9a 81       	ldd	r25, Y+2	; 0x02
    6568:	ab 81       	ldd	r26, Y+3	; 0x03
    656a:	bc 81       	ldd	r27, Y+4	; 0x04
    656c:	00 97       	sbiw	r24, 0x00	; 0
    656e:	a1 05       	cpc	r26, r1
    6570:	b1 05       	cpc	r27, r1
    6572:	19 f7       	brne	.-58     	; 0x653a <HAL_LCD_integerToString+0x48>
		{
			len++;
			n /= 10;
		}
	}
	if(len >= 15)
    6574:	8d 81       	ldd	r24, Y+5	; 0x05
    6576:	8f 30       	cpi	r24, 0x0F	; 15
    6578:	28 f0       	brcs	.+10     	; 0x6584 <HAL_LCD_integerToString+0x92>
	{
		u8LocalReturn = E_NOT_OK;
    657a:	81 e0       	ldi	r24, 0x01	; 1
    657c:	88 87       	std	Y+8, r24	; 0x08
		return u8LocalReturn;
    657e:	88 85       	ldd	r24, Y+8	; 0x08
    6580:	8d 8f       	std	Y+29, r24	; 0x1d
    6582:	4d c0       	rjmp	.+154    	; 0x661e <HAL_LCD_integerToString+0x12c>
	}
	for(i=0 ; i<len ; i++)
    6584:	1f 82       	std	Y+7, r1	; 0x07
    6586:	37 c0       	rjmp	.+110    	; 0x65f6 <HAL_LCD_integerToString+0x104>
	{
		rem = num % 10;
    6588:	89 8d       	ldd	r24, Y+25	; 0x19
    658a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    658c:	ab 8d       	ldd	r26, Y+27	; 0x1b
    658e:	bc 8d       	ldd	r27, Y+28	; 0x1c
    6590:	2a e0       	ldi	r18, 0x0A	; 10
    6592:	30 e0       	ldi	r19, 0x00	; 0
    6594:	40 e0       	ldi	r20, 0x00	; 0
    6596:	50 e0       	ldi	r21, 0x00	; 0
    6598:	bc 01       	movw	r22, r24
    659a:	cd 01       	movw	r24, r26
    659c:	0e 94 c7 35 	call	0x6b8e	; 0x6b8e <__udivmodsi4>
    65a0:	dc 01       	movw	r26, r24
    65a2:	cb 01       	movw	r24, r22
    65a4:	8e 83       	std	Y+6, r24	; 0x06
		num = num /10;
    65a6:	89 8d       	ldd	r24, Y+25	; 0x19
    65a8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    65aa:	ab 8d       	ldd	r26, Y+27	; 0x1b
    65ac:	bc 8d       	ldd	r27, Y+28	; 0x1c
    65ae:	2a e0       	ldi	r18, 0x0A	; 10
    65b0:	30 e0       	ldi	r19, 0x00	; 0
    65b2:	40 e0       	ldi	r20, 0x00	; 0
    65b4:	50 e0       	ldi	r21, 0x00	; 0
    65b6:	bc 01       	movw	r22, r24
    65b8:	cd 01       	movw	r24, r26
    65ba:	0e 94 c7 35 	call	0x6b8e	; 0x6b8e <__udivmodsi4>
    65be:	da 01       	movw	r26, r20
    65c0:	c9 01       	movw	r24, r18
    65c2:	89 8f       	std	Y+25, r24	; 0x19
    65c4:	9a 8f       	std	Y+26, r25	; 0x1a
    65c6:	ab 8f       	std	Y+27, r26	; 0x1b
    65c8:	bc 8f       	std	Y+28, r27	; 0x1c
		str[len - (i + 1)] = rem + '0';
    65ca:	8d 81       	ldd	r24, Y+5	; 0x05
    65cc:	28 2f       	mov	r18, r24
    65ce:	30 e0       	ldi	r19, 0x00	; 0
    65d0:	8f 81       	ldd	r24, Y+7	; 0x07
    65d2:	88 2f       	mov	r24, r24
    65d4:	90 e0       	ldi	r25, 0x00	; 0
    65d6:	80 95       	com	r24
    65d8:	90 95       	com	r25
    65da:	28 0f       	add	r18, r24
    65dc:	39 1f       	adc	r19, r25
    65de:	8e 81       	ldd	r24, Y+6	; 0x06
    65e0:	80 5d       	subi	r24, 0xD0	; 208
    65e2:	48 2f       	mov	r20, r24
    65e4:	ce 01       	movw	r24, r28
    65e6:	09 96       	adiw	r24, 0x09	; 9
    65e8:	fc 01       	movw	r30, r24
    65ea:	e2 0f       	add	r30, r18
    65ec:	f3 1f       	adc	r31, r19
    65ee:	40 83       	st	Z, r20
	if(len >= 15)
	{
		u8LocalReturn = E_NOT_OK;
		return u8LocalReturn;
	}
	for(i=0 ; i<len ; i++)
    65f0:	8f 81       	ldd	r24, Y+7	; 0x07
    65f2:	8f 5f       	subi	r24, 0xFF	; 255
    65f4:	8f 83       	std	Y+7, r24	; 0x07
    65f6:	9f 81       	ldd	r25, Y+7	; 0x07
    65f8:	8d 81       	ldd	r24, Y+5	; 0x05
    65fa:	98 17       	cp	r25, r24
    65fc:	28 f2       	brcs	.-118    	; 0x6588 <HAL_LCD_integerToString+0x96>
	{
		rem = num % 10;
		num = num /10;
		str[len - (i + 1)] = rem + '0';
	}
	str[len] = '\0';
    65fe:	8d 81       	ldd	r24, Y+5	; 0x05
    6600:	28 2f       	mov	r18, r24
    6602:	30 e0       	ldi	r19, 0x00	; 0
    6604:	ce 01       	movw	r24, r28
    6606:	09 96       	adiw	r24, 0x09	; 9
    6608:	fc 01       	movw	r30, r24
    660a:	e2 0f       	add	r30, r18
    660c:	f3 1f       	adc	r31, r19
    660e:	10 82       	st	Z, r1
	u8LocalReturn = HAL_LCD_sendString(str);
    6610:	ce 01       	movw	r24, r28
    6612:	09 96       	adiw	r24, 0x09	; 9
    6614:	0e 94 4c 31 	call	0x6298	; 0x6298 <HAL_LCD_sendString>
    6618:	88 87       	std	Y+8, r24	; 0x08
	return u8LocalReturn;
    661a:	88 85       	ldd	r24, Y+8	; 0x08
    661c:	8d 8f       	std	Y+29, r24	; 0x1d
    661e:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    6620:	6d 96       	adiw	r28, 0x1d	; 29
    6622:	0f b6       	in	r0, 0x3f	; 63
    6624:	f8 94       	cli
    6626:	de bf       	out	0x3e, r29	; 62
    6628:	0f be       	out	0x3f, r0	; 63
    662a:	cd bf       	out	0x3d, r28	; 61
    662c:	cf 91       	pop	r28
    662e:	df 91       	pop	r29
    6630:	08 95       	ret

00006632 <HAL_LCD_displayIntegerRowColumn>:

/* Function to display an integer on a certain row and column on the LCD screen */
E_ErrorType HAL_LCD_displayIntegerRowColumn(LCD_integer num, LCD_row row, LCD_column col)
{
    6632:	df 93       	push	r29
    6634:	cf 93       	push	r28
    6636:	cd b7       	in	r28, 0x3d	; 61
    6638:	de b7       	in	r29, 0x3e	; 62
    663a:	27 97       	sbiw	r28, 0x07	; 7
    663c:	0f b6       	in	r0, 0x3f	; 63
    663e:	f8 94       	cli
    6640:	de bf       	out	0x3e, r29	; 62
    6642:	0f be       	out	0x3f, r0	; 63
    6644:	cd bf       	out	0x3d, r28	; 61
    6646:	6a 83       	std	Y+2, r22	; 0x02
    6648:	7b 83       	std	Y+3, r23	; 0x03
    664a:	8c 83       	std	Y+4, r24	; 0x04
    664c:	9d 83       	std	Y+5, r25	; 0x05
    664e:	4e 83       	std	Y+6, r20	; 0x06
    6650:	2f 83       	std	Y+7, r18	; 0x07
	E_ErrorType u8LocalReturn = E_NOT_OK;
    6652:	81 e0       	ldi	r24, 0x01	; 1
    6654:	89 83       	std	Y+1, r24	; 0x01
	u8LocalReturn = HAL_LCD_goToRowColumn(row, col);
    6656:	8e 81       	ldd	r24, Y+6	; 0x06
    6658:	6f 81       	ldd	r22, Y+7	; 0x07
    665a:	0e 94 2a 32 	call	0x6454	; 0x6454 <HAL_LCD_goToRowColumn>
    665e:	89 83       	std	Y+1, r24	; 0x01
	u8LocalReturn = HAL_LCD_integerToString(num);
    6660:	8a 81       	ldd	r24, Y+2	; 0x02
    6662:	9b 81       	ldd	r25, Y+3	; 0x03
    6664:	ac 81       	ldd	r26, Y+4	; 0x04
    6666:	bd 81       	ldd	r27, Y+5	; 0x05
    6668:	bc 01       	movw	r22, r24
    666a:	cd 01       	movw	r24, r26
    666c:	0e 94 79 32 	call	0x64f2	; 0x64f2 <HAL_LCD_integerToString>
    6670:	89 83       	std	Y+1, r24	; 0x01
	return u8LocalReturn;
    6672:	89 81       	ldd	r24, Y+1	; 0x01

	return u8LocalReturn;
}
    6674:	27 96       	adiw	r28, 0x07	; 7
    6676:	0f b6       	in	r0, 0x3f	; 63
    6678:	f8 94       	cli
    667a:	de bf       	out	0x3e, r29	; 62
    667c:	0f be       	out	0x3f, r0	; 63
    667e:	cd bf       	out	0x3d, r28	; 61
    6680:	cf 91       	pop	r28
    6682:	df 91       	pop	r29
    6684:	08 95       	ret

00006686 <HAL_KPD_init>:
#include "Keypad_config.h"
#include <util/delay.h>

/* Initialization function for keypad */
E_ErrorType HAL_KPD_init(void)
{
    6686:	df 93       	push	r29
    6688:	cf 93       	push	r28
    668a:	cd b7       	in	r28, 0x3d	; 61
    668c:	de b7       	in	r29, 0x3e	; 62
    668e:	27 97       	sbiw	r28, 0x07	; 7
    6690:	0f b6       	in	r0, 0x3f	; 63
    6692:	f8 94       	cli
    6694:	de bf       	out	0x3e, r29	; 62
    6696:	0f be       	out	0x3f, r0	; 63
    6698:	cd bf       	out	0x3d, r28	; 61
	/* Set all rows as output */

	E_ErrorType u8LocalReturn =E_NOT_OK;
    669a:	81 e0       	ldi	r24, 0x01	; 1
    669c:	89 83       	std	Y+1, r24	; 0x01
	S_Dio Keypad_interface_rows;
	Keypad_interface_rows.port_num=KEYPAD_ROWS_PORT;
    669e:	82 e0       	ldi	r24, 0x02	; 2
    66a0:	8a 83       	std	Y+2, r24	; 0x02
	Keypad_interface_rows.pin_num=(KEYPAD_ROW0|KEYPAD_ROW1|KEYPAD_ROW2|KEYPAD_ROW3);
    66a2:	8c e3       	ldi	r24, 0x3C	; 60
    66a4:	8b 83       	std	Y+3, r24	; 0x03
	Keypad_interface_rows.Direction=OUTPUT;
    66a6:	8f ef       	ldi	r24, 0xFF	; 255
    66a8:	8c 83       	std	Y+4, r24	; 0x04
	u8LocalReturn=MCAL_Dio_Init(&Keypad_interface_rows);
    66aa:	ce 01       	movw	r24, r28
    66ac:	02 96       	adiw	r24, 0x02	; 2
    66ae:	0e 94 aa 12 	call	0x2554	; 0x2554 <MCAL_Dio_Init>
    66b2:	89 83       	std	Y+1, r24	; 0x01



	/* Set all columns as inputs */
	S_Dio Keypad_interface_cols;
	Keypad_interface_cols.port_num=KEYPAD_COLUMNS_PORT;
    66b4:	83 e0       	ldi	r24, 0x03	; 3
    66b6:	8d 83       	std	Y+5, r24	; 0x05
	Keypad_interface_cols.pin_num=(KEYPAD_COLUMN0|KEYPAD_COLUMN1|KEYPAD_COLUMN2|KEYPAD_COLUMN3);
    66b8:	88 ee       	ldi	r24, 0xE8	; 232
    66ba:	8e 83       	std	Y+6, r24	; 0x06
	Keypad_interface_cols.Direction=INPUT;
    66bc:	1f 82       	std	Y+7, r1	; 0x07
	u8LocalReturn=MCAL_Dio_Init(&Keypad_interface_cols);
    66be:	ce 01       	movw	r24, r28
    66c0:	05 96       	adiw	r24, 0x05	; 5
    66c2:	0e 94 aa 12 	call	0x2554	; 0x2554 <MCAL_Dio_Init>
    66c6:	89 83       	std	Y+1, r24	; 0x01



	/* Set all inputs as internal pull up and all outputs as HIGH */

	u8LocalReturn=  MCAL_Dio_WritePin(&Keypad_interface_cols,PIN_HIGH);
    66c8:	ce 01       	movw	r24, r28
    66ca:	05 96       	adiw	r24, 0x05	; 5
    66cc:	6f ef       	ldi	r22, 0xFF	; 255
    66ce:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <MCAL_Dio_WritePin>
    66d2:	89 83       	std	Y+1, r24	; 0x01
	u8LocalReturn=   MCAL_Dio_WritePin(&Keypad_interface_rows,PIN_HIGH);
    66d4:	ce 01       	movw	r24, r28
    66d6:	02 96       	adiw	r24, 0x02	; 2
    66d8:	6f ef       	ldi	r22, 0xFF	; 255
    66da:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <MCAL_Dio_WritePin>
    66de:	89 83       	std	Y+1, r24	; 0x01

	return E_OK;
    66e0:	80 e0       	ldi	r24, 0x00	; 0
}
    66e2:	27 96       	adiw	r28, 0x07	; 7
    66e4:	0f b6       	in	r0, 0x3f	; 63
    66e6:	f8 94       	cli
    66e8:	de bf       	out	0x3e, r29	; 62
    66ea:	0f be       	out	0x3f, r0	; 63
    66ec:	cd bf       	out	0x3d, r28	; 61
    66ee:	cf 91       	pop	r28
    66f0:	df 91       	pop	r29
    66f2:	08 95       	ret

000066f4 <HAL_KPD_getKey>:


/* Function to get the pressed key */
u8PinValue HAL_KPD_getKey(void)
{
    66f4:	df 93       	push	r29
    66f6:	cf 93       	push	r28
    66f8:	cd b7       	in	r28, 0x3d	; 61
    66fa:	de b7       	in	r29, 0x3e	; 62
    66fc:	ab 97       	sbiw	r28, 0x2b	; 43
    66fe:	0f b6       	in	r0, 0x3f	; 63
    6700:	f8 94       	cli
    6702:	de bf       	out	0x3e, r29	; 62
    6704:	0f be       	out	0x3f, r0	; 63
    6706:	cd bf       	out	0x3d, r28	; 61
	u8PinValue key_status = PIN_HIGH;
    6708:	8f ef       	ldi	r24, 0xFF	; 255
    670a:	8a 8b       	std	Y+18, r24	; 0x12
	E_ErrorType u8LocalReturn =E_NOT_OK;
    670c:	81 e0       	ldi	r24, 0x01	; 1
    670e:	89 8b       	std	Y+17, r24	; 0x11
	S_Dio Keypad_interface_rows[NO_ROWS];
	Keypad_interface_rows[0].port_num=KEYPAD_ROWS_PORT;
    6710:	82 e0       	ldi	r24, 0x02	; 2
    6712:	8b 8b       	std	Y+19, r24	; 0x13
	Keypad_interface_rows[0].pin_num=KEYPAD_ROW0;
    6714:	80 e2       	ldi	r24, 0x20	; 32
    6716:	8c 8b       	std	Y+20, r24	; 0x14
	Keypad_interface_rows[0].Direction=OUTPUT;
    6718:	8f ef       	ldi	r24, 0xFF	; 255
    671a:	8d 8b       	std	Y+21, r24	; 0x15

	Keypad_interface_rows[1].port_num=KEYPAD_ROWS_PORT;
    671c:	82 e0       	ldi	r24, 0x02	; 2
    671e:	8e 8b       	std	Y+22, r24	; 0x16
	Keypad_interface_rows[1].pin_num=KEYPAD_ROW1;
    6720:	80 e1       	ldi	r24, 0x10	; 16
    6722:	8f 8b       	std	Y+23, r24	; 0x17
	Keypad_interface_rows[1].Direction=OUTPUT;
    6724:	8f ef       	ldi	r24, 0xFF	; 255
    6726:	88 8f       	std	Y+24, r24	; 0x18

	Keypad_interface_rows[2].port_num=KEYPAD_ROWS_PORT;
    6728:	82 e0       	ldi	r24, 0x02	; 2
    672a:	89 8f       	std	Y+25, r24	; 0x19
	Keypad_interface_rows[2].pin_num=KEYPAD_ROW2;
    672c:	88 e0       	ldi	r24, 0x08	; 8
    672e:	8a 8f       	std	Y+26, r24	; 0x1a
	Keypad_interface_rows[2].Direction=OUTPUT;
    6730:	8f ef       	ldi	r24, 0xFF	; 255
    6732:	8b 8f       	std	Y+27, r24	; 0x1b

	Keypad_interface_rows[3].port_num=KEYPAD_ROWS_PORT;
    6734:	82 e0       	ldi	r24, 0x02	; 2
    6736:	8c 8f       	std	Y+28, r24	; 0x1c
	Keypad_interface_rows[3].pin_num=KEYPAD_ROW3;
    6738:	84 e0       	ldi	r24, 0x04	; 4
    673a:	8d 8f       	std	Y+29, r24	; 0x1d
	Keypad_interface_rows[3].Direction=OUTPUT;
    673c:	8f ef       	ldi	r24, 0xFF	; 255
    673e:	8e 8f       	std	Y+30, r24	; 0x1e

	S_Dio Keypad_interface_cols[NO_COLS];
	Keypad_interface_cols[0].port_num=KEYPAD_COLUMNS_PORT;
    6740:	83 e0       	ldi	r24, 0x03	; 3
    6742:	8f 8f       	std	Y+31, r24	; 0x1f
	Keypad_interface_cols[0].pin_num=KEYPAD_COLUMN0;
    6744:	80 e8       	ldi	r24, 0x80	; 128
    6746:	88 a3       	std	Y+32, r24	; 0x20
	Keypad_interface_cols[0].Direction=INPUT;
    6748:	19 a2       	std	Y+33, r1	; 0x21

	Keypad_interface_cols[1].port_num=KEYPAD_COLUMNS_PORT;
    674a:	83 e0       	ldi	r24, 0x03	; 3
    674c:	8a a3       	std	Y+34, r24	; 0x22
	Keypad_interface_cols[1].pin_num=KEYPAD_COLUMN1;
    674e:	80 e4       	ldi	r24, 0x40	; 64
    6750:	8b a3       	std	Y+35, r24	; 0x23
	Keypad_interface_cols[1].Direction=INPUT;
    6752:	1c a2       	std	Y+36, r1	; 0x24

	Keypad_interface_cols[2].port_num=KEYPAD_COLUMNS_PORT;
    6754:	83 e0       	ldi	r24, 0x03	; 3
    6756:	8d a3       	std	Y+37, r24	; 0x25
	Keypad_interface_cols[2].pin_num=KEYPAD_COLUMN2;
    6758:	80 e2       	ldi	r24, 0x20	; 32
    675a:	8e a3       	std	Y+38, r24	; 0x26
	Keypad_interface_cols[2].Direction=INPUT;
    675c:	1f a2       	std	Y+39, r1	; 0x27

	Keypad_interface_cols[3].port_num=KEYPAD_COLUMNS_PORT;
    675e:	83 e0       	ldi	r24, 0x03	; 3
    6760:	88 a7       	std	Y+40, r24	; 0x28
	Keypad_interface_cols[3].pin_num=KEYPAD_COLUMN3;
    6762:	88 e0       	ldi	r24, 0x08	; 8
    6764:	89 a7       	std	Y+41, r24	; 0x29
	Keypad_interface_cols[3].Direction=INPUT;
    6766:	1a a6       	std	Y+42, r1	; 0x2a


	for(u8PinValue i =0;i<NO_ROWS;i++)
    6768:	18 8a       	std	Y+16, r1	; 0x10
    676a:	04 c1       	rjmp	.+520    	; 0x6974 <HAL_KPD_getKey+0x280>
	{
		u8LocalReturn=MCAL_Dio_WritePin(&(Keypad_interface_rows[i]),PIN_LOW);
    676c:	88 89       	ldd	r24, Y+16	; 0x10
    676e:	28 2f       	mov	r18, r24
    6770:	30 e0       	ldi	r19, 0x00	; 0
    6772:	c9 01       	movw	r24, r18
    6774:	88 0f       	add	r24, r24
    6776:	99 1f       	adc	r25, r25
    6778:	28 0f       	add	r18, r24
    677a:	39 1f       	adc	r19, r25
    677c:	ce 01       	movw	r24, r28
    677e:	43 96       	adiw	r24, 0x13	; 19
    6780:	82 0f       	add	r24, r18
    6782:	93 1f       	adc	r25, r19
    6784:	60 e0       	ldi	r22, 0x00	; 0
    6786:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <MCAL_Dio_WritePin>
    678a:	89 8b       	std	Y+17, r24	; 0x11
		for(u8PinValue j=0;j<NO_COLS;j++)
    678c:	1f 86       	std	Y+15, r1	; 0x0f
    678e:	db c0       	rjmp	.+438    	; 0x6946 <HAL_KPD_getKey+0x252>
		{
			u8LocalReturn =MCAL_Dio_ReadSinglePin(&(Keypad_interface_cols[j]),Keypad_interface_cols[j].pin_num ,&key_status);
    6790:	8f 85       	ldd	r24, Y+15	; 0x0f
    6792:	28 2f       	mov	r18, r24
    6794:	30 e0       	ldi	r19, 0x00	; 0
    6796:	c9 01       	movw	r24, r18
    6798:	88 0f       	add	r24, r24
    679a:	99 1f       	adc	r25, r25
    679c:	82 0f       	add	r24, r18
    679e:	93 1f       	adc	r25, r19
    67a0:	ae 01       	movw	r20, r28
    67a2:	41 5e       	subi	r20, 0xE1	; 225
    67a4:	5f 4f       	sbci	r21, 0xFF	; 255
    67a6:	48 0f       	add	r20, r24
    67a8:	59 1f       	adc	r21, r25
    67aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    67ac:	28 2f       	mov	r18, r24
    67ae:	30 e0       	ldi	r19, 0x00	; 0
    67b0:	c9 01       	movw	r24, r18
    67b2:	88 0f       	add	r24, r24
    67b4:	99 1f       	adc	r25, r25
    67b6:	82 0f       	add	r24, r18
    67b8:	93 1f       	adc	r25, r19
    67ba:	9e 01       	movw	r18, r28
    67bc:	2f 5f       	subi	r18, 0xFF	; 255
    67be:	3f 4f       	sbci	r19, 0xFF	; 255
    67c0:	82 0f       	add	r24, r18
    67c2:	93 1f       	adc	r25, r19
    67c4:	fc 01       	movw	r30, r24
    67c6:	7f 96       	adiw	r30, 0x1f	; 31
    67c8:	60 81       	ld	r22, Z
    67ca:	9e 01       	movw	r18, r28
    67cc:	2e 5e       	subi	r18, 0xEE	; 238
    67ce:	3f 4f       	sbci	r19, 0xFF	; 255
    67d0:	ca 01       	movw	r24, r20
    67d2:	a9 01       	movw	r20, r18
    67d4:	0e 94 03 17 	call	0x2e06	; 0x2e06 <MCAL_Dio_ReadSinglePin>
    67d8:	89 8b       	std	Y+17, r24	; 0x11
			if(key_status== PIN_LOW)
    67da:	8a 89       	ldd	r24, Y+18	; 0x12
    67dc:	88 23       	and	r24, r24
    67de:	09 f0       	breq	.+2      	; 0x67e2 <HAL_KPD_getKey+0xee>
    67e0:	af c0       	rjmp	.+350    	; 0x6940 <HAL_KPD_getKey+0x24c>
    67e2:	80 e0       	ldi	r24, 0x00	; 0
    67e4:	90 e0       	ldi	r25, 0x00	; 0
    67e6:	a0 ea       	ldi	r26, 0xA0	; 160
    67e8:	b1 e4       	ldi	r27, 0x41	; 65
    67ea:	8b 87       	std	Y+11, r24	; 0x0b
    67ec:	9c 87       	std	Y+12, r25	; 0x0c
    67ee:	ad 87       	std	Y+13, r26	; 0x0d
    67f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    67f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    67f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    67f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    67f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    67fa:	20 e0       	ldi	r18, 0x00	; 0
    67fc:	30 e0       	ldi	r19, 0x00	; 0
    67fe:	4a e7       	ldi	r20, 0x7A	; 122
    6800:	55 e4       	ldi	r21, 0x45	; 69
    6802:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6806:	dc 01       	movw	r26, r24
    6808:	cb 01       	movw	r24, r22
    680a:	8f 83       	std	Y+7, r24	; 0x07
    680c:	98 87       	std	Y+8, r25	; 0x08
    680e:	a9 87       	std	Y+9, r26	; 0x09
    6810:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6812:	6f 81       	ldd	r22, Y+7	; 0x07
    6814:	78 85       	ldd	r23, Y+8	; 0x08
    6816:	89 85       	ldd	r24, Y+9	; 0x09
    6818:	9a 85       	ldd	r25, Y+10	; 0x0a
    681a:	20 e0       	ldi	r18, 0x00	; 0
    681c:	30 e0       	ldi	r19, 0x00	; 0
    681e:	40 e8       	ldi	r20, 0x80	; 128
    6820:	5f e3       	ldi	r21, 0x3F	; 63
    6822:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6826:	88 23       	and	r24, r24
    6828:	2c f4       	brge	.+10     	; 0x6834 <HAL_KPD_getKey+0x140>
		__ticks = 1;
    682a:	81 e0       	ldi	r24, 0x01	; 1
    682c:	90 e0       	ldi	r25, 0x00	; 0
    682e:	9e 83       	std	Y+6, r25	; 0x06
    6830:	8d 83       	std	Y+5, r24	; 0x05
    6832:	3f c0       	rjmp	.+126    	; 0x68b2 <HAL_KPD_getKey+0x1be>
	else if (__tmp > 65535)
    6834:	6f 81       	ldd	r22, Y+7	; 0x07
    6836:	78 85       	ldd	r23, Y+8	; 0x08
    6838:	89 85       	ldd	r24, Y+9	; 0x09
    683a:	9a 85       	ldd	r25, Y+10	; 0x0a
    683c:	20 e0       	ldi	r18, 0x00	; 0
    683e:	3f ef       	ldi	r19, 0xFF	; 255
    6840:	4f e7       	ldi	r20, 0x7F	; 127
    6842:	57 e4       	ldi	r21, 0x47	; 71
    6844:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6848:	18 16       	cp	r1, r24
    684a:	4c f5       	brge	.+82     	; 0x689e <HAL_KPD_getKey+0x1aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    684c:	6b 85       	ldd	r22, Y+11	; 0x0b
    684e:	7c 85       	ldd	r23, Y+12	; 0x0c
    6850:	8d 85       	ldd	r24, Y+13	; 0x0d
    6852:	9e 85       	ldd	r25, Y+14	; 0x0e
    6854:	20 e0       	ldi	r18, 0x00	; 0
    6856:	30 e0       	ldi	r19, 0x00	; 0
    6858:	40 e2       	ldi	r20, 0x20	; 32
    685a:	51 e4       	ldi	r21, 0x41	; 65
    685c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6860:	dc 01       	movw	r26, r24
    6862:	cb 01       	movw	r24, r22
    6864:	bc 01       	movw	r22, r24
    6866:	cd 01       	movw	r24, r26
    6868:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    686c:	dc 01       	movw	r26, r24
    686e:	cb 01       	movw	r24, r22
    6870:	9e 83       	std	Y+6, r25	; 0x06
    6872:	8d 83       	std	Y+5, r24	; 0x05
    6874:	0f c0       	rjmp	.+30     	; 0x6894 <HAL_KPD_getKey+0x1a0>
    6876:	80 e9       	ldi	r24, 0x90	; 144
    6878:	91 e0       	ldi	r25, 0x01	; 1
    687a:	9c 83       	std	Y+4, r25	; 0x04
    687c:	8b 83       	std	Y+3, r24	; 0x03
    687e:	8b 81       	ldd	r24, Y+3	; 0x03
    6880:	9c 81       	ldd	r25, Y+4	; 0x04
    6882:	01 97       	sbiw	r24, 0x01	; 1
    6884:	f1 f7       	brne	.-4      	; 0x6882 <HAL_KPD_getKey+0x18e>
    6886:	9c 83       	std	Y+4, r25	; 0x04
    6888:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    688a:	8d 81       	ldd	r24, Y+5	; 0x05
    688c:	9e 81       	ldd	r25, Y+6	; 0x06
    688e:	01 97       	sbiw	r24, 0x01	; 1
    6890:	9e 83       	std	Y+6, r25	; 0x06
    6892:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6894:	8d 81       	ldd	r24, Y+5	; 0x05
    6896:	9e 81       	ldd	r25, Y+6	; 0x06
    6898:	00 97       	sbiw	r24, 0x00	; 0
    689a:	69 f7       	brne	.-38     	; 0x6876 <HAL_KPD_getKey+0x182>
    689c:	3a c0       	rjmp	.+116    	; 0x6912 <HAL_KPD_getKey+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    689e:	6f 81       	ldd	r22, Y+7	; 0x07
    68a0:	78 85       	ldd	r23, Y+8	; 0x08
    68a2:	89 85       	ldd	r24, Y+9	; 0x09
    68a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    68a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    68aa:	dc 01       	movw	r26, r24
    68ac:	cb 01       	movw	r24, r22
    68ae:	9e 83       	std	Y+6, r25	; 0x06
    68b0:	8d 83       	std	Y+5, r24	; 0x05
    68b2:	8d 81       	ldd	r24, Y+5	; 0x05
    68b4:	9e 81       	ldd	r25, Y+6	; 0x06
    68b6:	9a 83       	std	Y+2, r25	; 0x02
    68b8:	89 83       	std	Y+1, r24	; 0x01
    68ba:	89 81       	ldd	r24, Y+1	; 0x01
    68bc:	9a 81       	ldd	r25, Y+2	; 0x02
    68be:	01 97       	sbiw	r24, 0x01	; 1
    68c0:	f1 f7       	brne	.-4      	; 0x68be <HAL_KPD_getKey+0x1ca>
    68c2:	9a 83       	std	Y+2, r25	; 0x02
    68c4:	89 83       	std	Y+1, r24	; 0x01
    68c6:	25 c0       	rjmp	.+74     	; 0x6912 <HAL_KPD_getKey+0x21e>
			{

				_delay_ms(20);
				while(key_status==PIN_LOW)
				{
					u8LocalReturn =MCAL_Dio_ReadSinglePin(&(Keypad_interface_cols[j]),Keypad_interface_cols[j].pin_num,&key_status);
    68c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    68ca:	28 2f       	mov	r18, r24
    68cc:	30 e0       	ldi	r19, 0x00	; 0
    68ce:	c9 01       	movw	r24, r18
    68d0:	88 0f       	add	r24, r24
    68d2:	99 1f       	adc	r25, r25
    68d4:	82 0f       	add	r24, r18
    68d6:	93 1f       	adc	r25, r19
    68d8:	ae 01       	movw	r20, r28
    68da:	41 5e       	subi	r20, 0xE1	; 225
    68dc:	5f 4f       	sbci	r21, 0xFF	; 255
    68de:	48 0f       	add	r20, r24
    68e0:	59 1f       	adc	r21, r25
    68e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    68e4:	28 2f       	mov	r18, r24
    68e6:	30 e0       	ldi	r19, 0x00	; 0
    68e8:	c9 01       	movw	r24, r18
    68ea:	88 0f       	add	r24, r24
    68ec:	99 1f       	adc	r25, r25
    68ee:	82 0f       	add	r24, r18
    68f0:	93 1f       	adc	r25, r19
    68f2:	9e 01       	movw	r18, r28
    68f4:	2f 5f       	subi	r18, 0xFF	; 255
    68f6:	3f 4f       	sbci	r19, 0xFF	; 255
    68f8:	82 0f       	add	r24, r18
    68fa:	93 1f       	adc	r25, r19
    68fc:	fc 01       	movw	r30, r24
    68fe:	7f 96       	adiw	r30, 0x1f	; 31
    6900:	60 81       	ld	r22, Z
    6902:	9e 01       	movw	r18, r28
    6904:	2e 5e       	subi	r18, 0xEE	; 238
    6906:	3f 4f       	sbci	r19, 0xFF	; 255
    6908:	ca 01       	movw	r24, r20
    690a:	a9 01       	movw	r20, r18
    690c:	0e 94 03 17 	call	0x2e06	; 0x2e06 <MCAL_Dio_ReadSinglePin>
    6910:	89 8b       	std	Y+17, r24	; 0x11
			u8LocalReturn =MCAL_Dio_ReadSinglePin(&(Keypad_interface_cols[j]),Keypad_interface_cols[j].pin_num ,&key_status);
			if(key_status== PIN_LOW)
			{

				_delay_ms(20);
				while(key_status==PIN_LOW)
    6912:	8a 89       	ldd	r24, Y+18	; 0x12
    6914:	88 23       	and	r24, r24
    6916:	c1 f2       	breq	.-80     	; 0x68c8 <HAL_KPD_getKey+0x1d4>
				{
					u8LocalReturn =MCAL_Dio_ReadSinglePin(&(Keypad_interface_cols[j]),Keypad_interface_cols[j].pin_num,&key_status);
				}
				return keypad_keys[i][j];
    6918:	88 89       	ldd	r24, Y+16	; 0x10
    691a:	48 2f       	mov	r20, r24
    691c:	50 e0       	ldi	r21, 0x00	; 0
    691e:	8f 85       	ldd	r24, Y+15	; 0x0f
    6920:	28 2f       	mov	r18, r24
    6922:	30 e0       	ldi	r19, 0x00	; 0
    6924:	ca 01       	movw	r24, r20
    6926:	88 0f       	add	r24, r24
    6928:	99 1f       	adc	r25, r25
    692a:	88 0f       	add	r24, r24
    692c:	99 1f       	adc	r25, r25
    692e:	82 0f       	add	r24, r18
    6930:	93 1f       	adc	r25, r19
    6932:	fc 01       	movw	r30, r24
    6934:	e9 56       	subi	r30, 0x69	; 105
    6936:	fe 4f       	sbci	r31, 0xFE	; 254
    6938:	80 81       	ld	r24, Z
    693a:	8b a7       	std	Y+43, r24	; 0x2b
		}
		u8LocalReturn=	MCAL_Dio_WritePin(&(Keypad_interface_rows[i]),PIN_HIGH);
	}


}
    693c:	8b a5       	ldd	r24, Y+43	; 0x2b
    693e:	1e c0       	rjmp	.+60     	; 0x697c <HAL_KPD_getKey+0x288>


	for(u8PinValue i =0;i<NO_ROWS;i++)
	{
		u8LocalReturn=MCAL_Dio_WritePin(&(Keypad_interface_rows[i]),PIN_LOW);
		for(u8PinValue j=0;j<NO_COLS;j++)
    6940:	8f 85       	ldd	r24, Y+15	; 0x0f
    6942:	8f 5f       	subi	r24, 0xFF	; 255
    6944:	8f 87       	std	Y+15, r24	; 0x0f
    6946:	8f 85       	ldd	r24, Y+15	; 0x0f
    6948:	84 30       	cpi	r24, 0x04	; 4
    694a:	08 f4       	brcc	.+2      	; 0x694e <HAL_KPD_getKey+0x25a>
    694c:	21 cf       	rjmp	.-446    	; 0x6790 <HAL_KPD_getKey+0x9c>
					u8LocalReturn =MCAL_Dio_ReadSinglePin(&(Keypad_interface_cols[j]),Keypad_interface_cols[j].pin_num,&key_status);
				}
				return keypad_keys[i][j];
			}
		}
		u8LocalReturn=	MCAL_Dio_WritePin(&(Keypad_interface_rows[i]),PIN_HIGH);
    694e:	88 89       	ldd	r24, Y+16	; 0x10
    6950:	28 2f       	mov	r18, r24
    6952:	30 e0       	ldi	r19, 0x00	; 0
    6954:	c9 01       	movw	r24, r18
    6956:	88 0f       	add	r24, r24
    6958:	99 1f       	adc	r25, r25
    695a:	28 0f       	add	r18, r24
    695c:	39 1f       	adc	r19, r25
    695e:	ce 01       	movw	r24, r28
    6960:	43 96       	adiw	r24, 0x13	; 19
    6962:	82 0f       	add	r24, r18
    6964:	93 1f       	adc	r25, r19
    6966:	6f ef       	ldi	r22, 0xFF	; 255
    6968:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <MCAL_Dio_WritePin>
    696c:	89 8b       	std	Y+17, r24	; 0x11
	Keypad_interface_cols[3].port_num=KEYPAD_COLUMNS_PORT;
	Keypad_interface_cols[3].pin_num=KEYPAD_COLUMN3;
	Keypad_interface_cols[3].Direction=INPUT;


	for(u8PinValue i =0;i<NO_ROWS;i++)
    696e:	88 89       	ldd	r24, Y+16	; 0x10
    6970:	8f 5f       	subi	r24, 0xFF	; 255
    6972:	88 8b       	std	Y+16, r24	; 0x10
    6974:	88 89       	ldd	r24, Y+16	; 0x10
    6976:	84 30       	cpi	r24, 0x04	; 4
    6978:	08 f4       	brcc	.+2      	; 0x697c <HAL_KPD_getKey+0x288>
    697a:	f8 ce       	rjmp	.-528    	; 0x676c <HAL_KPD_getKey+0x78>
		}
		u8LocalReturn=	MCAL_Dio_WritePin(&(Keypad_interface_rows[i]),PIN_HIGH);
	}


}
    697c:	ab 96       	adiw	r28, 0x2b	; 43
    697e:	0f b6       	in	r0, 0x3f	; 63
    6980:	f8 94       	cli
    6982:	de bf       	out	0x3e, r29	; 62
    6984:	0f be       	out	0x3f, r0	; 63
    6986:	cd bf       	out	0x3d, r28	; 61
    6988:	cf 91       	pop	r28
    698a:	df 91       	pop	r29
    698c:	08 95       	ret

0000698e <HAL_IR_Init>:

#include "IR_Interface.h"

// Initialize the IR sensor
void HAL_IR_Init() {
    698e:	df 93       	push	r29
    6990:	cf 93       	push	r28
    6992:	cd b7       	in	r28, 0x3d	; 61
    6994:	de b7       	in	r29, 0x3e	; 62
    // Set the IR sensor pin as an input
    CLEAR_BIT(IR_PORT, IR_SENSOR_PIN);
    6996:	ab e3       	ldi	r26, 0x3B	; 59
    6998:	b0 e0       	ldi	r27, 0x00	; 0
    699a:	eb e3       	ldi	r30, 0x3B	; 59
    699c:	f0 e0       	ldi	r31, 0x00	; 0
    699e:	80 81       	ld	r24, Z
    69a0:	8d 7f       	andi	r24, 0xFD	; 253
    69a2:	8c 93       	st	X, r24
    // Enable the internal pull-up resistor for the sensor pin
    SET_BIT(IR_PORT, IR_SENSOR_PIN);
    69a4:	ab e3       	ldi	r26, 0x3B	; 59
    69a6:	b0 e0       	ldi	r27, 0x00	; 0
    69a8:	eb e3       	ldi	r30, 0x3B	; 59
    69aa:	f0 e0       	ldi	r31, 0x00	; 0
    69ac:	80 81       	ld	r24, Z
    69ae:	82 60       	ori	r24, 0x02	; 2
    69b0:	8c 93       	st	X, r24
}
    69b2:	cf 91       	pop	r28
    69b4:	df 91       	pop	r29
    69b6:	08 95       	ret

000069b8 <HAL_IR_Read>:

// Read the IR sensor's state (1 if object detected, 0 if not)
unsigned char HAL_IR_Read()
{
    69b8:	df 93       	push	r29
    69ba:	cf 93       	push	r28
    69bc:	0f 92       	push	r0
    69be:	cd b7       	in	r28, 0x3d	; 61
    69c0:	de b7       	in	r29, 0x3e	; 62
    return (((IR_PIN ) & (1<<IR_SENSOR_PIN)) ? NOT_DETECTED : DETECTED);
    69c2:	e9 e3       	ldi	r30, 0x39	; 57
    69c4:	f0 e0       	ldi	r31, 0x00	; 0
    69c6:	80 81       	ld	r24, Z
    69c8:	88 2f       	mov	r24, r24
    69ca:	90 e0       	ldi	r25, 0x00	; 0
    69cc:	82 70       	andi	r24, 0x02	; 2
    69ce:	90 70       	andi	r25, 0x00	; 0
    69d0:	19 82       	std	Y+1, r1	; 0x01
    69d2:	00 97       	sbiw	r24, 0x00	; 0
    69d4:	11 f4       	brne	.+4      	; 0x69da <HAL_IR_Read+0x22>
    69d6:	81 e0       	ldi	r24, 0x01	; 1
    69d8:	89 83       	std	Y+1, r24	; 0x01
    69da:	89 81       	ldd	r24, Y+1	; 0x01
}
    69dc:	0f 90       	pop	r0
    69de:	cf 91       	pop	r28
    69e0:	df 91       	pop	r29
    69e2:	08 95       	ret

000069e4 <HAL_BUZZER_INIT>:

#include "BUZZER_INTERFACE.h"

__EErrorType HAL_BUZZER_INIT(E_DioPort BUZZERPORT, E_DioPin BUZZERPin){
    69e4:	df 93       	push	r29
    69e6:	cf 93       	push	r28
    69e8:	00 d0       	rcall	.+0      	; 0x69ea <HAL_BUZZER_INIT+0x6>
    69ea:	00 d0       	rcall	.+0      	; 0x69ec <HAL_BUZZER_INIT+0x8>
    69ec:	00 d0       	rcall	.+0      	; 0x69ee <HAL_BUZZER_INIT+0xa>
    69ee:	cd b7       	in	r28, 0x3d	; 61
    69f0:	de b7       	in	r29, 0x3e	; 62
    69f2:	8d 83       	std	Y+5, r24	; 0x05
    69f4:	6e 83       	std	Y+6, r22	; 0x06
	S_Dio P2 = {BUZZERPORT, BUZZERPin, OUTPUT};
    69f6:	8d 81       	ldd	r24, Y+5	; 0x05
    69f8:	8a 83       	std	Y+2, r24	; 0x02
    69fa:	8e 81       	ldd	r24, Y+6	; 0x06
    69fc:	8b 83       	std	Y+3, r24	; 0x03
    69fe:	8f ef       	ldi	r24, 0xFF	; 255
    6a00:	8c 83       	std	Y+4, r24	; 0x04
	__EErrorType u8LocalReturn = __E_NOT_OK ;
    6a02:	81 e0       	ldi	r24, 0x01	; 1
    6a04:	89 83       	std	Y+1, r24	; 0x01
	u8LocalReturn = MCAL_Dio_Init(&P2);
    6a06:	ce 01       	movw	r24, r28
    6a08:	02 96       	adiw	r24, 0x02	; 2
    6a0a:	0e 94 aa 12 	call	0x2554	; 0x2554 <MCAL_Dio_Init>
    6a0e:	89 83       	std	Y+1, r24	; 0x01
	return u8LocalReturn;
    6a10:	89 81       	ldd	r24, Y+1	; 0x01
}
    6a12:	26 96       	adiw	r28, 0x06	; 6
    6a14:	0f b6       	in	r0, 0x3f	; 63
    6a16:	f8 94       	cli
    6a18:	de bf       	out	0x3e, r29	; 62
    6a1a:	0f be       	out	0x3f, r0	; 63
    6a1c:	cd bf       	out	0x3d, r28	; 61
    6a1e:	cf 91       	pop	r28
    6a20:	df 91       	pop	r29
    6a22:	08 95       	ret

00006a24 <HAL_BUZZER_ON>:

__EErrorType HAL_BUZZER_ON(E_DioPort BUZZERPORT, E_DioPin BUZZERPin){
    6a24:	df 93       	push	r29
    6a26:	cf 93       	push	r28
    6a28:	00 d0       	rcall	.+0      	; 0x6a2a <HAL_BUZZER_ON+0x6>
    6a2a:	00 d0       	rcall	.+0      	; 0x6a2c <HAL_BUZZER_ON+0x8>
    6a2c:	00 d0       	rcall	.+0      	; 0x6a2e <HAL_BUZZER_ON+0xa>
    6a2e:	cd b7       	in	r28, 0x3d	; 61
    6a30:	de b7       	in	r29, 0x3e	; 62
    6a32:	8d 83       	std	Y+5, r24	; 0x05
    6a34:	6e 83       	std	Y+6, r22	; 0x06
	S_Dio P2 = {BUZZERPORT, BUZZERPin, PIN_LOW};
    6a36:	8d 81       	ldd	r24, Y+5	; 0x05
    6a38:	8a 83       	std	Y+2, r24	; 0x02
    6a3a:	8e 81       	ldd	r24, Y+6	; 0x06
    6a3c:	8b 83       	std	Y+3, r24	; 0x03
    6a3e:	1c 82       	std	Y+4, r1	; 0x04
	__EErrorType u8LocalReturn = __E_NOT_OK;
    6a40:	81 e0       	ldi	r24, 0x01	; 1
    6a42:	89 83       	std	Y+1, r24	; 0x01
	u8LocalReturn = MCAL_Dio_WritePin(&P2, PIN_HIGH);
    6a44:	ce 01       	movw	r24, r28
    6a46:	02 96       	adiw	r24, 0x02	; 2
    6a48:	6f ef       	ldi	r22, 0xFF	; 255
    6a4a:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <MCAL_Dio_WritePin>
    6a4e:	89 83       	std	Y+1, r24	; 0x01
	return u8LocalReturn;
    6a50:	89 81       	ldd	r24, Y+1	; 0x01

}
    6a52:	26 96       	adiw	r28, 0x06	; 6
    6a54:	0f b6       	in	r0, 0x3f	; 63
    6a56:	f8 94       	cli
    6a58:	de bf       	out	0x3e, r29	; 62
    6a5a:	0f be       	out	0x3f, r0	; 63
    6a5c:	cd bf       	out	0x3d, r28	; 61
    6a5e:	cf 91       	pop	r28
    6a60:	df 91       	pop	r29
    6a62:	08 95       	ret

00006a64 <HAL_BUZZER_OFF>:

__EErrorType HAL_BUZZER_OFF(E_DioPort BUZZERPORT, E_DioPin BUZZERPin){
    6a64:	df 93       	push	r29
    6a66:	cf 93       	push	r28
    6a68:	00 d0       	rcall	.+0      	; 0x6a6a <HAL_BUZZER_OFF+0x6>
    6a6a:	00 d0       	rcall	.+0      	; 0x6a6c <HAL_BUZZER_OFF+0x8>
    6a6c:	00 d0       	rcall	.+0      	; 0x6a6e <HAL_BUZZER_OFF+0xa>
    6a6e:	cd b7       	in	r28, 0x3d	; 61
    6a70:	de b7       	in	r29, 0x3e	; 62
    6a72:	8d 83       	std	Y+5, r24	; 0x05
    6a74:	6e 83       	std	Y+6, r22	; 0x06
	S_Dio P2 = {BUZZERPORT, BUZZERPin, PIN_LOW};
    6a76:	8d 81       	ldd	r24, Y+5	; 0x05
    6a78:	8a 83       	std	Y+2, r24	; 0x02
    6a7a:	8e 81       	ldd	r24, Y+6	; 0x06
    6a7c:	8b 83       	std	Y+3, r24	; 0x03
    6a7e:	1c 82       	std	Y+4, r1	; 0x04
	__EErrorType u8LocalReturn = __E_NOT_OK;
    6a80:	81 e0       	ldi	r24, 0x01	; 1
    6a82:	89 83       	std	Y+1, r24	; 0x01
	u8LocalReturn = MCAL_Dio_WritePin(&P2, PIN_LOW);
    6a84:	ce 01       	movw	r24, r28
    6a86:	02 96       	adiw	r24, 0x02	; 2
    6a88:	60 e0       	ldi	r22, 0x00	; 0
    6a8a:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <MCAL_Dio_WritePin>
    6a8e:	89 83       	std	Y+1, r24	; 0x01
	return u8LocalReturn;
    6a90:	89 81       	ldd	r24, Y+1	; 0x01

}
    6a92:	26 96       	adiw	r28, 0x06	; 6
    6a94:	0f b6       	in	r0, 0x3f	; 63
    6a96:	f8 94       	cli
    6a98:	de bf       	out	0x3e, r29	; 62
    6a9a:	0f be       	out	0x3f, r0	; 63
    6a9c:	cd bf       	out	0x3d, r28	; 61
    6a9e:	cf 91       	pop	r28
    6aa0:	df 91       	pop	r29
    6aa2:	08 95       	ret

00006aa4 <HAL_BUTTON_init>:



/* Initialize the Button */
E_ErrorType HAL_BUTTON_init( )
{
    6aa4:	df 93       	push	r29
    6aa6:	cf 93       	push	r28
    6aa8:	00 d0       	rcall	.+0      	; 0x6aaa <HAL_BUTTON_init+0x6>
    6aaa:	00 d0       	rcall	.+0      	; 0x6aac <HAL_BUTTON_init+0x8>
    6aac:	cd b7       	in	r28, 0x3d	; 61
    6aae:	de b7       	in	r29, 0x3e	; 62
	E_ErrorType u8LocalReturn =E_NOT_OK;
    6ab0:	81 e0       	ldi	r24, 0x01	; 1
    6ab2:	89 83       	std	Y+1, r24	; 0x01
	S_Dio Button_interface;
	Button_interface.port_num=Button_port;
    6ab4:	81 e0       	ldi	r24, 0x01	; 1
    6ab6:	8a 83       	std	Y+2, r24	; 0x02
	Button_interface.pin_num=Button_pin;
    6ab8:	81 e0       	ldi	r24, 0x01	; 1
    6aba:	8b 83       	std	Y+3, r24	; 0x03
	Button_interface.Direction=INPUT;
    6abc:	1c 82       	std	Y+4, r1	; 0x04
	u8LocalReturn=MCAL_Dio_Init(&Button_interface);
    6abe:	ce 01       	movw	r24, r28
    6ac0:	02 96       	adiw	r24, 0x02	; 2
    6ac2:	0e 94 aa 12 	call	0x2554	; 0x2554 <MCAL_Dio_Init>
    6ac6:	89 83       	std	Y+1, r24	; 0x01
	return E_OK;
    6ac8:	80 e0       	ldi	r24, 0x00	; 0
}
    6aca:	0f 90       	pop	r0
    6acc:	0f 90       	pop	r0
    6ace:	0f 90       	pop	r0
    6ad0:	0f 90       	pop	r0
    6ad2:	cf 91       	pop	r28
    6ad4:	df 91       	pop	r29
    6ad6:	08 95       	ret

00006ad8 <HAL_BUTTON_read>:

/* Read the button */
E_ErrorType HAL_BUTTON_read(u8PinValue *btn_state)
{
    6ad8:	df 93       	push	r29
    6ada:	cf 93       	push	r28
    6adc:	00 d0       	rcall	.+0      	; 0x6ade <HAL_BUTTON_read+0x6>
    6ade:	00 d0       	rcall	.+0      	; 0x6ae0 <HAL_BUTTON_read+0x8>
    6ae0:	00 d0       	rcall	.+0      	; 0x6ae2 <HAL_BUTTON_read+0xa>
    6ae2:	cd b7       	in	r28, 0x3d	; 61
    6ae4:	de b7       	in	r29, 0x3e	; 62
    6ae6:	9e 83       	std	Y+6, r25	; 0x06
    6ae8:	8d 83       	std	Y+5, r24	; 0x05
	E_ErrorType u8LocalReturn =E_NOT_OK;
    6aea:	81 e0       	ldi	r24, 0x01	; 1
    6aec:	89 83       	std	Y+1, r24	; 0x01
		S_Dio Button_interface;
		Button_interface.port_num=Button_port;
    6aee:	81 e0       	ldi	r24, 0x01	; 1
    6af0:	8a 83       	std	Y+2, r24	; 0x02
		Button_interface.pin_num=Button_pin;
    6af2:	81 e0       	ldi	r24, 0x01	; 1
    6af4:	8b 83       	std	Y+3, r24	; 0x03
		u8LocalReturn= MCAL_Dio_ReadPin(&Button_interface,btn_state);
    6af6:	ce 01       	movw	r24, r28
    6af8:	02 96       	adiw	r24, 0x02	; 2
    6afa:	2d 81       	ldd	r18, Y+5	; 0x05
    6afc:	3e 81       	ldd	r19, Y+6	; 0x06
    6afe:	b9 01       	movw	r22, r18
    6b00:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <MCAL_Dio_ReadPin>
    6b04:	89 83       	std	Y+1, r24	; 0x01
		return E_OK;
    6b06:	80 e0       	ldi	r24, 0x00	; 0
}
    6b08:	26 96       	adiw	r28, 0x06	; 6
    6b0a:	0f b6       	in	r0, 0x3f	; 63
    6b0c:	f8 94       	cli
    6b0e:	de bf       	out	0x3e, r29	; 62
    6b10:	0f be       	out	0x3f, r0	; 63
    6b12:	cd bf       	out	0x3d, r28	; 61
    6b14:	cf 91       	pop	r28
    6b16:	df 91       	pop	r29
    6b18:	08 95       	ret

00006b1a <HAL_BUTTON_set_pullup>:

/* Set button as pull up */
E_ErrorType HAL_BUTTON_set_pullup()
{
    6b1a:	df 93       	push	r29
    6b1c:	cf 93       	push	r28
    6b1e:	00 d0       	rcall	.+0      	; 0x6b20 <HAL_BUTTON_set_pullup+0x6>
    6b20:	00 d0       	rcall	.+0      	; 0x6b22 <HAL_BUTTON_set_pullup+0x8>
    6b22:	cd b7       	in	r28, 0x3d	; 61
    6b24:	de b7       	in	r29, 0x3e	; 62
	E_ErrorType u8LocalReturn =E_NOT_OK;
    6b26:	81 e0       	ldi	r24, 0x01	; 1
    6b28:	89 83       	std	Y+1, r24	; 0x01
	S_Dio Button_interface;
	Button_interface.port_num=Button_port;
    6b2a:	81 e0       	ldi	r24, 0x01	; 1
    6b2c:	8a 83       	std	Y+2, r24	; 0x02
	Button_interface.pin_num=Button_pin;
    6b2e:	81 e0       	ldi	r24, 0x01	; 1
    6b30:	8b 83       	std	Y+3, r24	; 0x03
	u8LocalReturn=MCAL_Dio_WritePin(&Button_interface,PIN_HIGH);
    6b32:	ce 01       	movw	r24, r28
    6b34:	02 96       	adiw	r24, 0x02	; 2
    6b36:	6f ef       	ldi	r22, 0xFF	; 255
    6b38:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <MCAL_Dio_WritePin>
    6b3c:	89 83       	std	Y+1, r24	; 0x01
	return E_OK;
    6b3e:	80 e0       	ldi	r24, 0x00	; 0
}
    6b40:	0f 90       	pop	r0
    6b42:	0f 90       	pop	r0
    6b44:	0f 90       	pop	r0
    6b46:	0f 90       	pop	r0
    6b48:	cf 91       	pop	r28
    6b4a:	df 91       	pop	r29
    6b4c:	08 95       	ret

00006b4e <main>:

#define HIGH 1


int main()
{
    6b4e:	df 93       	push	r29
    6b50:	cf 93       	push	r28
    6b52:	cd b7       	in	r28, 0x3d	; 61
    6b54:	de b7       	in	r29, 0x3e	; 62
    6b56:	65 97       	sbiw	r28, 0x15	; 21
    6b58:	0f b6       	in	r0, 0x3f	; 63
    6b5a:	f8 94       	cli
    6b5c:	de bf       	out	0x3e, r29	; 62
    6b5e:	0f be       	out	0x3f, r0	; 63
    6b60:	cd bf       	out	0x3d, r28	; 61
	u8Data buffer[20];


	HAL_LCD_init();
    6b62:	0e 94 48 23 	call	0x4690	; 0x4690 <HAL_LCD_init>
	HAL_LCD_sendString("3ars");
    6b66:	86 e8       	ldi	r24, 0x86	; 134
    6b68:	90 e0       	ldi	r25, 0x00	; 0
    6b6a:	0e 94 4c 31 	call	0x6298	; 0x6298 <HAL_LCD_sendString>


	u8Value value = Enter_Password();
    6b6e:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <Enter_Password>
    6b72:	89 83       	std	Y+1, r24	; 0x01
    6b74:	ff cf       	rjmp	.-2      	; 0x6b74 <main+0x26>

00006b76 <__udivmodqi4>:
    6b76:	99 1b       	sub	r25, r25
    6b78:	79 e0       	ldi	r23, 0x09	; 9
    6b7a:	04 c0       	rjmp	.+8      	; 0x6b84 <__udivmodqi4_ep>

00006b7c <__udivmodqi4_loop>:
    6b7c:	99 1f       	adc	r25, r25
    6b7e:	96 17       	cp	r25, r22
    6b80:	08 f0       	brcs	.+2      	; 0x6b84 <__udivmodqi4_ep>
    6b82:	96 1b       	sub	r25, r22

00006b84 <__udivmodqi4_ep>:
    6b84:	88 1f       	adc	r24, r24
    6b86:	7a 95       	dec	r23
    6b88:	c9 f7       	brne	.-14     	; 0x6b7c <__udivmodqi4_loop>
    6b8a:	80 95       	com	r24
    6b8c:	08 95       	ret

00006b8e <__udivmodsi4>:
    6b8e:	a1 e2       	ldi	r26, 0x21	; 33
    6b90:	1a 2e       	mov	r1, r26
    6b92:	aa 1b       	sub	r26, r26
    6b94:	bb 1b       	sub	r27, r27
    6b96:	fd 01       	movw	r30, r26
    6b98:	0d c0       	rjmp	.+26     	; 0x6bb4 <__udivmodsi4_ep>

00006b9a <__udivmodsi4_loop>:
    6b9a:	aa 1f       	adc	r26, r26
    6b9c:	bb 1f       	adc	r27, r27
    6b9e:	ee 1f       	adc	r30, r30
    6ba0:	ff 1f       	adc	r31, r31
    6ba2:	a2 17       	cp	r26, r18
    6ba4:	b3 07       	cpc	r27, r19
    6ba6:	e4 07       	cpc	r30, r20
    6ba8:	f5 07       	cpc	r31, r21
    6baa:	20 f0       	brcs	.+8      	; 0x6bb4 <__udivmodsi4_ep>
    6bac:	a2 1b       	sub	r26, r18
    6bae:	b3 0b       	sbc	r27, r19
    6bb0:	e4 0b       	sbc	r30, r20
    6bb2:	f5 0b       	sbc	r31, r21

00006bb4 <__udivmodsi4_ep>:
    6bb4:	66 1f       	adc	r22, r22
    6bb6:	77 1f       	adc	r23, r23
    6bb8:	88 1f       	adc	r24, r24
    6bba:	99 1f       	adc	r25, r25
    6bbc:	1a 94       	dec	r1
    6bbe:	69 f7       	brne	.-38     	; 0x6b9a <__udivmodsi4_loop>
    6bc0:	60 95       	com	r22
    6bc2:	70 95       	com	r23
    6bc4:	80 95       	com	r24
    6bc6:	90 95       	com	r25
    6bc8:	9b 01       	movw	r18, r22
    6bca:	ac 01       	movw	r20, r24
    6bcc:	bd 01       	movw	r22, r26
    6bce:	cf 01       	movw	r24, r30
    6bd0:	08 95       	ret

00006bd2 <__prologue_saves__>:
    6bd2:	2f 92       	push	r2
    6bd4:	3f 92       	push	r3
    6bd6:	4f 92       	push	r4
    6bd8:	5f 92       	push	r5
    6bda:	6f 92       	push	r6
    6bdc:	7f 92       	push	r7
    6bde:	8f 92       	push	r8
    6be0:	9f 92       	push	r9
    6be2:	af 92       	push	r10
    6be4:	bf 92       	push	r11
    6be6:	cf 92       	push	r12
    6be8:	df 92       	push	r13
    6bea:	ef 92       	push	r14
    6bec:	ff 92       	push	r15
    6bee:	0f 93       	push	r16
    6bf0:	1f 93       	push	r17
    6bf2:	cf 93       	push	r28
    6bf4:	df 93       	push	r29
    6bf6:	cd b7       	in	r28, 0x3d	; 61
    6bf8:	de b7       	in	r29, 0x3e	; 62
    6bfa:	ca 1b       	sub	r28, r26
    6bfc:	db 0b       	sbc	r29, r27
    6bfe:	0f b6       	in	r0, 0x3f	; 63
    6c00:	f8 94       	cli
    6c02:	de bf       	out	0x3e, r29	; 62
    6c04:	0f be       	out	0x3f, r0	; 63
    6c06:	cd bf       	out	0x3d, r28	; 61
    6c08:	09 94       	ijmp

00006c0a <__epilogue_restores__>:
    6c0a:	2a 88       	ldd	r2, Y+18	; 0x12
    6c0c:	39 88       	ldd	r3, Y+17	; 0x11
    6c0e:	48 88       	ldd	r4, Y+16	; 0x10
    6c10:	5f 84       	ldd	r5, Y+15	; 0x0f
    6c12:	6e 84       	ldd	r6, Y+14	; 0x0e
    6c14:	7d 84       	ldd	r7, Y+13	; 0x0d
    6c16:	8c 84       	ldd	r8, Y+12	; 0x0c
    6c18:	9b 84       	ldd	r9, Y+11	; 0x0b
    6c1a:	aa 84       	ldd	r10, Y+10	; 0x0a
    6c1c:	b9 84       	ldd	r11, Y+9	; 0x09
    6c1e:	c8 84       	ldd	r12, Y+8	; 0x08
    6c20:	df 80       	ldd	r13, Y+7	; 0x07
    6c22:	ee 80       	ldd	r14, Y+6	; 0x06
    6c24:	fd 80       	ldd	r15, Y+5	; 0x05
    6c26:	0c 81       	ldd	r16, Y+4	; 0x04
    6c28:	1b 81       	ldd	r17, Y+3	; 0x03
    6c2a:	aa 81       	ldd	r26, Y+2	; 0x02
    6c2c:	b9 81       	ldd	r27, Y+1	; 0x01
    6c2e:	ce 0f       	add	r28, r30
    6c30:	d1 1d       	adc	r29, r1
    6c32:	0f b6       	in	r0, 0x3f	; 63
    6c34:	f8 94       	cli
    6c36:	de bf       	out	0x3e, r29	; 62
    6c38:	0f be       	out	0x3f, r0	; 63
    6c3a:	cd bf       	out	0x3d, r28	; 61
    6c3c:	ed 01       	movw	r28, r26
    6c3e:	08 95       	ret

00006c40 <_exit>:
    6c40:	f8 94       	cli

00006c42 <__stop_program>:
    6c42:	ff cf       	rjmp	.-2      	; 0x6c42 <__stop_program>
