
HAL_LCD_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003790  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  00003790  00003804  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000027d8  00000000  00000000  00003834  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ee0  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00006eec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000702c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000719c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00008de5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00009cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000aa80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000abe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000ae6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b63b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e9       	ldi	r30, 0x90	; 144
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 4d 1b 	call	0x369a	; 0x369a <main>
      7a:	0c 94 c6 1b 	jmp	0x378c	; 0x378c <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 8f 1b 	jmp	0x371e	; 0x371e <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ac e6       	ldi	r26, 0x6C	; 108
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 ab 1b 	jmp	0x3756	; 0x3756 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 9b 1b 	jmp	0x3736	; 0x3736 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 b7 1b 	jmp	0x376e	; 0x376e <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 9b 1b 	jmp	0x3736	; 0x3736 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 b7 1b 	jmp	0x376e	; 0x376e <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 8f 1b 	jmp	0x371e	; 0x371e <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8c e6       	ldi	r24, 0x6C	; 108
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 ab 1b 	jmp	0x3756	; 0x3756 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 9b 1b 	jmp	0x3736	; 0x3736 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 b7 1b 	jmp	0x376e	; 0x376e <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 9b 1b 	jmp	0x3736	; 0x3736 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 b7 1b 	jmp	0x376e	; 0x376e <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 9b 1b 	jmp	0x3736	; 0x3736 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 b7 1b 	jmp	0x376e	; 0x376e <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 9f 1b 	jmp	0x373e	; 0x373e <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 bb 1b 	jmp	0x3776	; 0x3776 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <MCAL_Dio_Init>:
#include "DIO.stdtypes.h"



Std_type MCAL_Dio_Init(S_Dio *Dio_Config)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	27 97       	sbiw	r28, 0x07	; 7
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	9d 83       	std	Y+5, r25	; 0x05
     b4c:	8c 83       	std	Y+4, r24	; 0x04
	Std_type error = OK;
     b4e:	1b 82       	std	Y+3, r1	; 0x03
	u8RegisterValue Mask1,Mask2;
	if(DIO_STATUS_ERROR == NOT_OK)
	{
		error = NOT_OK;
	}
	else if(Dio_Config->port_num >= DIO_CONFIGURED_PORTS)
     b50:	ec 81       	ldd	r30, Y+4	; 0x04
     b52:	fd 81       	ldd	r31, Y+5	; 0x05
     b54:	80 81       	ld	r24, Z
     b56:	84 30       	cpi	r24, 0x04	; 4
     b58:	18 f0       	brcs	.+6      	; 0xb60 <MCAL_Dio_Init+0x2a>
	{

		error = NOT_OK;
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	8b 83       	std	Y+3, r24	; 0x03
     b5e:	6c c0       	rjmp	.+216    	; 0xc38 <MCAL_Dio_Init+0x102>
	}
	else
	{

		Mask2 = ((Dio_Config->pin_num) & (Dio_Config->Direction));
     b60:	ec 81       	ldd	r30, Y+4	; 0x04
     b62:	fd 81       	ldd	r31, Y+5	; 0x05
     b64:	91 81       	ldd	r25, Z+1	; 0x01
     b66:	ec 81       	ldd	r30, Y+4	; 0x04
     b68:	fd 81       	ldd	r31, Y+5	; 0x05
     b6a:	82 81       	ldd	r24, Z+2	; 0x02
     b6c:	89 23       	and	r24, r25
     b6e:	89 83       	std	Y+1, r24	; 0x01
		switch(Dio_Config->port_num)
     b70:	ec 81       	ldd	r30, Y+4	; 0x04
     b72:	fd 81       	ldd	r31, Y+5	; 0x05
     b74:	80 81       	ld	r24, Z
     b76:	28 2f       	mov	r18, r24
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	3f 83       	std	Y+7, r19	; 0x07
     b7c:	2e 83       	std	Y+6, r18	; 0x06
     b7e:	8e 81       	ldd	r24, Y+6	; 0x06
     b80:	9f 81       	ldd	r25, Y+7	; 0x07
     b82:	81 30       	cpi	r24, 0x01	; 1
     b84:	91 05       	cpc	r25, r1
     b86:	31 f1       	breq	.+76     	; 0xbd4 <MCAL_Dio_Init+0x9e>
     b88:	2e 81       	ldd	r18, Y+6	; 0x06
     b8a:	3f 81       	ldd	r19, Y+7	; 0x07
     b8c:	22 30       	cpi	r18, 0x02	; 2
     b8e:	31 05       	cpc	r19, r1
     b90:	2c f4       	brge	.+10     	; 0xb9c <MCAL_Dio_Init+0x66>
     b92:	8e 81       	ldd	r24, Y+6	; 0x06
     b94:	9f 81       	ldd	r25, Y+7	; 0x07
     b96:	00 97       	sbiw	r24, 0x00	; 0
     b98:	61 f0       	breq	.+24     	; 0xbb2 <MCAL_Dio_Init+0x7c>
     b9a:	4e c0       	rjmp	.+156    	; 0xc38 <MCAL_Dio_Init+0x102>
     b9c:	2e 81       	ldd	r18, Y+6	; 0x06
     b9e:	3f 81       	ldd	r19, Y+7	; 0x07
     ba0:	22 30       	cpi	r18, 0x02	; 2
     ba2:	31 05       	cpc	r19, r1
     ba4:	41 f1       	breq	.+80     	; 0xbf6 <MCAL_Dio_Init+0xc0>
     ba6:	8e 81       	ldd	r24, Y+6	; 0x06
     ba8:	9f 81       	ldd	r25, Y+7	; 0x07
     baa:	83 30       	cpi	r24, 0x03	; 3
     bac:	91 05       	cpc	r25, r1
     bae:	a1 f1       	breq	.+104    	; 0xc18 <MCAL_Dio_Init+0xe2>
     bb0:	43 c0       	rjmp	.+134    	; 0xc38 <MCAL_Dio_Init+0x102>
		{
		case PORTA_ID:
			Mask1 = ((DIO_DDRA) & (~(Dio_Config->pin_num)));
     bb2:	ea e3       	ldi	r30, 0x3A	; 58
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	80 81       	ld	r24, Z
     bb8:	98 2f       	mov	r25, r24
     bba:	ec 81       	ldd	r30, Y+4	; 0x04
     bbc:	fd 81       	ldd	r31, Y+5	; 0x05
     bbe:	81 81       	ldd	r24, Z+1	; 0x01
     bc0:	80 95       	com	r24
     bc2:	89 23       	and	r24, r25
     bc4:	8a 83       	std	Y+2, r24	; 0x02
			DIO_DDRA = Mask1 | Mask2;
     bc6:	ea e3       	ldi	r30, 0x3A	; 58
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	9a 81       	ldd	r25, Y+2	; 0x02
     bcc:	89 81       	ldd	r24, Y+1	; 0x01
     bce:	89 2b       	or	r24, r25
     bd0:	80 83       	st	Z, r24
     bd2:	32 c0       	rjmp	.+100    	; 0xc38 <MCAL_Dio_Init+0x102>
			break;
		case PORTB_ID:
			Mask1 = ((DIO_DDRB) & (~(Dio_Config->pin_num)));
     bd4:	e7 e3       	ldi	r30, 0x37	; 55
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	80 81       	ld	r24, Z
     bda:	98 2f       	mov	r25, r24
     bdc:	ec 81       	ldd	r30, Y+4	; 0x04
     bde:	fd 81       	ldd	r31, Y+5	; 0x05
     be0:	81 81       	ldd	r24, Z+1	; 0x01
     be2:	80 95       	com	r24
     be4:	89 23       	and	r24, r25
     be6:	8a 83       	std	Y+2, r24	; 0x02
			DIO_DDRB = Mask1 | Mask2;
     be8:	e7 e3       	ldi	r30, 0x37	; 55
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	9a 81       	ldd	r25, Y+2	; 0x02
     bee:	89 81       	ldd	r24, Y+1	; 0x01
     bf0:	89 2b       	or	r24, r25
     bf2:	80 83       	st	Z, r24
     bf4:	21 c0       	rjmp	.+66     	; 0xc38 <MCAL_Dio_Init+0x102>
			break;
		case PORTC_ID:
			Mask1 = ((DIO_DDRC) & (~(Dio_Config->pin_num)));
     bf6:	e4 e3       	ldi	r30, 0x34	; 52
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	80 81       	ld	r24, Z
     bfc:	98 2f       	mov	r25, r24
     bfe:	ec 81       	ldd	r30, Y+4	; 0x04
     c00:	fd 81       	ldd	r31, Y+5	; 0x05
     c02:	81 81       	ldd	r24, Z+1	; 0x01
     c04:	80 95       	com	r24
     c06:	89 23       	and	r24, r25
     c08:	8a 83       	std	Y+2, r24	; 0x02
			DIO_DDRC = Mask1 | Mask2;
     c0a:	e4 e3       	ldi	r30, 0x34	; 52
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	9a 81       	ldd	r25, Y+2	; 0x02
     c10:	89 81       	ldd	r24, Y+1	; 0x01
     c12:	89 2b       	or	r24, r25
     c14:	80 83       	st	Z, r24
     c16:	10 c0       	rjmp	.+32     	; 0xc38 <MCAL_Dio_Init+0x102>
			break;
		case PORTD_ID:
			Mask1 = ((DIO_DDRD) & (~(Dio_Config->pin_num)));
     c18:	e1 e3       	ldi	r30, 0x31	; 49
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	98 2f       	mov	r25, r24
     c20:	ec 81       	ldd	r30, Y+4	; 0x04
     c22:	fd 81       	ldd	r31, Y+5	; 0x05
     c24:	81 81       	ldd	r24, Z+1	; 0x01
     c26:	80 95       	com	r24
     c28:	89 23       	and	r24, r25
     c2a:	8a 83       	std	Y+2, r24	; 0x02
			DIO_DDRD = Mask1 | Mask2;
     c2c:	e1 e3       	ldi	r30, 0x31	; 49
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	9a 81       	ldd	r25, Y+2	; 0x02
     c32:	89 81       	ldd	r24, Y+1	; 0x01
     c34:	89 2b       	or	r24, r25
     c36:	80 83       	st	Z, r24
			break;

		}
	}

	return error;
     c38:	8b 81       	ldd	r24, Y+3	; 0x03
}
     c3a:	27 96       	adiw	r28, 0x07	; 7
     c3c:	0f b6       	in	r0, 0x3f	; 63
     c3e:	f8 94       	cli
     c40:	de bf       	out	0x3e, r29	; 62
     c42:	0f be       	out	0x3f, r0	; 63
     c44:	cd bf       	out	0x3d, r28	; 61
     c46:	cf 91       	pop	r28
     c48:	df 91       	pop	r29
     c4a:	08 95       	ret

00000c4c <MCAL_Dio_SetPortDirection>:

Std_type MCAL_Dio_SetPortDirection(S_Dio *Dio_ConfigPort)
{
     c4c:	df 93       	push	r29
     c4e:	cf 93       	push	r28
     c50:	00 d0       	rcall	.+0      	; 0xc52 <MCAL_Dio_SetPortDirection+0x6>
     c52:	00 d0       	rcall	.+0      	; 0xc54 <MCAL_Dio_SetPortDirection+0x8>
     c54:	0f 92       	push	r0
     c56:	cd b7       	in	r28, 0x3d	; 61
     c58:	de b7       	in	r29, 0x3e	; 62
     c5a:	9b 83       	std	Y+3, r25	; 0x03
     c5c:	8a 83       	std	Y+2, r24	; 0x02
	Std_type error = OK;
     c5e:	19 82       	std	Y+1, r1	; 0x01
	if(DIO_STATUS_ERROR == NOT_OK)
	{
		error = NOT_OK;
	}
	else if(Dio_ConfigPort->port_num >= DIO_CONFIGURED_PORTS)
     c60:	ea 81       	ldd	r30, Y+2	; 0x02
     c62:	fb 81       	ldd	r31, Y+3	; 0x03
     c64:	80 81       	ld	r24, Z
     c66:	84 30       	cpi	r24, 0x04	; 4
     c68:	18 f0       	brcs	.+6      	; 0xc70 <MCAL_Dio_SetPortDirection+0x24>
	{

		error = NOT_OK;
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	89 83       	std	Y+1, r24	; 0x01
     c6e:	44 c0       	rjmp	.+136    	; 0xcf8 <MCAL_Dio_SetPortDirection+0xac>
	}
	else
	{
		switch(Dio_ConfigPort->port_num)
     c70:	ea 81       	ldd	r30, Y+2	; 0x02
     c72:	fb 81       	ldd	r31, Y+3	; 0x03
     c74:	80 81       	ld	r24, Z
     c76:	28 2f       	mov	r18, r24
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	3d 83       	std	Y+5, r19	; 0x05
     c7c:	2c 83       	std	Y+4, r18	; 0x04
     c7e:	8c 81       	ldd	r24, Y+4	; 0x04
     c80:	9d 81       	ldd	r25, Y+5	; 0x05
     c82:	81 30       	cpi	r24, 0x01	; 1
     c84:	91 05       	cpc	r25, r1
     c86:	f1 f0       	breq	.+60     	; 0xcc4 <MCAL_Dio_SetPortDirection+0x78>
     c88:	2c 81       	ldd	r18, Y+4	; 0x04
     c8a:	3d 81       	ldd	r19, Y+5	; 0x05
     c8c:	22 30       	cpi	r18, 0x02	; 2
     c8e:	31 05       	cpc	r19, r1
     c90:	2c f4       	brge	.+10     	; 0xc9c <MCAL_Dio_SetPortDirection+0x50>
     c92:	8c 81       	ldd	r24, Y+4	; 0x04
     c94:	9d 81       	ldd	r25, Y+5	; 0x05
     c96:	00 97       	sbiw	r24, 0x00	; 0
     c98:	61 f0       	breq	.+24     	; 0xcb2 <MCAL_Dio_SetPortDirection+0x66>
     c9a:	2e c0       	rjmp	.+92     	; 0xcf8 <MCAL_Dio_SetPortDirection+0xac>
     c9c:	2c 81       	ldd	r18, Y+4	; 0x04
     c9e:	3d 81       	ldd	r19, Y+5	; 0x05
     ca0:	22 30       	cpi	r18, 0x02	; 2
     ca2:	31 05       	cpc	r19, r1
     ca4:	c1 f0       	breq	.+48     	; 0xcd6 <MCAL_Dio_SetPortDirection+0x8a>
     ca6:	8c 81       	ldd	r24, Y+4	; 0x04
     ca8:	9d 81       	ldd	r25, Y+5	; 0x05
     caa:	83 30       	cpi	r24, 0x03	; 3
     cac:	91 05       	cpc	r25, r1
     cae:	e1 f0       	breq	.+56     	; 0xce8 <MCAL_Dio_SetPortDirection+0x9c>
     cb0:	23 c0       	rjmp	.+70     	; 0xcf8 <MCAL_Dio_SetPortDirection+0xac>
		{
		case PORTA_ID:
			DIO_DDRA = Dio_ConfigPort->Direction;
     cb2:	ea e3       	ldi	r30, 0x3A	; 58
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	aa 81       	ldd	r26, Y+2	; 0x02
     cb8:	bb 81       	ldd	r27, Y+3	; 0x03
     cba:	12 96       	adiw	r26, 0x02	; 2
     cbc:	8c 91       	ld	r24, X
     cbe:	12 97       	sbiw	r26, 0x02	; 2
     cc0:	80 83       	st	Z, r24
     cc2:	1a c0       	rjmp	.+52     	; 0xcf8 <MCAL_Dio_SetPortDirection+0xac>
			break;
		case PORTB_ID:
			DIO_DDRB = Dio_ConfigPort->Direction;
     cc4:	e7 e3       	ldi	r30, 0x37	; 55
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	aa 81       	ldd	r26, Y+2	; 0x02
     cca:	bb 81       	ldd	r27, Y+3	; 0x03
     ccc:	12 96       	adiw	r26, 0x02	; 2
     cce:	8c 91       	ld	r24, X
     cd0:	12 97       	sbiw	r26, 0x02	; 2
     cd2:	80 83       	st	Z, r24
     cd4:	11 c0       	rjmp	.+34     	; 0xcf8 <MCAL_Dio_SetPortDirection+0xac>
			break;
		case PORTC_ID:

			DIO_DDRC = Dio_ConfigPort->Direction;
     cd6:	e4 e3       	ldi	r30, 0x34	; 52
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	aa 81       	ldd	r26, Y+2	; 0x02
     cdc:	bb 81       	ldd	r27, Y+3	; 0x03
     cde:	12 96       	adiw	r26, 0x02	; 2
     ce0:	8c 91       	ld	r24, X
     ce2:	12 97       	sbiw	r26, 0x02	; 2
     ce4:	80 83       	st	Z, r24
     ce6:	08 c0       	rjmp	.+16     	; 0xcf8 <MCAL_Dio_SetPortDirection+0xac>
			break;
		case PORTD_ID:
			DIO_DDRD = Dio_ConfigPort->Direction;
     ce8:	e1 e3       	ldi	r30, 0x31	; 49
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	aa 81       	ldd	r26, Y+2	; 0x02
     cee:	bb 81       	ldd	r27, Y+3	; 0x03
     cf0:	12 96       	adiw	r26, 0x02	; 2
     cf2:	8c 91       	ld	r24, X
     cf4:	12 97       	sbiw	r26, 0x02	; 2
     cf6:	80 83       	st	Z, r24
			break;

		}
	}

	return error;
     cf8:	89 81       	ldd	r24, Y+1	; 0x01
}
     cfa:	0f 90       	pop	r0
     cfc:	0f 90       	pop	r0
     cfe:	0f 90       	pop	r0
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	cf 91       	pop	r28
     d06:	df 91       	pop	r29
     d08:	08 95       	ret

00000d0a <MCAL_Dio_SetPinDirection>:

Std_type MCAL_Dio_SetPinDirection(S_Dio *Dio_ConfigPin)
{
     d0a:	df 93       	push	r29
     d0c:	cf 93       	push	r28
     d0e:	cd b7       	in	r28, 0x3d	; 61
     d10:	de b7       	in	r29, 0x3e	; 62
     d12:	27 97       	sbiw	r28, 0x07	; 7
     d14:	0f b6       	in	r0, 0x3f	; 63
     d16:	f8 94       	cli
     d18:	de bf       	out	0x3e, r29	; 62
     d1a:	0f be       	out	0x3f, r0	; 63
     d1c:	cd bf       	out	0x3d, r28	; 61
     d1e:	9d 83       	std	Y+5, r25	; 0x05
     d20:	8c 83       	std	Y+4, r24	; 0x04
	Std_type error = OK;
     d22:	1b 82       	std	Y+3, r1	; 0x03
	if(DIO_STATUS_ERROR == NOT_OK)
	{

		error = NOT_OK;
	}
	else if(Dio_ConfigPin->port_num >= DIO_CONFIGURED_PORTS)
     d24:	ec 81       	ldd	r30, Y+4	; 0x04
     d26:	fd 81       	ldd	r31, Y+5	; 0x05
     d28:	80 81       	ld	r24, Z
     d2a:	84 30       	cpi	r24, 0x04	; 4
     d2c:	18 f0       	brcs	.+6      	; 0xd34 <MCAL_Dio_SetPinDirection+0x2a>
	{

		error = NOT_OK;
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	8b 83       	std	Y+3, r24	; 0x03
     d32:	6c c0       	rjmp	.+216    	; 0xe0c <MCAL_Dio_SetPinDirection+0x102>
	}
	else
	{
		Mask2 = ((Dio_ConfigPin->pin_num) & (Dio_ConfigPin->Direction));
     d34:	ec 81       	ldd	r30, Y+4	; 0x04
     d36:	fd 81       	ldd	r31, Y+5	; 0x05
     d38:	91 81       	ldd	r25, Z+1	; 0x01
     d3a:	ec 81       	ldd	r30, Y+4	; 0x04
     d3c:	fd 81       	ldd	r31, Y+5	; 0x05
     d3e:	82 81       	ldd	r24, Z+2	; 0x02
     d40:	89 23       	and	r24, r25
     d42:	89 83       	std	Y+1, r24	; 0x01
		switch(Dio_ConfigPin->port_num)
     d44:	ec 81       	ldd	r30, Y+4	; 0x04
     d46:	fd 81       	ldd	r31, Y+5	; 0x05
     d48:	80 81       	ld	r24, Z
     d4a:	28 2f       	mov	r18, r24
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	3f 83       	std	Y+7, r19	; 0x07
     d50:	2e 83       	std	Y+6, r18	; 0x06
     d52:	8e 81       	ldd	r24, Y+6	; 0x06
     d54:	9f 81       	ldd	r25, Y+7	; 0x07
     d56:	81 30       	cpi	r24, 0x01	; 1
     d58:	91 05       	cpc	r25, r1
     d5a:	31 f1       	breq	.+76     	; 0xda8 <MCAL_Dio_SetPinDirection+0x9e>
     d5c:	2e 81       	ldd	r18, Y+6	; 0x06
     d5e:	3f 81       	ldd	r19, Y+7	; 0x07
     d60:	22 30       	cpi	r18, 0x02	; 2
     d62:	31 05       	cpc	r19, r1
     d64:	2c f4       	brge	.+10     	; 0xd70 <MCAL_Dio_SetPinDirection+0x66>
     d66:	8e 81       	ldd	r24, Y+6	; 0x06
     d68:	9f 81       	ldd	r25, Y+7	; 0x07
     d6a:	00 97       	sbiw	r24, 0x00	; 0
     d6c:	61 f0       	breq	.+24     	; 0xd86 <MCAL_Dio_SetPinDirection+0x7c>
     d6e:	4e c0       	rjmp	.+156    	; 0xe0c <MCAL_Dio_SetPinDirection+0x102>
     d70:	2e 81       	ldd	r18, Y+6	; 0x06
     d72:	3f 81       	ldd	r19, Y+7	; 0x07
     d74:	22 30       	cpi	r18, 0x02	; 2
     d76:	31 05       	cpc	r19, r1
     d78:	41 f1       	breq	.+80     	; 0xdca <MCAL_Dio_SetPinDirection+0xc0>
     d7a:	8e 81       	ldd	r24, Y+6	; 0x06
     d7c:	9f 81       	ldd	r25, Y+7	; 0x07
     d7e:	83 30       	cpi	r24, 0x03	; 3
     d80:	91 05       	cpc	r25, r1
     d82:	a1 f1       	breq	.+104    	; 0xdec <MCAL_Dio_SetPinDirection+0xe2>
     d84:	43 c0       	rjmp	.+134    	; 0xe0c <MCAL_Dio_SetPinDirection+0x102>
		{
		case PORTA_ID:
			Mask1 = ((DIO_DDRA) & (~(Dio_ConfigPin->pin_num)));
     d86:	ea e3       	ldi	r30, 0x3A	; 58
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	98 2f       	mov	r25, r24
     d8e:	ec 81       	ldd	r30, Y+4	; 0x04
     d90:	fd 81       	ldd	r31, Y+5	; 0x05
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	80 95       	com	r24
     d96:	89 23       	and	r24, r25
     d98:	8a 83       	std	Y+2, r24	; 0x02
			DIO_DDRA = Mask1 | Mask2;
     d9a:	ea e3       	ldi	r30, 0x3A	; 58
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	9a 81       	ldd	r25, Y+2	; 0x02
     da0:	89 81       	ldd	r24, Y+1	; 0x01
     da2:	89 2b       	or	r24, r25
     da4:	80 83       	st	Z, r24
     da6:	32 c0       	rjmp	.+100    	; 0xe0c <MCAL_Dio_SetPinDirection+0x102>
			break;
		case PORTB_ID:
			Mask1 = ((DIO_DDRB) & (~(Dio_ConfigPin->pin_num)));
     da8:	e7 e3       	ldi	r30, 0x37	; 55
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	98 2f       	mov	r25, r24
     db0:	ec 81       	ldd	r30, Y+4	; 0x04
     db2:	fd 81       	ldd	r31, Y+5	; 0x05
     db4:	81 81       	ldd	r24, Z+1	; 0x01
     db6:	80 95       	com	r24
     db8:	89 23       	and	r24, r25
     dba:	8a 83       	std	Y+2, r24	; 0x02
			DIO_DDRB = Mask1 | Mask2;
     dbc:	e7 e3       	ldi	r30, 0x37	; 55
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	9a 81       	ldd	r25, Y+2	; 0x02
     dc2:	89 81       	ldd	r24, Y+1	; 0x01
     dc4:	89 2b       	or	r24, r25
     dc6:	80 83       	st	Z, r24
     dc8:	21 c0       	rjmp	.+66     	; 0xe0c <MCAL_Dio_SetPinDirection+0x102>
			break;
		case PORTC_ID:
			Mask1 = ((DIO_DDRC) & (~(Dio_ConfigPin->pin_num)));
     dca:	e4 e3       	ldi	r30, 0x34	; 52
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	98 2f       	mov	r25, r24
     dd2:	ec 81       	ldd	r30, Y+4	; 0x04
     dd4:	fd 81       	ldd	r31, Y+5	; 0x05
     dd6:	81 81       	ldd	r24, Z+1	; 0x01
     dd8:	80 95       	com	r24
     dda:	89 23       	and	r24, r25
     ddc:	8a 83       	std	Y+2, r24	; 0x02
			DIO_DDRC = Mask1 | Mask2;
     dde:	e4 e3       	ldi	r30, 0x34	; 52
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	9a 81       	ldd	r25, Y+2	; 0x02
     de4:	89 81       	ldd	r24, Y+1	; 0x01
     de6:	89 2b       	or	r24, r25
     de8:	80 83       	st	Z, r24
     dea:	10 c0       	rjmp	.+32     	; 0xe0c <MCAL_Dio_SetPinDirection+0x102>
			break;
		case PORTD_ID:
			Mask1 = ((DIO_DDRD) & (~(Dio_ConfigPin->pin_num)));
     dec:	e1 e3       	ldi	r30, 0x31	; 49
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	98 2f       	mov	r25, r24
     df4:	ec 81       	ldd	r30, Y+4	; 0x04
     df6:	fd 81       	ldd	r31, Y+5	; 0x05
     df8:	81 81       	ldd	r24, Z+1	; 0x01
     dfa:	80 95       	com	r24
     dfc:	89 23       	and	r24, r25
     dfe:	8a 83       	std	Y+2, r24	; 0x02
			DIO_DDRD = Mask1 | Mask2;
     e00:	e1 e3       	ldi	r30, 0x31	; 49
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	9a 81       	ldd	r25, Y+2	; 0x02
     e06:	89 81       	ldd	r24, Y+1	; 0x01
     e08:	89 2b       	or	r24, r25
     e0a:	80 83       	st	Z, r24
			break;

		}
	}

	return error;
     e0c:	8b 81       	ldd	r24, Y+3	; 0x03

}
     e0e:	27 96       	adiw	r28, 0x07	; 7
     e10:	0f b6       	in	r0, 0x3f	; 63
     e12:	f8 94       	cli
     e14:	de bf       	out	0x3e, r29	; 62
     e16:	0f be       	out	0x3f, r0	; 63
     e18:	cd bf       	out	0x3d, r28	; 61
     e1a:	cf 91       	pop	r28
     e1c:	df 91       	pop	r29
     e1e:	08 95       	ret

00000e20 <MCAL_Dio_ReadPort>:


Std_type MCAL_Dio_ReadPort(S_Dio *Dio_ReadPort,u8PortValue *Port_Value)
{
     e20:	df 93       	push	r29
     e22:	cf 93       	push	r28
     e24:	cd b7       	in	r28, 0x3d	; 61
     e26:	de b7       	in	r29, 0x3e	; 62
     e28:	27 97       	sbiw	r28, 0x07	; 7
     e2a:	0f b6       	in	r0, 0x3f	; 63
     e2c:	f8 94       	cli
     e2e:	de bf       	out	0x3e, r29	; 62
     e30:	0f be       	out	0x3f, r0	; 63
     e32:	cd bf       	out	0x3d, r28	; 61
     e34:	9b 83       	std	Y+3, r25	; 0x03
     e36:	8a 83       	std	Y+2, r24	; 0x02
     e38:	7d 83       	std	Y+5, r23	; 0x05
     e3a:	6c 83       	std	Y+4, r22	; 0x04
	Std_type error = OK;
     e3c:	19 82       	std	Y+1, r1	; 0x01
	if(DIO_STATUS_ERROR == NOT_OK)
	{
		error = NOT_OK;
	}
	else if(Dio_ReadPort->port_num >= DIO_CONFIGURED_PORTS)
     e3e:	ea 81       	ldd	r30, Y+2	; 0x02
     e40:	fb 81       	ldd	r31, Y+3	; 0x03
     e42:	80 81       	ld	r24, Z
     e44:	84 30       	cpi	r24, 0x04	; 4
     e46:	18 f0       	brcs	.+6      	; 0xe4e <MCAL_Dio_ReadPort+0x2e>
	{

		error = NOT_OK;
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	89 83       	std	Y+1, r24	; 0x01
     e4c:	3c c0       	rjmp	.+120    	; 0xec6 <MCAL_Dio_ReadPort+0xa6>
	}
	else
	{
		switch (Dio_ReadPort->port_num )
     e4e:	ea 81       	ldd	r30, Y+2	; 0x02
     e50:	fb 81       	ldd	r31, Y+3	; 0x03
     e52:	80 81       	ld	r24, Z
     e54:	28 2f       	mov	r18, r24
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	3f 83       	std	Y+7, r19	; 0x07
     e5a:	2e 83       	std	Y+6, r18	; 0x06
     e5c:	8e 81       	ldd	r24, Y+6	; 0x06
     e5e:	9f 81       	ldd	r25, Y+7	; 0x07
     e60:	81 30       	cpi	r24, 0x01	; 1
     e62:	91 05       	cpc	r25, r1
     e64:	e1 f0       	breq	.+56     	; 0xe9e <MCAL_Dio_ReadPort+0x7e>
     e66:	2e 81       	ldd	r18, Y+6	; 0x06
     e68:	3f 81       	ldd	r19, Y+7	; 0x07
     e6a:	22 30       	cpi	r18, 0x02	; 2
     e6c:	31 05       	cpc	r19, r1
     e6e:	2c f4       	brge	.+10     	; 0xe7a <MCAL_Dio_ReadPort+0x5a>
     e70:	8e 81       	ldd	r24, Y+6	; 0x06
     e72:	9f 81       	ldd	r25, Y+7	; 0x07
     e74:	00 97       	sbiw	r24, 0x00	; 0
     e76:	61 f0       	breq	.+24     	; 0xe90 <MCAL_Dio_ReadPort+0x70>
     e78:	26 c0       	rjmp	.+76     	; 0xec6 <MCAL_Dio_ReadPort+0xa6>
     e7a:	2e 81       	ldd	r18, Y+6	; 0x06
     e7c:	3f 81       	ldd	r19, Y+7	; 0x07
     e7e:	22 30       	cpi	r18, 0x02	; 2
     e80:	31 05       	cpc	r19, r1
     e82:	a1 f0       	breq	.+40     	; 0xeac <MCAL_Dio_ReadPort+0x8c>
     e84:	8e 81       	ldd	r24, Y+6	; 0x06
     e86:	9f 81       	ldd	r25, Y+7	; 0x07
     e88:	83 30       	cpi	r24, 0x03	; 3
     e8a:	91 05       	cpc	r25, r1
     e8c:	b1 f0       	breq	.+44     	; 0xeba <MCAL_Dio_ReadPort+0x9a>
     e8e:	1b c0       	rjmp	.+54     	; 0xec6 <MCAL_Dio_ReadPort+0xa6>
		{
		case PORTA_ID:
			*Port_Value = DIO_PINA;
     e90:	e9 e3       	ldi	r30, 0x39	; 57
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	ec 81       	ldd	r30, Y+4	; 0x04
     e98:	fd 81       	ldd	r31, Y+5	; 0x05
     e9a:	80 83       	st	Z, r24
     e9c:	14 c0       	rjmp	.+40     	; 0xec6 <MCAL_Dio_ReadPort+0xa6>
			break;
		case PORTB_ID:
			*Port_Value = DIO_PINB;
     e9e:	e6 e3       	ldi	r30, 0x36	; 54
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	ec 81       	ldd	r30, Y+4	; 0x04
     ea6:	fd 81       	ldd	r31, Y+5	; 0x05
     ea8:	80 83       	st	Z, r24
     eaa:	0d c0       	rjmp	.+26     	; 0xec6 <MCAL_Dio_ReadPort+0xa6>
			break;
		case PORTC_ID:
			*Port_Value = DIO_PINC;
     eac:	e3 e3       	ldi	r30, 0x33	; 51
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	ec 81       	ldd	r30, Y+4	; 0x04
     eb4:	fd 81       	ldd	r31, Y+5	; 0x05
     eb6:	80 83       	st	Z, r24
     eb8:	06 c0       	rjmp	.+12     	; 0xec6 <MCAL_Dio_ReadPort+0xa6>
			break;
		case PORTD_ID:
			*Port_Value = DIO_PIND;
     eba:	e0 e3       	ldi	r30, 0x30	; 48
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	ec 81       	ldd	r30, Y+4	; 0x04
     ec2:	fd 81       	ldd	r31, Y+5	; 0x05
     ec4:	80 83       	st	Z, r24
			break;

		}
	}
	return error;
     ec6:	89 81       	ldd	r24, Y+1	; 0x01
}
     ec8:	27 96       	adiw	r28, 0x07	; 7
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	f8 94       	cli
     ece:	de bf       	out	0x3e, r29	; 62
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	cd bf       	out	0x3d, r28	; 61
     ed4:	cf 91       	pop	r28
     ed6:	df 91       	pop	r29
     ed8:	08 95       	ret

00000eda <MCAL_Dio_ReadPin>:

Std_type MCAL_Dio_ReadPin(S_Dio *Dio_ReadPin,u8PinValue *Pin_Value)
{
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	cd b7       	in	r28, 0x3d	; 61
     ee0:	de b7       	in	r29, 0x3e	; 62
     ee2:	27 97       	sbiw	r28, 0x07	; 7
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	f8 94       	cli
     ee8:	de bf       	out	0x3e, r29	; 62
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	cd bf       	out	0x3d, r28	; 61
     eee:	9b 83       	std	Y+3, r25	; 0x03
     ef0:	8a 83       	std	Y+2, r24	; 0x02
     ef2:	7d 83       	std	Y+5, r23	; 0x05
     ef4:	6c 83       	std	Y+4, r22	; 0x04
	Std_type error = OK;
     ef6:	19 82       	std	Y+1, r1	; 0x01

	if(DIO_STATUS_ERROR == NOT_OK)
	{
		error = NOT_OK;
	}
	else if(Dio_ReadPin->port_num >= DIO_CONFIGURED_PORTS)
     ef8:	ea 81       	ldd	r30, Y+2	; 0x02
     efa:	fb 81       	ldd	r31, Y+3	; 0x03
     efc:	80 81       	ld	r24, Z
     efe:	84 30       	cpi	r24, 0x04	; 4
     f00:	18 f0       	brcs	.+6      	; 0xf08 <MCAL_Dio_ReadPin+0x2e>
	{

		error = NOT_OK;
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	89 83       	std	Y+1, r24	; 0x01
     f06:	7a c0       	rjmp	.+244    	; 0xffc <MCAL_Dio_ReadPin+0x122>

	}
	else
	{

		switch(Dio_ReadPin->port_num)
     f08:	ea 81       	ldd	r30, Y+2	; 0x02
     f0a:	fb 81       	ldd	r31, Y+3	; 0x03
     f0c:	80 81       	ld	r24, Z
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	3f 83       	std	Y+7, r19	; 0x07
     f14:	2e 83       	std	Y+6, r18	; 0x06
     f16:	4e 81       	ldd	r20, Y+6	; 0x06
     f18:	5f 81       	ldd	r21, Y+7	; 0x07
     f1a:	41 30       	cpi	r20, 0x01	; 1
     f1c:	51 05       	cpc	r21, r1
     f1e:	69 f1       	breq	.+90     	; 0xf7a <MCAL_Dio_ReadPin+0xa0>
     f20:	8e 81       	ldd	r24, Y+6	; 0x06
     f22:	9f 81       	ldd	r25, Y+7	; 0x07
     f24:	82 30       	cpi	r24, 0x02	; 2
     f26:	91 05       	cpc	r25, r1
     f28:	34 f4       	brge	.+12     	; 0xf36 <MCAL_Dio_ReadPin+0x5c>
     f2a:	2e 81       	ldd	r18, Y+6	; 0x06
     f2c:	3f 81       	ldd	r19, Y+7	; 0x07
     f2e:	21 15       	cp	r18, r1
     f30:	31 05       	cpc	r19, r1
     f32:	69 f0       	breq	.+26     	; 0xf4e <MCAL_Dio_ReadPin+0x74>
     f34:	63 c0       	rjmp	.+198    	; 0xffc <MCAL_Dio_ReadPin+0x122>
     f36:	4e 81       	ldd	r20, Y+6	; 0x06
     f38:	5f 81       	ldd	r21, Y+7	; 0x07
     f3a:	42 30       	cpi	r20, 0x02	; 2
     f3c:	51 05       	cpc	r21, r1
     f3e:	99 f1       	breq	.+102    	; 0xfa6 <MCAL_Dio_ReadPin+0xcc>
     f40:	8e 81       	ldd	r24, Y+6	; 0x06
     f42:	9f 81       	ldd	r25, Y+7	; 0x07
     f44:	83 30       	cpi	r24, 0x03	; 3
     f46:	91 05       	cpc	r25, r1
     f48:	09 f4       	brne	.+2      	; 0xf4c <MCAL_Dio_ReadPin+0x72>
     f4a:	43 c0       	rjmp	.+134    	; 0xfd2 <MCAL_Dio_ReadPin+0xf8>
     f4c:	57 c0       	rjmp	.+174    	; 0xffc <MCAL_Dio_ReadPin+0x122>
		{
		case PORTA_ID:
			*Pin_Value = GET_BIT(DIO_PINA,Dio_ReadPin->pin_num);
     f4e:	e9 e3       	ldi	r30, 0x39	; 57
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	ea 81       	ldd	r30, Y+2	; 0x02
     f5a:	fb 81       	ldd	r31, Y+3	; 0x03
     f5c:	81 81       	ldd	r24, Z+1	; 0x01
     f5e:	88 2f       	mov	r24, r24
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	a9 01       	movw	r20, r18
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <MCAL_Dio_ReadPin+0x90>
     f66:	55 95       	asr	r21
     f68:	47 95       	ror	r20
     f6a:	8a 95       	dec	r24
     f6c:	e2 f7       	brpl	.-8      	; 0xf66 <MCAL_Dio_ReadPin+0x8c>
     f6e:	ca 01       	movw	r24, r20
     f70:	81 70       	andi	r24, 0x01	; 1
     f72:	ec 81       	ldd	r30, Y+4	; 0x04
     f74:	fd 81       	ldd	r31, Y+5	; 0x05
     f76:	80 83       	st	Z, r24
     f78:	41 c0       	rjmp	.+130    	; 0xffc <MCAL_Dio_ReadPin+0x122>
			break;
		case PORTB_ID:
			*Pin_Value = GET_BIT(DIO_PINB,Dio_ReadPin->pin_num);
     f7a:	e6 e3       	ldi	r30, 0x36	; 54
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	28 2f       	mov	r18, r24
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	ea 81       	ldd	r30, Y+2	; 0x02
     f86:	fb 81       	ldd	r31, Y+3	; 0x03
     f88:	81 81       	ldd	r24, Z+1	; 0x01
     f8a:	88 2f       	mov	r24, r24
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	a9 01       	movw	r20, r18
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <MCAL_Dio_ReadPin+0xbc>
     f92:	55 95       	asr	r21
     f94:	47 95       	ror	r20
     f96:	8a 95       	dec	r24
     f98:	e2 f7       	brpl	.-8      	; 0xf92 <MCAL_Dio_ReadPin+0xb8>
     f9a:	ca 01       	movw	r24, r20
     f9c:	81 70       	andi	r24, 0x01	; 1
     f9e:	ec 81       	ldd	r30, Y+4	; 0x04
     fa0:	fd 81       	ldd	r31, Y+5	; 0x05
     fa2:	80 83       	st	Z, r24
     fa4:	2b c0       	rjmp	.+86     	; 0xffc <MCAL_Dio_ReadPin+0x122>
			break;
		case PORTC_ID:
			*Pin_Value = GET_BIT(DIO_PINC,Dio_ReadPin->pin_num);
     fa6:	e3 e3       	ldi	r30, 0x33	; 51
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	ea 81       	ldd	r30, Y+2	; 0x02
     fb2:	fb 81       	ldd	r31, Y+3	; 0x03
     fb4:	81 81       	ldd	r24, Z+1	; 0x01
     fb6:	88 2f       	mov	r24, r24
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	a9 01       	movw	r20, r18
     fbc:	02 c0       	rjmp	.+4      	; 0xfc2 <MCAL_Dio_ReadPin+0xe8>
     fbe:	55 95       	asr	r21
     fc0:	47 95       	ror	r20
     fc2:	8a 95       	dec	r24
     fc4:	e2 f7       	brpl	.-8      	; 0xfbe <MCAL_Dio_ReadPin+0xe4>
     fc6:	ca 01       	movw	r24, r20
     fc8:	81 70       	andi	r24, 0x01	; 1
     fca:	ec 81       	ldd	r30, Y+4	; 0x04
     fcc:	fd 81       	ldd	r31, Y+5	; 0x05
     fce:	80 83       	st	Z, r24
     fd0:	15 c0       	rjmp	.+42     	; 0xffc <MCAL_Dio_ReadPin+0x122>
			break;
		case PORTD_ID:
			*Pin_Value = GET_BIT(DIO_PIND,Dio_ReadPin->pin_num);
     fd2:	e0 e3       	ldi	r30, 0x30	; 48
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	28 2f       	mov	r18, r24
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	ea 81       	ldd	r30, Y+2	; 0x02
     fde:	fb 81       	ldd	r31, Y+3	; 0x03
     fe0:	81 81       	ldd	r24, Z+1	; 0x01
     fe2:	88 2f       	mov	r24, r24
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	a9 01       	movw	r20, r18
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <MCAL_Dio_ReadPin+0x114>
     fea:	55 95       	asr	r21
     fec:	47 95       	ror	r20
     fee:	8a 95       	dec	r24
     ff0:	e2 f7       	brpl	.-8      	; 0xfea <MCAL_Dio_ReadPin+0x110>
     ff2:	ca 01       	movw	r24, r20
     ff4:	81 70       	andi	r24, 0x01	; 1
     ff6:	ec 81       	ldd	r30, Y+4	; 0x04
     ff8:	fd 81       	ldd	r31, Y+5	; 0x05
     ffa:	80 83       	st	Z, r24
			break;
		}
	}
	return error;
     ffc:	89 81       	ldd	r24, Y+1	; 0x01
}
     ffe:	27 96       	adiw	r28, 0x07	; 7
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	f8 94       	cli
    1004:	de bf       	out	0x3e, r29	; 62
    1006:	0f be       	out	0x3f, r0	; 63
    1008:	cd bf       	out	0x3d, r28	; 61
    100a:	cf 91       	pop	r28
    100c:	df 91       	pop	r29
    100e:	08 95       	ret

00001010 <MCAL_Dio_WritePort>:


Std_type MCAL_Dio_WritePort(S_Dio *Dio_WritePort,u8PortValue Port_Value)
{
    1010:	df 93       	push	r29
    1012:	cf 93       	push	r28
    1014:	00 d0       	rcall	.+0      	; 0x1016 <MCAL_Dio_WritePort+0x6>
    1016:	00 d0       	rcall	.+0      	; 0x1018 <MCAL_Dio_WritePort+0x8>
    1018:	00 d0       	rcall	.+0      	; 0x101a <MCAL_Dio_WritePort+0xa>
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
    101e:	9b 83       	std	Y+3, r25	; 0x03
    1020:	8a 83       	std	Y+2, r24	; 0x02
    1022:	6c 83       	std	Y+4, r22	; 0x04
	Std_type error = OK;
    1024:	19 82       	std	Y+1, r1	; 0x01

	if(DIO_STATUS_ERROR == NOT_OK)
	{
		error = NOT_OK;
	}
	else if(Dio_WritePort->port_num >= DIO_CONFIGURED_PORTS)
    1026:	ea 81       	ldd	r30, Y+2	; 0x02
    1028:	fb 81       	ldd	r31, Y+3	; 0x03
    102a:	80 81       	ld	r24, Z
    102c:	84 30       	cpi	r24, 0x04	; 4
    102e:	18 f0       	brcs	.+6      	; 0x1036 <MCAL_Dio_WritePort+0x26>
	{

		error = NOT_OK;
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	89 83       	std	Y+1, r24	; 0x01
    1034:	34 c0       	rjmp	.+104    	; 0x109e <MCAL_Dio_WritePort+0x8e>
	}
	else
	{
		switch (Dio_WritePort->port_num)
    1036:	ea 81       	ldd	r30, Y+2	; 0x02
    1038:	fb 81       	ldd	r31, Y+3	; 0x03
    103a:	80 81       	ld	r24, Z
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	3e 83       	std	Y+6, r19	; 0x06
    1042:	2d 83       	std	Y+5, r18	; 0x05
    1044:	8d 81       	ldd	r24, Y+5	; 0x05
    1046:	9e 81       	ldd	r25, Y+6	; 0x06
    1048:	81 30       	cpi	r24, 0x01	; 1
    104a:	91 05       	cpc	r25, r1
    104c:	d1 f0       	breq	.+52     	; 0x1082 <MCAL_Dio_WritePort+0x72>
    104e:	2d 81       	ldd	r18, Y+5	; 0x05
    1050:	3e 81       	ldd	r19, Y+6	; 0x06
    1052:	22 30       	cpi	r18, 0x02	; 2
    1054:	31 05       	cpc	r19, r1
    1056:	2c f4       	brge	.+10     	; 0x1062 <MCAL_Dio_WritePort+0x52>
    1058:	8d 81       	ldd	r24, Y+5	; 0x05
    105a:	9e 81       	ldd	r25, Y+6	; 0x06
    105c:	00 97       	sbiw	r24, 0x00	; 0
    105e:	61 f0       	breq	.+24     	; 0x1078 <MCAL_Dio_WritePort+0x68>
    1060:	1e c0       	rjmp	.+60     	; 0x109e <MCAL_Dio_WritePort+0x8e>
    1062:	2d 81       	ldd	r18, Y+5	; 0x05
    1064:	3e 81       	ldd	r19, Y+6	; 0x06
    1066:	22 30       	cpi	r18, 0x02	; 2
    1068:	31 05       	cpc	r19, r1
    106a:	81 f0       	breq	.+32     	; 0x108c <MCAL_Dio_WritePort+0x7c>
    106c:	8d 81       	ldd	r24, Y+5	; 0x05
    106e:	9e 81       	ldd	r25, Y+6	; 0x06
    1070:	83 30       	cpi	r24, 0x03	; 3
    1072:	91 05       	cpc	r25, r1
    1074:	81 f0       	breq	.+32     	; 0x1096 <MCAL_Dio_WritePort+0x86>
    1076:	13 c0       	rjmp	.+38     	; 0x109e <MCAL_Dio_WritePort+0x8e>
		{
		case PORTA_ID:
			DIO_PORTA = Port_Value;
    1078:	eb e3       	ldi	r30, 0x3B	; 59
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	8c 81       	ldd	r24, Y+4	; 0x04
    107e:	80 83       	st	Z, r24
    1080:	0e c0       	rjmp	.+28     	; 0x109e <MCAL_Dio_WritePort+0x8e>
			break;
		case PORTB_ID:
			DIO_PORTB = Port_Value;
    1082:	e8 e3       	ldi	r30, 0x38	; 56
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	8c 81       	ldd	r24, Y+4	; 0x04
    1088:	80 83       	st	Z, r24
    108a:	09 c0       	rjmp	.+18     	; 0x109e <MCAL_Dio_WritePort+0x8e>
			break;
		case PORTC_ID:
			DIO_PORTC = Port_Value;
    108c:	e5 e3       	ldi	r30, 0x35	; 53
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	8c 81       	ldd	r24, Y+4	; 0x04
    1092:	80 83       	st	Z, r24
    1094:	04 c0       	rjmp	.+8      	; 0x109e <MCAL_Dio_WritePort+0x8e>
			break;
		case PORTD_ID:
			DIO_PORTD = Port_Value;
    1096:	e2 e3       	ldi	r30, 0x32	; 50
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	8c 81       	ldd	r24, Y+4	; 0x04
    109c:	80 83       	st	Z, r24
			break;
		}
	}
	return error;
    109e:	89 81       	ldd	r24, Y+1	; 0x01
}
    10a0:	26 96       	adiw	r28, 0x06	; 6
    10a2:	0f b6       	in	r0, 0x3f	; 63
    10a4:	f8 94       	cli
    10a6:	de bf       	out	0x3e, r29	; 62
    10a8:	0f be       	out	0x3f, r0	; 63
    10aa:	cd bf       	out	0x3d, r28	; 61
    10ac:	cf 91       	pop	r28
    10ae:	df 91       	pop	r29
    10b0:	08 95       	ret

000010b2 <MCAL_Dio_WritePin>:


Std_type MCAL_Dio_WritePin(S_Dio *Dio_WritePin,u8PinValue Pin_value)
{
    10b2:	df 93       	push	r29
    10b4:	cf 93       	push	r28
    10b6:	cd b7       	in	r28, 0x3d	; 61
    10b8:	de b7       	in	r29, 0x3e	; 62
    10ba:	28 97       	sbiw	r28, 0x08	; 8
    10bc:	0f b6       	in	r0, 0x3f	; 63
    10be:	f8 94       	cli
    10c0:	de bf       	out	0x3e, r29	; 62
    10c2:	0f be       	out	0x3f, r0	; 63
    10c4:	cd bf       	out	0x3d, r28	; 61
    10c6:	9d 83       	std	Y+5, r25	; 0x05
    10c8:	8c 83       	std	Y+4, r24	; 0x04
    10ca:	6e 83       	std	Y+6, r22	; 0x06
	Std_type error = OK;
    10cc:	1b 82       	std	Y+3, r1	; 0x03
	u8RegisterValue Mask1,Mask2;
	if(DIO_STATUS_ERROR == NOT_OK)
	{
		error = NOT_OK;
	}
	else if(Dio_WritePin->port_num >= DIO_CONFIGURED_PORTS)
    10ce:	ec 81       	ldd	r30, Y+4	; 0x04
    10d0:	fd 81       	ldd	r31, Y+5	; 0x05
    10d2:	80 81       	ld	r24, Z
    10d4:	84 30       	cpi	r24, 0x04	; 4
    10d6:	18 f0       	brcs	.+6      	; 0x10de <MCAL_Dio_WritePin+0x2c>
	{

		error = NOT_OK;
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	8b 83       	std	Y+3, r24	; 0x03
    10dc:	6a c0       	rjmp	.+212    	; 0x11b2 <MCAL_Dio_WritePin+0x100>
	}
	else
	{

		Mask2 = ((Dio_WritePin->pin_num) & (Pin_value));
    10de:	ec 81       	ldd	r30, Y+4	; 0x04
    10e0:	fd 81       	ldd	r31, Y+5	; 0x05
    10e2:	91 81       	ldd	r25, Z+1	; 0x01
    10e4:	8e 81       	ldd	r24, Y+6	; 0x06
    10e6:	89 23       	and	r24, r25
    10e8:	89 83       	std	Y+1, r24	; 0x01
		switch(Dio_WritePin->port_num)
    10ea:	ec 81       	ldd	r30, Y+4	; 0x04
    10ec:	fd 81       	ldd	r31, Y+5	; 0x05
    10ee:	80 81       	ld	r24, Z
    10f0:	28 2f       	mov	r18, r24
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	38 87       	std	Y+8, r19	; 0x08
    10f6:	2f 83       	std	Y+7, r18	; 0x07
    10f8:	8f 81       	ldd	r24, Y+7	; 0x07
    10fa:	98 85       	ldd	r25, Y+8	; 0x08
    10fc:	81 30       	cpi	r24, 0x01	; 1
    10fe:	91 05       	cpc	r25, r1
    1100:	31 f1       	breq	.+76     	; 0x114e <MCAL_Dio_WritePin+0x9c>
    1102:	2f 81       	ldd	r18, Y+7	; 0x07
    1104:	38 85       	ldd	r19, Y+8	; 0x08
    1106:	22 30       	cpi	r18, 0x02	; 2
    1108:	31 05       	cpc	r19, r1
    110a:	2c f4       	brge	.+10     	; 0x1116 <MCAL_Dio_WritePin+0x64>
    110c:	8f 81       	ldd	r24, Y+7	; 0x07
    110e:	98 85       	ldd	r25, Y+8	; 0x08
    1110:	00 97       	sbiw	r24, 0x00	; 0
    1112:	61 f0       	breq	.+24     	; 0x112c <MCAL_Dio_WritePin+0x7a>
    1114:	4e c0       	rjmp	.+156    	; 0x11b2 <MCAL_Dio_WritePin+0x100>
    1116:	2f 81       	ldd	r18, Y+7	; 0x07
    1118:	38 85       	ldd	r19, Y+8	; 0x08
    111a:	22 30       	cpi	r18, 0x02	; 2
    111c:	31 05       	cpc	r19, r1
    111e:	41 f1       	breq	.+80     	; 0x1170 <MCAL_Dio_WritePin+0xbe>
    1120:	8f 81       	ldd	r24, Y+7	; 0x07
    1122:	98 85       	ldd	r25, Y+8	; 0x08
    1124:	83 30       	cpi	r24, 0x03	; 3
    1126:	91 05       	cpc	r25, r1
    1128:	a1 f1       	breq	.+104    	; 0x1192 <MCAL_Dio_WritePin+0xe0>
    112a:	43 c0       	rjmp	.+134    	; 0x11b2 <MCAL_Dio_WritePin+0x100>
		{
		case PORTA_ID:
			Mask1 = ((DIO_PORTA) & (~(Dio_WritePin->pin_num)));
    112c:	eb e3       	ldi	r30, 0x3B	; 59
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	98 2f       	mov	r25, r24
    1134:	ec 81       	ldd	r30, Y+4	; 0x04
    1136:	fd 81       	ldd	r31, Y+5	; 0x05
    1138:	81 81       	ldd	r24, Z+1	; 0x01
    113a:	80 95       	com	r24
    113c:	89 23       	and	r24, r25
    113e:	8a 83       	std	Y+2, r24	; 0x02
			DIO_PORTA = Mask1 | Mask2;
    1140:	eb e3       	ldi	r30, 0x3B	; 59
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	9a 81       	ldd	r25, Y+2	; 0x02
    1146:	89 81       	ldd	r24, Y+1	; 0x01
    1148:	89 2b       	or	r24, r25
    114a:	80 83       	st	Z, r24
    114c:	32 c0       	rjmp	.+100    	; 0x11b2 <MCAL_Dio_WritePin+0x100>
			break;
		case PORTB_ID:
			Mask1 = ((DIO_PORTB) & (~(Dio_WritePin->pin_num)));
    114e:	e8 e3       	ldi	r30, 0x38	; 56
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	98 2f       	mov	r25, r24
    1156:	ec 81       	ldd	r30, Y+4	; 0x04
    1158:	fd 81       	ldd	r31, Y+5	; 0x05
    115a:	81 81       	ldd	r24, Z+1	; 0x01
    115c:	80 95       	com	r24
    115e:	89 23       	and	r24, r25
    1160:	8a 83       	std	Y+2, r24	; 0x02
			DIO_PORTB = Mask1 | Mask2;
    1162:	e8 e3       	ldi	r30, 0x38	; 56
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	9a 81       	ldd	r25, Y+2	; 0x02
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	89 2b       	or	r24, r25
    116c:	80 83       	st	Z, r24
    116e:	21 c0       	rjmp	.+66     	; 0x11b2 <MCAL_Dio_WritePin+0x100>
			break;
		case PORTC_ID:
			Mask1 = ((DIO_PORTC) & (~(Dio_WritePin->pin_num)));
    1170:	e5 e3       	ldi	r30, 0x35	; 53
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	98 2f       	mov	r25, r24
    1178:	ec 81       	ldd	r30, Y+4	; 0x04
    117a:	fd 81       	ldd	r31, Y+5	; 0x05
    117c:	81 81       	ldd	r24, Z+1	; 0x01
    117e:	80 95       	com	r24
    1180:	89 23       	and	r24, r25
    1182:	8a 83       	std	Y+2, r24	; 0x02
			DIO_PORTC = Mask1 | Mask2;
    1184:	e5 e3       	ldi	r30, 0x35	; 53
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	9a 81       	ldd	r25, Y+2	; 0x02
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	89 2b       	or	r24, r25
    118e:	80 83       	st	Z, r24
    1190:	10 c0       	rjmp	.+32     	; 0x11b2 <MCAL_Dio_WritePin+0x100>
			break;
		case PORTD_ID:
			Mask1 = ((DIO_PORTD) & (~(Dio_WritePin->pin_num)));
    1192:	e2 e3       	ldi	r30, 0x32	; 50
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	98 2f       	mov	r25, r24
    119a:	ec 81       	ldd	r30, Y+4	; 0x04
    119c:	fd 81       	ldd	r31, Y+5	; 0x05
    119e:	81 81       	ldd	r24, Z+1	; 0x01
    11a0:	80 95       	com	r24
    11a2:	89 23       	and	r24, r25
    11a4:	8a 83       	std	Y+2, r24	; 0x02
			DIO_PORTD = Mask1 | Mask2;
    11a6:	e2 e3       	ldi	r30, 0x32	; 50
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	9a 81       	ldd	r25, Y+2	; 0x02
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	89 2b       	or	r24, r25
    11b0:	80 83       	st	Z, r24
			break;

		}
	}
	return error;
    11b2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    11b4:	28 96       	adiw	r28, 0x08	; 8
    11b6:	0f b6       	in	r0, 0x3f	; 63
    11b8:	f8 94       	cli
    11ba:	de bf       	out	0x3e, r29	; 62
    11bc:	0f be       	out	0x3f, r0	; 63
    11be:	cd bf       	out	0x3d, r28	; 61
    11c0:	cf 91       	pop	r28
    11c2:	df 91       	pop	r29
    11c4:	08 95       	ret

000011c6 <MCAL_Dio_WriteSinglePin>:

Std_type MCAL_Dio_WriteSinglePin(S_Dio *Dio_WritePin,E_DioPin Pin_Num,u8PinValue Pin_value)
{
    11c6:	df 93       	push	r29
    11c8:	cf 93       	push	r28
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
    11ce:	2a 97       	sbiw	r28, 0x0a	; 10
    11d0:	0f b6       	in	r0, 0x3f	; 63
    11d2:	f8 94       	cli
    11d4:	de bf       	out	0x3e, r29	; 62
    11d6:	0f be       	out	0x3f, r0	; 63
    11d8:	cd bf       	out	0x3d, r28	; 61
    11da:	9e 83       	std	Y+6, r25	; 0x06
    11dc:	8d 83       	std	Y+5, r24	; 0x05
    11de:	6f 83       	std	Y+7, r22	; 0x07
    11e0:	48 87       	std	Y+8, r20	; 0x08
		Std_type error = OK;
    11e2:	1c 82       	std	Y+4, r1	; 0x04
		u8PinNumber bitNumber;
		if(DIO_STATUS_ERROR == NOT_OK)
		{
			error = NOT_OK;
		}
		else if(Dio_WritePin->port_num >= DIO_CONFIGURED_PORTS)
    11e4:	ed 81       	ldd	r30, Y+5	; 0x05
    11e6:	fe 81       	ldd	r31, Y+6	; 0x06
    11e8:	80 81       	ld	r24, Z
    11ea:	84 30       	cpi	r24, 0x04	; 4
    11ec:	18 f0       	brcs	.+6      	; 0x11f4 <MCAL_Dio_WriteSinglePin+0x2e>
		{

			error = NOT_OK;
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	8c 83       	std	Y+4, r24	; 0x04
    11f2:	f0 c0       	rjmp	.+480    	; 0x13d4 <MCAL_Dio_WriteSinglePin+0x20e>
		}
		else
		{
			for (int i = 0; i < DIO_CONFIGURED_PINS; i++) {
    11f4:	1a 82       	std	Y+2, r1	; 0x02
    11f6:	19 82       	std	Y+1, r1	; 0x01
    11f8:	15 c0       	rjmp	.+42     	; 0x1224 <MCAL_Dio_WriteSinglePin+0x5e>
						if (Pin_Num & (1 << i)) {
    11fa:	8f 81       	ldd	r24, Y+7	; 0x07
    11fc:	88 2f       	mov	r24, r24
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	09 80       	ldd	r0, Y+1	; 0x01
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <MCAL_Dio_WriteSinglePin+0x42>
    1204:	95 95       	asr	r25
    1206:	87 95       	ror	r24
    1208:	0a 94       	dec	r0
    120a:	e2 f7       	brpl	.-8      	; 0x1204 <MCAL_Dio_WriteSinglePin+0x3e>
    120c:	81 70       	andi	r24, 0x01	; 1
    120e:	90 70       	andi	r25, 0x00	; 0
    1210:	88 23       	and	r24, r24
    1212:	19 f0       	breq	.+6      	; 0x121a <MCAL_Dio_WriteSinglePin+0x54>
							bitNumber = i;
    1214:	89 81       	ldd	r24, Y+1	; 0x01
    1216:	8b 83       	std	Y+3, r24	; 0x03
    1218:	0a c0       	rjmp	.+20     	; 0x122e <MCAL_Dio_WriteSinglePin+0x68>

			error = NOT_OK;
		}
		else
		{
			for (int i = 0; i < DIO_CONFIGURED_PINS; i++) {
    121a:	89 81       	ldd	r24, Y+1	; 0x01
    121c:	9a 81       	ldd	r25, Y+2	; 0x02
    121e:	01 96       	adiw	r24, 0x01	; 1
    1220:	9a 83       	std	Y+2, r25	; 0x02
    1222:	89 83       	std	Y+1, r24	; 0x01
    1224:	89 81       	ldd	r24, Y+1	; 0x01
    1226:	9a 81       	ldd	r25, Y+2	; 0x02
    1228:	88 30       	cpi	r24, 0x08	; 8
    122a:	91 05       	cpc	r25, r1
    122c:	34 f3       	brlt	.-52     	; 0x11fa <MCAL_Dio_WriteSinglePin+0x34>
						if (Pin_Num & (1 << i)) {
							bitNumber = i;
							break;
						}
					}
			switch(Dio_WritePin->port_num)
    122e:	ed 81       	ldd	r30, Y+5	; 0x05
    1230:	fe 81       	ldd	r31, Y+6	; 0x06
    1232:	80 81       	ld	r24, Z
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	3a 87       	std	Y+10, r19	; 0x0a
    123a:	29 87       	std	Y+9, r18	; 0x09
    123c:	89 85       	ldd	r24, Y+9	; 0x09
    123e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1240:	81 30       	cpi	r24, 0x01	; 1
    1242:	91 05       	cpc	r25, r1
    1244:	09 f4       	brne	.+2      	; 0x1248 <MCAL_Dio_WriteSinglePin+0x82>
    1246:	43 c0       	rjmp	.+134    	; 0x12ce <MCAL_Dio_WriteSinglePin+0x108>
    1248:	29 85       	ldd	r18, Y+9	; 0x09
    124a:	3a 85       	ldd	r19, Y+10	; 0x0a
    124c:	22 30       	cpi	r18, 0x02	; 2
    124e:	31 05       	cpc	r19, r1
    1250:	2c f4       	brge	.+10     	; 0x125c <MCAL_Dio_WriteSinglePin+0x96>
    1252:	89 85       	ldd	r24, Y+9	; 0x09
    1254:	9a 85       	ldd	r25, Y+10	; 0x0a
    1256:	00 97       	sbiw	r24, 0x00	; 0
    1258:	71 f0       	breq	.+28     	; 0x1276 <MCAL_Dio_WriteSinglePin+0xb0>
    125a:	bc c0       	rjmp	.+376    	; 0x13d4 <MCAL_Dio_WriteSinglePin+0x20e>
    125c:	29 85       	ldd	r18, Y+9	; 0x09
    125e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1260:	22 30       	cpi	r18, 0x02	; 2
    1262:	31 05       	cpc	r19, r1
    1264:	09 f4       	brne	.+2      	; 0x1268 <MCAL_Dio_WriteSinglePin+0xa2>
    1266:	5f c0       	rjmp	.+190    	; 0x1326 <MCAL_Dio_WriteSinglePin+0x160>
    1268:	89 85       	ldd	r24, Y+9	; 0x09
    126a:	9a 85       	ldd	r25, Y+10	; 0x0a
    126c:	83 30       	cpi	r24, 0x03	; 3
    126e:	91 05       	cpc	r25, r1
    1270:	09 f4       	brne	.+2      	; 0x1274 <MCAL_Dio_WriteSinglePin+0xae>
    1272:	85 c0       	rjmp	.+266    	; 0x137e <MCAL_Dio_WriteSinglePin+0x1b8>
    1274:	af c0       	rjmp	.+350    	; 0x13d4 <MCAL_Dio_WriteSinglePin+0x20e>
					{
					case PORTA_ID:
						if(Pin_value == 1) // compare with one as i define LOGIC_HIGH 1 in DIO_std but ican't use it
    1276:	88 85       	ldd	r24, Y+8	; 0x08
    1278:	81 30       	cpi	r24, 0x01	; 1
    127a:	a1 f4       	brne	.+40     	; 0x12a4 <MCAL_Dio_WriteSinglePin+0xde>
						{
							SET_BIT(DIO_PORTA,bitNumber);
    127c:	ab e3       	ldi	r26, 0x3B	; 59
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	eb e3       	ldi	r30, 0x3B	; 59
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	48 2f       	mov	r20, r24
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	28 2f       	mov	r18, r24
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	02 2e       	mov	r0, r18
    1294:	02 c0       	rjmp	.+4      	; 0x129a <MCAL_Dio_WriteSinglePin+0xd4>
    1296:	88 0f       	add	r24, r24
    1298:	99 1f       	adc	r25, r25
    129a:	0a 94       	dec	r0
    129c:	e2 f7       	brpl	.-8      	; 0x1296 <MCAL_Dio_WriteSinglePin+0xd0>
    129e:	84 2b       	or	r24, r20
    12a0:	8c 93       	st	X, r24
    12a2:	98 c0       	rjmp	.+304    	; 0x13d4 <MCAL_Dio_WriteSinglePin+0x20e>
						}
						else
						{
							CLEAR_BIT(DIO_PORTA,bitNumber);
    12a4:	ab e3       	ldi	r26, 0x3B	; 59
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	eb e3       	ldi	r30, 0x3B	; 59
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	48 2f       	mov	r20, r24
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	28 2f       	mov	r18, r24
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	02 2e       	mov	r0, r18
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <MCAL_Dio_WriteSinglePin+0xfc>
    12be:	88 0f       	add	r24, r24
    12c0:	99 1f       	adc	r25, r25
    12c2:	0a 94       	dec	r0
    12c4:	e2 f7       	brpl	.-8      	; 0x12be <MCAL_Dio_WriteSinglePin+0xf8>
    12c6:	80 95       	com	r24
    12c8:	84 23       	and	r24, r20
    12ca:	8c 93       	st	X, r24
    12cc:	83 c0       	rjmp	.+262    	; 0x13d4 <MCAL_Dio_WriteSinglePin+0x20e>
						}
						break;
					case PORTB_ID:
						if(Pin_value == 1)
    12ce:	88 85       	ldd	r24, Y+8	; 0x08
    12d0:	81 30       	cpi	r24, 0x01	; 1
    12d2:	a1 f4       	brne	.+40     	; 0x12fc <MCAL_Dio_WriteSinglePin+0x136>
						{
							SET_BIT(DIO_PORTB,bitNumber);
    12d4:	a8 e3       	ldi	r26, 0x38	; 56
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	e8 e3       	ldi	r30, 0x38	; 56
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	48 2f       	mov	r20, r24
    12e0:	8b 81       	ldd	r24, Y+3	; 0x03
    12e2:	28 2f       	mov	r18, r24
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	02 2e       	mov	r0, r18
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <MCAL_Dio_WriteSinglePin+0x12c>
    12ee:	88 0f       	add	r24, r24
    12f0:	99 1f       	adc	r25, r25
    12f2:	0a 94       	dec	r0
    12f4:	e2 f7       	brpl	.-8      	; 0x12ee <MCAL_Dio_WriteSinglePin+0x128>
    12f6:	84 2b       	or	r24, r20
    12f8:	8c 93       	st	X, r24
    12fa:	6c c0       	rjmp	.+216    	; 0x13d4 <MCAL_Dio_WriteSinglePin+0x20e>
						}
						else
						{
							CLEAR_BIT(DIO_PORTB,bitNumber);
    12fc:	a8 e3       	ldi	r26, 0x38	; 56
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	e8 e3       	ldi	r30, 0x38	; 56
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	48 2f       	mov	r20, r24
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	28 2f       	mov	r18, r24
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	02 2e       	mov	r0, r18
    1314:	02 c0       	rjmp	.+4      	; 0x131a <MCAL_Dio_WriteSinglePin+0x154>
    1316:	88 0f       	add	r24, r24
    1318:	99 1f       	adc	r25, r25
    131a:	0a 94       	dec	r0
    131c:	e2 f7       	brpl	.-8      	; 0x1316 <MCAL_Dio_WriteSinglePin+0x150>
    131e:	80 95       	com	r24
    1320:	84 23       	and	r24, r20
    1322:	8c 93       	st	X, r24
    1324:	57 c0       	rjmp	.+174    	; 0x13d4 <MCAL_Dio_WriteSinglePin+0x20e>
						}
						break;
					case PORTC_ID:
						if(Pin_value == 1)
    1326:	88 85       	ldd	r24, Y+8	; 0x08
    1328:	81 30       	cpi	r24, 0x01	; 1
    132a:	a1 f4       	brne	.+40     	; 0x1354 <MCAL_Dio_WriteSinglePin+0x18e>
						{
							SET_BIT(DIO_PORTC,bitNumber);
    132c:	a5 e3       	ldi	r26, 0x35	; 53
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	e5 e3       	ldi	r30, 0x35	; 53
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	48 2f       	mov	r20, r24
    1338:	8b 81       	ldd	r24, Y+3	; 0x03
    133a:	28 2f       	mov	r18, r24
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	02 2e       	mov	r0, r18
    1344:	02 c0       	rjmp	.+4      	; 0x134a <MCAL_Dio_WriteSinglePin+0x184>
    1346:	88 0f       	add	r24, r24
    1348:	99 1f       	adc	r25, r25
    134a:	0a 94       	dec	r0
    134c:	e2 f7       	brpl	.-8      	; 0x1346 <MCAL_Dio_WriteSinglePin+0x180>
    134e:	84 2b       	or	r24, r20
    1350:	8c 93       	st	X, r24
    1352:	40 c0       	rjmp	.+128    	; 0x13d4 <MCAL_Dio_WriteSinglePin+0x20e>
						}
						else
						{
							CLEAR_BIT(DIO_PORTC,bitNumber);
    1354:	a5 e3       	ldi	r26, 0x35	; 53
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	e5 e3       	ldi	r30, 0x35	; 53
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	48 2f       	mov	r20, r24
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	28 2f       	mov	r18, r24
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	02 2e       	mov	r0, r18
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <MCAL_Dio_WriteSinglePin+0x1ac>
    136e:	88 0f       	add	r24, r24
    1370:	99 1f       	adc	r25, r25
    1372:	0a 94       	dec	r0
    1374:	e2 f7       	brpl	.-8      	; 0x136e <MCAL_Dio_WriteSinglePin+0x1a8>
    1376:	80 95       	com	r24
    1378:	84 23       	and	r24, r20
    137a:	8c 93       	st	X, r24
    137c:	2b c0       	rjmp	.+86     	; 0x13d4 <MCAL_Dio_WriteSinglePin+0x20e>
						}
						break;
					case PORTD_ID:
						if(Pin_value == 1)
    137e:	88 85       	ldd	r24, Y+8	; 0x08
    1380:	81 30       	cpi	r24, 0x01	; 1
    1382:	a1 f4       	brne	.+40     	; 0x13ac <MCAL_Dio_WriteSinglePin+0x1e6>
						{
							SET_BIT(DIO_PORTD,bitNumber);
    1384:	a2 e3       	ldi	r26, 0x32	; 50
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	e2 e3       	ldi	r30, 0x32	; 50
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	48 2f       	mov	r20, r24
    1390:	8b 81       	ldd	r24, Y+3	; 0x03
    1392:	28 2f       	mov	r18, r24
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	02 2e       	mov	r0, r18
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <MCAL_Dio_WriteSinglePin+0x1dc>
    139e:	88 0f       	add	r24, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	0a 94       	dec	r0
    13a4:	e2 f7       	brpl	.-8      	; 0x139e <MCAL_Dio_WriteSinglePin+0x1d8>
    13a6:	84 2b       	or	r24, r20
    13a8:	8c 93       	st	X, r24
    13aa:	14 c0       	rjmp	.+40     	; 0x13d4 <MCAL_Dio_WriteSinglePin+0x20e>
						}
						else
						{
							CLEAR_BIT(DIO_PORTD,bitNumber);
    13ac:	a2 e3       	ldi	r26, 0x32	; 50
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	e2 e3       	ldi	r30, 0x32	; 50
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	48 2f       	mov	r20, r24
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	28 2f       	mov	r18, r24
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	02 2e       	mov	r0, r18
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <MCAL_Dio_WriteSinglePin+0x204>
    13c6:	88 0f       	add	r24, r24
    13c8:	99 1f       	adc	r25, r25
    13ca:	0a 94       	dec	r0
    13cc:	e2 f7       	brpl	.-8      	; 0x13c6 <MCAL_Dio_WriteSinglePin+0x200>
    13ce:	80 95       	com	r24
    13d0:	84 23       	and	r24, r20
    13d2:	8c 93       	st	X, r24
						break;
		}

		}

		return error;
    13d4:	8c 81       	ldd	r24, Y+4	; 0x04

}
    13d6:	2a 96       	adiw	r28, 0x0a	; 10
    13d8:	0f b6       	in	r0, 0x3f	; 63
    13da:	f8 94       	cli
    13dc:	de bf       	out	0x3e, r29	; 62
    13de:	0f be       	out	0x3f, r0	; 63
    13e0:	cd bf       	out	0x3d, r28	; 61
    13e2:	cf 91       	pop	r28
    13e4:	df 91       	pop	r29
    13e6:	08 95       	ret

000013e8 <MCAL_Dio_ReadSinglePin>:

Std_type MCAL_Dio_ReadSinglePin(S_Dio *Dio_ReadPin,E_DioPin Pin_Num,u8PinValue *Pin_Value)
{
    13e8:	df 93       	push	r29
    13ea:	cf 93       	push	r28
    13ec:	cd b7       	in	r28, 0x3d	; 61
    13ee:	de b7       	in	r29, 0x3e	; 62
    13f0:	2b 97       	sbiw	r28, 0x0b	; 11
    13f2:	0f b6       	in	r0, 0x3f	; 63
    13f4:	f8 94       	cli
    13f6:	de bf       	out	0x3e, r29	; 62
    13f8:	0f be       	out	0x3f, r0	; 63
    13fa:	cd bf       	out	0x3d, r28	; 61
    13fc:	9e 83       	std	Y+6, r25	; 0x06
    13fe:	8d 83       	std	Y+5, r24	; 0x05
    1400:	6f 83       	std	Y+7, r22	; 0x07
    1402:	59 87       	std	Y+9, r21	; 0x09
    1404:	48 87       	std	Y+8, r20	; 0x08
	Std_type error = OK;
    1406:	1c 82       	std	Y+4, r1	; 0x04
	{
		error = NOT_OK;


	}
	else if(Dio_ReadPin->port_num >= DIO_CONFIGURED_PORTS)
    1408:	ed 81       	ldd	r30, Y+5	; 0x05
    140a:	fe 81       	ldd	r31, Y+6	; 0x06
    140c:	80 81       	ld	r24, Z
    140e:	84 30       	cpi	r24, 0x04	; 4
    1410:	18 f0       	brcs	.+6      	; 0x1418 <MCAL_Dio_ReadSinglePin+0x30>
	{

		error = NOT_OK;
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	8c 83       	std	Y+4, r24	; 0x04
    1416:	8f c0       	rjmp	.+286    	; 0x1536 <MCAL_Dio_ReadSinglePin+0x14e>

	}
	else
	{
		for (int i = 0; i < DIO_CONFIGURED_PINS; i++) {
    1418:	1a 82       	std	Y+2, r1	; 0x02
    141a:	19 82       	std	Y+1, r1	; 0x01
    141c:	15 c0       	rjmp	.+42     	; 0x1448 <MCAL_Dio_ReadSinglePin+0x60>
			if (Pin_Num & (1 << i)) {
    141e:	8f 81       	ldd	r24, Y+7	; 0x07
    1420:	88 2f       	mov	r24, r24
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	09 80       	ldd	r0, Y+1	; 0x01
    1426:	02 c0       	rjmp	.+4      	; 0x142c <MCAL_Dio_ReadSinglePin+0x44>
    1428:	95 95       	asr	r25
    142a:	87 95       	ror	r24
    142c:	0a 94       	dec	r0
    142e:	e2 f7       	brpl	.-8      	; 0x1428 <MCAL_Dio_ReadSinglePin+0x40>
    1430:	81 70       	andi	r24, 0x01	; 1
    1432:	90 70       	andi	r25, 0x00	; 0
    1434:	88 23       	and	r24, r24
    1436:	19 f0       	breq	.+6      	; 0x143e <MCAL_Dio_ReadSinglePin+0x56>
				bitNumber = i;
    1438:	89 81       	ldd	r24, Y+1	; 0x01
    143a:	8b 83       	std	Y+3, r24	; 0x03
    143c:	0a c0       	rjmp	.+20     	; 0x1452 <MCAL_Dio_ReadSinglePin+0x6a>
		error = NOT_OK;

	}
	else
	{
		for (int i = 0; i < DIO_CONFIGURED_PINS; i++) {
    143e:	89 81       	ldd	r24, Y+1	; 0x01
    1440:	9a 81       	ldd	r25, Y+2	; 0x02
    1442:	01 96       	adiw	r24, 0x01	; 1
    1444:	9a 83       	std	Y+2, r25	; 0x02
    1446:	89 83       	std	Y+1, r24	; 0x01
    1448:	89 81       	ldd	r24, Y+1	; 0x01
    144a:	9a 81       	ldd	r25, Y+2	; 0x02
    144c:	88 30       	cpi	r24, 0x08	; 8
    144e:	91 05       	cpc	r25, r1
    1450:	34 f3       	brlt	.-52     	; 0x141e <MCAL_Dio_ReadSinglePin+0x36>
			if (Pin_Num & (1 << i)) {
				bitNumber = i;
				break;
			}
		}
		switch(Dio_ReadPin->port_num)
    1452:	ed 81       	ldd	r30, Y+5	; 0x05
    1454:	fe 81       	ldd	r31, Y+6	; 0x06
    1456:	80 81       	ld	r24, Z
    1458:	28 2f       	mov	r18, r24
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	3b 87       	std	Y+11, r19	; 0x0b
    145e:	2a 87       	std	Y+10, r18	; 0x0a
    1460:	4a 85       	ldd	r20, Y+10	; 0x0a
    1462:	5b 85       	ldd	r21, Y+11	; 0x0b
    1464:	41 30       	cpi	r20, 0x01	; 1
    1466:	51 05       	cpc	r21, r1
    1468:	59 f1       	breq	.+86     	; 0x14c0 <MCAL_Dio_ReadSinglePin+0xd8>
    146a:	8a 85       	ldd	r24, Y+10	; 0x0a
    146c:	9b 85       	ldd	r25, Y+11	; 0x0b
    146e:	82 30       	cpi	r24, 0x02	; 2
    1470:	91 05       	cpc	r25, r1
    1472:	34 f4       	brge	.+12     	; 0x1480 <MCAL_Dio_ReadSinglePin+0x98>
    1474:	2a 85       	ldd	r18, Y+10	; 0x0a
    1476:	3b 85       	ldd	r19, Y+11	; 0x0b
    1478:	21 15       	cp	r18, r1
    147a:	31 05       	cpc	r19, r1
    147c:	69 f0       	breq	.+26     	; 0x1498 <MCAL_Dio_ReadSinglePin+0xb0>
    147e:	5b c0       	rjmp	.+182    	; 0x1536 <MCAL_Dio_ReadSinglePin+0x14e>
    1480:	4a 85       	ldd	r20, Y+10	; 0x0a
    1482:	5b 85       	ldd	r21, Y+11	; 0x0b
    1484:	42 30       	cpi	r20, 0x02	; 2
    1486:	51 05       	cpc	r21, r1
    1488:	79 f1       	breq	.+94     	; 0x14e8 <MCAL_Dio_ReadSinglePin+0x100>
    148a:	8a 85       	ldd	r24, Y+10	; 0x0a
    148c:	9b 85       	ldd	r25, Y+11	; 0x0b
    148e:	83 30       	cpi	r24, 0x03	; 3
    1490:	91 05       	cpc	r25, r1
    1492:	09 f4       	brne	.+2      	; 0x1496 <MCAL_Dio_ReadSinglePin+0xae>
    1494:	3d c0       	rjmp	.+122    	; 0x1510 <MCAL_Dio_ReadSinglePin+0x128>
    1496:	4f c0       	rjmp	.+158    	; 0x1536 <MCAL_Dio_ReadSinglePin+0x14e>
				{
				case PORTA_ID:
					*Pin_Value = GET_BIT(DIO_PINA,bitNumber);
    1498:	e9 e3       	ldi	r30, 0x39	; 57
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	8b 81       	ldd	r24, Y+3	; 0x03
    14a4:	88 2f       	mov	r24, r24
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	a9 01       	movw	r20, r18
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <MCAL_Dio_ReadSinglePin+0xc8>
    14ac:	55 95       	asr	r21
    14ae:	47 95       	ror	r20
    14b0:	8a 95       	dec	r24
    14b2:	e2 f7       	brpl	.-8      	; 0x14ac <MCAL_Dio_ReadSinglePin+0xc4>
    14b4:	ca 01       	movw	r24, r20
    14b6:	81 70       	andi	r24, 0x01	; 1
    14b8:	e8 85       	ldd	r30, Y+8	; 0x08
    14ba:	f9 85       	ldd	r31, Y+9	; 0x09
    14bc:	80 83       	st	Z, r24
    14be:	3b c0       	rjmp	.+118    	; 0x1536 <MCAL_Dio_ReadSinglePin+0x14e>
					break;
				case PORTB_ID:
					*Pin_Value = GET_BIT(DIO_PINB,bitNumber);
    14c0:	e6 e3       	ldi	r30, 0x36	; 54
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	28 2f       	mov	r18, r24
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	8b 81       	ldd	r24, Y+3	; 0x03
    14cc:	88 2f       	mov	r24, r24
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	a9 01       	movw	r20, r18
    14d2:	02 c0       	rjmp	.+4      	; 0x14d8 <MCAL_Dio_ReadSinglePin+0xf0>
    14d4:	55 95       	asr	r21
    14d6:	47 95       	ror	r20
    14d8:	8a 95       	dec	r24
    14da:	e2 f7       	brpl	.-8      	; 0x14d4 <MCAL_Dio_ReadSinglePin+0xec>
    14dc:	ca 01       	movw	r24, r20
    14de:	81 70       	andi	r24, 0x01	; 1
    14e0:	e8 85       	ldd	r30, Y+8	; 0x08
    14e2:	f9 85       	ldd	r31, Y+9	; 0x09
    14e4:	80 83       	st	Z, r24
    14e6:	27 c0       	rjmp	.+78     	; 0x1536 <MCAL_Dio_ReadSinglePin+0x14e>
					break;
				case PORTC_ID:
					*Pin_Value = GET_BIT(DIO_PINC,bitNumber);
    14e8:	e3 e3       	ldi	r30, 0x33	; 51
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	28 2f       	mov	r18, r24
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	8b 81       	ldd	r24, Y+3	; 0x03
    14f4:	88 2f       	mov	r24, r24
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	a9 01       	movw	r20, r18
    14fa:	02 c0       	rjmp	.+4      	; 0x1500 <MCAL_Dio_ReadSinglePin+0x118>
    14fc:	55 95       	asr	r21
    14fe:	47 95       	ror	r20
    1500:	8a 95       	dec	r24
    1502:	e2 f7       	brpl	.-8      	; 0x14fc <MCAL_Dio_ReadSinglePin+0x114>
    1504:	ca 01       	movw	r24, r20
    1506:	81 70       	andi	r24, 0x01	; 1
    1508:	e8 85       	ldd	r30, Y+8	; 0x08
    150a:	f9 85       	ldd	r31, Y+9	; 0x09
    150c:	80 83       	st	Z, r24
    150e:	13 c0       	rjmp	.+38     	; 0x1536 <MCAL_Dio_ReadSinglePin+0x14e>
					break;
				case PORTD_ID:
					*Pin_Value = GET_BIT(DIO_PIND,bitNumber);
    1510:	e0 e3       	ldi	r30, 0x30	; 48
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	28 2f       	mov	r18, r24
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	8b 81       	ldd	r24, Y+3	; 0x03
    151c:	88 2f       	mov	r24, r24
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	a9 01       	movw	r20, r18
    1522:	02 c0       	rjmp	.+4      	; 0x1528 <MCAL_Dio_ReadSinglePin+0x140>
    1524:	55 95       	asr	r21
    1526:	47 95       	ror	r20
    1528:	8a 95       	dec	r24
    152a:	e2 f7       	brpl	.-8      	; 0x1524 <MCAL_Dio_ReadSinglePin+0x13c>
    152c:	ca 01       	movw	r24, r20
    152e:	81 70       	andi	r24, 0x01	; 1
    1530:	e8 85       	ldd	r30, Y+8	; 0x08
    1532:	f9 85       	ldd	r31, Y+9	; 0x09
    1534:	80 83       	st	Z, r24
					break;
				}
	}
	return error;
    1536:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1538:	2b 96       	adiw	r28, 0x0b	; 11
    153a:	0f b6       	in	r0, 0x3f	; 63
    153c:	f8 94       	cli
    153e:	de bf       	out	0x3e, r29	; 62
    1540:	0f be       	out	0x3f, r0	; 63
    1542:	cd bf       	out	0x3d, r28	; 61
    1544:	cf 91       	pop	r28
    1546:	df 91       	pop	r29
    1548:	08 95       	ret

0000154a <MCAL_Dio_TogglePin>:

Std_type MCAL_Dio_TogglePin(S_Dio *Dio_TogglePin,E_DioPin Pin_Num)
{
    154a:	df 93       	push	r29
    154c:	cf 93       	push	r28
    154e:	cd b7       	in	r28, 0x3d	; 61
    1550:	de b7       	in	r29, 0x3e	; 62
    1552:	29 97       	sbiw	r28, 0x09	; 9
    1554:	0f b6       	in	r0, 0x3f	; 63
    1556:	f8 94       	cli
    1558:	de bf       	out	0x3e, r29	; 62
    155a:	0f be       	out	0x3f, r0	; 63
    155c:	cd bf       	out	0x3d, r28	; 61
    155e:	9e 83       	std	Y+6, r25	; 0x06
    1560:	8d 83       	std	Y+5, r24	; 0x05
    1562:	6f 83       	std	Y+7, r22	; 0x07

	Std_type error = OK;
    1564:	1c 82       	std	Y+4, r1	; 0x04
	{
		error = NOT_OK;


	}
	else if(Dio_TogglePin->port_num >= DIO_CONFIGURED_PORTS)
    1566:	ed 81       	ldd	r30, Y+5	; 0x05
    1568:	fe 81       	ldd	r31, Y+6	; 0x06
    156a:	80 81       	ld	r24, Z
    156c:	84 30       	cpi	r24, 0x04	; 4
    156e:	18 f0       	brcs	.+6      	; 0x1576 <MCAL_Dio_TogglePin+0x2c>
	{

		error = NOT_OK;
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	8c 83       	std	Y+4, r24	; 0x04
    1574:	8d c0       	rjmp	.+282    	; 0x1690 <MCAL_Dio_TogglePin+0x146>

	}
	else
	{
		for (int i = 0; i < DIO_CONFIGURED_PINS; i++) {
    1576:	1a 82       	std	Y+2, r1	; 0x02
    1578:	19 82       	std	Y+1, r1	; 0x01
    157a:	15 c0       	rjmp	.+42     	; 0x15a6 <MCAL_Dio_TogglePin+0x5c>
			if (Pin_Num & (1 << i)) {
    157c:	8f 81       	ldd	r24, Y+7	; 0x07
    157e:	88 2f       	mov	r24, r24
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	09 80       	ldd	r0, Y+1	; 0x01
    1584:	02 c0       	rjmp	.+4      	; 0x158a <MCAL_Dio_TogglePin+0x40>
    1586:	95 95       	asr	r25
    1588:	87 95       	ror	r24
    158a:	0a 94       	dec	r0
    158c:	e2 f7       	brpl	.-8      	; 0x1586 <MCAL_Dio_TogglePin+0x3c>
    158e:	81 70       	andi	r24, 0x01	; 1
    1590:	90 70       	andi	r25, 0x00	; 0
    1592:	88 23       	and	r24, r24
    1594:	19 f0       	breq	.+6      	; 0x159c <MCAL_Dio_TogglePin+0x52>
				bitNumber = i;
    1596:	89 81       	ldd	r24, Y+1	; 0x01
    1598:	8b 83       	std	Y+3, r24	; 0x03
    159a:	0a c0       	rjmp	.+20     	; 0x15b0 <MCAL_Dio_TogglePin+0x66>
		error = NOT_OK;

	}
	else
	{
		for (int i = 0; i < DIO_CONFIGURED_PINS; i++) {
    159c:	89 81       	ldd	r24, Y+1	; 0x01
    159e:	9a 81       	ldd	r25, Y+2	; 0x02
    15a0:	01 96       	adiw	r24, 0x01	; 1
    15a2:	9a 83       	std	Y+2, r25	; 0x02
    15a4:	89 83       	std	Y+1, r24	; 0x01
    15a6:	89 81       	ldd	r24, Y+1	; 0x01
    15a8:	9a 81       	ldd	r25, Y+2	; 0x02
    15aa:	88 30       	cpi	r24, 0x08	; 8
    15ac:	91 05       	cpc	r25, r1
    15ae:	34 f3       	brlt	.-52     	; 0x157c <MCAL_Dio_TogglePin+0x32>
				bitNumber = i;
				break;
			}
		}

		switch (Dio_TogglePin->port_num)
    15b0:	ed 81       	ldd	r30, Y+5	; 0x05
    15b2:	fe 81       	ldd	r31, Y+6	; 0x06
    15b4:	80 81       	ld	r24, Z
    15b6:	28 2f       	mov	r18, r24
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	39 87       	std	Y+9, r19	; 0x09
    15bc:	28 87       	std	Y+8, r18	; 0x08
    15be:	88 85       	ldd	r24, Y+8	; 0x08
    15c0:	99 85       	ldd	r25, Y+9	; 0x09
    15c2:	81 30       	cpi	r24, 0x01	; 1
    15c4:	91 05       	cpc	r25, r1
    15c6:	49 f1       	breq	.+82     	; 0x161a <MCAL_Dio_TogglePin+0xd0>
    15c8:	28 85       	ldd	r18, Y+8	; 0x08
    15ca:	39 85       	ldd	r19, Y+9	; 0x09
    15cc:	22 30       	cpi	r18, 0x02	; 2
    15ce:	31 05       	cpc	r19, r1
    15d0:	2c f4       	brge	.+10     	; 0x15dc <MCAL_Dio_TogglePin+0x92>
    15d2:	88 85       	ldd	r24, Y+8	; 0x08
    15d4:	99 85       	ldd	r25, Y+9	; 0x09
    15d6:	00 97       	sbiw	r24, 0x00	; 0
    15d8:	61 f0       	breq	.+24     	; 0x15f2 <MCAL_Dio_TogglePin+0xa8>
    15da:	5a c0       	rjmp	.+180    	; 0x1690 <MCAL_Dio_TogglePin+0x146>
    15dc:	28 85       	ldd	r18, Y+8	; 0x08
    15de:	39 85       	ldd	r19, Y+9	; 0x09
    15e0:	22 30       	cpi	r18, 0x02	; 2
    15e2:	31 05       	cpc	r19, r1
    15e4:	71 f1       	breq	.+92     	; 0x1642 <MCAL_Dio_TogglePin+0xf8>
    15e6:	88 85       	ldd	r24, Y+8	; 0x08
    15e8:	99 85       	ldd	r25, Y+9	; 0x09
    15ea:	83 30       	cpi	r24, 0x03	; 3
    15ec:	91 05       	cpc	r25, r1
    15ee:	e9 f1       	breq	.+122    	; 0x166a <MCAL_Dio_TogglePin+0x120>
    15f0:	4f c0       	rjmp	.+158    	; 0x1690 <MCAL_Dio_TogglePin+0x146>
		{
		case PORTA_ID:
			DIO_PORTA = DIO_PORTA ^ (1<<bitNumber);
    15f2:	ab e3       	ldi	r26, 0x3B	; 59
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	eb e3       	ldi	r30, 0x3B	; 59
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	48 2f       	mov	r20, r24
    15fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1600:	28 2f       	mov	r18, r24
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	02 2e       	mov	r0, r18
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <MCAL_Dio_TogglePin+0xc6>
    160c:	88 0f       	add	r24, r24
    160e:	99 1f       	adc	r25, r25
    1610:	0a 94       	dec	r0
    1612:	e2 f7       	brpl	.-8      	; 0x160c <MCAL_Dio_TogglePin+0xc2>
    1614:	84 27       	eor	r24, r20
    1616:	8c 93       	st	X, r24
    1618:	3b c0       	rjmp	.+118    	; 0x1690 <MCAL_Dio_TogglePin+0x146>
			break;
		case PORTB_ID:
			DIO_PORTB = DIO_PORTB ^ (1<<bitNumber);
    161a:	a8 e3       	ldi	r26, 0x38	; 56
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	e8 e3       	ldi	r30, 0x38	; 56
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	48 2f       	mov	r20, r24
    1626:	8b 81       	ldd	r24, Y+3	; 0x03
    1628:	28 2f       	mov	r18, r24
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	02 2e       	mov	r0, r18
    1632:	02 c0       	rjmp	.+4      	; 0x1638 <MCAL_Dio_TogglePin+0xee>
    1634:	88 0f       	add	r24, r24
    1636:	99 1f       	adc	r25, r25
    1638:	0a 94       	dec	r0
    163a:	e2 f7       	brpl	.-8      	; 0x1634 <MCAL_Dio_TogglePin+0xea>
    163c:	84 27       	eor	r24, r20
    163e:	8c 93       	st	X, r24
    1640:	27 c0       	rjmp	.+78     	; 0x1690 <MCAL_Dio_TogglePin+0x146>
			break;
		case PORTC_ID:
			DIO_PORTB = DIO_PORTC ^ (1<<bitNumber);
    1642:	a8 e3       	ldi	r26, 0x38	; 56
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	e5 e3       	ldi	r30, 0x35	; 53
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	48 2f       	mov	r20, r24
    164e:	8b 81       	ldd	r24, Y+3	; 0x03
    1650:	28 2f       	mov	r18, r24
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	02 2e       	mov	r0, r18
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <MCAL_Dio_TogglePin+0x116>
    165c:	88 0f       	add	r24, r24
    165e:	99 1f       	adc	r25, r25
    1660:	0a 94       	dec	r0
    1662:	e2 f7       	brpl	.-8      	; 0x165c <MCAL_Dio_TogglePin+0x112>
    1664:	84 27       	eor	r24, r20
    1666:	8c 93       	st	X, r24
    1668:	13 c0       	rjmp	.+38     	; 0x1690 <MCAL_Dio_TogglePin+0x146>
			break;
		case PORTD_ID:
			DIO_PORTB = DIO_PORTD ^ (1<<bitNumber);
    166a:	a8 e3       	ldi	r26, 0x38	; 56
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	e2 e3       	ldi	r30, 0x32	; 50
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	48 2f       	mov	r20, r24
    1676:	8b 81       	ldd	r24, Y+3	; 0x03
    1678:	28 2f       	mov	r18, r24
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	02 2e       	mov	r0, r18
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <MCAL_Dio_TogglePin+0x13e>
    1684:	88 0f       	add	r24, r24
    1686:	99 1f       	adc	r25, r25
    1688:	0a 94       	dec	r0
    168a:	e2 f7       	brpl	.-8      	; 0x1684 <MCAL_Dio_TogglePin+0x13a>
    168c:	84 27       	eor	r24, r20
    168e:	8c 93       	st	X, r24

			break;
		}
	}

	return error;
    1690:	8c 81       	ldd	r24, Y+4	; 0x04

}
    1692:	29 96       	adiw	r28, 0x09	; 9
    1694:	0f b6       	in	r0, 0x3f	; 63
    1696:	f8 94       	cli
    1698:	de bf       	out	0x3e, r29	; 62
    169a:	0f be       	out	0x3f, r0	; 63
    169c:	cd bf       	out	0x3d, r28	; 61
    169e:	cf 91       	pop	r28
    16a0:	df 91       	pop	r29
    16a2:	08 95       	ret

000016a4 <HAL_LCD_init>:
#include "LCD_Interface.h"


/* Function to initialize the LCD */
E_ErrorType HAL_LCD_init()
{
    16a4:	df 93       	push	r29
    16a6:	cf 93       	push	r28
    16a8:	cd b7       	in	r28, 0x3d	; 61
    16aa:	de b7       	in	r29, 0x3e	; 62
    16ac:	c1 55       	subi	r28, 0x51	; 81
    16ae:	d0 40       	sbci	r29, 0x00	; 0
    16b0:	0f b6       	in	r0, 0x3f	; 63
    16b2:	f8 94       	cli
    16b4:	de bf       	out	0x3e, r29	; 62
    16b6:	0f be       	out	0x3f, r0	; 63
    16b8:	cd bf       	out	0x3d, r28	; 61
	E_ErrorType u8LocalReturn = E_NOT_OK;
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	89 af       	std	Y+57, r24	; 0x39
	/* Initialize control pins as output */
	S_Dio LCD_RS_interface= {LCD_RS_PORT , LCD_RS_PIN , OUTPUT};
    16be:	ce 01       	movw	r24, r28
    16c0:	ca 96       	adiw	r24, 0x3a	; 58
    16c2:	25 96       	adiw	r28, 0x05	; 5
    16c4:	9f af       	std	Y+63, r25	; 0x3f
    16c6:	8e af       	std	Y+62, r24	; 0x3e
    16c8:	25 97       	sbiw	r28, 0x05	; 5
    16ca:	ea e7       	ldi	r30, 0x7A	; 122
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	27 96       	adiw	r28, 0x07	; 7
    16d0:	ff af       	std	Y+63, r31	; 0x3f
    16d2:	ee af       	std	Y+62, r30	; 0x3e
    16d4:	27 97       	sbiw	r28, 0x07	; 7
    16d6:	f3 e0       	ldi	r31, 0x03	; 3
    16d8:	28 96       	adiw	r28, 0x08	; 8
    16da:	ff af       	std	Y+63, r31	; 0x3f
    16dc:	28 97       	sbiw	r28, 0x08	; 8
    16de:	27 96       	adiw	r28, 0x07	; 7
    16e0:	ee ad       	ldd	r30, Y+62	; 0x3e
    16e2:	ff ad       	ldd	r31, Y+63	; 0x3f
    16e4:	27 97       	sbiw	r28, 0x07	; 7
    16e6:	00 80       	ld	r0, Z
    16e8:	27 96       	adiw	r28, 0x07	; 7
    16ea:	8e ad       	ldd	r24, Y+62	; 0x3e
    16ec:	9f ad       	ldd	r25, Y+63	; 0x3f
    16ee:	27 97       	sbiw	r28, 0x07	; 7
    16f0:	01 96       	adiw	r24, 0x01	; 1
    16f2:	27 96       	adiw	r28, 0x07	; 7
    16f4:	9f af       	std	Y+63, r25	; 0x3f
    16f6:	8e af       	std	Y+62, r24	; 0x3e
    16f8:	27 97       	sbiw	r28, 0x07	; 7
    16fa:	25 96       	adiw	r28, 0x05	; 5
    16fc:	ee ad       	ldd	r30, Y+62	; 0x3e
    16fe:	ff ad       	ldd	r31, Y+63	; 0x3f
    1700:	25 97       	sbiw	r28, 0x05	; 5
    1702:	00 82       	st	Z, r0
    1704:	25 96       	adiw	r28, 0x05	; 5
    1706:	8e ad       	ldd	r24, Y+62	; 0x3e
    1708:	9f ad       	ldd	r25, Y+63	; 0x3f
    170a:	25 97       	sbiw	r28, 0x05	; 5
    170c:	01 96       	adiw	r24, 0x01	; 1
    170e:	25 96       	adiw	r28, 0x05	; 5
    1710:	9f af       	std	Y+63, r25	; 0x3f
    1712:	8e af       	std	Y+62, r24	; 0x3e
    1714:	25 97       	sbiw	r28, 0x05	; 5
    1716:	28 96       	adiw	r28, 0x08	; 8
    1718:	9f ad       	ldd	r25, Y+63	; 0x3f
    171a:	28 97       	sbiw	r28, 0x08	; 8
    171c:	91 50       	subi	r25, 0x01	; 1
    171e:	28 96       	adiw	r28, 0x08	; 8
    1720:	9f af       	std	Y+63, r25	; 0x3f
    1722:	28 97       	sbiw	r28, 0x08	; 8
    1724:	28 96       	adiw	r28, 0x08	; 8
    1726:	ef ad       	ldd	r30, Y+63	; 0x3f
    1728:	28 97       	sbiw	r28, 0x08	; 8
    172a:	ee 23       	and	r30, r30
    172c:	c1 f6       	brne	.-80     	; 0x16de <HAL_LCD_init+0x3a>

	u8LocalReturn = MCAL_Dio_Init(&LCD_RS_interface);
    172e:	ce 01       	movw	r24, r28
    1730:	ca 96       	adiw	r24, 0x3a	; 58
    1732:	0e 94 9b 05 	call	0xb36	; 0xb36 <MCAL_Dio_Init>
    1736:	89 af       	std	Y+57, r24	; 0x39
	S_Dio LCD_E_interface= {LCD_E_PORT , LCD_E_PIN , OUTPUT};
    1738:	ce 01       	movw	r24, r28
    173a:	cd 96       	adiw	r24, 0x3d	; 61
    173c:	2a 96       	adiw	r28, 0x0a	; 10
    173e:	9f af       	std	Y+63, r25	; 0x3f
    1740:	8e af       	std	Y+62, r24	; 0x3e
    1742:	2a 97       	sbiw	r28, 0x0a	; 10
    1744:	e7 e7       	ldi	r30, 0x77	; 119
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	2c 96       	adiw	r28, 0x0c	; 12
    174a:	ff af       	std	Y+63, r31	; 0x3f
    174c:	ee af       	std	Y+62, r30	; 0x3e
    174e:	2c 97       	sbiw	r28, 0x0c	; 12
    1750:	f3 e0       	ldi	r31, 0x03	; 3
    1752:	2d 96       	adiw	r28, 0x0d	; 13
    1754:	ff af       	std	Y+63, r31	; 0x3f
    1756:	2d 97       	sbiw	r28, 0x0d	; 13
    1758:	2c 96       	adiw	r28, 0x0c	; 12
    175a:	ee ad       	ldd	r30, Y+62	; 0x3e
    175c:	ff ad       	ldd	r31, Y+63	; 0x3f
    175e:	2c 97       	sbiw	r28, 0x0c	; 12
    1760:	00 80       	ld	r0, Z
    1762:	2c 96       	adiw	r28, 0x0c	; 12
    1764:	8e ad       	ldd	r24, Y+62	; 0x3e
    1766:	9f ad       	ldd	r25, Y+63	; 0x3f
    1768:	2c 97       	sbiw	r28, 0x0c	; 12
    176a:	01 96       	adiw	r24, 0x01	; 1
    176c:	2c 96       	adiw	r28, 0x0c	; 12
    176e:	9f af       	std	Y+63, r25	; 0x3f
    1770:	8e af       	std	Y+62, r24	; 0x3e
    1772:	2c 97       	sbiw	r28, 0x0c	; 12
    1774:	2a 96       	adiw	r28, 0x0a	; 10
    1776:	ee ad       	ldd	r30, Y+62	; 0x3e
    1778:	ff ad       	ldd	r31, Y+63	; 0x3f
    177a:	2a 97       	sbiw	r28, 0x0a	; 10
    177c:	00 82       	st	Z, r0
    177e:	2a 96       	adiw	r28, 0x0a	; 10
    1780:	8e ad       	ldd	r24, Y+62	; 0x3e
    1782:	9f ad       	ldd	r25, Y+63	; 0x3f
    1784:	2a 97       	sbiw	r28, 0x0a	; 10
    1786:	01 96       	adiw	r24, 0x01	; 1
    1788:	2a 96       	adiw	r28, 0x0a	; 10
    178a:	9f af       	std	Y+63, r25	; 0x3f
    178c:	8e af       	std	Y+62, r24	; 0x3e
    178e:	2a 97       	sbiw	r28, 0x0a	; 10
    1790:	2d 96       	adiw	r28, 0x0d	; 13
    1792:	9f ad       	ldd	r25, Y+63	; 0x3f
    1794:	2d 97       	sbiw	r28, 0x0d	; 13
    1796:	91 50       	subi	r25, 0x01	; 1
    1798:	2d 96       	adiw	r28, 0x0d	; 13
    179a:	9f af       	std	Y+63, r25	; 0x3f
    179c:	2d 97       	sbiw	r28, 0x0d	; 13
    179e:	2d 96       	adiw	r28, 0x0d	; 13
    17a0:	ef ad       	ldd	r30, Y+63	; 0x3f
    17a2:	2d 97       	sbiw	r28, 0x0d	; 13
    17a4:	ee 23       	and	r30, r30
    17a6:	c1 f6       	brne	.-80     	; 0x1758 <HAL_LCD_init+0xb4>

	u8LocalReturn = MCAL_Dio_Init(&LCD_E_interface);
    17a8:	ce 01       	movw	r24, r28
    17aa:	cd 96       	adiw	r24, 0x3d	; 61
    17ac:	0e 94 9b 05 	call	0xb36	; 0xb36 <MCAL_Dio_Init>
    17b0:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(40);
	#elif (LCD_DATA_BITS_MODE == 4)
		/* 4 bits mode */
		#ifdef LOWER_PORT_PINS
			/* Using upper data pins */
			S_Dio LCD_DATA_interface = {LCD_DATA_PORT, (LCD_D4_PIN | LCD_D5_PIN | LCD_D6_PIN |LCD_D7_PIN), OUTPUT};
    17b2:	ce 01       	movw	r24, r28
    17b4:	80 5c       	subi	r24, 0xC0	; 192
    17b6:	9f 4f       	sbci	r25, 0xFF	; 255
    17b8:	2f 96       	adiw	r28, 0x0f	; 15
    17ba:	9f af       	std	Y+63, r25	; 0x3f
    17bc:	8e af       	std	Y+62, r24	; 0x3e
    17be:	2f 97       	sbiw	r28, 0x0f	; 15
    17c0:	e4 e7       	ldi	r30, 0x74	; 116
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	61 96       	adiw	r28, 0x11	; 17
    17c6:	ff af       	std	Y+63, r31	; 0x3f
    17c8:	ee af       	std	Y+62, r30	; 0x3e
    17ca:	61 97       	sbiw	r28, 0x11	; 17
    17cc:	f3 e0       	ldi	r31, 0x03	; 3
    17ce:	62 96       	adiw	r28, 0x12	; 18
    17d0:	ff af       	std	Y+63, r31	; 0x3f
    17d2:	62 97       	sbiw	r28, 0x12	; 18
    17d4:	61 96       	adiw	r28, 0x11	; 17
    17d6:	ee ad       	ldd	r30, Y+62	; 0x3e
    17d8:	ff ad       	ldd	r31, Y+63	; 0x3f
    17da:	61 97       	sbiw	r28, 0x11	; 17
    17dc:	00 80       	ld	r0, Z
    17de:	61 96       	adiw	r28, 0x11	; 17
    17e0:	8e ad       	ldd	r24, Y+62	; 0x3e
    17e2:	9f ad       	ldd	r25, Y+63	; 0x3f
    17e4:	61 97       	sbiw	r28, 0x11	; 17
    17e6:	01 96       	adiw	r24, 0x01	; 1
    17e8:	61 96       	adiw	r28, 0x11	; 17
    17ea:	9f af       	std	Y+63, r25	; 0x3f
    17ec:	8e af       	std	Y+62, r24	; 0x3e
    17ee:	61 97       	sbiw	r28, 0x11	; 17
    17f0:	2f 96       	adiw	r28, 0x0f	; 15
    17f2:	ee ad       	ldd	r30, Y+62	; 0x3e
    17f4:	ff ad       	ldd	r31, Y+63	; 0x3f
    17f6:	2f 97       	sbiw	r28, 0x0f	; 15
    17f8:	00 82       	st	Z, r0
    17fa:	2f 96       	adiw	r28, 0x0f	; 15
    17fc:	8e ad       	ldd	r24, Y+62	; 0x3e
    17fe:	9f ad       	ldd	r25, Y+63	; 0x3f
    1800:	2f 97       	sbiw	r28, 0x0f	; 15
    1802:	01 96       	adiw	r24, 0x01	; 1
    1804:	2f 96       	adiw	r28, 0x0f	; 15
    1806:	9f af       	std	Y+63, r25	; 0x3f
    1808:	8e af       	std	Y+62, r24	; 0x3e
    180a:	2f 97       	sbiw	r28, 0x0f	; 15
    180c:	62 96       	adiw	r28, 0x12	; 18
    180e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1810:	62 97       	sbiw	r28, 0x12	; 18
    1812:	91 50       	subi	r25, 0x01	; 1
    1814:	62 96       	adiw	r28, 0x12	; 18
    1816:	9f af       	std	Y+63, r25	; 0x3f
    1818:	62 97       	sbiw	r28, 0x12	; 18
    181a:	62 96       	adiw	r28, 0x12	; 18
    181c:	ef ad       	ldd	r30, Y+63	; 0x3f
    181e:	62 97       	sbiw	r28, 0x12	; 18
    1820:	ee 23       	and	r30, r30
    1822:	c1 f6       	brne	.-80     	; 0x17d4 <HAL_LCD_init+0x130>
			u8LocalReturn = MCAL_Dio_Init(&LCD_DATA_interface);
    1824:	ce 01       	movw	r24, r28
    1826:	80 5c       	subi	r24, 0xC0	; 192
    1828:	9f 4f       	sbci	r25, 0xFF	; 255
    182a:	0e 94 9b 05 	call	0xb36	; 0xb36 <MCAL_Dio_Init>
    182e:	89 af       	std	Y+57, r24	; 0x39
    1830:	80 e0       	ldi	r24, 0x00	; 0
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	ac e0       	ldi	r26, 0x0C	; 12
    1836:	b2 e4       	ldi	r27, 0x42	; 66
    1838:	8d ab       	std	Y+53, r24	; 0x35
    183a:	9e ab       	std	Y+54, r25	; 0x36
    183c:	af ab       	std	Y+55, r26	; 0x37
    183e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1840:	6d a9       	ldd	r22, Y+53	; 0x35
    1842:	7e a9       	ldd	r23, Y+54	; 0x36
    1844:	8f a9       	ldd	r24, Y+55	; 0x37
    1846:	98 ad       	ldd	r25, Y+56	; 0x38
    1848:	20 e0       	ldi	r18, 0x00	; 0
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	4a e7       	ldi	r20, 0x7A	; 122
    184e:	55 e4       	ldi	r21, 0x45	; 69
    1850:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1854:	dc 01       	movw	r26, r24
    1856:	cb 01       	movw	r24, r22
    1858:	89 ab       	std	Y+49, r24	; 0x31
    185a:	9a ab       	std	Y+50, r25	; 0x32
    185c:	ab ab       	std	Y+51, r26	; 0x33
    185e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1860:	69 a9       	ldd	r22, Y+49	; 0x31
    1862:	7a a9       	ldd	r23, Y+50	; 0x32
    1864:	8b a9       	ldd	r24, Y+51	; 0x33
    1866:	9c a9       	ldd	r25, Y+52	; 0x34
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	40 e8       	ldi	r20, 0x80	; 128
    186e:	5f e3       	ldi	r21, 0x3F	; 63
    1870:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1874:	88 23       	and	r24, r24
    1876:	2c f4       	brge	.+10     	; 0x1882 <HAL_LCD_init+0x1de>
		__ticks = 1;
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	98 ab       	std	Y+48, r25	; 0x30
    187e:	8f a7       	std	Y+47, r24	; 0x2f
    1880:	3f c0       	rjmp	.+126    	; 0x1900 <HAL_LCD_init+0x25c>
	else if (__tmp > 65535)
    1882:	69 a9       	ldd	r22, Y+49	; 0x31
    1884:	7a a9       	ldd	r23, Y+50	; 0x32
    1886:	8b a9       	ldd	r24, Y+51	; 0x33
    1888:	9c a9       	ldd	r25, Y+52	; 0x34
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	3f ef       	ldi	r19, 0xFF	; 255
    188e:	4f e7       	ldi	r20, 0x7F	; 127
    1890:	57 e4       	ldi	r21, 0x47	; 71
    1892:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1896:	18 16       	cp	r1, r24
    1898:	4c f5       	brge	.+82     	; 0x18ec <HAL_LCD_init+0x248>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    189a:	6d a9       	ldd	r22, Y+53	; 0x35
    189c:	7e a9       	ldd	r23, Y+54	; 0x36
    189e:	8f a9       	ldd	r24, Y+55	; 0x37
    18a0:	98 ad       	ldd	r25, Y+56	; 0x38
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	40 e2       	ldi	r20, 0x20	; 32
    18a8:	51 e4       	ldi	r21, 0x41	; 65
    18aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18ae:	dc 01       	movw	r26, r24
    18b0:	cb 01       	movw	r24, r22
    18b2:	bc 01       	movw	r22, r24
    18b4:	cd 01       	movw	r24, r26
    18b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18ba:	dc 01       	movw	r26, r24
    18bc:	cb 01       	movw	r24, r22
    18be:	98 ab       	std	Y+48, r25	; 0x30
    18c0:	8f a7       	std	Y+47, r24	; 0x2f
    18c2:	0f c0       	rjmp	.+30     	; 0x18e2 <HAL_LCD_init+0x23e>
    18c4:	80 e9       	ldi	r24, 0x90	; 144
    18c6:	91 e0       	ldi	r25, 0x01	; 1
    18c8:	9e a7       	std	Y+46, r25	; 0x2e
    18ca:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18cc:	8d a5       	ldd	r24, Y+45	; 0x2d
    18ce:	9e a5       	ldd	r25, Y+46	; 0x2e
    18d0:	01 97       	sbiw	r24, 0x01	; 1
    18d2:	f1 f7       	brne	.-4      	; 0x18d0 <HAL_LCD_init+0x22c>
    18d4:	9e a7       	std	Y+46, r25	; 0x2e
    18d6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    18da:	98 a9       	ldd	r25, Y+48	; 0x30
    18dc:	01 97       	sbiw	r24, 0x01	; 1
    18de:	98 ab       	std	Y+48, r25	; 0x30
    18e0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    18e4:	98 a9       	ldd	r25, Y+48	; 0x30
    18e6:	00 97       	sbiw	r24, 0x00	; 0
    18e8:	69 f7       	brne	.-38     	; 0x18c4 <HAL_LCD_init+0x220>
    18ea:	14 c0       	rjmp	.+40     	; 0x1914 <HAL_LCD_init+0x270>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ec:	69 a9       	ldd	r22, Y+49	; 0x31
    18ee:	7a a9       	ldd	r23, Y+50	; 0x32
    18f0:	8b a9       	ldd	r24, Y+51	; 0x33
    18f2:	9c a9       	ldd	r25, Y+52	; 0x34
    18f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18f8:	dc 01       	movw	r26, r24
    18fa:	cb 01       	movw	r24, r22
    18fc:	98 ab       	std	Y+48, r25	; 0x30
    18fe:	8f a7       	std	Y+47, r24	; 0x2f
    1900:	8f a5       	ldd	r24, Y+47	; 0x2f
    1902:	98 a9       	ldd	r25, Y+48	; 0x30
    1904:	9c a7       	std	Y+44, r25	; 0x2c
    1906:	8b a7       	std	Y+43, r24	; 0x2b
    1908:	8b a5       	ldd	r24, Y+43	; 0x2b
    190a:	9c a5       	ldd	r25, Y+44	; 0x2c
    190c:	01 97       	sbiw	r24, 0x01	; 1
    190e:	f1 f7       	brne	.-4      	; 0x190c <HAL_LCD_init+0x268>
    1910:	9c a7       	std	Y+44, r25	; 0x2c
    1912:	8b a7       	std	Y+43, r24	; 0x2b
			/* Using lower data pins */
			S_Dio LCD_DATA_interface = {LCD_DATA_PORT, (LCD_D0_PIN | LCD_D1_PIN | LCD_D2_PIN |LCD_D3_PIN), OUTPUT};
			u8LocalReturn = MCAL_Dio_Init(&LCD_DATA_interface);
		#endif
		_delay_ms(35);
		HAL_LCD_sendCommand(FOUR_BITS_DATA_MODE);
    1914:	82 e0       	ldi	r24, 0x02	; 2
    1916:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <HAL_LCD_sendCommand>
		HAL_LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE);
    191a:	88 e2       	ldi	r24, 0x28	; 40
    191c:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <HAL_LCD_sendCommand>
    1920:	80 e0       	ldi	r24, 0x00	; 0
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	a0 e2       	ldi	r26, 0x20	; 32
    1926:	b2 e4       	ldi	r27, 0x42	; 66
    1928:	8f a3       	std	Y+39, r24	; 0x27
    192a:	98 a7       	std	Y+40, r25	; 0x28
    192c:	a9 a7       	std	Y+41, r26	; 0x29
    192e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1930:	6f a1       	ldd	r22, Y+39	; 0x27
    1932:	78 a5       	ldd	r23, Y+40	; 0x28
    1934:	89 a5       	ldd	r24, Y+41	; 0x29
    1936:	9a a5       	ldd	r25, Y+42	; 0x2a
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	4a e7       	ldi	r20, 0x7A	; 122
    193e:	55 e4       	ldi	r21, 0x45	; 69
    1940:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1944:	dc 01       	movw	r26, r24
    1946:	cb 01       	movw	r24, r22
    1948:	8b a3       	std	Y+35, r24	; 0x23
    194a:	9c a3       	std	Y+36, r25	; 0x24
    194c:	ad a3       	std	Y+37, r26	; 0x25
    194e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1950:	6b a1       	ldd	r22, Y+35	; 0x23
    1952:	7c a1       	ldd	r23, Y+36	; 0x24
    1954:	8d a1       	ldd	r24, Y+37	; 0x25
    1956:	9e a1       	ldd	r25, Y+38	; 0x26
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	40 e8       	ldi	r20, 0x80	; 128
    195e:	5f e3       	ldi	r21, 0x3F	; 63
    1960:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1964:	88 23       	and	r24, r24
    1966:	2c f4       	brge	.+10     	; 0x1972 <HAL_LCD_init+0x2ce>
		__ticks = 1;
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	9a a3       	std	Y+34, r25	; 0x22
    196e:	89 a3       	std	Y+33, r24	; 0x21
    1970:	3f c0       	rjmp	.+126    	; 0x19f0 <HAL_LCD_init+0x34c>
	else if (__tmp > 65535)
    1972:	6b a1       	ldd	r22, Y+35	; 0x23
    1974:	7c a1       	ldd	r23, Y+36	; 0x24
    1976:	8d a1       	ldd	r24, Y+37	; 0x25
    1978:	9e a1       	ldd	r25, Y+38	; 0x26
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	3f ef       	ldi	r19, 0xFF	; 255
    197e:	4f e7       	ldi	r20, 0x7F	; 127
    1980:	57 e4       	ldi	r21, 0x47	; 71
    1982:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1986:	18 16       	cp	r1, r24
    1988:	4c f5       	brge	.+82     	; 0x19dc <HAL_LCD_init+0x338>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    198a:	6f a1       	ldd	r22, Y+39	; 0x27
    198c:	78 a5       	ldd	r23, Y+40	; 0x28
    198e:	89 a5       	ldd	r24, Y+41	; 0x29
    1990:	9a a5       	ldd	r25, Y+42	; 0x2a
    1992:	20 e0       	ldi	r18, 0x00	; 0
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	40 e2       	ldi	r20, 0x20	; 32
    1998:	51 e4       	ldi	r21, 0x41	; 65
    199a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    199e:	dc 01       	movw	r26, r24
    19a0:	cb 01       	movw	r24, r22
    19a2:	bc 01       	movw	r22, r24
    19a4:	cd 01       	movw	r24, r26
    19a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19aa:	dc 01       	movw	r26, r24
    19ac:	cb 01       	movw	r24, r22
    19ae:	9a a3       	std	Y+34, r25	; 0x22
    19b0:	89 a3       	std	Y+33, r24	; 0x21
    19b2:	0f c0       	rjmp	.+30     	; 0x19d2 <HAL_LCD_init+0x32e>
    19b4:	80 e9       	ldi	r24, 0x90	; 144
    19b6:	91 e0       	ldi	r25, 0x01	; 1
    19b8:	98 a3       	std	Y+32, r25	; 0x20
    19ba:	8f 8f       	std	Y+31, r24	; 0x1f
    19bc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19be:	98 a1       	ldd	r25, Y+32	; 0x20
    19c0:	01 97       	sbiw	r24, 0x01	; 1
    19c2:	f1 f7       	brne	.-4      	; 0x19c0 <HAL_LCD_init+0x31c>
    19c4:	98 a3       	std	Y+32, r25	; 0x20
    19c6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19c8:	89 a1       	ldd	r24, Y+33	; 0x21
    19ca:	9a a1       	ldd	r25, Y+34	; 0x22
    19cc:	01 97       	sbiw	r24, 0x01	; 1
    19ce:	9a a3       	std	Y+34, r25	; 0x22
    19d0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19d2:	89 a1       	ldd	r24, Y+33	; 0x21
    19d4:	9a a1       	ldd	r25, Y+34	; 0x22
    19d6:	00 97       	sbiw	r24, 0x00	; 0
    19d8:	69 f7       	brne	.-38     	; 0x19b4 <HAL_LCD_init+0x310>
    19da:	14 c0       	rjmp	.+40     	; 0x1a04 <HAL_LCD_init+0x360>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19dc:	6b a1       	ldd	r22, Y+35	; 0x23
    19de:	7c a1       	ldd	r23, Y+36	; 0x24
    19e0:	8d a1       	ldd	r24, Y+37	; 0x25
    19e2:	9e a1       	ldd	r25, Y+38	; 0x26
    19e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19e8:	dc 01       	movw	r26, r24
    19ea:	cb 01       	movw	r24, r22
    19ec:	9a a3       	std	Y+34, r25	; 0x22
    19ee:	89 a3       	std	Y+33, r24	; 0x21
    19f0:	89 a1       	ldd	r24, Y+33	; 0x21
    19f2:	9a a1       	ldd	r25, Y+34	; 0x22
    19f4:	9e 8f       	std	Y+30, r25	; 0x1e
    19f6:	8d 8f       	std	Y+29, r24	; 0x1d
    19f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19fa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19fc:	01 97       	sbiw	r24, 0x01	; 1
    19fe:	f1 f7       	brne	.-4      	; 0x19fc <HAL_LCD_init+0x358>
    1a00:	9e 8f       	std	Y+30, r25	; 0x1e
    1a02:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(40);
	#endif

	HAL_LCD_sendCommand(CURSOR_ON);
    1a04:	8e e0       	ldi	r24, 0x0E	; 14
    1a06:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <HAL_LCD_sendCommand>
    1a0a:	80 e0       	ldi	r24, 0x00	; 0
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	a0 e2       	ldi	r26, 0x20	; 32
    1a10:	b2 e4       	ldi	r27, 0x42	; 66
    1a12:	89 8f       	std	Y+25, r24	; 0x19
    1a14:	9a 8f       	std	Y+26, r25	; 0x1a
    1a16:	ab 8f       	std	Y+27, r26	; 0x1b
    1a18:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a1a:	69 8d       	ldd	r22, Y+25	; 0x19
    1a1c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a1e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a20:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a22:	20 e0       	ldi	r18, 0x00	; 0
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	4a e7       	ldi	r20, 0x7A	; 122
    1a28:	55 e4       	ldi	r21, 0x45	; 69
    1a2a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a2e:	dc 01       	movw	r26, r24
    1a30:	cb 01       	movw	r24, r22
    1a32:	8d 8b       	std	Y+21, r24	; 0x15
    1a34:	9e 8b       	std	Y+22, r25	; 0x16
    1a36:	af 8b       	std	Y+23, r26	; 0x17
    1a38:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a3a:	6d 89       	ldd	r22, Y+21	; 0x15
    1a3c:	7e 89       	ldd	r23, Y+22	; 0x16
    1a3e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a40:	98 8d       	ldd	r25, Y+24	; 0x18
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	40 e8       	ldi	r20, 0x80	; 128
    1a48:	5f e3       	ldi	r21, 0x3F	; 63
    1a4a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a4e:	88 23       	and	r24, r24
    1a50:	2c f4       	brge	.+10     	; 0x1a5c <HAL_LCD_init+0x3b8>
		__ticks = 1;
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	9c 8b       	std	Y+20, r25	; 0x14
    1a58:	8b 8b       	std	Y+19, r24	; 0x13
    1a5a:	3f c0       	rjmp	.+126    	; 0x1ada <HAL_LCD_init+0x436>
	else if (__tmp > 65535)
    1a5c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a5e:	7e 89       	ldd	r23, Y+22	; 0x16
    1a60:	8f 89       	ldd	r24, Y+23	; 0x17
    1a62:	98 8d       	ldd	r25, Y+24	; 0x18
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	3f ef       	ldi	r19, 0xFF	; 255
    1a68:	4f e7       	ldi	r20, 0x7F	; 127
    1a6a:	57 e4       	ldi	r21, 0x47	; 71
    1a6c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a70:	18 16       	cp	r1, r24
    1a72:	4c f5       	brge	.+82     	; 0x1ac6 <HAL_LCD_init+0x422>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a74:	69 8d       	ldd	r22, Y+25	; 0x19
    1a76:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a78:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	40 e2       	ldi	r20, 0x20	; 32
    1a82:	51 e4       	ldi	r21, 0x41	; 65
    1a84:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a88:	dc 01       	movw	r26, r24
    1a8a:	cb 01       	movw	r24, r22
    1a8c:	bc 01       	movw	r22, r24
    1a8e:	cd 01       	movw	r24, r26
    1a90:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a94:	dc 01       	movw	r26, r24
    1a96:	cb 01       	movw	r24, r22
    1a98:	9c 8b       	std	Y+20, r25	; 0x14
    1a9a:	8b 8b       	std	Y+19, r24	; 0x13
    1a9c:	0f c0       	rjmp	.+30     	; 0x1abc <HAL_LCD_init+0x418>
    1a9e:	80 e9       	ldi	r24, 0x90	; 144
    1aa0:	91 e0       	ldi	r25, 0x01	; 1
    1aa2:	9a 8b       	std	Y+18, r25	; 0x12
    1aa4:	89 8b       	std	Y+17, r24	; 0x11
    1aa6:	89 89       	ldd	r24, Y+17	; 0x11
    1aa8:	9a 89       	ldd	r25, Y+18	; 0x12
    1aaa:	01 97       	sbiw	r24, 0x01	; 1
    1aac:	f1 f7       	brne	.-4      	; 0x1aaa <HAL_LCD_init+0x406>
    1aae:	9a 8b       	std	Y+18, r25	; 0x12
    1ab0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ab4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ab6:	01 97       	sbiw	r24, 0x01	; 1
    1ab8:	9c 8b       	std	Y+20, r25	; 0x14
    1aba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1abc:	8b 89       	ldd	r24, Y+19	; 0x13
    1abe:	9c 89       	ldd	r25, Y+20	; 0x14
    1ac0:	00 97       	sbiw	r24, 0x00	; 0
    1ac2:	69 f7       	brne	.-38     	; 0x1a9e <HAL_LCD_init+0x3fa>
    1ac4:	14 c0       	rjmp	.+40     	; 0x1aee <HAL_LCD_init+0x44a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ac6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ac8:	7e 89       	ldd	r23, Y+22	; 0x16
    1aca:	8f 89       	ldd	r24, Y+23	; 0x17
    1acc:	98 8d       	ldd	r25, Y+24	; 0x18
    1ace:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	cb 01       	movw	r24, r22
    1ad6:	9c 8b       	std	Y+20, r25	; 0x14
    1ad8:	8b 8b       	std	Y+19, r24	; 0x13
    1ada:	8b 89       	ldd	r24, Y+19	; 0x13
    1adc:	9c 89       	ldd	r25, Y+20	; 0x14
    1ade:	98 8b       	std	Y+16, r25	; 0x10
    1ae0:	8f 87       	std	Y+15, r24	; 0x0f
    1ae2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ae4:	98 89       	ldd	r25, Y+16	; 0x10
    1ae6:	01 97       	sbiw	r24, 0x01	; 1
    1ae8:	f1 f7       	brne	.-4      	; 0x1ae6 <HAL_LCD_init+0x442>
    1aea:	98 8b       	std	Y+16, r25	; 0x10
    1aec:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(40);
	HAL_LCD_sendCommand(CLEAR_COMMAND);
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <HAL_LCD_sendCommand>
    1af4:	80 e0       	ldi	r24, 0x00	; 0
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	a0 e0       	ldi	r26, 0x00	; 0
    1afa:	b0 e4       	ldi	r27, 0x40	; 64
    1afc:	8b 87       	std	Y+11, r24	; 0x0b
    1afe:	9c 87       	std	Y+12, r25	; 0x0c
    1b00:	ad 87       	std	Y+13, r26	; 0x0d
    1b02:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b04:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b06:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b08:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b0c:	20 e0       	ldi	r18, 0x00	; 0
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	4a e7       	ldi	r20, 0x7A	; 122
    1b12:	55 e4       	ldi	r21, 0x45	; 69
    1b14:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b18:	dc 01       	movw	r26, r24
    1b1a:	cb 01       	movw	r24, r22
    1b1c:	8f 83       	std	Y+7, r24	; 0x07
    1b1e:	98 87       	std	Y+8, r25	; 0x08
    1b20:	a9 87       	std	Y+9, r26	; 0x09
    1b22:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b24:	6f 81       	ldd	r22, Y+7	; 0x07
    1b26:	78 85       	ldd	r23, Y+8	; 0x08
    1b28:	89 85       	ldd	r24, Y+9	; 0x09
    1b2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b2c:	20 e0       	ldi	r18, 0x00	; 0
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	40 e8       	ldi	r20, 0x80	; 128
    1b32:	5f e3       	ldi	r21, 0x3F	; 63
    1b34:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b38:	88 23       	and	r24, r24
    1b3a:	2c f4       	brge	.+10     	; 0x1b46 <HAL_LCD_init+0x4a2>
		__ticks = 1;
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	9e 83       	std	Y+6, r25	; 0x06
    1b42:	8d 83       	std	Y+5, r24	; 0x05
    1b44:	3f c0       	rjmp	.+126    	; 0x1bc4 <HAL_LCD_init+0x520>
	else if (__tmp > 65535)
    1b46:	6f 81       	ldd	r22, Y+7	; 0x07
    1b48:	78 85       	ldd	r23, Y+8	; 0x08
    1b4a:	89 85       	ldd	r24, Y+9	; 0x09
    1b4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b4e:	20 e0       	ldi	r18, 0x00	; 0
    1b50:	3f ef       	ldi	r19, 0xFF	; 255
    1b52:	4f e7       	ldi	r20, 0x7F	; 127
    1b54:	57 e4       	ldi	r21, 0x47	; 71
    1b56:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b5a:	18 16       	cp	r1, r24
    1b5c:	4c f5       	brge	.+82     	; 0x1bb0 <HAL_LCD_init+0x50c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b60:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b62:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b64:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b66:	20 e0       	ldi	r18, 0x00	; 0
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	40 e2       	ldi	r20, 0x20	; 32
    1b6c:	51 e4       	ldi	r21, 0x41	; 65
    1b6e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b72:	dc 01       	movw	r26, r24
    1b74:	cb 01       	movw	r24, r22
    1b76:	bc 01       	movw	r22, r24
    1b78:	cd 01       	movw	r24, r26
    1b7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b7e:	dc 01       	movw	r26, r24
    1b80:	cb 01       	movw	r24, r22
    1b82:	9e 83       	std	Y+6, r25	; 0x06
    1b84:	8d 83       	std	Y+5, r24	; 0x05
    1b86:	0f c0       	rjmp	.+30     	; 0x1ba6 <HAL_LCD_init+0x502>
    1b88:	80 e9       	ldi	r24, 0x90	; 144
    1b8a:	91 e0       	ldi	r25, 0x01	; 1
    1b8c:	9c 83       	std	Y+4, r25	; 0x04
    1b8e:	8b 83       	std	Y+3, r24	; 0x03
    1b90:	8b 81       	ldd	r24, Y+3	; 0x03
    1b92:	9c 81       	ldd	r25, Y+4	; 0x04
    1b94:	01 97       	sbiw	r24, 0x01	; 1
    1b96:	f1 f7       	brne	.-4      	; 0x1b94 <HAL_LCD_init+0x4f0>
    1b98:	9c 83       	std	Y+4, r25	; 0x04
    1b9a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba0:	01 97       	sbiw	r24, 0x01	; 1
    1ba2:	9e 83       	std	Y+6, r25	; 0x06
    1ba4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba8:	9e 81       	ldd	r25, Y+6	; 0x06
    1baa:	00 97       	sbiw	r24, 0x00	; 0
    1bac:	69 f7       	brne	.-38     	; 0x1b88 <HAL_LCD_init+0x4e4>
    1bae:	14 c0       	rjmp	.+40     	; 0x1bd8 <HAL_LCD_init+0x534>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bb0:	6f 81       	ldd	r22, Y+7	; 0x07
    1bb2:	78 85       	ldd	r23, Y+8	; 0x08
    1bb4:	89 85       	ldd	r24, Y+9	; 0x09
    1bb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bb8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bbc:	dc 01       	movw	r26, r24
    1bbe:	cb 01       	movw	r24, r22
    1bc0:	9e 83       	std	Y+6, r25	; 0x06
    1bc2:	8d 83       	std	Y+5, r24	; 0x05
    1bc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc8:	9a 83       	std	Y+2, r25	; 0x02
    1bca:	89 83       	std	Y+1, r24	; 0x01
    1bcc:	89 81       	ldd	r24, Y+1	; 0x01
    1bce:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd0:	01 97       	sbiw	r24, 0x01	; 1
    1bd2:	f1 f7       	brne	.-4      	; 0x1bd0 <HAL_LCD_init+0x52c>
    1bd4:	9a 83       	std	Y+2, r25	; 0x02
    1bd6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	HAL_LCD_sendCommand(SHIFT_CURSOR_RIGHT);
    1bd8:	86 e0       	ldi	r24, 0x06	; 6
    1bda:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <HAL_LCD_sendCommand>

	return u8LocalReturn;
    1bde:	89 ad       	ldd	r24, Y+57	; 0x39
}
    1be0:	cf 5a       	subi	r28, 0xAF	; 175
    1be2:	df 4f       	sbci	r29, 0xFF	; 255
    1be4:	0f b6       	in	r0, 0x3f	; 63
    1be6:	f8 94       	cli
    1be8:	de bf       	out	0x3e, r29	; 62
    1bea:	0f be       	out	0x3f, r0	; 63
    1bec:	cd bf       	out	0x3d, r28	; 61
    1bee:	cf 91       	pop	r28
    1bf0:	df 91       	pop	r29
    1bf2:	08 95       	ret

00001bf4 <HAL_LCD_sendCommand>:

/* Function to send command to LCD */
E_ErrorType HAL_LCD_sendCommand(LCD_commandType command)
{
    1bf4:	0f 93       	push	r16
    1bf6:	1f 93       	push	r17
    1bf8:	df 93       	push	r29
    1bfa:	cf 93       	push	r28
    1bfc:	cd b7       	in	r28, 0x3d	; 61
    1bfe:	de b7       	in	r29, 0x3e	; 62
    1c00:	ca 58       	subi	r28, 0x8A	; 138
    1c02:	d0 40       	sbci	r29, 0x00	; 0
    1c04:	0f b6       	in	r0, 0x3f	; 63
    1c06:	f8 94       	cli
    1c08:	de bf       	out	0x3e, r29	; 62
    1c0a:	0f be       	out	0x3f, r0	; 63
    1c0c:	cd bf       	out	0x3d, r28	; 61
    1c0e:	fe 01       	movw	r30, r28
    1c10:	e5 58       	subi	r30, 0x85	; 133
    1c12:	ff 4f       	sbci	r31, 0xFF	; 255
    1c14:	80 83       	st	Z, r24
	E_ErrorType u8LocalReturn = E_NOT_OK;
    1c16:	fe 01       	movw	r30, r28
    1c18:	ef 58       	subi	r30, 0x8F	; 143
    1c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	80 83       	st	Z, r24
	S_Dio LCD_RS_interface = {LCD_RS_PORT , LCD_RS_PIN , PIN_LOW};
    1c20:	ce 01       	movw	r24, r28
    1c22:	8e 58       	subi	r24, 0x8E	; 142
    1c24:	9f 4f       	sbci	r25, 0xFF	; 255
    1c26:	ee 96       	adiw	r28, 0x3e	; 62
    1c28:	9f af       	std	Y+63, r25	; 0x3f
    1c2a:	8e af       	std	Y+62, r24	; 0x3e
    1c2c:	ee 97       	sbiw	r28, 0x3e	; 62
    1c2e:	83 e8       	ldi	r24, 0x83	; 131
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	c2 58       	subi	r28, 0x82	; 130
    1c34:	df 4f       	sbci	r29, 0xFF	; 255
    1c36:	99 83       	std	Y+1, r25	; 0x01
    1c38:	88 83       	st	Y, r24
    1c3a:	ce 57       	subi	r28, 0x7E	; 126
    1c3c:	d0 40       	sbci	r29, 0x00	; 0
    1c3e:	93 e0       	ldi	r25, 0x03	; 3
    1c40:	c0 58       	subi	r28, 0x80	; 128
    1c42:	df 4f       	sbci	r29, 0xFF	; 255
    1c44:	98 83       	st	Y, r25
    1c46:	c0 58       	subi	r28, 0x80	; 128
    1c48:	d0 40       	sbci	r29, 0x00	; 0
    1c4a:	c2 58       	subi	r28, 0x82	; 130
    1c4c:	df 4f       	sbci	r29, 0xFF	; 255
    1c4e:	e8 81       	ld	r30, Y
    1c50:	f9 81       	ldd	r31, Y+1	; 0x01
    1c52:	ce 57       	subi	r28, 0x7E	; 126
    1c54:	d0 40       	sbci	r29, 0x00	; 0
    1c56:	00 80       	ld	r0, Z
    1c58:	c2 58       	subi	r28, 0x82	; 130
    1c5a:	df 4f       	sbci	r29, 0xFF	; 255
    1c5c:	88 81       	ld	r24, Y
    1c5e:	99 81       	ldd	r25, Y+1	; 0x01
    1c60:	ce 57       	subi	r28, 0x7E	; 126
    1c62:	d0 40       	sbci	r29, 0x00	; 0
    1c64:	01 96       	adiw	r24, 0x01	; 1
    1c66:	c2 58       	subi	r28, 0x82	; 130
    1c68:	df 4f       	sbci	r29, 0xFF	; 255
    1c6a:	99 83       	std	Y+1, r25	; 0x01
    1c6c:	88 83       	st	Y, r24
    1c6e:	ce 57       	subi	r28, 0x7E	; 126
    1c70:	d0 40       	sbci	r29, 0x00	; 0
    1c72:	ee 96       	adiw	r28, 0x3e	; 62
    1c74:	ee ad       	ldd	r30, Y+62	; 0x3e
    1c76:	ff ad       	ldd	r31, Y+63	; 0x3f
    1c78:	ee 97       	sbiw	r28, 0x3e	; 62
    1c7a:	00 82       	st	Z, r0
    1c7c:	ee 96       	adiw	r28, 0x3e	; 62
    1c7e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c80:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c82:	ee 97       	sbiw	r28, 0x3e	; 62
    1c84:	01 96       	adiw	r24, 0x01	; 1
    1c86:	ee 96       	adiw	r28, 0x3e	; 62
    1c88:	9f af       	std	Y+63, r25	; 0x3f
    1c8a:	8e af       	std	Y+62, r24	; 0x3e
    1c8c:	ee 97       	sbiw	r28, 0x3e	; 62
    1c8e:	c0 58       	subi	r28, 0x80	; 128
    1c90:	df 4f       	sbci	r29, 0xFF	; 255
    1c92:	98 81       	ld	r25, Y
    1c94:	c0 58       	subi	r28, 0x80	; 128
    1c96:	d0 40       	sbci	r29, 0x00	; 0
    1c98:	91 50       	subi	r25, 0x01	; 1
    1c9a:	c0 58       	subi	r28, 0x80	; 128
    1c9c:	df 4f       	sbci	r29, 0xFF	; 255
    1c9e:	98 83       	st	Y, r25
    1ca0:	c0 58       	subi	r28, 0x80	; 128
    1ca2:	d0 40       	sbci	r29, 0x00	; 0
    1ca4:	c0 58       	subi	r28, 0x80	; 128
    1ca6:	df 4f       	sbci	r29, 0xFF	; 255
    1ca8:	e8 81       	ld	r30, Y
    1caa:	c0 58       	subi	r28, 0x80	; 128
    1cac:	d0 40       	sbci	r29, 0x00	; 0
    1cae:	ee 23       	and	r30, r30
    1cb0:	61 f6       	brne	.-104    	; 0x1c4a <HAL_LCD_sendCommand+0x56>
	u8LocalReturn = MCAL_Dio_WritePin(&LCD_RS_interface, PIN_LOW);
    1cb2:	ce 01       	movw	r24, r28
    1cb4:	8e 58       	subi	r24, 0x8E	; 142
    1cb6:	9f 4f       	sbci	r25, 0xFF	; 255
    1cb8:	60 e0       	ldi	r22, 0x00	; 0
    1cba:	0e 94 59 08 	call	0x10b2	; 0x10b2 <MCAL_Dio_WritePin>
    1cbe:	fe 01       	movw	r30, r28
    1cc0:	ef 58       	subi	r30, 0x8F	; 143
    1cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc4:	80 83       	st	Z, r24
    1cc6:	fe 01       	movw	r30, r28
    1cc8:	e3 59       	subi	r30, 0x93	; 147
    1cca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ccc:	80 e0       	ldi	r24, 0x00	; 0
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	a0 e8       	ldi	r26, 0x80	; 128
    1cd2:	bf e3       	ldi	r27, 0x3F	; 63
    1cd4:	80 83       	st	Z, r24
    1cd6:	91 83       	std	Z+1, r25	; 0x01
    1cd8:	a2 83       	std	Z+2, r26	; 0x02
    1cda:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cdc:	8e 01       	movw	r16, r28
    1cde:	07 59       	subi	r16, 0x97	; 151
    1ce0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce2:	fe 01       	movw	r30, r28
    1ce4:	e3 59       	subi	r30, 0x93	; 147
    1ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce8:	60 81       	ld	r22, Z
    1cea:	71 81       	ldd	r23, Z+1	; 0x01
    1cec:	82 81       	ldd	r24, Z+2	; 0x02
    1cee:	93 81       	ldd	r25, Z+3	; 0x03
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	4a e7       	ldi	r20, 0x7A	; 122
    1cf6:	55 e4       	ldi	r21, 0x45	; 69
    1cf8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	f8 01       	movw	r30, r16
    1d02:	80 83       	st	Z, r24
    1d04:	91 83       	std	Z+1, r25	; 0x01
    1d06:	a2 83       	std	Z+2, r26	; 0x02
    1d08:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d0a:	fe 01       	movw	r30, r28
    1d0c:	e7 59       	subi	r30, 0x97	; 151
    1d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d10:	60 81       	ld	r22, Z
    1d12:	71 81       	ldd	r23, Z+1	; 0x01
    1d14:	82 81       	ldd	r24, Z+2	; 0x02
    1d16:	93 81       	ldd	r25, Z+3	; 0x03
    1d18:	20 e0       	ldi	r18, 0x00	; 0
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	40 e8       	ldi	r20, 0x80	; 128
    1d1e:	5f e3       	ldi	r21, 0x3F	; 63
    1d20:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d24:	88 23       	and	r24, r24
    1d26:	44 f4       	brge	.+16     	; 0x1d38 <HAL_LCD_sendCommand+0x144>
		__ticks = 1;
    1d28:	fe 01       	movw	r30, r28
    1d2a:	e9 59       	subi	r30, 0x99	; 153
    1d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	91 83       	std	Z+1, r25	; 0x01
    1d34:	80 83       	st	Z, r24
    1d36:	64 c0       	rjmp	.+200    	; 0x1e00 <HAL_LCD_sendCommand+0x20c>
	else if (__tmp > 65535)
    1d38:	fe 01       	movw	r30, r28
    1d3a:	e7 59       	subi	r30, 0x97	; 151
    1d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3e:	60 81       	ld	r22, Z
    1d40:	71 81       	ldd	r23, Z+1	; 0x01
    1d42:	82 81       	ldd	r24, Z+2	; 0x02
    1d44:	93 81       	ldd	r25, Z+3	; 0x03
    1d46:	20 e0       	ldi	r18, 0x00	; 0
    1d48:	3f ef       	ldi	r19, 0xFF	; 255
    1d4a:	4f e7       	ldi	r20, 0x7F	; 127
    1d4c:	57 e4       	ldi	r21, 0x47	; 71
    1d4e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d52:	18 16       	cp	r1, r24
    1d54:	0c f0       	brlt	.+2      	; 0x1d58 <HAL_LCD_sendCommand+0x164>
    1d56:	43 c0       	rjmp	.+134    	; 0x1dde <HAL_LCD_sendCommand+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d58:	fe 01       	movw	r30, r28
    1d5a:	e3 59       	subi	r30, 0x93	; 147
    1d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5e:	60 81       	ld	r22, Z
    1d60:	71 81       	ldd	r23, Z+1	; 0x01
    1d62:	82 81       	ldd	r24, Z+2	; 0x02
    1d64:	93 81       	ldd	r25, Z+3	; 0x03
    1d66:	20 e0       	ldi	r18, 0x00	; 0
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	40 e2       	ldi	r20, 0x20	; 32
    1d6c:	51 e4       	ldi	r21, 0x41	; 65
    1d6e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d72:	dc 01       	movw	r26, r24
    1d74:	cb 01       	movw	r24, r22
    1d76:	8e 01       	movw	r16, r28
    1d78:	09 59       	subi	r16, 0x99	; 153
    1d7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d7c:	bc 01       	movw	r22, r24
    1d7e:	cd 01       	movw	r24, r26
    1d80:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d84:	dc 01       	movw	r26, r24
    1d86:	cb 01       	movw	r24, r22
    1d88:	f8 01       	movw	r30, r16
    1d8a:	91 83       	std	Z+1, r25	; 0x01
    1d8c:	80 83       	st	Z, r24
    1d8e:	1f c0       	rjmp	.+62     	; 0x1dce <HAL_LCD_sendCommand+0x1da>
    1d90:	fe 01       	movw	r30, r28
    1d92:	eb 59       	subi	r30, 0x9B	; 155
    1d94:	ff 4f       	sbci	r31, 0xFF	; 255
    1d96:	80 e9       	ldi	r24, 0x90	; 144
    1d98:	91 e0       	ldi	r25, 0x01	; 1
    1d9a:	91 83       	std	Z+1, r25	; 0x01
    1d9c:	80 83       	st	Z, r24
    1d9e:	fe 01       	movw	r30, r28
    1da0:	eb 59       	subi	r30, 0x9B	; 155
    1da2:	ff 4f       	sbci	r31, 0xFF	; 255
    1da4:	80 81       	ld	r24, Z
    1da6:	91 81       	ldd	r25, Z+1	; 0x01
    1da8:	01 97       	sbiw	r24, 0x01	; 1
    1daa:	f1 f7       	brne	.-4      	; 0x1da8 <HAL_LCD_sendCommand+0x1b4>
    1dac:	fe 01       	movw	r30, r28
    1dae:	eb 59       	subi	r30, 0x9B	; 155
    1db0:	ff 4f       	sbci	r31, 0xFF	; 255
    1db2:	91 83       	std	Z+1, r25	; 0x01
    1db4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db6:	de 01       	movw	r26, r28
    1db8:	a9 59       	subi	r26, 0x99	; 153
    1dba:	bf 4f       	sbci	r27, 0xFF	; 255
    1dbc:	fe 01       	movw	r30, r28
    1dbe:	e9 59       	subi	r30, 0x99	; 153
    1dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc2:	80 81       	ld	r24, Z
    1dc4:	91 81       	ldd	r25, Z+1	; 0x01
    1dc6:	01 97       	sbiw	r24, 0x01	; 1
    1dc8:	11 96       	adiw	r26, 0x01	; 1
    1dca:	9c 93       	st	X, r25
    1dcc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dce:	fe 01       	movw	r30, r28
    1dd0:	e9 59       	subi	r30, 0x99	; 153
    1dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd4:	80 81       	ld	r24, Z
    1dd6:	91 81       	ldd	r25, Z+1	; 0x01
    1dd8:	00 97       	sbiw	r24, 0x00	; 0
    1dda:	d1 f6       	brne	.-76     	; 0x1d90 <HAL_LCD_sendCommand+0x19c>
    1ddc:	28 c0       	rjmp	.+80     	; 0x1e2e <HAL_LCD_sendCommand+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dde:	8e 01       	movw	r16, r28
    1de0:	09 59       	subi	r16, 0x99	; 153
    1de2:	1f 4f       	sbci	r17, 0xFF	; 255
    1de4:	fe 01       	movw	r30, r28
    1de6:	e7 59       	subi	r30, 0x97	; 151
    1de8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dea:	60 81       	ld	r22, Z
    1dec:	71 81       	ldd	r23, Z+1	; 0x01
    1dee:	82 81       	ldd	r24, Z+2	; 0x02
    1df0:	93 81       	ldd	r25, Z+3	; 0x03
    1df2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	f8 01       	movw	r30, r16
    1dfc:	91 83       	std	Z+1, r25	; 0x01
    1dfe:	80 83       	st	Z, r24
    1e00:	de 01       	movw	r26, r28
    1e02:	ad 59       	subi	r26, 0x9D	; 157
    1e04:	bf 4f       	sbci	r27, 0xFF	; 255
    1e06:	fe 01       	movw	r30, r28
    1e08:	e9 59       	subi	r30, 0x99	; 153
    1e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0c:	80 81       	ld	r24, Z
    1e0e:	91 81       	ldd	r25, Z+1	; 0x01
    1e10:	11 96       	adiw	r26, 0x01	; 1
    1e12:	9c 93       	st	X, r25
    1e14:	8e 93       	st	-X, r24
    1e16:	fe 01       	movw	r30, r28
    1e18:	ed 59       	subi	r30, 0x9D	; 157
    1e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1c:	80 81       	ld	r24, Z
    1e1e:	91 81       	ldd	r25, Z+1	; 0x01
    1e20:	01 97       	sbiw	r24, 0x01	; 1
    1e22:	f1 f7       	brne	.-4      	; 0x1e20 <HAL_LCD_sendCommand+0x22c>
    1e24:	fe 01       	movw	r30, r28
    1e26:	ed 59       	subi	r30, 0x9D	; 157
    1e28:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2a:	91 83       	std	Z+1, r25	; 0x01
    1e2c:	80 83       	st	Z, r24
		u8LocalReturn = MCAL_Dio_WritePin(&LCD_RW_interface, PIN_LOW);
	#else
		//Do nothing
	#endif

	S_Dio LCD_E_interface = {LCD_E_PORT , LCD_E_PIN , PIN_LOW};
    1e2e:	ce 01       	movw	r24, r28
    1e30:	8b 58       	subi	r24, 0x8B	; 139
    1e32:	9f 4f       	sbci	r25, 0xFF	; 255
    1e34:	cf 57       	subi	r28, 0x7F	; 127
    1e36:	df 4f       	sbci	r29, 0xFF	; 255
    1e38:	99 83       	std	Y+1, r25	; 0x01
    1e3a:	88 83       	st	Y, r24
    1e3c:	c1 58       	subi	r28, 0x81	; 129
    1e3e:	d0 40       	sbci	r29, 0x00	; 0
    1e40:	80 e8       	ldi	r24, 0x80	; 128
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	cd 57       	subi	r28, 0x7D	; 125
    1e46:	df 4f       	sbci	r29, 0xFF	; 255
    1e48:	99 83       	std	Y+1, r25	; 0x01
    1e4a:	88 83       	st	Y, r24
    1e4c:	c3 58       	subi	r28, 0x83	; 131
    1e4e:	d0 40       	sbci	r29, 0x00	; 0
    1e50:	93 e0       	ldi	r25, 0x03	; 3
    1e52:	cb 57       	subi	r28, 0x7B	; 123
    1e54:	df 4f       	sbci	r29, 0xFF	; 255
    1e56:	98 83       	st	Y, r25
    1e58:	c5 58       	subi	r28, 0x85	; 133
    1e5a:	d0 40       	sbci	r29, 0x00	; 0
    1e5c:	cd 57       	subi	r28, 0x7D	; 125
    1e5e:	df 4f       	sbci	r29, 0xFF	; 255
    1e60:	e8 81       	ld	r30, Y
    1e62:	f9 81       	ldd	r31, Y+1	; 0x01
    1e64:	c3 58       	subi	r28, 0x83	; 131
    1e66:	d0 40       	sbci	r29, 0x00	; 0
    1e68:	00 80       	ld	r0, Z
    1e6a:	cd 57       	subi	r28, 0x7D	; 125
    1e6c:	df 4f       	sbci	r29, 0xFF	; 255
    1e6e:	88 81       	ld	r24, Y
    1e70:	99 81       	ldd	r25, Y+1	; 0x01
    1e72:	c3 58       	subi	r28, 0x83	; 131
    1e74:	d0 40       	sbci	r29, 0x00	; 0
    1e76:	01 96       	adiw	r24, 0x01	; 1
    1e78:	cd 57       	subi	r28, 0x7D	; 125
    1e7a:	df 4f       	sbci	r29, 0xFF	; 255
    1e7c:	99 83       	std	Y+1, r25	; 0x01
    1e7e:	88 83       	st	Y, r24
    1e80:	c3 58       	subi	r28, 0x83	; 131
    1e82:	d0 40       	sbci	r29, 0x00	; 0
    1e84:	cf 57       	subi	r28, 0x7F	; 127
    1e86:	df 4f       	sbci	r29, 0xFF	; 255
    1e88:	e8 81       	ld	r30, Y
    1e8a:	f9 81       	ldd	r31, Y+1	; 0x01
    1e8c:	c1 58       	subi	r28, 0x81	; 129
    1e8e:	d0 40       	sbci	r29, 0x00	; 0
    1e90:	00 82       	st	Z, r0
    1e92:	cf 57       	subi	r28, 0x7F	; 127
    1e94:	df 4f       	sbci	r29, 0xFF	; 255
    1e96:	88 81       	ld	r24, Y
    1e98:	99 81       	ldd	r25, Y+1	; 0x01
    1e9a:	c1 58       	subi	r28, 0x81	; 129
    1e9c:	d0 40       	sbci	r29, 0x00	; 0
    1e9e:	01 96       	adiw	r24, 0x01	; 1
    1ea0:	cf 57       	subi	r28, 0x7F	; 127
    1ea2:	df 4f       	sbci	r29, 0xFF	; 255
    1ea4:	99 83       	std	Y+1, r25	; 0x01
    1ea6:	88 83       	st	Y, r24
    1ea8:	c1 58       	subi	r28, 0x81	; 129
    1eaa:	d0 40       	sbci	r29, 0x00	; 0
    1eac:	cb 57       	subi	r28, 0x7B	; 123
    1eae:	df 4f       	sbci	r29, 0xFF	; 255
    1eb0:	98 81       	ld	r25, Y
    1eb2:	c5 58       	subi	r28, 0x85	; 133
    1eb4:	d0 40       	sbci	r29, 0x00	; 0
    1eb6:	91 50       	subi	r25, 0x01	; 1
    1eb8:	cb 57       	subi	r28, 0x7B	; 123
    1eba:	df 4f       	sbci	r29, 0xFF	; 255
    1ebc:	98 83       	st	Y, r25
    1ebe:	c5 58       	subi	r28, 0x85	; 133
    1ec0:	d0 40       	sbci	r29, 0x00	; 0
    1ec2:	cb 57       	subi	r28, 0x7B	; 123
    1ec4:	df 4f       	sbci	r29, 0xFF	; 255
    1ec6:	e8 81       	ld	r30, Y
    1ec8:	c5 58       	subi	r28, 0x85	; 133
    1eca:	d0 40       	sbci	r29, 0x00	; 0
    1ecc:	ee 23       	and	r30, r30
    1ece:	31 f6       	brne	.-116    	; 0x1e5c <HAL_LCD_sendCommand+0x268>
    1ed0:	fe 01       	movw	r30, r28
    1ed2:	e1 5a       	subi	r30, 0xA1	; 161
    1ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	a0 e8       	ldi	r26, 0x80	; 128
    1edc:	bf e3       	ldi	r27, 0x3F	; 63
    1ede:	80 83       	st	Z, r24
    1ee0:	91 83       	std	Z+1, r25	; 0x01
    1ee2:	a2 83       	std	Z+2, r26	; 0x02
    1ee4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ee6:	8e 01       	movw	r16, r28
    1ee8:	05 5a       	subi	r16, 0xA5	; 165
    1eea:	1f 4f       	sbci	r17, 0xFF	; 255
    1eec:	fe 01       	movw	r30, r28
    1eee:	e1 5a       	subi	r30, 0xA1	; 161
    1ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef2:	60 81       	ld	r22, Z
    1ef4:	71 81       	ldd	r23, Z+1	; 0x01
    1ef6:	82 81       	ldd	r24, Z+2	; 0x02
    1ef8:	93 81       	ldd	r25, Z+3	; 0x03
    1efa:	20 e0       	ldi	r18, 0x00	; 0
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	4a e7       	ldi	r20, 0x7A	; 122
    1f00:	55 e4       	ldi	r21, 0x45	; 69
    1f02:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f06:	dc 01       	movw	r26, r24
    1f08:	cb 01       	movw	r24, r22
    1f0a:	f8 01       	movw	r30, r16
    1f0c:	80 83       	st	Z, r24
    1f0e:	91 83       	std	Z+1, r25	; 0x01
    1f10:	a2 83       	std	Z+2, r26	; 0x02
    1f12:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f14:	fe 01       	movw	r30, r28
    1f16:	e5 5a       	subi	r30, 0xA5	; 165
    1f18:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1a:	60 81       	ld	r22, Z
    1f1c:	71 81       	ldd	r23, Z+1	; 0x01
    1f1e:	82 81       	ldd	r24, Z+2	; 0x02
    1f20:	93 81       	ldd	r25, Z+3	; 0x03
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	40 e8       	ldi	r20, 0x80	; 128
    1f28:	5f e3       	ldi	r21, 0x3F	; 63
    1f2a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f2e:	88 23       	and	r24, r24
    1f30:	44 f4       	brge	.+16     	; 0x1f42 <HAL_LCD_sendCommand+0x34e>
		__ticks = 1;
    1f32:	fe 01       	movw	r30, r28
    1f34:	e7 5a       	subi	r30, 0xA7	; 167
    1f36:	ff 4f       	sbci	r31, 0xFF	; 255
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	91 83       	std	Z+1, r25	; 0x01
    1f3e:	80 83       	st	Z, r24
    1f40:	64 c0       	rjmp	.+200    	; 0x200a <HAL_LCD_sendCommand+0x416>
	else if (__tmp > 65535)
    1f42:	fe 01       	movw	r30, r28
    1f44:	e5 5a       	subi	r30, 0xA5	; 165
    1f46:	ff 4f       	sbci	r31, 0xFF	; 255
    1f48:	60 81       	ld	r22, Z
    1f4a:	71 81       	ldd	r23, Z+1	; 0x01
    1f4c:	82 81       	ldd	r24, Z+2	; 0x02
    1f4e:	93 81       	ldd	r25, Z+3	; 0x03
    1f50:	20 e0       	ldi	r18, 0x00	; 0
    1f52:	3f ef       	ldi	r19, 0xFF	; 255
    1f54:	4f e7       	ldi	r20, 0x7F	; 127
    1f56:	57 e4       	ldi	r21, 0x47	; 71
    1f58:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f5c:	18 16       	cp	r1, r24
    1f5e:	0c f0       	brlt	.+2      	; 0x1f62 <HAL_LCD_sendCommand+0x36e>
    1f60:	43 c0       	rjmp	.+134    	; 0x1fe8 <HAL_LCD_sendCommand+0x3f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f62:	fe 01       	movw	r30, r28
    1f64:	e1 5a       	subi	r30, 0xA1	; 161
    1f66:	ff 4f       	sbci	r31, 0xFF	; 255
    1f68:	60 81       	ld	r22, Z
    1f6a:	71 81       	ldd	r23, Z+1	; 0x01
    1f6c:	82 81       	ldd	r24, Z+2	; 0x02
    1f6e:	93 81       	ldd	r25, Z+3	; 0x03
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	40 e2       	ldi	r20, 0x20	; 32
    1f76:	51 e4       	ldi	r21, 0x41	; 65
    1f78:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	cb 01       	movw	r24, r22
    1f80:	8e 01       	movw	r16, r28
    1f82:	07 5a       	subi	r16, 0xA7	; 167
    1f84:	1f 4f       	sbci	r17, 0xFF	; 255
    1f86:	bc 01       	movw	r22, r24
    1f88:	cd 01       	movw	r24, r26
    1f8a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f8e:	dc 01       	movw	r26, r24
    1f90:	cb 01       	movw	r24, r22
    1f92:	f8 01       	movw	r30, r16
    1f94:	91 83       	std	Z+1, r25	; 0x01
    1f96:	80 83       	st	Z, r24
    1f98:	1f c0       	rjmp	.+62     	; 0x1fd8 <HAL_LCD_sendCommand+0x3e4>
    1f9a:	fe 01       	movw	r30, r28
    1f9c:	e9 5a       	subi	r30, 0xA9	; 169
    1f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa0:	80 e9       	ldi	r24, 0x90	; 144
    1fa2:	91 e0       	ldi	r25, 0x01	; 1
    1fa4:	91 83       	std	Z+1, r25	; 0x01
    1fa6:	80 83       	st	Z, r24
    1fa8:	fe 01       	movw	r30, r28
    1faa:	e9 5a       	subi	r30, 0xA9	; 169
    1fac:	ff 4f       	sbci	r31, 0xFF	; 255
    1fae:	80 81       	ld	r24, Z
    1fb0:	91 81       	ldd	r25, Z+1	; 0x01
    1fb2:	01 97       	sbiw	r24, 0x01	; 1
    1fb4:	f1 f7       	brne	.-4      	; 0x1fb2 <HAL_LCD_sendCommand+0x3be>
    1fb6:	fe 01       	movw	r30, r28
    1fb8:	e9 5a       	subi	r30, 0xA9	; 169
    1fba:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbc:	91 83       	std	Z+1, r25	; 0x01
    1fbe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc0:	de 01       	movw	r26, r28
    1fc2:	a7 5a       	subi	r26, 0xA7	; 167
    1fc4:	bf 4f       	sbci	r27, 0xFF	; 255
    1fc6:	fe 01       	movw	r30, r28
    1fc8:	e7 5a       	subi	r30, 0xA7	; 167
    1fca:	ff 4f       	sbci	r31, 0xFF	; 255
    1fcc:	80 81       	ld	r24, Z
    1fce:	91 81       	ldd	r25, Z+1	; 0x01
    1fd0:	01 97       	sbiw	r24, 0x01	; 1
    1fd2:	11 96       	adiw	r26, 0x01	; 1
    1fd4:	9c 93       	st	X, r25
    1fd6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fd8:	fe 01       	movw	r30, r28
    1fda:	e7 5a       	subi	r30, 0xA7	; 167
    1fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fde:	80 81       	ld	r24, Z
    1fe0:	91 81       	ldd	r25, Z+1	; 0x01
    1fe2:	00 97       	sbiw	r24, 0x00	; 0
    1fe4:	d1 f6       	brne	.-76     	; 0x1f9a <HAL_LCD_sendCommand+0x3a6>
    1fe6:	28 c0       	rjmp	.+80     	; 0x2038 <HAL_LCD_sendCommand+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fe8:	8e 01       	movw	r16, r28
    1fea:	07 5a       	subi	r16, 0xA7	; 167
    1fec:	1f 4f       	sbci	r17, 0xFF	; 255
    1fee:	fe 01       	movw	r30, r28
    1ff0:	e5 5a       	subi	r30, 0xA5	; 165
    1ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff4:	60 81       	ld	r22, Z
    1ff6:	71 81       	ldd	r23, Z+1	; 0x01
    1ff8:	82 81       	ldd	r24, Z+2	; 0x02
    1ffa:	93 81       	ldd	r25, Z+3	; 0x03
    1ffc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2000:	dc 01       	movw	r26, r24
    2002:	cb 01       	movw	r24, r22
    2004:	f8 01       	movw	r30, r16
    2006:	91 83       	std	Z+1, r25	; 0x01
    2008:	80 83       	st	Z, r24
    200a:	de 01       	movw	r26, r28
    200c:	ab 5a       	subi	r26, 0xAB	; 171
    200e:	bf 4f       	sbci	r27, 0xFF	; 255
    2010:	fe 01       	movw	r30, r28
    2012:	e7 5a       	subi	r30, 0xA7	; 167
    2014:	ff 4f       	sbci	r31, 0xFF	; 255
    2016:	80 81       	ld	r24, Z
    2018:	91 81       	ldd	r25, Z+1	; 0x01
    201a:	11 96       	adiw	r26, 0x01	; 1
    201c:	9c 93       	st	X, r25
    201e:	8e 93       	st	-X, r24
    2020:	fe 01       	movw	r30, r28
    2022:	eb 5a       	subi	r30, 0xAB	; 171
    2024:	ff 4f       	sbci	r31, 0xFF	; 255
    2026:	80 81       	ld	r24, Z
    2028:	91 81       	ldd	r25, Z+1	; 0x01
    202a:	01 97       	sbiw	r24, 0x01	; 1
    202c:	f1 f7       	brne	.-4      	; 0x202a <HAL_LCD_sendCommand+0x436>
    202e:	fe 01       	movw	r30, r28
    2030:	eb 5a       	subi	r30, 0xAB	; 171
    2032:	ff 4f       	sbci	r31, 0xFF	; 255
    2034:	91 83       	std	Z+1, r25	; 0x01
    2036:	80 83       	st	Z, r24
		_delay_ms(1);
		u8LocalReturn = MCAL_Dio_WritePin(&LCD_E_interface, PIN_LOW);
		_delay_ms(1);
	#elif (LCD_DATA_BITS_MODE == 4)
	#ifdef LOWER_PORT_PINS
		S_Dio LCD_DATA_interface = {LCD_DATA_PORT, (LCD_D4_PIN | LCD_D5_PIN | LCD_D6_PIN |LCD_D7_PIN), OUTPUT};
    2038:	ce 01       	movw	r24, r28
    203a:	88 58       	subi	r24, 0x88	; 136
    203c:	9f 4f       	sbci	r25, 0xFF	; 255
    203e:	ca 57       	subi	r28, 0x7A	; 122
    2040:	df 4f       	sbci	r29, 0xFF	; 255
    2042:	99 83       	std	Y+1, r25	; 0x01
    2044:	88 83       	st	Y, r24
    2046:	c6 58       	subi	r28, 0x86	; 134
    2048:	d0 40       	sbci	r29, 0x00	; 0
    204a:	8d e7       	ldi	r24, 0x7D	; 125
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	c8 57       	subi	r28, 0x78	; 120
    2050:	df 4f       	sbci	r29, 0xFF	; 255
    2052:	99 83       	std	Y+1, r25	; 0x01
    2054:	88 83       	st	Y, r24
    2056:	c8 58       	subi	r28, 0x88	; 136
    2058:	d0 40       	sbci	r29, 0x00	; 0
    205a:	93 e0       	ldi	r25, 0x03	; 3
    205c:	c6 57       	subi	r28, 0x76	; 118
    205e:	df 4f       	sbci	r29, 0xFF	; 255
    2060:	98 83       	st	Y, r25
    2062:	ca 58       	subi	r28, 0x8A	; 138
    2064:	d0 40       	sbci	r29, 0x00	; 0
    2066:	c8 57       	subi	r28, 0x78	; 120
    2068:	df 4f       	sbci	r29, 0xFF	; 255
    206a:	e8 81       	ld	r30, Y
    206c:	f9 81       	ldd	r31, Y+1	; 0x01
    206e:	c8 58       	subi	r28, 0x88	; 136
    2070:	d0 40       	sbci	r29, 0x00	; 0
    2072:	00 80       	ld	r0, Z
    2074:	c8 57       	subi	r28, 0x78	; 120
    2076:	df 4f       	sbci	r29, 0xFF	; 255
    2078:	88 81       	ld	r24, Y
    207a:	99 81       	ldd	r25, Y+1	; 0x01
    207c:	c8 58       	subi	r28, 0x88	; 136
    207e:	d0 40       	sbci	r29, 0x00	; 0
    2080:	01 96       	adiw	r24, 0x01	; 1
    2082:	c8 57       	subi	r28, 0x78	; 120
    2084:	df 4f       	sbci	r29, 0xFF	; 255
    2086:	99 83       	std	Y+1, r25	; 0x01
    2088:	88 83       	st	Y, r24
    208a:	c8 58       	subi	r28, 0x88	; 136
    208c:	d0 40       	sbci	r29, 0x00	; 0
    208e:	ca 57       	subi	r28, 0x7A	; 122
    2090:	df 4f       	sbci	r29, 0xFF	; 255
    2092:	e8 81       	ld	r30, Y
    2094:	f9 81       	ldd	r31, Y+1	; 0x01
    2096:	c6 58       	subi	r28, 0x86	; 134
    2098:	d0 40       	sbci	r29, 0x00	; 0
    209a:	00 82       	st	Z, r0
    209c:	ca 57       	subi	r28, 0x7A	; 122
    209e:	df 4f       	sbci	r29, 0xFF	; 255
    20a0:	88 81       	ld	r24, Y
    20a2:	99 81       	ldd	r25, Y+1	; 0x01
    20a4:	c6 58       	subi	r28, 0x86	; 134
    20a6:	d0 40       	sbci	r29, 0x00	; 0
    20a8:	01 96       	adiw	r24, 0x01	; 1
    20aa:	ca 57       	subi	r28, 0x7A	; 122
    20ac:	df 4f       	sbci	r29, 0xFF	; 255
    20ae:	99 83       	std	Y+1, r25	; 0x01
    20b0:	88 83       	st	Y, r24
    20b2:	c6 58       	subi	r28, 0x86	; 134
    20b4:	d0 40       	sbci	r29, 0x00	; 0
    20b6:	c6 57       	subi	r28, 0x76	; 118
    20b8:	df 4f       	sbci	r29, 0xFF	; 255
    20ba:	98 81       	ld	r25, Y
    20bc:	ca 58       	subi	r28, 0x8A	; 138
    20be:	d0 40       	sbci	r29, 0x00	; 0
    20c0:	91 50       	subi	r25, 0x01	; 1
    20c2:	c6 57       	subi	r28, 0x76	; 118
    20c4:	df 4f       	sbci	r29, 0xFF	; 255
    20c6:	98 83       	st	Y, r25
    20c8:	ca 58       	subi	r28, 0x8A	; 138
    20ca:	d0 40       	sbci	r29, 0x00	; 0
    20cc:	c6 57       	subi	r28, 0x76	; 118
    20ce:	df 4f       	sbci	r29, 0xFF	; 255
    20d0:	e8 81       	ld	r30, Y
    20d2:	ca 58       	subi	r28, 0x8A	; 138
    20d4:	d0 40       	sbci	r29, 0x00	; 0
    20d6:	ee 23       	and	r30, r30
    20d8:	31 f6       	brne	.-116    	; 0x2066 <HAL_LCD_sendCommand+0x472>
		MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D4_PIN, GET_BIT(command, 4));
    20da:	fe 01       	movw	r30, r28
    20dc:	e5 58       	subi	r30, 0x85	; 133
    20de:	ff 4f       	sbci	r31, 0xFF	; 255
    20e0:	80 81       	ld	r24, Z
    20e2:	85 95       	asr	r24
    20e4:	85 95       	asr	r24
    20e6:	85 95       	asr	r24
    20e8:	85 95       	asr	r24
    20ea:	28 2f       	mov	r18, r24
    20ec:	21 70       	andi	r18, 0x01	; 1
    20ee:	ce 01       	movw	r24, r28
    20f0:	88 58       	subi	r24, 0x88	; 136
    20f2:	9f 4f       	sbci	r25, 0xFF	; 255
    20f4:	61 e0       	ldi	r22, 0x01	; 1
    20f6:	42 2f       	mov	r20, r18
    20f8:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <MCAL_Dio_WriteSinglePin>
		MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D5_PIN, GET_BIT(command, 5));
    20fc:	fe 01       	movw	r30, r28
    20fe:	e5 58       	subi	r30, 0x85	; 133
    2100:	ff 4f       	sbci	r31, 0xFF	; 255
    2102:	80 81       	ld	r24, Z
    2104:	85 95       	asr	r24
    2106:	85 95       	asr	r24
    2108:	85 95       	asr	r24
    210a:	85 95       	asr	r24
    210c:	85 95       	asr	r24
    210e:	28 2f       	mov	r18, r24
    2110:	21 70       	andi	r18, 0x01	; 1
    2112:	ce 01       	movw	r24, r28
    2114:	88 58       	subi	r24, 0x88	; 136
    2116:	9f 4f       	sbci	r25, 0xFF	; 255
    2118:	62 e0       	ldi	r22, 0x02	; 2
    211a:	42 2f       	mov	r20, r18
    211c:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <MCAL_Dio_WriteSinglePin>
		MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D6_PIN, GET_BIT(command, 6));
    2120:	fe 01       	movw	r30, r28
    2122:	e5 58       	subi	r30, 0x85	; 133
    2124:	ff 4f       	sbci	r31, 0xFF	; 255
    2126:	80 81       	ld	r24, Z
    2128:	86 fb       	bst	r24, 6
    212a:	88 0f       	add	r24, r24
    212c:	88 0b       	sbc	r24, r24
    212e:	80 f9       	bld	r24, 0
    2130:	28 2f       	mov	r18, r24
    2132:	21 70       	andi	r18, 0x01	; 1
    2134:	ce 01       	movw	r24, r28
    2136:	88 58       	subi	r24, 0x88	; 136
    2138:	9f 4f       	sbci	r25, 0xFF	; 255
    213a:	64 e0       	ldi	r22, 0x04	; 4
    213c:	42 2f       	mov	r20, r18
    213e:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <MCAL_Dio_WriteSinglePin>
		MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D7_PIN, GET_BIT(command, 7));
    2142:	fe 01       	movw	r30, r28
    2144:	e5 58       	subi	r30, 0x85	; 133
    2146:	ff 4f       	sbci	r31, 0xFF	; 255
    2148:	80 81       	ld	r24, Z
    214a:	28 2f       	mov	r18, r24
    214c:	22 1f       	adc	r18, r18
    214e:	22 27       	eor	r18, r18
    2150:	22 1f       	adc	r18, r18
    2152:	ce 01       	movw	r24, r28
    2154:	88 58       	subi	r24, 0x88	; 136
    2156:	9f 4f       	sbci	r25, 0xFF	; 255
    2158:	60 e1       	ldi	r22, 0x10	; 16
    215a:	42 2f       	mov	r20, r18
    215c:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <MCAL_Dio_WriteSinglePin>
    2160:	fe 01       	movw	r30, r28
    2162:	ef 5a       	subi	r30, 0xAF	; 175
    2164:	ff 4f       	sbci	r31, 0xFF	; 255
    2166:	80 e0       	ldi	r24, 0x00	; 0
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	a0 e8       	ldi	r26, 0x80	; 128
    216c:	bf e3       	ldi	r27, 0x3F	; 63
    216e:	80 83       	st	Z, r24
    2170:	91 83       	std	Z+1, r25	; 0x01
    2172:	a2 83       	std	Z+2, r26	; 0x02
    2174:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2176:	8e 01       	movw	r16, r28
    2178:	03 5b       	subi	r16, 0xB3	; 179
    217a:	1f 4f       	sbci	r17, 0xFF	; 255
    217c:	fe 01       	movw	r30, r28
    217e:	ef 5a       	subi	r30, 0xAF	; 175
    2180:	ff 4f       	sbci	r31, 0xFF	; 255
    2182:	60 81       	ld	r22, Z
    2184:	71 81       	ldd	r23, Z+1	; 0x01
    2186:	82 81       	ldd	r24, Z+2	; 0x02
    2188:	93 81       	ldd	r25, Z+3	; 0x03
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	4a e7       	ldi	r20, 0x7A	; 122
    2190:	55 e4       	ldi	r21, 0x45	; 69
    2192:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2196:	dc 01       	movw	r26, r24
    2198:	cb 01       	movw	r24, r22
    219a:	f8 01       	movw	r30, r16
    219c:	80 83       	st	Z, r24
    219e:	91 83       	std	Z+1, r25	; 0x01
    21a0:	a2 83       	std	Z+2, r26	; 0x02
    21a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21a4:	fe 01       	movw	r30, r28
    21a6:	e3 5b       	subi	r30, 0xB3	; 179
    21a8:	ff 4f       	sbci	r31, 0xFF	; 255
    21aa:	60 81       	ld	r22, Z
    21ac:	71 81       	ldd	r23, Z+1	; 0x01
    21ae:	82 81       	ldd	r24, Z+2	; 0x02
    21b0:	93 81       	ldd	r25, Z+3	; 0x03
    21b2:	20 e0       	ldi	r18, 0x00	; 0
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	40 e8       	ldi	r20, 0x80	; 128
    21b8:	5f e3       	ldi	r21, 0x3F	; 63
    21ba:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21be:	88 23       	and	r24, r24
    21c0:	44 f4       	brge	.+16     	; 0x21d2 <HAL_LCD_sendCommand+0x5de>
		__ticks = 1;
    21c2:	fe 01       	movw	r30, r28
    21c4:	e5 5b       	subi	r30, 0xB5	; 181
    21c6:	ff 4f       	sbci	r31, 0xFF	; 255
    21c8:	81 e0       	ldi	r24, 0x01	; 1
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	91 83       	std	Z+1, r25	; 0x01
    21ce:	80 83       	st	Z, r24
    21d0:	64 c0       	rjmp	.+200    	; 0x229a <HAL_LCD_sendCommand+0x6a6>
	else if (__tmp > 65535)
    21d2:	fe 01       	movw	r30, r28
    21d4:	e3 5b       	subi	r30, 0xB3	; 179
    21d6:	ff 4f       	sbci	r31, 0xFF	; 255
    21d8:	60 81       	ld	r22, Z
    21da:	71 81       	ldd	r23, Z+1	; 0x01
    21dc:	82 81       	ldd	r24, Z+2	; 0x02
    21de:	93 81       	ldd	r25, Z+3	; 0x03
    21e0:	20 e0       	ldi	r18, 0x00	; 0
    21e2:	3f ef       	ldi	r19, 0xFF	; 255
    21e4:	4f e7       	ldi	r20, 0x7F	; 127
    21e6:	57 e4       	ldi	r21, 0x47	; 71
    21e8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21ec:	18 16       	cp	r1, r24
    21ee:	0c f0       	brlt	.+2      	; 0x21f2 <HAL_LCD_sendCommand+0x5fe>
    21f0:	43 c0       	rjmp	.+134    	; 0x2278 <HAL_LCD_sendCommand+0x684>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f2:	fe 01       	movw	r30, r28
    21f4:	ef 5a       	subi	r30, 0xAF	; 175
    21f6:	ff 4f       	sbci	r31, 0xFF	; 255
    21f8:	60 81       	ld	r22, Z
    21fa:	71 81       	ldd	r23, Z+1	; 0x01
    21fc:	82 81       	ldd	r24, Z+2	; 0x02
    21fe:	93 81       	ldd	r25, Z+3	; 0x03
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	40 e2       	ldi	r20, 0x20	; 32
    2206:	51 e4       	ldi	r21, 0x41	; 65
    2208:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	8e 01       	movw	r16, r28
    2212:	05 5b       	subi	r16, 0xB5	; 181
    2214:	1f 4f       	sbci	r17, 0xFF	; 255
    2216:	bc 01       	movw	r22, r24
    2218:	cd 01       	movw	r24, r26
    221a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    221e:	dc 01       	movw	r26, r24
    2220:	cb 01       	movw	r24, r22
    2222:	f8 01       	movw	r30, r16
    2224:	91 83       	std	Z+1, r25	; 0x01
    2226:	80 83       	st	Z, r24
    2228:	1f c0       	rjmp	.+62     	; 0x2268 <HAL_LCD_sendCommand+0x674>
    222a:	fe 01       	movw	r30, r28
    222c:	e7 5b       	subi	r30, 0xB7	; 183
    222e:	ff 4f       	sbci	r31, 0xFF	; 255
    2230:	80 e9       	ldi	r24, 0x90	; 144
    2232:	91 e0       	ldi	r25, 0x01	; 1
    2234:	91 83       	std	Z+1, r25	; 0x01
    2236:	80 83       	st	Z, r24
    2238:	fe 01       	movw	r30, r28
    223a:	e7 5b       	subi	r30, 0xB7	; 183
    223c:	ff 4f       	sbci	r31, 0xFF	; 255
    223e:	80 81       	ld	r24, Z
    2240:	91 81       	ldd	r25, Z+1	; 0x01
    2242:	01 97       	sbiw	r24, 0x01	; 1
    2244:	f1 f7       	brne	.-4      	; 0x2242 <HAL_LCD_sendCommand+0x64e>
    2246:	fe 01       	movw	r30, r28
    2248:	e7 5b       	subi	r30, 0xB7	; 183
    224a:	ff 4f       	sbci	r31, 0xFF	; 255
    224c:	91 83       	std	Z+1, r25	; 0x01
    224e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2250:	de 01       	movw	r26, r28
    2252:	a5 5b       	subi	r26, 0xB5	; 181
    2254:	bf 4f       	sbci	r27, 0xFF	; 255
    2256:	fe 01       	movw	r30, r28
    2258:	e5 5b       	subi	r30, 0xB5	; 181
    225a:	ff 4f       	sbci	r31, 0xFF	; 255
    225c:	80 81       	ld	r24, Z
    225e:	91 81       	ldd	r25, Z+1	; 0x01
    2260:	01 97       	sbiw	r24, 0x01	; 1
    2262:	11 96       	adiw	r26, 0x01	; 1
    2264:	9c 93       	st	X, r25
    2266:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2268:	fe 01       	movw	r30, r28
    226a:	e5 5b       	subi	r30, 0xB5	; 181
    226c:	ff 4f       	sbci	r31, 0xFF	; 255
    226e:	80 81       	ld	r24, Z
    2270:	91 81       	ldd	r25, Z+1	; 0x01
    2272:	00 97       	sbiw	r24, 0x00	; 0
    2274:	d1 f6       	brne	.-76     	; 0x222a <HAL_LCD_sendCommand+0x636>
    2276:	27 c0       	rjmp	.+78     	; 0x22c6 <HAL_LCD_sendCommand+0x6d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2278:	8e 01       	movw	r16, r28
    227a:	05 5b       	subi	r16, 0xB5	; 181
    227c:	1f 4f       	sbci	r17, 0xFF	; 255
    227e:	fe 01       	movw	r30, r28
    2280:	e3 5b       	subi	r30, 0xB3	; 179
    2282:	ff 4f       	sbci	r31, 0xFF	; 255
    2284:	60 81       	ld	r22, Z
    2286:	71 81       	ldd	r23, Z+1	; 0x01
    2288:	82 81       	ldd	r24, Z+2	; 0x02
    228a:	93 81       	ldd	r25, Z+3	; 0x03
    228c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2290:	dc 01       	movw	r26, r24
    2292:	cb 01       	movw	r24, r22
    2294:	f8 01       	movw	r30, r16
    2296:	91 83       	std	Z+1, r25	; 0x01
    2298:	80 83       	st	Z, r24
    229a:	de 01       	movw	r26, r28
    229c:	a9 5b       	subi	r26, 0xB9	; 185
    229e:	bf 4f       	sbci	r27, 0xFF	; 255
    22a0:	fe 01       	movw	r30, r28
    22a2:	e5 5b       	subi	r30, 0xB5	; 181
    22a4:	ff 4f       	sbci	r31, 0xFF	; 255
    22a6:	80 81       	ld	r24, Z
    22a8:	91 81       	ldd	r25, Z+1	; 0x01
    22aa:	8d 93       	st	X+, r24
    22ac:	9c 93       	st	X, r25
    22ae:	fe 01       	movw	r30, r28
    22b0:	e9 5b       	subi	r30, 0xB9	; 185
    22b2:	ff 4f       	sbci	r31, 0xFF	; 255
    22b4:	80 81       	ld	r24, Z
    22b6:	91 81       	ldd	r25, Z+1	; 0x01
    22b8:	01 97       	sbiw	r24, 0x01	; 1
    22ba:	f1 f7       	brne	.-4      	; 0x22b8 <HAL_LCD_sendCommand+0x6c4>
    22bc:	fe 01       	movw	r30, r28
    22be:	e9 5b       	subi	r30, 0xB9	; 185
    22c0:	ff 4f       	sbci	r31, 0xFF	; 255
    22c2:	91 83       	std	Z+1, r25	; 0x01
    22c4:	80 83       	st	Z, r24
		MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D0_PIN, GET_BIT(command, 4));
		MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D1_PIN, GET_BIT(command, 5));
		MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D2_PIN, GET_BIT(command, 6));
		MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D3_PIN, GET_BIT(command, 7));
	#endif
	u8LocalReturn = MCAL_Dio_WritePin(&LCD_E_interface, PIN_HIGH);
    22c6:	ce 01       	movw	r24, r28
    22c8:	8b 58       	subi	r24, 0x8B	; 139
    22ca:	9f 4f       	sbci	r25, 0xFF	; 255
    22cc:	6f ef       	ldi	r22, 0xFF	; 255
    22ce:	0e 94 59 08 	call	0x10b2	; 0x10b2 <MCAL_Dio_WritePin>
    22d2:	fe 01       	movw	r30, r28
    22d4:	ef 58       	subi	r30, 0x8F	; 143
    22d6:	ff 4f       	sbci	r31, 0xFF	; 255
    22d8:	80 83       	st	Z, r24
    22da:	fe 01       	movw	r30, r28
    22dc:	ed 5b       	subi	r30, 0xBD	; 189
    22de:	ff 4f       	sbci	r31, 0xFF	; 255
    22e0:	80 e0       	ldi	r24, 0x00	; 0
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	a0 e8       	ldi	r26, 0x80	; 128
    22e6:	bf e3       	ldi	r27, 0x3F	; 63
    22e8:	80 83       	st	Z, r24
    22ea:	91 83       	std	Z+1, r25	; 0x01
    22ec:	a2 83       	std	Z+2, r26	; 0x02
    22ee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22f0:	8e 01       	movw	r16, r28
    22f2:	01 5c       	subi	r16, 0xC1	; 193
    22f4:	1f 4f       	sbci	r17, 0xFF	; 255
    22f6:	fe 01       	movw	r30, r28
    22f8:	ed 5b       	subi	r30, 0xBD	; 189
    22fa:	ff 4f       	sbci	r31, 0xFF	; 255
    22fc:	60 81       	ld	r22, Z
    22fe:	71 81       	ldd	r23, Z+1	; 0x01
    2300:	82 81       	ldd	r24, Z+2	; 0x02
    2302:	93 81       	ldd	r25, Z+3	; 0x03
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	4a e7       	ldi	r20, 0x7A	; 122
    230a:	55 e4       	ldi	r21, 0x45	; 69
    230c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2310:	dc 01       	movw	r26, r24
    2312:	cb 01       	movw	r24, r22
    2314:	f8 01       	movw	r30, r16
    2316:	80 83       	st	Z, r24
    2318:	91 83       	std	Z+1, r25	; 0x01
    231a:	a2 83       	std	Z+2, r26	; 0x02
    231c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    231e:	fe 01       	movw	r30, r28
    2320:	ff 96       	adiw	r30, 0x3f	; 63
    2322:	60 81       	ld	r22, Z
    2324:	71 81       	ldd	r23, Z+1	; 0x01
    2326:	82 81       	ldd	r24, Z+2	; 0x02
    2328:	93 81       	ldd	r25, Z+3	; 0x03
    232a:	20 e0       	ldi	r18, 0x00	; 0
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	40 e8       	ldi	r20, 0x80	; 128
    2330:	5f e3       	ldi	r21, 0x3F	; 63
    2332:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2336:	88 23       	and	r24, r24
    2338:	2c f4       	brge	.+10     	; 0x2344 <HAL_LCD_sendCommand+0x750>
		__ticks = 1;
    233a:	81 e0       	ldi	r24, 0x01	; 1
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	9e af       	std	Y+62, r25	; 0x3e
    2340:	8d af       	std	Y+61, r24	; 0x3d
    2342:	46 c0       	rjmp	.+140    	; 0x23d0 <HAL_LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    2344:	fe 01       	movw	r30, r28
    2346:	ff 96       	adiw	r30, 0x3f	; 63
    2348:	60 81       	ld	r22, Z
    234a:	71 81       	ldd	r23, Z+1	; 0x01
    234c:	82 81       	ldd	r24, Z+2	; 0x02
    234e:	93 81       	ldd	r25, Z+3	; 0x03
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	3f ef       	ldi	r19, 0xFF	; 255
    2354:	4f e7       	ldi	r20, 0x7F	; 127
    2356:	57 e4       	ldi	r21, 0x47	; 71
    2358:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    235c:	18 16       	cp	r1, r24
    235e:	64 f5       	brge	.+88     	; 0x23b8 <HAL_LCD_sendCommand+0x7c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2360:	fe 01       	movw	r30, r28
    2362:	ed 5b       	subi	r30, 0xBD	; 189
    2364:	ff 4f       	sbci	r31, 0xFF	; 255
    2366:	60 81       	ld	r22, Z
    2368:	71 81       	ldd	r23, Z+1	; 0x01
    236a:	82 81       	ldd	r24, Z+2	; 0x02
    236c:	93 81       	ldd	r25, Z+3	; 0x03
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	40 e2       	ldi	r20, 0x20	; 32
    2374:	51 e4       	ldi	r21, 0x41	; 65
    2376:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    237a:	dc 01       	movw	r26, r24
    237c:	cb 01       	movw	r24, r22
    237e:	bc 01       	movw	r22, r24
    2380:	cd 01       	movw	r24, r26
    2382:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2386:	dc 01       	movw	r26, r24
    2388:	cb 01       	movw	r24, r22
    238a:	9e af       	std	Y+62, r25	; 0x3e
    238c:	8d af       	std	Y+61, r24	; 0x3d
    238e:	0f c0       	rjmp	.+30     	; 0x23ae <HAL_LCD_sendCommand+0x7ba>
    2390:	80 e9       	ldi	r24, 0x90	; 144
    2392:	91 e0       	ldi	r25, 0x01	; 1
    2394:	9c af       	std	Y+60, r25	; 0x3c
    2396:	8b af       	std	Y+59, r24	; 0x3b
    2398:	8b ad       	ldd	r24, Y+59	; 0x3b
    239a:	9c ad       	ldd	r25, Y+60	; 0x3c
    239c:	01 97       	sbiw	r24, 0x01	; 1
    239e:	f1 f7       	brne	.-4      	; 0x239c <HAL_LCD_sendCommand+0x7a8>
    23a0:	9c af       	std	Y+60, r25	; 0x3c
    23a2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a4:	8d ad       	ldd	r24, Y+61	; 0x3d
    23a6:	9e ad       	ldd	r25, Y+62	; 0x3e
    23a8:	01 97       	sbiw	r24, 0x01	; 1
    23aa:	9e af       	std	Y+62, r25	; 0x3e
    23ac:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ae:	8d ad       	ldd	r24, Y+61	; 0x3d
    23b0:	9e ad       	ldd	r25, Y+62	; 0x3e
    23b2:	00 97       	sbiw	r24, 0x00	; 0
    23b4:	69 f7       	brne	.-38     	; 0x2390 <HAL_LCD_sendCommand+0x79c>
    23b6:	16 c0       	rjmp	.+44     	; 0x23e4 <HAL_LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b8:	fe 01       	movw	r30, r28
    23ba:	ff 96       	adiw	r30, 0x3f	; 63
    23bc:	60 81       	ld	r22, Z
    23be:	71 81       	ldd	r23, Z+1	; 0x01
    23c0:	82 81       	ldd	r24, Z+2	; 0x02
    23c2:	93 81       	ldd	r25, Z+3	; 0x03
    23c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23c8:	dc 01       	movw	r26, r24
    23ca:	cb 01       	movw	r24, r22
    23cc:	9e af       	std	Y+62, r25	; 0x3e
    23ce:	8d af       	std	Y+61, r24	; 0x3d
    23d0:	8d ad       	ldd	r24, Y+61	; 0x3d
    23d2:	9e ad       	ldd	r25, Y+62	; 0x3e
    23d4:	9a af       	std	Y+58, r25	; 0x3a
    23d6:	89 af       	std	Y+57, r24	; 0x39
    23d8:	89 ad       	ldd	r24, Y+57	; 0x39
    23da:	9a ad       	ldd	r25, Y+58	; 0x3a
    23dc:	01 97       	sbiw	r24, 0x01	; 1
    23de:	f1 f7       	brne	.-4      	; 0x23dc <HAL_LCD_sendCommand+0x7e8>
    23e0:	9a af       	std	Y+58, r25	; 0x3a
    23e2:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	u8LocalReturn = MCAL_Dio_WritePin(&LCD_E_interface, PIN_LOW);
    23e4:	ce 01       	movw	r24, r28
    23e6:	8b 58       	subi	r24, 0x8B	; 139
    23e8:	9f 4f       	sbci	r25, 0xFF	; 255
    23ea:	60 e0       	ldi	r22, 0x00	; 0
    23ec:	0e 94 59 08 	call	0x10b2	; 0x10b2 <MCAL_Dio_WritePin>
    23f0:	fe 01       	movw	r30, r28
    23f2:	ef 58       	subi	r30, 0x8F	; 143
    23f4:	ff 4f       	sbci	r31, 0xFF	; 255
    23f6:	80 83       	st	Z, r24
    23f8:	80 e0       	ldi	r24, 0x00	; 0
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	a0 e8       	ldi	r26, 0x80	; 128
    23fe:	bf e3       	ldi	r27, 0x3F	; 63
    2400:	8d ab       	std	Y+53, r24	; 0x35
    2402:	9e ab       	std	Y+54, r25	; 0x36
    2404:	af ab       	std	Y+55, r26	; 0x37
    2406:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2408:	6d a9       	ldd	r22, Y+53	; 0x35
    240a:	7e a9       	ldd	r23, Y+54	; 0x36
    240c:	8f a9       	ldd	r24, Y+55	; 0x37
    240e:	98 ad       	ldd	r25, Y+56	; 0x38
    2410:	20 e0       	ldi	r18, 0x00	; 0
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	4a e7       	ldi	r20, 0x7A	; 122
    2416:	55 e4       	ldi	r21, 0x45	; 69
    2418:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    241c:	dc 01       	movw	r26, r24
    241e:	cb 01       	movw	r24, r22
    2420:	89 ab       	std	Y+49, r24	; 0x31
    2422:	9a ab       	std	Y+50, r25	; 0x32
    2424:	ab ab       	std	Y+51, r26	; 0x33
    2426:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2428:	69 a9       	ldd	r22, Y+49	; 0x31
    242a:	7a a9       	ldd	r23, Y+50	; 0x32
    242c:	8b a9       	ldd	r24, Y+51	; 0x33
    242e:	9c a9       	ldd	r25, Y+52	; 0x34
    2430:	20 e0       	ldi	r18, 0x00	; 0
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	40 e8       	ldi	r20, 0x80	; 128
    2436:	5f e3       	ldi	r21, 0x3F	; 63
    2438:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    243c:	88 23       	and	r24, r24
    243e:	2c f4       	brge	.+10     	; 0x244a <HAL_LCD_sendCommand+0x856>
		__ticks = 1;
    2440:	81 e0       	ldi	r24, 0x01	; 1
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	98 ab       	std	Y+48, r25	; 0x30
    2446:	8f a7       	std	Y+47, r24	; 0x2f
    2448:	3f c0       	rjmp	.+126    	; 0x24c8 <HAL_LCD_sendCommand+0x8d4>
	else if (__tmp > 65535)
    244a:	69 a9       	ldd	r22, Y+49	; 0x31
    244c:	7a a9       	ldd	r23, Y+50	; 0x32
    244e:	8b a9       	ldd	r24, Y+51	; 0x33
    2450:	9c a9       	ldd	r25, Y+52	; 0x34
    2452:	20 e0       	ldi	r18, 0x00	; 0
    2454:	3f ef       	ldi	r19, 0xFF	; 255
    2456:	4f e7       	ldi	r20, 0x7F	; 127
    2458:	57 e4       	ldi	r21, 0x47	; 71
    245a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    245e:	18 16       	cp	r1, r24
    2460:	4c f5       	brge	.+82     	; 0x24b4 <HAL_LCD_sendCommand+0x8c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2462:	6d a9       	ldd	r22, Y+53	; 0x35
    2464:	7e a9       	ldd	r23, Y+54	; 0x36
    2466:	8f a9       	ldd	r24, Y+55	; 0x37
    2468:	98 ad       	ldd	r25, Y+56	; 0x38
    246a:	20 e0       	ldi	r18, 0x00	; 0
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	40 e2       	ldi	r20, 0x20	; 32
    2470:	51 e4       	ldi	r21, 0x41	; 65
    2472:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2476:	dc 01       	movw	r26, r24
    2478:	cb 01       	movw	r24, r22
    247a:	bc 01       	movw	r22, r24
    247c:	cd 01       	movw	r24, r26
    247e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2482:	dc 01       	movw	r26, r24
    2484:	cb 01       	movw	r24, r22
    2486:	98 ab       	std	Y+48, r25	; 0x30
    2488:	8f a7       	std	Y+47, r24	; 0x2f
    248a:	0f c0       	rjmp	.+30     	; 0x24aa <HAL_LCD_sendCommand+0x8b6>
    248c:	80 e9       	ldi	r24, 0x90	; 144
    248e:	91 e0       	ldi	r25, 0x01	; 1
    2490:	9e a7       	std	Y+46, r25	; 0x2e
    2492:	8d a7       	std	Y+45, r24	; 0x2d
    2494:	8d a5       	ldd	r24, Y+45	; 0x2d
    2496:	9e a5       	ldd	r25, Y+46	; 0x2e
    2498:	01 97       	sbiw	r24, 0x01	; 1
    249a:	f1 f7       	brne	.-4      	; 0x2498 <HAL_LCD_sendCommand+0x8a4>
    249c:	9e a7       	std	Y+46, r25	; 0x2e
    249e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    24a2:	98 a9       	ldd	r25, Y+48	; 0x30
    24a4:	01 97       	sbiw	r24, 0x01	; 1
    24a6:	98 ab       	std	Y+48, r25	; 0x30
    24a8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    24ac:	98 a9       	ldd	r25, Y+48	; 0x30
    24ae:	00 97       	sbiw	r24, 0x00	; 0
    24b0:	69 f7       	brne	.-38     	; 0x248c <HAL_LCD_sendCommand+0x898>
    24b2:	14 c0       	rjmp	.+40     	; 0x24dc <HAL_LCD_sendCommand+0x8e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24b4:	69 a9       	ldd	r22, Y+49	; 0x31
    24b6:	7a a9       	ldd	r23, Y+50	; 0x32
    24b8:	8b a9       	ldd	r24, Y+51	; 0x33
    24ba:	9c a9       	ldd	r25, Y+52	; 0x34
    24bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24c0:	dc 01       	movw	r26, r24
    24c2:	cb 01       	movw	r24, r22
    24c4:	98 ab       	std	Y+48, r25	; 0x30
    24c6:	8f a7       	std	Y+47, r24	; 0x2f
    24c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    24ca:	98 a9       	ldd	r25, Y+48	; 0x30
    24cc:	9c a7       	std	Y+44, r25	; 0x2c
    24ce:	8b a7       	std	Y+43, r24	; 0x2b
    24d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    24d2:	9c a5       	ldd	r25, Y+44	; 0x2c
    24d4:	01 97       	sbiw	r24, 0x01	; 1
    24d6:	f1 f7       	brne	.-4      	; 0x24d4 <HAL_LCD_sendCommand+0x8e0>
    24d8:	9c a7       	std	Y+44, r25	; 0x2c
    24da:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	#ifdef LOWER_PORT_PINS
		MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D4_PIN, GET_BIT(command, 0));
    24dc:	fe 01       	movw	r30, r28
    24de:	e5 58       	subi	r30, 0x85	; 133
    24e0:	ff 4f       	sbci	r31, 0xFF	; 255
    24e2:	80 81       	ld	r24, Z
    24e4:	28 2f       	mov	r18, r24
    24e6:	21 70       	andi	r18, 0x01	; 1
    24e8:	ce 01       	movw	r24, r28
    24ea:	88 58       	subi	r24, 0x88	; 136
    24ec:	9f 4f       	sbci	r25, 0xFF	; 255
    24ee:	61 e0       	ldi	r22, 0x01	; 1
    24f0:	42 2f       	mov	r20, r18
    24f2:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <MCAL_Dio_WriteSinglePin>
		MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D5_PIN, GET_BIT(command, 1));
    24f6:	fe 01       	movw	r30, r28
    24f8:	e5 58       	subi	r30, 0x85	; 133
    24fa:	ff 4f       	sbci	r31, 0xFF	; 255
    24fc:	80 81       	ld	r24, Z
    24fe:	85 95       	asr	r24
    2500:	28 2f       	mov	r18, r24
    2502:	21 70       	andi	r18, 0x01	; 1
    2504:	ce 01       	movw	r24, r28
    2506:	88 58       	subi	r24, 0x88	; 136
    2508:	9f 4f       	sbci	r25, 0xFF	; 255
    250a:	62 e0       	ldi	r22, 0x02	; 2
    250c:	42 2f       	mov	r20, r18
    250e:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <MCAL_Dio_WriteSinglePin>
		MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D6_PIN, GET_BIT(command, 2));
    2512:	fe 01       	movw	r30, r28
    2514:	e5 58       	subi	r30, 0x85	; 133
    2516:	ff 4f       	sbci	r31, 0xFF	; 255
    2518:	80 81       	ld	r24, Z
    251a:	85 95       	asr	r24
    251c:	85 95       	asr	r24
    251e:	28 2f       	mov	r18, r24
    2520:	21 70       	andi	r18, 0x01	; 1
    2522:	ce 01       	movw	r24, r28
    2524:	88 58       	subi	r24, 0x88	; 136
    2526:	9f 4f       	sbci	r25, 0xFF	; 255
    2528:	64 e0       	ldi	r22, 0x04	; 4
    252a:	42 2f       	mov	r20, r18
    252c:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <MCAL_Dio_WriteSinglePin>
		MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D7_PIN, GET_BIT(command, 3));
    2530:	fe 01       	movw	r30, r28
    2532:	e5 58       	subi	r30, 0x85	; 133
    2534:	ff 4f       	sbci	r31, 0xFF	; 255
    2536:	80 81       	ld	r24, Z
    2538:	85 95       	asr	r24
    253a:	85 95       	asr	r24
    253c:	85 95       	asr	r24
    253e:	28 2f       	mov	r18, r24
    2540:	21 70       	andi	r18, 0x01	; 1
    2542:	ce 01       	movw	r24, r28
    2544:	88 58       	subi	r24, 0x88	; 136
    2546:	9f 4f       	sbci	r25, 0xFF	; 255
    2548:	60 e1       	ldi	r22, 0x10	; 16
    254a:	42 2f       	mov	r20, r18
    254c:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <MCAL_Dio_WriteSinglePin>
    2550:	80 e0       	ldi	r24, 0x00	; 0
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	a0 e8       	ldi	r26, 0x80	; 128
    2556:	bf e3       	ldi	r27, 0x3F	; 63
    2558:	8f a3       	std	Y+39, r24	; 0x27
    255a:	98 a7       	std	Y+40, r25	; 0x28
    255c:	a9 a7       	std	Y+41, r26	; 0x29
    255e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2560:	6f a1       	ldd	r22, Y+39	; 0x27
    2562:	78 a5       	ldd	r23, Y+40	; 0x28
    2564:	89 a5       	ldd	r24, Y+41	; 0x29
    2566:	9a a5       	ldd	r25, Y+42	; 0x2a
    2568:	20 e0       	ldi	r18, 0x00	; 0
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	4a e7       	ldi	r20, 0x7A	; 122
    256e:	55 e4       	ldi	r21, 0x45	; 69
    2570:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2574:	dc 01       	movw	r26, r24
    2576:	cb 01       	movw	r24, r22
    2578:	8b a3       	std	Y+35, r24	; 0x23
    257a:	9c a3       	std	Y+36, r25	; 0x24
    257c:	ad a3       	std	Y+37, r26	; 0x25
    257e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2580:	6b a1       	ldd	r22, Y+35	; 0x23
    2582:	7c a1       	ldd	r23, Y+36	; 0x24
    2584:	8d a1       	ldd	r24, Y+37	; 0x25
    2586:	9e a1       	ldd	r25, Y+38	; 0x26
    2588:	20 e0       	ldi	r18, 0x00	; 0
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	40 e8       	ldi	r20, 0x80	; 128
    258e:	5f e3       	ldi	r21, 0x3F	; 63
    2590:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2594:	88 23       	and	r24, r24
    2596:	2c f4       	brge	.+10     	; 0x25a2 <HAL_LCD_sendCommand+0x9ae>
		__ticks = 1;
    2598:	81 e0       	ldi	r24, 0x01	; 1
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	9a a3       	std	Y+34, r25	; 0x22
    259e:	89 a3       	std	Y+33, r24	; 0x21
    25a0:	3f c0       	rjmp	.+126    	; 0x2620 <HAL_LCD_sendCommand+0xa2c>
	else if (__tmp > 65535)
    25a2:	6b a1       	ldd	r22, Y+35	; 0x23
    25a4:	7c a1       	ldd	r23, Y+36	; 0x24
    25a6:	8d a1       	ldd	r24, Y+37	; 0x25
    25a8:	9e a1       	ldd	r25, Y+38	; 0x26
    25aa:	20 e0       	ldi	r18, 0x00	; 0
    25ac:	3f ef       	ldi	r19, 0xFF	; 255
    25ae:	4f e7       	ldi	r20, 0x7F	; 127
    25b0:	57 e4       	ldi	r21, 0x47	; 71
    25b2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    25b6:	18 16       	cp	r1, r24
    25b8:	4c f5       	brge	.+82     	; 0x260c <HAL_LCD_sendCommand+0xa18>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ba:	6f a1       	ldd	r22, Y+39	; 0x27
    25bc:	78 a5       	ldd	r23, Y+40	; 0x28
    25be:	89 a5       	ldd	r24, Y+41	; 0x29
    25c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    25c2:	20 e0       	ldi	r18, 0x00	; 0
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	40 e2       	ldi	r20, 0x20	; 32
    25c8:	51 e4       	ldi	r21, 0x41	; 65
    25ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25ce:	dc 01       	movw	r26, r24
    25d0:	cb 01       	movw	r24, r22
    25d2:	bc 01       	movw	r22, r24
    25d4:	cd 01       	movw	r24, r26
    25d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25da:	dc 01       	movw	r26, r24
    25dc:	cb 01       	movw	r24, r22
    25de:	9a a3       	std	Y+34, r25	; 0x22
    25e0:	89 a3       	std	Y+33, r24	; 0x21
    25e2:	0f c0       	rjmp	.+30     	; 0x2602 <HAL_LCD_sendCommand+0xa0e>
    25e4:	80 e9       	ldi	r24, 0x90	; 144
    25e6:	91 e0       	ldi	r25, 0x01	; 1
    25e8:	98 a3       	std	Y+32, r25	; 0x20
    25ea:	8f 8f       	std	Y+31, r24	; 0x1f
    25ec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25ee:	98 a1       	ldd	r25, Y+32	; 0x20
    25f0:	01 97       	sbiw	r24, 0x01	; 1
    25f2:	f1 f7       	brne	.-4      	; 0x25f0 <HAL_LCD_sendCommand+0x9fc>
    25f4:	98 a3       	std	Y+32, r25	; 0x20
    25f6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25f8:	89 a1       	ldd	r24, Y+33	; 0x21
    25fa:	9a a1       	ldd	r25, Y+34	; 0x22
    25fc:	01 97       	sbiw	r24, 0x01	; 1
    25fe:	9a a3       	std	Y+34, r25	; 0x22
    2600:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2602:	89 a1       	ldd	r24, Y+33	; 0x21
    2604:	9a a1       	ldd	r25, Y+34	; 0x22
    2606:	00 97       	sbiw	r24, 0x00	; 0
    2608:	69 f7       	brne	.-38     	; 0x25e4 <HAL_LCD_sendCommand+0x9f0>
    260a:	14 c0       	rjmp	.+40     	; 0x2634 <HAL_LCD_sendCommand+0xa40>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    260c:	6b a1       	ldd	r22, Y+35	; 0x23
    260e:	7c a1       	ldd	r23, Y+36	; 0x24
    2610:	8d a1       	ldd	r24, Y+37	; 0x25
    2612:	9e a1       	ldd	r25, Y+38	; 0x26
    2614:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2618:	dc 01       	movw	r26, r24
    261a:	cb 01       	movw	r24, r22
    261c:	9a a3       	std	Y+34, r25	; 0x22
    261e:	89 a3       	std	Y+33, r24	; 0x21
    2620:	89 a1       	ldd	r24, Y+33	; 0x21
    2622:	9a a1       	ldd	r25, Y+34	; 0x22
    2624:	9e 8f       	std	Y+30, r25	; 0x1e
    2626:	8d 8f       	std	Y+29, r24	; 0x1d
    2628:	8d 8d       	ldd	r24, Y+29	; 0x1d
    262a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    262c:	01 97       	sbiw	r24, 0x01	; 1
    262e:	f1 f7       	brne	.-4      	; 0x262c <HAL_LCD_sendCommand+0xa38>
    2630:	9e 8f       	std	Y+30, r25	; 0x1e
    2632:	8d 8f       	std	Y+29, r24	; 0x1d
		MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D0_PIN, GET_BIT(command, 0));
		MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D1_PIN, GET_BIT(command, 1));
		MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D2_PIN, GET_BIT(command, 2));
		MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D3_PIN, GET_BIT(command, 3));
	#endif
	u8LocalReturn = MCAL_Dio_WritePin(&LCD_E_interface, PIN_HIGH);
    2634:	ce 01       	movw	r24, r28
    2636:	8b 58       	subi	r24, 0x8B	; 139
    2638:	9f 4f       	sbci	r25, 0xFF	; 255
    263a:	6f ef       	ldi	r22, 0xFF	; 255
    263c:	0e 94 59 08 	call	0x10b2	; 0x10b2 <MCAL_Dio_WritePin>
    2640:	fe 01       	movw	r30, r28
    2642:	ef 58       	subi	r30, 0x8F	; 143
    2644:	ff 4f       	sbci	r31, 0xFF	; 255
    2646:	80 83       	st	Z, r24
    2648:	80 e0       	ldi	r24, 0x00	; 0
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	a0 e8       	ldi	r26, 0x80	; 128
    264e:	bf e3       	ldi	r27, 0x3F	; 63
    2650:	89 8f       	std	Y+25, r24	; 0x19
    2652:	9a 8f       	std	Y+26, r25	; 0x1a
    2654:	ab 8f       	std	Y+27, r26	; 0x1b
    2656:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2658:	69 8d       	ldd	r22, Y+25	; 0x19
    265a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    265c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    265e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	4a e7       	ldi	r20, 0x7A	; 122
    2666:	55 e4       	ldi	r21, 0x45	; 69
    2668:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    266c:	dc 01       	movw	r26, r24
    266e:	cb 01       	movw	r24, r22
    2670:	8d 8b       	std	Y+21, r24	; 0x15
    2672:	9e 8b       	std	Y+22, r25	; 0x16
    2674:	af 8b       	std	Y+23, r26	; 0x17
    2676:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2678:	6d 89       	ldd	r22, Y+21	; 0x15
    267a:	7e 89       	ldd	r23, Y+22	; 0x16
    267c:	8f 89       	ldd	r24, Y+23	; 0x17
    267e:	98 8d       	ldd	r25, Y+24	; 0x18
    2680:	20 e0       	ldi	r18, 0x00	; 0
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	40 e8       	ldi	r20, 0x80	; 128
    2686:	5f e3       	ldi	r21, 0x3F	; 63
    2688:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    268c:	88 23       	and	r24, r24
    268e:	2c f4       	brge	.+10     	; 0x269a <HAL_LCD_sendCommand+0xaa6>
		__ticks = 1;
    2690:	81 e0       	ldi	r24, 0x01	; 1
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	9c 8b       	std	Y+20, r25	; 0x14
    2696:	8b 8b       	std	Y+19, r24	; 0x13
    2698:	3f c0       	rjmp	.+126    	; 0x2718 <HAL_LCD_sendCommand+0xb24>
	else if (__tmp > 65535)
    269a:	6d 89       	ldd	r22, Y+21	; 0x15
    269c:	7e 89       	ldd	r23, Y+22	; 0x16
    269e:	8f 89       	ldd	r24, Y+23	; 0x17
    26a0:	98 8d       	ldd	r25, Y+24	; 0x18
    26a2:	20 e0       	ldi	r18, 0x00	; 0
    26a4:	3f ef       	ldi	r19, 0xFF	; 255
    26a6:	4f e7       	ldi	r20, 0x7F	; 127
    26a8:	57 e4       	ldi	r21, 0x47	; 71
    26aa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    26ae:	18 16       	cp	r1, r24
    26b0:	4c f5       	brge	.+82     	; 0x2704 <HAL_LCD_sendCommand+0xb10>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26b2:	69 8d       	ldd	r22, Y+25	; 0x19
    26b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26ba:	20 e0       	ldi	r18, 0x00	; 0
    26bc:	30 e0       	ldi	r19, 0x00	; 0
    26be:	40 e2       	ldi	r20, 0x20	; 32
    26c0:	51 e4       	ldi	r21, 0x41	; 65
    26c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26c6:	dc 01       	movw	r26, r24
    26c8:	cb 01       	movw	r24, r22
    26ca:	bc 01       	movw	r22, r24
    26cc:	cd 01       	movw	r24, r26
    26ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26d2:	dc 01       	movw	r26, r24
    26d4:	cb 01       	movw	r24, r22
    26d6:	9c 8b       	std	Y+20, r25	; 0x14
    26d8:	8b 8b       	std	Y+19, r24	; 0x13
    26da:	0f c0       	rjmp	.+30     	; 0x26fa <HAL_LCD_sendCommand+0xb06>
    26dc:	80 e9       	ldi	r24, 0x90	; 144
    26de:	91 e0       	ldi	r25, 0x01	; 1
    26e0:	9a 8b       	std	Y+18, r25	; 0x12
    26e2:	89 8b       	std	Y+17, r24	; 0x11
    26e4:	89 89       	ldd	r24, Y+17	; 0x11
    26e6:	9a 89       	ldd	r25, Y+18	; 0x12
    26e8:	01 97       	sbiw	r24, 0x01	; 1
    26ea:	f1 f7       	brne	.-4      	; 0x26e8 <HAL_LCD_sendCommand+0xaf4>
    26ec:	9a 8b       	std	Y+18, r25	; 0x12
    26ee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f0:	8b 89       	ldd	r24, Y+19	; 0x13
    26f2:	9c 89       	ldd	r25, Y+20	; 0x14
    26f4:	01 97       	sbiw	r24, 0x01	; 1
    26f6:	9c 8b       	std	Y+20, r25	; 0x14
    26f8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26fa:	8b 89       	ldd	r24, Y+19	; 0x13
    26fc:	9c 89       	ldd	r25, Y+20	; 0x14
    26fe:	00 97       	sbiw	r24, 0x00	; 0
    2700:	69 f7       	brne	.-38     	; 0x26dc <HAL_LCD_sendCommand+0xae8>
    2702:	14 c0       	rjmp	.+40     	; 0x272c <HAL_LCD_sendCommand+0xb38>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2704:	6d 89       	ldd	r22, Y+21	; 0x15
    2706:	7e 89       	ldd	r23, Y+22	; 0x16
    2708:	8f 89       	ldd	r24, Y+23	; 0x17
    270a:	98 8d       	ldd	r25, Y+24	; 0x18
    270c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2710:	dc 01       	movw	r26, r24
    2712:	cb 01       	movw	r24, r22
    2714:	9c 8b       	std	Y+20, r25	; 0x14
    2716:	8b 8b       	std	Y+19, r24	; 0x13
    2718:	8b 89       	ldd	r24, Y+19	; 0x13
    271a:	9c 89       	ldd	r25, Y+20	; 0x14
    271c:	98 8b       	std	Y+16, r25	; 0x10
    271e:	8f 87       	std	Y+15, r24	; 0x0f
    2720:	8f 85       	ldd	r24, Y+15	; 0x0f
    2722:	98 89       	ldd	r25, Y+16	; 0x10
    2724:	01 97       	sbiw	r24, 0x01	; 1
    2726:	f1 f7       	brne	.-4      	; 0x2724 <HAL_LCD_sendCommand+0xb30>
    2728:	98 8b       	std	Y+16, r25	; 0x10
    272a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	u8LocalReturn = MCAL_Dio_WritePin(&LCD_E_interface, PIN_LOW);
    272c:	ce 01       	movw	r24, r28
    272e:	8b 58       	subi	r24, 0x8B	; 139
    2730:	9f 4f       	sbci	r25, 0xFF	; 255
    2732:	60 e0       	ldi	r22, 0x00	; 0
    2734:	0e 94 59 08 	call	0x10b2	; 0x10b2 <MCAL_Dio_WritePin>
    2738:	fe 01       	movw	r30, r28
    273a:	ef 58       	subi	r30, 0x8F	; 143
    273c:	ff 4f       	sbci	r31, 0xFF	; 255
    273e:	80 83       	st	Z, r24
    2740:	80 e0       	ldi	r24, 0x00	; 0
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	a0 e8       	ldi	r26, 0x80	; 128
    2746:	bf e3       	ldi	r27, 0x3F	; 63
    2748:	8b 87       	std	Y+11, r24	; 0x0b
    274a:	9c 87       	std	Y+12, r25	; 0x0c
    274c:	ad 87       	std	Y+13, r26	; 0x0d
    274e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2750:	6b 85       	ldd	r22, Y+11	; 0x0b
    2752:	7c 85       	ldd	r23, Y+12	; 0x0c
    2754:	8d 85       	ldd	r24, Y+13	; 0x0d
    2756:	9e 85       	ldd	r25, Y+14	; 0x0e
    2758:	20 e0       	ldi	r18, 0x00	; 0
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	4a e7       	ldi	r20, 0x7A	; 122
    275e:	55 e4       	ldi	r21, 0x45	; 69
    2760:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2764:	dc 01       	movw	r26, r24
    2766:	cb 01       	movw	r24, r22
    2768:	8f 83       	std	Y+7, r24	; 0x07
    276a:	98 87       	std	Y+8, r25	; 0x08
    276c:	a9 87       	std	Y+9, r26	; 0x09
    276e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2770:	6f 81       	ldd	r22, Y+7	; 0x07
    2772:	78 85       	ldd	r23, Y+8	; 0x08
    2774:	89 85       	ldd	r24, Y+9	; 0x09
    2776:	9a 85       	ldd	r25, Y+10	; 0x0a
    2778:	20 e0       	ldi	r18, 0x00	; 0
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	40 e8       	ldi	r20, 0x80	; 128
    277e:	5f e3       	ldi	r21, 0x3F	; 63
    2780:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2784:	88 23       	and	r24, r24
    2786:	2c f4       	brge	.+10     	; 0x2792 <HAL_LCD_sendCommand+0xb9e>
		__ticks = 1;
    2788:	81 e0       	ldi	r24, 0x01	; 1
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	9e 83       	std	Y+6, r25	; 0x06
    278e:	8d 83       	std	Y+5, r24	; 0x05
    2790:	3f c0       	rjmp	.+126    	; 0x2810 <HAL_LCD_sendCommand+0xc1c>
	else if (__tmp > 65535)
    2792:	6f 81       	ldd	r22, Y+7	; 0x07
    2794:	78 85       	ldd	r23, Y+8	; 0x08
    2796:	89 85       	ldd	r24, Y+9	; 0x09
    2798:	9a 85       	ldd	r25, Y+10	; 0x0a
    279a:	20 e0       	ldi	r18, 0x00	; 0
    279c:	3f ef       	ldi	r19, 0xFF	; 255
    279e:	4f e7       	ldi	r20, 0x7F	; 127
    27a0:	57 e4       	ldi	r21, 0x47	; 71
    27a2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    27a6:	18 16       	cp	r1, r24
    27a8:	4c f5       	brge	.+82     	; 0x27fc <HAL_LCD_sendCommand+0xc08>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    27ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    27ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    27b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    27b2:	20 e0       	ldi	r18, 0x00	; 0
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	40 e2       	ldi	r20, 0x20	; 32
    27b8:	51 e4       	ldi	r21, 0x41	; 65
    27ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27be:	dc 01       	movw	r26, r24
    27c0:	cb 01       	movw	r24, r22
    27c2:	bc 01       	movw	r22, r24
    27c4:	cd 01       	movw	r24, r26
    27c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27ca:	dc 01       	movw	r26, r24
    27cc:	cb 01       	movw	r24, r22
    27ce:	9e 83       	std	Y+6, r25	; 0x06
    27d0:	8d 83       	std	Y+5, r24	; 0x05
    27d2:	0f c0       	rjmp	.+30     	; 0x27f2 <HAL_LCD_sendCommand+0xbfe>
    27d4:	80 e9       	ldi	r24, 0x90	; 144
    27d6:	91 e0       	ldi	r25, 0x01	; 1
    27d8:	9c 83       	std	Y+4, r25	; 0x04
    27da:	8b 83       	std	Y+3, r24	; 0x03
    27dc:	8b 81       	ldd	r24, Y+3	; 0x03
    27de:	9c 81       	ldd	r25, Y+4	; 0x04
    27e0:	01 97       	sbiw	r24, 0x01	; 1
    27e2:	f1 f7       	brne	.-4      	; 0x27e0 <HAL_LCD_sendCommand+0xbec>
    27e4:	9c 83       	std	Y+4, r25	; 0x04
    27e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27e8:	8d 81       	ldd	r24, Y+5	; 0x05
    27ea:	9e 81       	ldd	r25, Y+6	; 0x06
    27ec:	01 97       	sbiw	r24, 0x01	; 1
    27ee:	9e 83       	std	Y+6, r25	; 0x06
    27f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27f2:	8d 81       	ldd	r24, Y+5	; 0x05
    27f4:	9e 81       	ldd	r25, Y+6	; 0x06
    27f6:	00 97       	sbiw	r24, 0x00	; 0
    27f8:	69 f7       	brne	.-38     	; 0x27d4 <HAL_LCD_sendCommand+0xbe0>
    27fa:	14 c0       	rjmp	.+40     	; 0x2824 <HAL_LCD_sendCommand+0xc30>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27fc:	6f 81       	ldd	r22, Y+7	; 0x07
    27fe:	78 85       	ldd	r23, Y+8	; 0x08
    2800:	89 85       	ldd	r24, Y+9	; 0x09
    2802:	9a 85       	ldd	r25, Y+10	; 0x0a
    2804:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2808:	dc 01       	movw	r26, r24
    280a:	cb 01       	movw	r24, r22
    280c:	9e 83       	std	Y+6, r25	; 0x06
    280e:	8d 83       	std	Y+5, r24	; 0x05
    2810:	8d 81       	ldd	r24, Y+5	; 0x05
    2812:	9e 81       	ldd	r25, Y+6	; 0x06
    2814:	9a 83       	std	Y+2, r25	; 0x02
    2816:	89 83       	std	Y+1, r24	; 0x01
    2818:	89 81       	ldd	r24, Y+1	; 0x01
    281a:	9a 81       	ldd	r25, Y+2	; 0x02
    281c:	01 97       	sbiw	r24, 0x01	; 1
    281e:	f1 f7       	brne	.-4      	; 0x281c <HAL_LCD_sendCommand+0xc28>
    2820:	9a 83       	std	Y+2, r25	; 0x02
    2822:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	#endif

	return u8LocalReturn;
    2824:	fe 01       	movw	r30, r28
    2826:	ef 58       	subi	r30, 0x8F	; 143
    2828:	ff 4f       	sbci	r31, 0xFF	; 255
    282a:	80 81       	ld	r24, Z
}
    282c:	c6 57       	subi	r28, 0x76	; 118
    282e:	df 4f       	sbci	r29, 0xFF	; 255
    2830:	0f b6       	in	r0, 0x3f	; 63
    2832:	f8 94       	cli
    2834:	de bf       	out	0x3e, r29	; 62
    2836:	0f be       	out	0x3f, r0	; 63
    2838:	cd bf       	out	0x3d, r28	; 61
    283a:	cf 91       	pop	r28
    283c:	df 91       	pop	r29
    283e:	1f 91       	pop	r17
    2840:	0f 91       	pop	r16
    2842:	08 95       	ret

00002844 <HAL_LCD_sendCharacter>:

/* Function to display a character on the LCD */
E_ErrorType HAL_LCD_sendCharacter(LCD_dataType data)
{
    2844:	0f 93       	push	r16
    2846:	1f 93       	push	r17
    2848:	df 93       	push	r29
    284a:	cf 93       	push	r28
    284c:	cd b7       	in	r28, 0x3d	; 61
    284e:	de b7       	in	r29, 0x3e	; 62
    2850:	cc 57       	subi	r28, 0x7C	; 124
    2852:	d0 40       	sbci	r29, 0x00	; 0
    2854:	0f b6       	in	r0, 0x3f	; 63
    2856:	f8 94       	cli
    2858:	de bf       	out	0x3e, r29	; 62
    285a:	0f be       	out	0x3f, r0	; 63
    285c:	cd bf       	out	0x3d, r28	; 61
    285e:	fe 01       	movw	r30, r28
    2860:	e3 59       	subi	r30, 0x93	; 147
    2862:	ff 4f       	sbci	r31, 0xFF	; 255
    2864:	80 83       	st	Z, r24
	E_ErrorType u8LocalReturn = E_NOT_OK;
    2866:	fe 01       	movw	r30, r28
    2868:	ed 59       	subi	r30, 0x9D	; 157
    286a:	ff 4f       	sbci	r31, 0xFF	; 255
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	80 83       	st	Z, r24
	S_Dio LCD_RS_interface = {LCD_RS_PORT , LCD_RS_PIN , PIN_LOW};
    2870:	ce 01       	movw	r24, r28
    2872:	8c 59       	subi	r24, 0x9C	; 156
    2874:	9f 4f       	sbci	r25, 0xFF	; 255
    2876:	e0 96       	adiw	r28, 0x30	; 48
    2878:	9f af       	std	Y+63, r25	; 0x3f
    287a:	8e af       	std	Y+62, r24	; 0x3e
    287c:	e0 97       	sbiw	r28, 0x30	; 48
    287e:	8c e8       	ldi	r24, 0x8C	; 140
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	e2 96       	adiw	r28, 0x32	; 50
    2884:	9f af       	std	Y+63, r25	; 0x3f
    2886:	8e af       	std	Y+62, r24	; 0x3e
    2888:	e2 97       	sbiw	r28, 0x32	; 50
    288a:	93 e0       	ldi	r25, 0x03	; 3
    288c:	e3 96       	adiw	r28, 0x33	; 51
    288e:	9f af       	std	Y+63, r25	; 0x3f
    2890:	e3 97       	sbiw	r28, 0x33	; 51
    2892:	e2 96       	adiw	r28, 0x32	; 50
    2894:	ee ad       	ldd	r30, Y+62	; 0x3e
    2896:	ff ad       	ldd	r31, Y+63	; 0x3f
    2898:	e2 97       	sbiw	r28, 0x32	; 50
    289a:	00 80       	ld	r0, Z
    289c:	e2 96       	adiw	r28, 0x32	; 50
    289e:	8e ad       	ldd	r24, Y+62	; 0x3e
    28a0:	9f ad       	ldd	r25, Y+63	; 0x3f
    28a2:	e2 97       	sbiw	r28, 0x32	; 50
    28a4:	01 96       	adiw	r24, 0x01	; 1
    28a6:	e2 96       	adiw	r28, 0x32	; 50
    28a8:	9f af       	std	Y+63, r25	; 0x3f
    28aa:	8e af       	std	Y+62, r24	; 0x3e
    28ac:	e2 97       	sbiw	r28, 0x32	; 50
    28ae:	e0 96       	adiw	r28, 0x30	; 48
    28b0:	ee ad       	ldd	r30, Y+62	; 0x3e
    28b2:	ff ad       	ldd	r31, Y+63	; 0x3f
    28b4:	e0 97       	sbiw	r28, 0x30	; 48
    28b6:	00 82       	st	Z, r0
    28b8:	e0 96       	adiw	r28, 0x30	; 48
    28ba:	8e ad       	ldd	r24, Y+62	; 0x3e
    28bc:	9f ad       	ldd	r25, Y+63	; 0x3f
    28be:	e0 97       	sbiw	r28, 0x30	; 48
    28c0:	01 96       	adiw	r24, 0x01	; 1
    28c2:	e0 96       	adiw	r28, 0x30	; 48
    28c4:	9f af       	std	Y+63, r25	; 0x3f
    28c6:	8e af       	std	Y+62, r24	; 0x3e
    28c8:	e0 97       	sbiw	r28, 0x30	; 48
    28ca:	e3 96       	adiw	r28, 0x33	; 51
    28cc:	9f ad       	ldd	r25, Y+63	; 0x3f
    28ce:	e3 97       	sbiw	r28, 0x33	; 51
    28d0:	91 50       	subi	r25, 0x01	; 1
    28d2:	e3 96       	adiw	r28, 0x33	; 51
    28d4:	9f af       	std	Y+63, r25	; 0x3f
    28d6:	e3 97       	sbiw	r28, 0x33	; 51
    28d8:	e3 96       	adiw	r28, 0x33	; 51
    28da:	ef ad       	ldd	r30, Y+63	; 0x3f
    28dc:	e3 97       	sbiw	r28, 0x33	; 51
    28de:	ee 23       	and	r30, r30
    28e0:	c1 f6       	brne	.-80     	; 0x2892 <HAL_LCD_sendCharacter+0x4e>
	u8LocalReturn = MCAL_Dio_WritePin(&LCD_RS_interface, PIN_HIGH);
    28e2:	ce 01       	movw	r24, r28
    28e4:	8c 59       	subi	r24, 0x9C	; 156
    28e6:	9f 4f       	sbci	r25, 0xFF	; 255
    28e8:	6f ef       	ldi	r22, 0xFF	; 255
    28ea:	0e 94 59 08 	call	0x10b2	; 0x10b2 <MCAL_Dio_WritePin>
    28ee:	fe 01       	movw	r30, r28
    28f0:	ed 59       	subi	r30, 0x9D	; 157
    28f2:	ff 4f       	sbci	r31, 0xFF	; 255
    28f4:	80 83       	st	Z, r24
		u8LocalReturn = MCAL_Dio_WritePin(&LCD_RW_interface, PIN_LOW);
	#else
		//Do nothing
	#endif

		S_Dio LCD_E_interface = {LCD_E_PORT , LCD_E_PIN , PIN_LOW};
    28f6:	ce 01       	movw	r24, r28
    28f8:	89 59       	subi	r24, 0x99	; 153
    28fa:	9f 4f       	sbci	r25, 0xFF	; 255
    28fc:	e5 96       	adiw	r28, 0x35	; 53
    28fe:	9f af       	std	Y+63, r25	; 0x3f
    2900:	8e af       	std	Y+62, r24	; 0x3e
    2902:	e5 97       	sbiw	r28, 0x35	; 53
    2904:	89 e8       	ldi	r24, 0x89	; 137
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	e7 96       	adiw	r28, 0x37	; 55
    290a:	9f af       	std	Y+63, r25	; 0x3f
    290c:	8e af       	std	Y+62, r24	; 0x3e
    290e:	e7 97       	sbiw	r28, 0x37	; 55
    2910:	93 e0       	ldi	r25, 0x03	; 3
    2912:	e8 96       	adiw	r28, 0x38	; 56
    2914:	9f af       	std	Y+63, r25	; 0x3f
    2916:	e8 97       	sbiw	r28, 0x38	; 56
    2918:	e7 96       	adiw	r28, 0x37	; 55
    291a:	ee ad       	ldd	r30, Y+62	; 0x3e
    291c:	ff ad       	ldd	r31, Y+63	; 0x3f
    291e:	e7 97       	sbiw	r28, 0x37	; 55
    2920:	00 80       	ld	r0, Z
    2922:	e7 96       	adiw	r28, 0x37	; 55
    2924:	8e ad       	ldd	r24, Y+62	; 0x3e
    2926:	9f ad       	ldd	r25, Y+63	; 0x3f
    2928:	e7 97       	sbiw	r28, 0x37	; 55
    292a:	01 96       	adiw	r24, 0x01	; 1
    292c:	e7 96       	adiw	r28, 0x37	; 55
    292e:	9f af       	std	Y+63, r25	; 0x3f
    2930:	8e af       	std	Y+62, r24	; 0x3e
    2932:	e7 97       	sbiw	r28, 0x37	; 55
    2934:	e5 96       	adiw	r28, 0x35	; 53
    2936:	ee ad       	ldd	r30, Y+62	; 0x3e
    2938:	ff ad       	ldd	r31, Y+63	; 0x3f
    293a:	e5 97       	sbiw	r28, 0x35	; 53
    293c:	00 82       	st	Z, r0
    293e:	e5 96       	adiw	r28, 0x35	; 53
    2940:	8e ad       	ldd	r24, Y+62	; 0x3e
    2942:	9f ad       	ldd	r25, Y+63	; 0x3f
    2944:	e5 97       	sbiw	r28, 0x35	; 53
    2946:	01 96       	adiw	r24, 0x01	; 1
    2948:	e5 96       	adiw	r28, 0x35	; 53
    294a:	9f af       	std	Y+63, r25	; 0x3f
    294c:	8e af       	std	Y+62, r24	; 0x3e
    294e:	e5 97       	sbiw	r28, 0x35	; 53
    2950:	e8 96       	adiw	r28, 0x38	; 56
    2952:	9f ad       	ldd	r25, Y+63	; 0x3f
    2954:	e8 97       	sbiw	r28, 0x38	; 56
    2956:	91 50       	subi	r25, 0x01	; 1
    2958:	e8 96       	adiw	r28, 0x38	; 56
    295a:	9f af       	std	Y+63, r25	; 0x3f
    295c:	e8 97       	sbiw	r28, 0x38	; 56
    295e:	e8 96       	adiw	r28, 0x38	; 56
    2960:	ef ad       	ldd	r30, Y+63	; 0x3f
    2962:	e8 97       	sbiw	r28, 0x38	; 56
    2964:	ee 23       	and	r30, r30
    2966:	c1 f6       	brne	.-80     	; 0x2918 <HAL_LCD_sendCharacter+0xd4>
    2968:	fe 01       	movw	r30, r28
    296a:	e1 5a       	subi	r30, 0xA1	; 161
    296c:	ff 4f       	sbci	r31, 0xFF	; 255
    296e:	80 e0       	ldi	r24, 0x00	; 0
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	a0 e8       	ldi	r26, 0x80	; 128
    2974:	bf e3       	ldi	r27, 0x3F	; 63
    2976:	80 83       	st	Z, r24
    2978:	91 83       	std	Z+1, r25	; 0x01
    297a:	a2 83       	std	Z+2, r26	; 0x02
    297c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    297e:	8e 01       	movw	r16, r28
    2980:	05 5a       	subi	r16, 0xA5	; 165
    2982:	1f 4f       	sbci	r17, 0xFF	; 255
    2984:	fe 01       	movw	r30, r28
    2986:	e1 5a       	subi	r30, 0xA1	; 161
    2988:	ff 4f       	sbci	r31, 0xFF	; 255
    298a:	60 81       	ld	r22, Z
    298c:	71 81       	ldd	r23, Z+1	; 0x01
    298e:	82 81       	ldd	r24, Z+2	; 0x02
    2990:	93 81       	ldd	r25, Z+3	; 0x03
    2992:	20 e0       	ldi	r18, 0x00	; 0
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	4a e7       	ldi	r20, 0x7A	; 122
    2998:	55 e4       	ldi	r21, 0x45	; 69
    299a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    299e:	dc 01       	movw	r26, r24
    29a0:	cb 01       	movw	r24, r22
    29a2:	f8 01       	movw	r30, r16
    29a4:	80 83       	st	Z, r24
    29a6:	91 83       	std	Z+1, r25	; 0x01
    29a8:	a2 83       	std	Z+2, r26	; 0x02
    29aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29ac:	fe 01       	movw	r30, r28
    29ae:	e5 5a       	subi	r30, 0xA5	; 165
    29b0:	ff 4f       	sbci	r31, 0xFF	; 255
    29b2:	60 81       	ld	r22, Z
    29b4:	71 81       	ldd	r23, Z+1	; 0x01
    29b6:	82 81       	ldd	r24, Z+2	; 0x02
    29b8:	93 81       	ldd	r25, Z+3	; 0x03
    29ba:	20 e0       	ldi	r18, 0x00	; 0
    29bc:	30 e0       	ldi	r19, 0x00	; 0
    29be:	40 e8       	ldi	r20, 0x80	; 128
    29c0:	5f e3       	ldi	r21, 0x3F	; 63
    29c2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    29c6:	88 23       	and	r24, r24
    29c8:	44 f4       	brge	.+16     	; 0x29da <HAL_LCD_sendCharacter+0x196>
		__ticks = 1;
    29ca:	fe 01       	movw	r30, r28
    29cc:	e7 5a       	subi	r30, 0xA7	; 167
    29ce:	ff 4f       	sbci	r31, 0xFF	; 255
    29d0:	81 e0       	ldi	r24, 0x01	; 1
    29d2:	90 e0       	ldi	r25, 0x00	; 0
    29d4:	91 83       	std	Z+1, r25	; 0x01
    29d6:	80 83       	st	Z, r24
    29d8:	64 c0       	rjmp	.+200    	; 0x2aa2 <HAL_LCD_sendCharacter+0x25e>
	else if (__tmp > 65535)
    29da:	fe 01       	movw	r30, r28
    29dc:	e5 5a       	subi	r30, 0xA5	; 165
    29de:	ff 4f       	sbci	r31, 0xFF	; 255
    29e0:	60 81       	ld	r22, Z
    29e2:	71 81       	ldd	r23, Z+1	; 0x01
    29e4:	82 81       	ldd	r24, Z+2	; 0x02
    29e6:	93 81       	ldd	r25, Z+3	; 0x03
    29e8:	20 e0       	ldi	r18, 0x00	; 0
    29ea:	3f ef       	ldi	r19, 0xFF	; 255
    29ec:	4f e7       	ldi	r20, 0x7F	; 127
    29ee:	57 e4       	ldi	r21, 0x47	; 71
    29f0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    29f4:	18 16       	cp	r1, r24
    29f6:	0c f0       	brlt	.+2      	; 0x29fa <HAL_LCD_sendCharacter+0x1b6>
    29f8:	43 c0       	rjmp	.+134    	; 0x2a80 <HAL_LCD_sendCharacter+0x23c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29fa:	fe 01       	movw	r30, r28
    29fc:	e1 5a       	subi	r30, 0xA1	; 161
    29fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2a00:	60 81       	ld	r22, Z
    2a02:	71 81       	ldd	r23, Z+1	; 0x01
    2a04:	82 81       	ldd	r24, Z+2	; 0x02
    2a06:	93 81       	ldd	r25, Z+3	; 0x03
    2a08:	20 e0       	ldi	r18, 0x00	; 0
    2a0a:	30 e0       	ldi	r19, 0x00	; 0
    2a0c:	40 e2       	ldi	r20, 0x20	; 32
    2a0e:	51 e4       	ldi	r21, 0x41	; 65
    2a10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a14:	dc 01       	movw	r26, r24
    2a16:	cb 01       	movw	r24, r22
    2a18:	8e 01       	movw	r16, r28
    2a1a:	07 5a       	subi	r16, 0xA7	; 167
    2a1c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a1e:	bc 01       	movw	r22, r24
    2a20:	cd 01       	movw	r24, r26
    2a22:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a26:	dc 01       	movw	r26, r24
    2a28:	cb 01       	movw	r24, r22
    2a2a:	f8 01       	movw	r30, r16
    2a2c:	91 83       	std	Z+1, r25	; 0x01
    2a2e:	80 83       	st	Z, r24
    2a30:	1f c0       	rjmp	.+62     	; 0x2a70 <HAL_LCD_sendCharacter+0x22c>
    2a32:	fe 01       	movw	r30, r28
    2a34:	e9 5a       	subi	r30, 0xA9	; 169
    2a36:	ff 4f       	sbci	r31, 0xFF	; 255
    2a38:	80 e9       	ldi	r24, 0x90	; 144
    2a3a:	91 e0       	ldi	r25, 0x01	; 1
    2a3c:	91 83       	std	Z+1, r25	; 0x01
    2a3e:	80 83       	st	Z, r24
    2a40:	fe 01       	movw	r30, r28
    2a42:	e9 5a       	subi	r30, 0xA9	; 169
    2a44:	ff 4f       	sbci	r31, 0xFF	; 255
    2a46:	80 81       	ld	r24, Z
    2a48:	91 81       	ldd	r25, Z+1	; 0x01
    2a4a:	01 97       	sbiw	r24, 0x01	; 1
    2a4c:	f1 f7       	brne	.-4      	; 0x2a4a <HAL_LCD_sendCharacter+0x206>
    2a4e:	fe 01       	movw	r30, r28
    2a50:	e9 5a       	subi	r30, 0xA9	; 169
    2a52:	ff 4f       	sbci	r31, 0xFF	; 255
    2a54:	91 83       	std	Z+1, r25	; 0x01
    2a56:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a58:	de 01       	movw	r26, r28
    2a5a:	a7 5a       	subi	r26, 0xA7	; 167
    2a5c:	bf 4f       	sbci	r27, 0xFF	; 255
    2a5e:	fe 01       	movw	r30, r28
    2a60:	e7 5a       	subi	r30, 0xA7	; 167
    2a62:	ff 4f       	sbci	r31, 0xFF	; 255
    2a64:	80 81       	ld	r24, Z
    2a66:	91 81       	ldd	r25, Z+1	; 0x01
    2a68:	01 97       	sbiw	r24, 0x01	; 1
    2a6a:	11 96       	adiw	r26, 0x01	; 1
    2a6c:	9c 93       	st	X, r25
    2a6e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a70:	fe 01       	movw	r30, r28
    2a72:	e7 5a       	subi	r30, 0xA7	; 167
    2a74:	ff 4f       	sbci	r31, 0xFF	; 255
    2a76:	80 81       	ld	r24, Z
    2a78:	91 81       	ldd	r25, Z+1	; 0x01
    2a7a:	00 97       	sbiw	r24, 0x00	; 0
    2a7c:	d1 f6       	brne	.-76     	; 0x2a32 <HAL_LCD_sendCharacter+0x1ee>
    2a7e:	28 c0       	rjmp	.+80     	; 0x2ad0 <HAL_LCD_sendCharacter+0x28c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a80:	8e 01       	movw	r16, r28
    2a82:	07 5a       	subi	r16, 0xA7	; 167
    2a84:	1f 4f       	sbci	r17, 0xFF	; 255
    2a86:	fe 01       	movw	r30, r28
    2a88:	e5 5a       	subi	r30, 0xA5	; 165
    2a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8c:	60 81       	ld	r22, Z
    2a8e:	71 81       	ldd	r23, Z+1	; 0x01
    2a90:	82 81       	ldd	r24, Z+2	; 0x02
    2a92:	93 81       	ldd	r25, Z+3	; 0x03
    2a94:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a98:	dc 01       	movw	r26, r24
    2a9a:	cb 01       	movw	r24, r22
    2a9c:	f8 01       	movw	r30, r16
    2a9e:	91 83       	std	Z+1, r25	; 0x01
    2aa0:	80 83       	st	Z, r24
    2aa2:	de 01       	movw	r26, r28
    2aa4:	ab 5a       	subi	r26, 0xAB	; 171
    2aa6:	bf 4f       	sbci	r27, 0xFF	; 255
    2aa8:	fe 01       	movw	r30, r28
    2aaa:	e7 5a       	subi	r30, 0xA7	; 167
    2aac:	ff 4f       	sbci	r31, 0xFF	; 255
    2aae:	80 81       	ld	r24, Z
    2ab0:	91 81       	ldd	r25, Z+1	; 0x01
    2ab2:	11 96       	adiw	r26, 0x01	; 1
    2ab4:	9c 93       	st	X, r25
    2ab6:	8e 93       	st	-X, r24
    2ab8:	fe 01       	movw	r30, r28
    2aba:	eb 5a       	subi	r30, 0xAB	; 171
    2abc:	ff 4f       	sbci	r31, 0xFF	; 255
    2abe:	80 81       	ld	r24, Z
    2ac0:	91 81       	ldd	r25, Z+1	; 0x01
    2ac2:	01 97       	sbiw	r24, 0x01	; 1
    2ac4:	f1 f7       	brne	.-4      	; 0x2ac2 <HAL_LCD_sendCharacter+0x27e>
    2ac6:	fe 01       	movw	r30, r28
    2ac8:	eb 5a       	subi	r30, 0xAB	; 171
    2aca:	ff 4f       	sbci	r31, 0xFF	; 255
    2acc:	91 83       	std	Z+1, r25	; 0x01
    2ace:	80 83       	st	Z, r24
			_delay_ms(1);
			u8LocalReturn = MCAL_Dio_WritePin(&LCD_E_interface, PIN_LOW);
			_delay_ms(1);
		#elif (LCD_DATA_BITS_MODE == 4)
		#ifdef LOWER_PORT_PINS
			S_Dio LCD_DATA_interface = {LCD_DATA_PORT, (LCD_D4_PIN | LCD_D5_PIN | LCD_D6_PIN |LCD_D7_PIN), OUTPUT};
    2ad0:	ce 01       	movw	r24, r28
    2ad2:	86 59       	subi	r24, 0x96	; 150
    2ad4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ad6:	ea 96       	adiw	r28, 0x3a	; 58
    2ad8:	9f af       	std	Y+63, r25	; 0x3f
    2ada:	8e af       	std	Y+62, r24	; 0x3e
    2adc:	ea 97       	sbiw	r28, 0x3a	; 58
    2ade:	86 e8       	ldi	r24, 0x86	; 134
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	ec 96       	adiw	r28, 0x3c	; 60
    2ae4:	9f af       	std	Y+63, r25	; 0x3f
    2ae6:	8e af       	std	Y+62, r24	; 0x3e
    2ae8:	ec 97       	sbiw	r28, 0x3c	; 60
    2aea:	93 e0       	ldi	r25, 0x03	; 3
    2aec:	ed 96       	adiw	r28, 0x3d	; 61
    2aee:	9f af       	std	Y+63, r25	; 0x3f
    2af0:	ed 97       	sbiw	r28, 0x3d	; 61
    2af2:	ec 96       	adiw	r28, 0x3c	; 60
    2af4:	ee ad       	ldd	r30, Y+62	; 0x3e
    2af6:	ff ad       	ldd	r31, Y+63	; 0x3f
    2af8:	ec 97       	sbiw	r28, 0x3c	; 60
    2afa:	00 80       	ld	r0, Z
    2afc:	ec 96       	adiw	r28, 0x3c	; 60
    2afe:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b00:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b02:	ec 97       	sbiw	r28, 0x3c	; 60
    2b04:	01 96       	adiw	r24, 0x01	; 1
    2b06:	ec 96       	adiw	r28, 0x3c	; 60
    2b08:	9f af       	std	Y+63, r25	; 0x3f
    2b0a:	8e af       	std	Y+62, r24	; 0x3e
    2b0c:	ec 97       	sbiw	r28, 0x3c	; 60
    2b0e:	ea 96       	adiw	r28, 0x3a	; 58
    2b10:	ee ad       	ldd	r30, Y+62	; 0x3e
    2b12:	ff ad       	ldd	r31, Y+63	; 0x3f
    2b14:	ea 97       	sbiw	r28, 0x3a	; 58
    2b16:	00 82       	st	Z, r0
    2b18:	ea 96       	adiw	r28, 0x3a	; 58
    2b1a:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b1c:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b1e:	ea 97       	sbiw	r28, 0x3a	; 58
    2b20:	01 96       	adiw	r24, 0x01	; 1
    2b22:	ea 96       	adiw	r28, 0x3a	; 58
    2b24:	9f af       	std	Y+63, r25	; 0x3f
    2b26:	8e af       	std	Y+62, r24	; 0x3e
    2b28:	ea 97       	sbiw	r28, 0x3a	; 58
    2b2a:	ed 96       	adiw	r28, 0x3d	; 61
    2b2c:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b2e:	ed 97       	sbiw	r28, 0x3d	; 61
    2b30:	91 50       	subi	r25, 0x01	; 1
    2b32:	ed 96       	adiw	r28, 0x3d	; 61
    2b34:	9f af       	std	Y+63, r25	; 0x3f
    2b36:	ed 97       	sbiw	r28, 0x3d	; 61
    2b38:	ed 96       	adiw	r28, 0x3d	; 61
    2b3a:	ef ad       	ldd	r30, Y+63	; 0x3f
    2b3c:	ed 97       	sbiw	r28, 0x3d	; 61
    2b3e:	ee 23       	and	r30, r30
    2b40:	c1 f6       	brne	.-80     	; 0x2af2 <HAL_LCD_sendCharacter+0x2ae>
			MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D4_PIN, GET_BIT(data, 4));
    2b42:	fe 01       	movw	r30, r28
    2b44:	e3 59       	subi	r30, 0x93	; 147
    2b46:	ff 4f       	sbci	r31, 0xFF	; 255
    2b48:	80 81       	ld	r24, Z
    2b4a:	85 95       	asr	r24
    2b4c:	85 95       	asr	r24
    2b4e:	85 95       	asr	r24
    2b50:	85 95       	asr	r24
    2b52:	28 2f       	mov	r18, r24
    2b54:	21 70       	andi	r18, 0x01	; 1
    2b56:	ce 01       	movw	r24, r28
    2b58:	86 59       	subi	r24, 0x96	; 150
    2b5a:	9f 4f       	sbci	r25, 0xFF	; 255
    2b5c:	61 e0       	ldi	r22, 0x01	; 1
    2b5e:	42 2f       	mov	r20, r18
    2b60:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <MCAL_Dio_WriteSinglePin>
			MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D5_PIN, GET_BIT(data, 5));
    2b64:	fe 01       	movw	r30, r28
    2b66:	e3 59       	subi	r30, 0x93	; 147
    2b68:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6a:	80 81       	ld	r24, Z
    2b6c:	85 95       	asr	r24
    2b6e:	85 95       	asr	r24
    2b70:	85 95       	asr	r24
    2b72:	85 95       	asr	r24
    2b74:	85 95       	asr	r24
    2b76:	28 2f       	mov	r18, r24
    2b78:	21 70       	andi	r18, 0x01	; 1
    2b7a:	ce 01       	movw	r24, r28
    2b7c:	86 59       	subi	r24, 0x96	; 150
    2b7e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b80:	62 e0       	ldi	r22, 0x02	; 2
    2b82:	42 2f       	mov	r20, r18
    2b84:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <MCAL_Dio_WriteSinglePin>
			MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D6_PIN, GET_BIT(data, 6));
    2b88:	fe 01       	movw	r30, r28
    2b8a:	e3 59       	subi	r30, 0x93	; 147
    2b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8e:	80 81       	ld	r24, Z
    2b90:	86 fb       	bst	r24, 6
    2b92:	88 0f       	add	r24, r24
    2b94:	88 0b       	sbc	r24, r24
    2b96:	80 f9       	bld	r24, 0
    2b98:	28 2f       	mov	r18, r24
    2b9a:	21 70       	andi	r18, 0x01	; 1
    2b9c:	ce 01       	movw	r24, r28
    2b9e:	86 59       	subi	r24, 0x96	; 150
    2ba0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ba2:	64 e0       	ldi	r22, 0x04	; 4
    2ba4:	42 2f       	mov	r20, r18
    2ba6:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <MCAL_Dio_WriteSinglePin>
			MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D7_PIN, GET_BIT(data, 7));
    2baa:	fe 01       	movw	r30, r28
    2bac:	e3 59       	subi	r30, 0x93	; 147
    2bae:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb0:	80 81       	ld	r24, Z
    2bb2:	28 2f       	mov	r18, r24
    2bb4:	22 1f       	adc	r18, r18
    2bb6:	22 27       	eor	r18, r18
    2bb8:	22 1f       	adc	r18, r18
    2bba:	ce 01       	movw	r24, r28
    2bbc:	86 59       	subi	r24, 0x96	; 150
    2bbe:	9f 4f       	sbci	r25, 0xFF	; 255
    2bc0:	60 e1       	ldi	r22, 0x10	; 16
    2bc2:	42 2f       	mov	r20, r18
    2bc4:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <MCAL_Dio_WriteSinglePin>
    2bc8:	fe 01       	movw	r30, r28
    2bca:	ef 5a       	subi	r30, 0xAF	; 175
    2bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bce:	80 e0       	ldi	r24, 0x00	; 0
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	a0 e8       	ldi	r26, 0x80	; 128
    2bd4:	bf e3       	ldi	r27, 0x3F	; 63
    2bd6:	80 83       	st	Z, r24
    2bd8:	91 83       	std	Z+1, r25	; 0x01
    2bda:	a2 83       	std	Z+2, r26	; 0x02
    2bdc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bde:	8e 01       	movw	r16, r28
    2be0:	03 5b       	subi	r16, 0xB3	; 179
    2be2:	1f 4f       	sbci	r17, 0xFF	; 255
    2be4:	fe 01       	movw	r30, r28
    2be6:	ef 5a       	subi	r30, 0xAF	; 175
    2be8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bea:	60 81       	ld	r22, Z
    2bec:	71 81       	ldd	r23, Z+1	; 0x01
    2bee:	82 81       	ldd	r24, Z+2	; 0x02
    2bf0:	93 81       	ldd	r25, Z+3	; 0x03
    2bf2:	20 e0       	ldi	r18, 0x00	; 0
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	4a e7       	ldi	r20, 0x7A	; 122
    2bf8:	55 e4       	ldi	r21, 0x45	; 69
    2bfa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bfe:	dc 01       	movw	r26, r24
    2c00:	cb 01       	movw	r24, r22
    2c02:	f8 01       	movw	r30, r16
    2c04:	80 83       	st	Z, r24
    2c06:	91 83       	std	Z+1, r25	; 0x01
    2c08:	a2 83       	std	Z+2, r26	; 0x02
    2c0a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c0c:	fe 01       	movw	r30, r28
    2c0e:	e3 5b       	subi	r30, 0xB3	; 179
    2c10:	ff 4f       	sbci	r31, 0xFF	; 255
    2c12:	60 81       	ld	r22, Z
    2c14:	71 81       	ldd	r23, Z+1	; 0x01
    2c16:	82 81       	ldd	r24, Z+2	; 0x02
    2c18:	93 81       	ldd	r25, Z+3	; 0x03
    2c1a:	20 e0       	ldi	r18, 0x00	; 0
    2c1c:	30 e0       	ldi	r19, 0x00	; 0
    2c1e:	40 e8       	ldi	r20, 0x80	; 128
    2c20:	5f e3       	ldi	r21, 0x3F	; 63
    2c22:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2c26:	88 23       	and	r24, r24
    2c28:	44 f4       	brge	.+16     	; 0x2c3a <HAL_LCD_sendCharacter+0x3f6>
		__ticks = 1;
    2c2a:	fe 01       	movw	r30, r28
    2c2c:	e5 5b       	subi	r30, 0xB5	; 181
    2c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c30:	81 e0       	ldi	r24, 0x01	; 1
    2c32:	90 e0       	ldi	r25, 0x00	; 0
    2c34:	91 83       	std	Z+1, r25	; 0x01
    2c36:	80 83       	st	Z, r24
    2c38:	64 c0       	rjmp	.+200    	; 0x2d02 <HAL_LCD_sendCharacter+0x4be>
	else if (__tmp > 65535)
    2c3a:	fe 01       	movw	r30, r28
    2c3c:	e3 5b       	subi	r30, 0xB3	; 179
    2c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c40:	60 81       	ld	r22, Z
    2c42:	71 81       	ldd	r23, Z+1	; 0x01
    2c44:	82 81       	ldd	r24, Z+2	; 0x02
    2c46:	93 81       	ldd	r25, Z+3	; 0x03
    2c48:	20 e0       	ldi	r18, 0x00	; 0
    2c4a:	3f ef       	ldi	r19, 0xFF	; 255
    2c4c:	4f e7       	ldi	r20, 0x7F	; 127
    2c4e:	57 e4       	ldi	r21, 0x47	; 71
    2c50:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2c54:	18 16       	cp	r1, r24
    2c56:	0c f0       	brlt	.+2      	; 0x2c5a <HAL_LCD_sendCharacter+0x416>
    2c58:	43 c0       	rjmp	.+134    	; 0x2ce0 <HAL_LCD_sendCharacter+0x49c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c5a:	fe 01       	movw	r30, r28
    2c5c:	ef 5a       	subi	r30, 0xAF	; 175
    2c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c60:	60 81       	ld	r22, Z
    2c62:	71 81       	ldd	r23, Z+1	; 0x01
    2c64:	82 81       	ldd	r24, Z+2	; 0x02
    2c66:	93 81       	ldd	r25, Z+3	; 0x03
    2c68:	20 e0       	ldi	r18, 0x00	; 0
    2c6a:	30 e0       	ldi	r19, 0x00	; 0
    2c6c:	40 e2       	ldi	r20, 0x20	; 32
    2c6e:	51 e4       	ldi	r21, 0x41	; 65
    2c70:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c74:	dc 01       	movw	r26, r24
    2c76:	cb 01       	movw	r24, r22
    2c78:	8e 01       	movw	r16, r28
    2c7a:	05 5b       	subi	r16, 0xB5	; 181
    2c7c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c7e:	bc 01       	movw	r22, r24
    2c80:	cd 01       	movw	r24, r26
    2c82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c86:	dc 01       	movw	r26, r24
    2c88:	cb 01       	movw	r24, r22
    2c8a:	f8 01       	movw	r30, r16
    2c8c:	91 83       	std	Z+1, r25	; 0x01
    2c8e:	80 83       	st	Z, r24
    2c90:	1f c0       	rjmp	.+62     	; 0x2cd0 <HAL_LCD_sendCharacter+0x48c>
    2c92:	fe 01       	movw	r30, r28
    2c94:	e7 5b       	subi	r30, 0xB7	; 183
    2c96:	ff 4f       	sbci	r31, 0xFF	; 255
    2c98:	80 e9       	ldi	r24, 0x90	; 144
    2c9a:	91 e0       	ldi	r25, 0x01	; 1
    2c9c:	91 83       	std	Z+1, r25	; 0x01
    2c9e:	80 83       	st	Z, r24
    2ca0:	fe 01       	movw	r30, r28
    2ca2:	e7 5b       	subi	r30, 0xB7	; 183
    2ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca6:	80 81       	ld	r24, Z
    2ca8:	91 81       	ldd	r25, Z+1	; 0x01
    2caa:	01 97       	sbiw	r24, 0x01	; 1
    2cac:	f1 f7       	brne	.-4      	; 0x2caa <HAL_LCD_sendCharacter+0x466>
    2cae:	fe 01       	movw	r30, r28
    2cb0:	e7 5b       	subi	r30, 0xB7	; 183
    2cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb4:	91 83       	std	Z+1, r25	; 0x01
    2cb6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cb8:	de 01       	movw	r26, r28
    2cba:	a5 5b       	subi	r26, 0xB5	; 181
    2cbc:	bf 4f       	sbci	r27, 0xFF	; 255
    2cbe:	fe 01       	movw	r30, r28
    2cc0:	e5 5b       	subi	r30, 0xB5	; 181
    2cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc4:	80 81       	ld	r24, Z
    2cc6:	91 81       	ldd	r25, Z+1	; 0x01
    2cc8:	01 97       	sbiw	r24, 0x01	; 1
    2cca:	11 96       	adiw	r26, 0x01	; 1
    2ccc:	9c 93       	st	X, r25
    2cce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cd0:	fe 01       	movw	r30, r28
    2cd2:	e5 5b       	subi	r30, 0xB5	; 181
    2cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd6:	80 81       	ld	r24, Z
    2cd8:	91 81       	ldd	r25, Z+1	; 0x01
    2cda:	00 97       	sbiw	r24, 0x00	; 0
    2cdc:	d1 f6       	brne	.-76     	; 0x2c92 <HAL_LCD_sendCharacter+0x44e>
    2cde:	27 c0       	rjmp	.+78     	; 0x2d2e <HAL_LCD_sendCharacter+0x4ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ce0:	8e 01       	movw	r16, r28
    2ce2:	05 5b       	subi	r16, 0xB5	; 181
    2ce4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ce6:	fe 01       	movw	r30, r28
    2ce8:	e3 5b       	subi	r30, 0xB3	; 179
    2cea:	ff 4f       	sbci	r31, 0xFF	; 255
    2cec:	60 81       	ld	r22, Z
    2cee:	71 81       	ldd	r23, Z+1	; 0x01
    2cf0:	82 81       	ldd	r24, Z+2	; 0x02
    2cf2:	93 81       	ldd	r25, Z+3	; 0x03
    2cf4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cf8:	dc 01       	movw	r26, r24
    2cfa:	cb 01       	movw	r24, r22
    2cfc:	f8 01       	movw	r30, r16
    2cfe:	91 83       	std	Z+1, r25	; 0x01
    2d00:	80 83       	st	Z, r24
    2d02:	de 01       	movw	r26, r28
    2d04:	a9 5b       	subi	r26, 0xB9	; 185
    2d06:	bf 4f       	sbci	r27, 0xFF	; 255
    2d08:	fe 01       	movw	r30, r28
    2d0a:	e5 5b       	subi	r30, 0xB5	; 181
    2d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0e:	80 81       	ld	r24, Z
    2d10:	91 81       	ldd	r25, Z+1	; 0x01
    2d12:	8d 93       	st	X+, r24
    2d14:	9c 93       	st	X, r25
    2d16:	fe 01       	movw	r30, r28
    2d18:	e9 5b       	subi	r30, 0xB9	; 185
    2d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1c:	80 81       	ld	r24, Z
    2d1e:	91 81       	ldd	r25, Z+1	; 0x01
    2d20:	01 97       	sbiw	r24, 0x01	; 1
    2d22:	f1 f7       	brne	.-4      	; 0x2d20 <HAL_LCD_sendCharacter+0x4dc>
    2d24:	fe 01       	movw	r30, r28
    2d26:	e9 5b       	subi	r30, 0xB9	; 185
    2d28:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2a:	91 83       	std	Z+1, r25	; 0x01
    2d2c:	80 83       	st	Z, r24
			MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D0_PIN, GET_BIT(data, 4));
			MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D1_PIN, GET_BIT(data, 5));
			MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D2_PIN, GET_BIT(data, 6));
			MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D3_PIN, GET_BIT(data, 7));
		#endif
		u8LocalReturn = MCAL_Dio_WritePin(&LCD_E_interface, PIN_HIGH);
    2d2e:	ce 01       	movw	r24, r28
    2d30:	89 59       	subi	r24, 0x99	; 153
    2d32:	9f 4f       	sbci	r25, 0xFF	; 255
    2d34:	6f ef       	ldi	r22, 0xFF	; 255
    2d36:	0e 94 59 08 	call	0x10b2	; 0x10b2 <MCAL_Dio_WritePin>
    2d3a:	fe 01       	movw	r30, r28
    2d3c:	ed 59       	subi	r30, 0x9D	; 157
    2d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d40:	80 83       	st	Z, r24
    2d42:	fe 01       	movw	r30, r28
    2d44:	ed 5b       	subi	r30, 0xBD	; 189
    2d46:	ff 4f       	sbci	r31, 0xFF	; 255
    2d48:	80 e0       	ldi	r24, 0x00	; 0
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	a0 e8       	ldi	r26, 0x80	; 128
    2d4e:	bf e3       	ldi	r27, 0x3F	; 63
    2d50:	80 83       	st	Z, r24
    2d52:	91 83       	std	Z+1, r25	; 0x01
    2d54:	a2 83       	std	Z+2, r26	; 0x02
    2d56:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d58:	8e 01       	movw	r16, r28
    2d5a:	01 5c       	subi	r16, 0xC1	; 193
    2d5c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d5e:	fe 01       	movw	r30, r28
    2d60:	ed 5b       	subi	r30, 0xBD	; 189
    2d62:	ff 4f       	sbci	r31, 0xFF	; 255
    2d64:	60 81       	ld	r22, Z
    2d66:	71 81       	ldd	r23, Z+1	; 0x01
    2d68:	82 81       	ldd	r24, Z+2	; 0x02
    2d6a:	93 81       	ldd	r25, Z+3	; 0x03
    2d6c:	20 e0       	ldi	r18, 0x00	; 0
    2d6e:	30 e0       	ldi	r19, 0x00	; 0
    2d70:	4a e7       	ldi	r20, 0x7A	; 122
    2d72:	55 e4       	ldi	r21, 0x45	; 69
    2d74:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d78:	dc 01       	movw	r26, r24
    2d7a:	cb 01       	movw	r24, r22
    2d7c:	f8 01       	movw	r30, r16
    2d7e:	80 83       	st	Z, r24
    2d80:	91 83       	std	Z+1, r25	; 0x01
    2d82:	a2 83       	std	Z+2, r26	; 0x02
    2d84:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d86:	fe 01       	movw	r30, r28
    2d88:	ff 96       	adiw	r30, 0x3f	; 63
    2d8a:	60 81       	ld	r22, Z
    2d8c:	71 81       	ldd	r23, Z+1	; 0x01
    2d8e:	82 81       	ldd	r24, Z+2	; 0x02
    2d90:	93 81       	ldd	r25, Z+3	; 0x03
    2d92:	20 e0       	ldi	r18, 0x00	; 0
    2d94:	30 e0       	ldi	r19, 0x00	; 0
    2d96:	40 e8       	ldi	r20, 0x80	; 128
    2d98:	5f e3       	ldi	r21, 0x3F	; 63
    2d9a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2d9e:	88 23       	and	r24, r24
    2da0:	2c f4       	brge	.+10     	; 0x2dac <HAL_LCD_sendCharacter+0x568>
		__ticks = 1;
    2da2:	81 e0       	ldi	r24, 0x01	; 1
    2da4:	90 e0       	ldi	r25, 0x00	; 0
    2da6:	9e af       	std	Y+62, r25	; 0x3e
    2da8:	8d af       	std	Y+61, r24	; 0x3d
    2daa:	46 c0       	rjmp	.+140    	; 0x2e38 <HAL_LCD_sendCharacter+0x5f4>
	else if (__tmp > 65535)
    2dac:	fe 01       	movw	r30, r28
    2dae:	ff 96       	adiw	r30, 0x3f	; 63
    2db0:	60 81       	ld	r22, Z
    2db2:	71 81       	ldd	r23, Z+1	; 0x01
    2db4:	82 81       	ldd	r24, Z+2	; 0x02
    2db6:	93 81       	ldd	r25, Z+3	; 0x03
    2db8:	20 e0       	ldi	r18, 0x00	; 0
    2dba:	3f ef       	ldi	r19, 0xFF	; 255
    2dbc:	4f e7       	ldi	r20, 0x7F	; 127
    2dbe:	57 e4       	ldi	r21, 0x47	; 71
    2dc0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2dc4:	18 16       	cp	r1, r24
    2dc6:	64 f5       	brge	.+88     	; 0x2e20 <HAL_LCD_sendCharacter+0x5dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dc8:	fe 01       	movw	r30, r28
    2dca:	ed 5b       	subi	r30, 0xBD	; 189
    2dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dce:	60 81       	ld	r22, Z
    2dd0:	71 81       	ldd	r23, Z+1	; 0x01
    2dd2:	82 81       	ldd	r24, Z+2	; 0x02
    2dd4:	93 81       	ldd	r25, Z+3	; 0x03
    2dd6:	20 e0       	ldi	r18, 0x00	; 0
    2dd8:	30 e0       	ldi	r19, 0x00	; 0
    2dda:	40 e2       	ldi	r20, 0x20	; 32
    2ddc:	51 e4       	ldi	r21, 0x41	; 65
    2dde:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2de2:	dc 01       	movw	r26, r24
    2de4:	cb 01       	movw	r24, r22
    2de6:	bc 01       	movw	r22, r24
    2de8:	cd 01       	movw	r24, r26
    2dea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2dee:	dc 01       	movw	r26, r24
    2df0:	cb 01       	movw	r24, r22
    2df2:	9e af       	std	Y+62, r25	; 0x3e
    2df4:	8d af       	std	Y+61, r24	; 0x3d
    2df6:	0f c0       	rjmp	.+30     	; 0x2e16 <HAL_LCD_sendCharacter+0x5d2>
    2df8:	80 e9       	ldi	r24, 0x90	; 144
    2dfa:	91 e0       	ldi	r25, 0x01	; 1
    2dfc:	9c af       	std	Y+60, r25	; 0x3c
    2dfe:	8b af       	std	Y+59, r24	; 0x3b
    2e00:	8b ad       	ldd	r24, Y+59	; 0x3b
    2e02:	9c ad       	ldd	r25, Y+60	; 0x3c
    2e04:	01 97       	sbiw	r24, 0x01	; 1
    2e06:	f1 f7       	brne	.-4      	; 0x2e04 <HAL_LCD_sendCharacter+0x5c0>
    2e08:	9c af       	std	Y+60, r25	; 0x3c
    2e0a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e0c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e0e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e10:	01 97       	sbiw	r24, 0x01	; 1
    2e12:	9e af       	std	Y+62, r25	; 0x3e
    2e14:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e16:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e18:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e1a:	00 97       	sbiw	r24, 0x00	; 0
    2e1c:	69 f7       	brne	.-38     	; 0x2df8 <HAL_LCD_sendCharacter+0x5b4>
    2e1e:	16 c0       	rjmp	.+44     	; 0x2e4c <HAL_LCD_sendCharacter+0x608>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e20:	fe 01       	movw	r30, r28
    2e22:	ff 96       	adiw	r30, 0x3f	; 63
    2e24:	60 81       	ld	r22, Z
    2e26:	71 81       	ldd	r23, Z+1	; 0x01
    2e28:	82 81       	ldd	r24, Z+2	; 0x02
    2e2a:	93 81       	ldd	r25, Z+3	; 0x03
    2e2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e30:	dc 01       	movw	r26, r24
    2e32:	cb 01       	movw	r24, r22
    2e34:	9e af       	std	Y+62, r25	; 0x3e
    2e36:	8d af       	std	Y+61, r24	; 0x3d
    2e38:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e3a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e3c:	9a af       	std	Y+58, r25	; 0x3a
    2e3e:	89 af       	std	Y+57, r24	; 0x39
    2e40:	89 ad       	ldd	r24, Y+57	; 0x39
    2e42:	9a ad       	ldd	r25, Y+58	; 0x3a
    2e44:	01 97       	sbiw	r24, 0x01	; 1
    2e46:	f1 f7       	brne	.-4      	; 0x2e44 <HAL_LCD_sendCharacter+0x600>
    2e48:	9a af       	std	Y+58, r25	; 0x3a
    2e4a:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1);
		u8LocalReturn = MCAL_Dio_WritePin(&LCD_E_interface, PIN_LOW);
    2e4c:	ce 01       	movw	r24, r28
    2e4e:	89 59       	subi	r24, 0x99	; 153
    2e50:	9f 4f       	sbci	r25, 0xFF	; 255
    2e52:	60 e0       	ldi	r22, 0x00	; 0
    2e54:	0e 94 59 08 	call	0x10b2	; 0x10b2 <MCAL_Dio_WritePin>
    2e58:	fe 01       	movw	r30, r28
    2e5a:	ed 59       	subi	r30, 0x9D	; 157
    2e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5e:	80 83       	st	Z, r24
    2e60:	80 e0       	ldi	r24, 0x00	; 0
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	a0 e8       	ldi	r26, 0x80	; 128
    2e66:	bf e3       	ldi	r27, 0x3F	; 63
    2e68:	8d ab       	std	Y+53, r24	; 0x35
    2e6a:	9e ab       	std	Y+54, r25	; 0x36
    2e6c:	af ab       	std	Y+55, r26	; 0x37
    2e6e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e70:	6d a9       	ldd	r22, Y+53	; 0x35
    2e72:	7e a9       	ldd	r23, Y+54	; 0x36
    2e74:	8f a9       	ldd	r24, Y+55	; 0x37
    2e76:	98 ad       	ldd	r25, Y+56	; 0x38
    2e78:	20 e0       	ldi	r18, 0x00	; 0
    2e7a:	30 e0       	ldi	r19, 0x00	; 0
    2e7c:	4a e7       	ldi	r20, 0x7A	; 122
    2e7e:	55 e4       	ldi	r21, 0x45	; 69
    2e80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e84:	dc 01       	movw	r26, r24
    2e86:	cb 01       	movw	r24, r22
    2e88:	89 ab       	std	Y+49, r24	; 0x31
    2e8a:	9a ab       	std	Y+50, r25	; 0x32
    2e8c:	ab ab       	std	Y+51, r26	; 0x33
    2e8e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2e90:	69 a9       	ldd	r22, Y+49	; 0x31
    2e92:	7a a9       	ldd	r23, Y+50	; 0x32
    2e94:	8b a9       	ldd	r24, Y+51	; 0x33
    2e96:	9c a9       	ldd	r25, Y+52	; 0x34
    2e98:	20 e0       	ldi	r18, 0x00	; 0
    2e9a:	30 e0       	ldi	r19, 0x00	; 0
    2e9c:	40 e8       	ldi	r20, 0x80	; 128
    2e9e:	5f e3       	ldi	r21, 0x3F	; 63
    2ea0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2ea4:	88 23       	and	r24, r24
    2ea6:	2c f4       	brge	.+10     	; 0x2eb2 <HAL_LCD_sendCharacter+0x66e>
		__ticks = 1;
    2ea8:	81 e0       	ldi	r24, 0x01	; 1
    2eaa:	90 e0       	ldi	r25, 0x00	; 0
    2eac:	98 ab       	std	Y+48, r25	; 0x30
    2eae:	8f a7       	std	Y+47, r24	; 0x2f
    2eb0:	3f c0       	rjmp	.+126    	; 0x2f30 <HAL_LCD_sendCharacter+0x6ec>
	else if (__tmp > 65535)
    2eb2:	69 a9       	ldd	r22, Y+49	; 0x31
    2eb4:	7a a9       	ldd	r23, Y+50	; 0x32
    2eb6:	8b a9       	ldd	r24, Y+51	; 0x33
    2eb8:	9c a9       	ldd	r25, Y+52	; 0x34
    2eba:	20 e0       	ldi	r18, 0x00	; 0
    2ebc:	3f ef       	ldi	r19, 0xFF	; 255
    2ebe:	4f e7       	ldi	r20, 0x7F	; 127
    2ec0:	57 e4       	ldi	r21, 0x47	; 71
    2ec2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2ec6:	18 16       	cp	r1, r24
    2ec8:	4c f5       	brge	.+82     	; 0x2f1c <HAL_LCD_sendCharacter+0x6d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eca:	6d a9       	ldd	r22, Y+53	; 0x35
    2ecc:	7e a9       	ldd	r23, Y+54	; 0x36
    2ece:	8f a9       	ldd	r24, Y+55	; 0x37
    2ed0:	98 ad       	ldd	r25, Y+56	; 0x38
    2ed2:	20 e0       	ldi	r18, 0x00	; 0
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	40 e2       	ldi	r20, 0x20	; 32
    2ed8:	51 e4       	ldi	r21, 0x41	; 65
    2eda:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ede:	dc 01       	movw	r26, r24
    2ee0:	cb 01       	movw	r24, r22
    2ee2:	bc 01       	movw	r22, r24
    2ee4:	cd 01       	movw	r24, r26
    2ee6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2eea:	dc 01       	movw	r26, r24
    2eec:	cb 01       	movw	r24, r22
    2eee:	98 ab       	std	Y+48, r25	; 0x30
    2ef0:	8f a7       	std	Y+47, r24	; 0x2f
    2ef2:	0f c0       	rjmp	.+30     	; 0x2f12 <HAL_LCD_sendCharacter+0x6ce>
    2ef4:	80 e9       	ldi	r24, 0x90	; 144
    2ef6:	91 e0       	ldi	r25, 0x01	; 1
    2ef8:	9e a7       	std	Y+46, r25	; 0x2e
    2efa:	8d a7       	std	Y+45, r24	; 0x2d
    2efc:	8d a5       	ldd	r24, Y+45	; 0x2d
    2efe:	9e a5       	ldd	r25, Y+46	; 0x2e
    2f00:	01 97       	sbiw	r24, 0x01	; 1
    2f02:	f1 f7       	brne	.-4      	; 0x2f00 <HAL_LCD_sendCharacter+0x6bc>
    2f04:	9e a7       	std	Y+46, r25	; 0x2e
    2f06:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f08:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f0a:	98 a9       	ldd	r25, Y+48	; 0x30
    2f0c:	01 97       	sbiw	r24, 0x01	; 1
    2f0e:	98 ab       	std	Y+48, r25	; 0x30
    2f10:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f12:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f14:	98 a9       	ldd	r25, Y+48	; 0x30
    2f16:	00 97       	sbiw	r24, 0x00	; 0
    2f18:	69 f7       	brne	.-38     	; 0x2ef4 <HAL_LCD_sendCharacter+0x6b0>
    2f1a:	14 c0       	rjmp	.+40     	; 0x2f44 <HAL_LCD_sendCharacter+0x700>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f1c:	69 a9       	ldd	r22, Y+49	; 0x31
    2f1e:	7a a9       	ldd	r23, Y+50	; 0x32
    2f20:	8b a9       	ldd	r24, Y+51	; 0x33
    2f22:	9c a9       	ldd	r25, Y+52	; 0x34
    2f24:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f28:	dc 01       	movw	r26, r24
    2f2a:	cb 01       	movw	r24, r22
    2f2c:	98 ab       	std	Y+48, r25	; 0x30
    2f2e:	8f a7       	std	Y+47, r24	; 0x2f
    2f30:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f32:	98 a9       	ldd	r25, Y+48	; 0x30
    2f34:	9c a7       	std	Y+44, r25	; 0x2c
    2f36:	8b a7       	std	Y+43, r24	; 0x2b
    2f38:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f3a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f3c:	01 97       	sbiw	r24, 0x01	; 1
    2f3e:	f1 f7       	brne	.-4      	; 0x2f3c <HAL_LCD_sendCharacter+0x6f8>
    2f40:	9c a7       	std	Y+44, r25	; 0x2c
    2f42:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		#ifdef LOWER_PORT_PINS
			MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D4_PIN, GET_BIT(data, 0));
    2f44:	fe 01       	movw	r30, r28
    2f46:	e3 59       	subi	r30, 0x93	; 147
    2f48:	ff 4f       	sbci	r31, 0xFF	; 255
    2f4a:	80 81       	ld	r24, Z
    2f4c:	28 2f       	mov	r18, r24
    2f4e:	21 70       	andi	r18, 0x01	; 1
    2f50:	ce 01       	movw	r24, r28
    2f52:	86 59       	subi	r24, 0x96	; 150
    2f54:	9f 4f       	sbci	r25, 0xFF	; 255
    2f56:	61 e0       	ldi	r22, 0x01	; 1
    2f58:	42 2f       	mov	r20, r18
    2f5a:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <MCAL_Dio_WriteSinglePin>
			MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D5_PIN, GET_BIT(data, 1));
    2f5e:	fe 01       	movw	r30, r28
    2f60:	e3 59       	subi	r30, 0x93	; 147
    2f62:	ff 4f       	sbci	r31, 0xFF	; 255
    2f64:	80 81       	ld	r24, Z
    2f66:	85 95       	asr	r24
    2f68:	28 2f       	mov	r18, r24
    2f6a:	21 70       	andi	r18, 0x01	; 1
    2f6c:	ce 01       	movw	r24, r28
    2f6e:	86 59       	subi	r24, 0x96	; 150
    2f70:	9f 4f       	sbci	r25, 0xFF	; 255
    2f72:	62 e0       	ldi	r22, 0x02	; 2
    2f74:	42 2f       	mov	r20, r18
    2f76:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <MCAL_Dio_WriteSinglePin>
			MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D6_PIN, GET_BIT(data, 2));
    2f7a:	fe 01       	movw	r30, r28
    2f7c:	e3 59       	subi	r30, 0x93	; 147
    2f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f80:	80 81       	ld	r24, Z
    2f82:	85 95       	asr	r24
    2f84:	85 95       	asr	r24
    2f86:	28 2f       	mov	r18, r24
    2f88:	21 70       	andi	r18, 0x01	; 1
    2f8a:	ce 01       	movw	r24, r28
    2f8c:	86 59       	subi	r24, 0x96	; 150
    2f8e:	9f 4f       	sbci	r25, 0xFF	; 255
    2f90:	64 e0       	ldi	r22, 0x04	; 4
    2f92:	42 2f       	mov	r20, r18
    2f94:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <MCAL_Dio_WriteSinglePin>
			MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D7_PIN, GET_BIT(data, 3));
    2f98:	fe 01       	movw	r30, r28
    2f9a:	e3 59       	subi	r30, 0x93	; 147
    2f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9e:	80 81       	ld	r24, Z
    2fa0:	85 95       	asr	r24
    2fa2:	85 95       	asr	r24
    2fa4:	85 95       	asr	r24
    2fa6:	28 2f       	mov	r18, r24
    2fa8:	21 70       	andi	r18, 0x01	; 1
    2faa:	ce 01       	movw	r24, r28
    2fac:	86 59       	subi	r24, 0x96	; 150
    2fae:	9f 4f       	sbci	r25, 0xFF	; 255
    2fb0:	60 e1       	ldi	r22, 0x10	; 16
    2fb2:	42 2f       	mov	r20, r18
    2fb4:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <MCAL_Dio_WriteSinglePin>
    2fb8:	80 e0       	ldi	r24, 0x00	; 0
    2fba:	90 e0       	ldi	r25, 0x00	; 0
    2fbc:	a0 e8       	ldi	r26, 0x80	; 128
    2fbe:	bf e3       	ldi	r27, 0x3F	; 63
    2fc0:	8f a3       	std	Y+39, r24	; 0x27
    2fc2:	98 a7       	std	Y+40, r25	; 0x28
    2fc4:	a9 a7       	std	Y+41, r26	; 0x29
    2fc6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fc8:	6f a1       	ldd	r22, Y+39	; 0x27
    2fca:	78 a5       	ldd	r23, Y+40	; 0x28
    2fcc:	89 a5       	ldd	r24, Y+41	; 0x29
    2fce:	9a a5       	ldd	r25, Y+42	; 0x2a
    2fd0:	20 e0       	ldi	r18, 0x00	; 0
    2fd2:	30 e0       	ldi	r19, 0x00	; 0
    2fd4:	4a e7       	ldi	r20, 0x7A	; 122
    2fd6:	55 e4       	ldi	r21, 0x45	; 69
    2fd8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2fdc:	dc 01       	movw	r26, r24
    2fde:	cb 01       	movw	r24, r22
    2fe0:	8b a3       	std	Y+35, r24	; 0x23
    2fe2:	9c a3       	std	Y+36, r25	; 0x24
    2fe4:	ad a3       	std	Y+37, r26	; 0x25
    2fe6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2fe8:	6b a1       	ldd	r22, Y+35	; 0x23
    2fea:	7c a1       	ldd	r23, Y+36	; 0x24
    2fec:	8d a1       	ldd	r24, Y+37	; 0x25
    2fee:	9e a1       	ldd	r25, Y+38	; 0x26
    2ff0:	20 e0       	ldi	r18, 0x00	; 0
    2ff2:	30 e0       	ldi	r19, 0x00	; 0
    2ff4:	40 e8       	ldi	r20, 0x80	; 128
    2ff6:	5f e3       	ldi	r21, 0x3F	; 63
    2ff8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2ffc:	88 23       	and	r24, r24
    2ffe:	2c f4       	brge	.+10     	; 0x300a <HAL_LCD_sendCharacter+0x7c6>
		__ticks = 1;
    3000:	81 e0       	ldi	r24, 0x01	; 1
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	9a a3       	std	Y+34, r25	; 0x22
    3006:	89 a3       	std	Y+33, r24	; 0x21
    3008:	3f c0       	rjmp	.+126    	; 0x3088 <HAL_LCD_sendCharacter+0x844>
	else if (__tmp > 65535)
    300a:	6b a1       	ldd	r22, Y+35	; 0x23
    300c:	7c a1       	ldd	r23, Y+36	; 0x24
    300e:	8d a1       	ldd	r24, Y+37	; 0x25
    3010:	9e a1       	ldd	r25, Y+38	; 0x26
    3012:	20 e0       	ldi	r18, 0x00	; 0
    3014:	3f ef       	ldi	r19, 0xFF	; 255
    3016:	4f e7       	ldi	r20, 0x7F	; 127
    3018:	57 e4       	ldi	r21, 0x47	; 71
    301a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    301e:	18 16       	cp	r1, r24
    3020:	4c f5       	brge	.+82     	; 0x3074 <HAL_LCD_sendCharacter+0x830>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3022:	6f a1       	ldd	r22, Y+39	; 0x27
    3024:	78 a5       	ldd	r23, Y+40	; 0x28
    3026:	89 a5       	ldd	r24, Y+41	; 0x29
    3028:	9a a5       	ldd	r25, Y+42	; 0x2a
    302a:	20 e0       	ldi	r18, 0x00	; 0
    302c:	30 e0       	ldi	r19, 0x00	; 0
    302e:	40 e2       	ldi	r20, 0x20	; 32
    3030:	51 e4       	ldi	r21, 0x41	; 65
    3032:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3036:	dc 01       	movw	r26, r24
    3038:	cb 01       	movw	r24, r22
    303a:	bc 01       	movw	r22, r24
    303c:	cd 01       	movw	r24, r26
    303e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3042:	dc 01       	movw	r26, r24
    3044:	cb 01       	movw	r24, r22
    3046:	9a a3       	std	Y+34, r25	; 0x22
    3048:	89 a3       	std	Y+33, r24	; 0x21
    304a:	0f c0       	rjmp	.+30     	; 0x306a <HAL_LCD_sendCharacter+0x826>
    304c:	80 e9       	ldi	r24, 0x90	; 144
    304e:	91 e0       	ldi	r25, 0x01	; 1
    3050:	98 a3       	std	Y+32, r25	; 0x20
    3052:	8f 8f       	std	Y+31, r24	; 0x1f
    3054:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3056:	98 a1       	ldd	r25, Y+32	; 0x20
    3058:	01 97       	sbiw	r24, 0x01	; 1
    305a:	f1 f7       	brne	.-4      	; 0x3058 <HAL_LCD_sendCharacter+0x814>
    305c:	98 a3       	std	Y+32, r25	; 0x20
    305e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3060:	89 a1       	ldd	r24, Y+33	; 0x21
    3062:	9a a1       	ldd	r25, Y+34	; 0x22
    3064:	01 97       	sbiw	r24, 0x01	; 1
    3066:	9a a3       	std	Y+34, r25	; 0x22
    3068:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    306a:	89 a1       	ldd	r24, Y+33	; 0x21
    306c:	9a a1       	ldd	r25, Y+34	; 0x22
    306e:	00 97       	sbiw	r24, 0x00	; 0
    3070:	69 f7       	brne	.-38     	; 0x304c <HAL_LCD_sendCharacter+0x808>
    3072:	14 c0       	rjmp	.+40     	; 0x309c <HAL_LCD_sendCharacter+0x858>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3074:	6b a1       	ldd	r22, Y+35	; 0x23
    3076:	7c a1       	ldd	r23, Y+36	; 0x24
    3078:	8d a1       	ldd	r24, Y+37	; 0x25
    307a:	9e a1       	ldd	r25, Y+38	; 0x26
    307c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3080:	dc 01       	movw	r26, r24
    3082:	cb 01       	movw	r24, r22
    3084:	9a a3       	std	Y+34, r25	; 0x22
    3086:	89 a3       	std	Y+33, r24	; 0x21
    3088:	89 a1       	ldd	r24, Y+33	; 0x21
    308a:	9a a1       	ldd	r25, Y+34	; 0x22
    308c:	9e 8f       	std	Y+30, r25	; 0x1e
    308e:	8d 8f       	std	Y+29, r24	; 0x1d
    3090:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3092:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3094:	01 97       	sbiw	r24, 0x01	; 1
    3096:	f1 f7       	brne	.-4      	; 0x3094 <HAL_LCD_sendCharacter+0x850>
    3098:	9e 8f       	std	Y+30, r25	; 0x1e
    309a:	8d 8f       	std	Y+29, r24	; 0x1d
			MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D0_PIN, GET_BIT(data, 0));
			MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D1_PIN, GET_BIT(data, 1));
			MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D2_PIN, GET_BIT(data, 2));
			MCAL_Dio_WriteSinglePin(&LCD_DATA_interface, LCD_D3_PIN, GET_BIT(data, 3));
		#endif
		u8LocalReturn = MCAL_Dio_WritePin(&LCD_E_interface, PIN_HIGH);
    309c:	ce 01       	movw	r24, r28
    309e:	89 59       	subi	r24, 0x99	; 153
    30a0:	9f 4f       	sbci	r25, 0xFF	; 255
    30a2:	6f ef       	ldi	r22, 0xFF	; 255
    30a4:	0e 94 59 08 	call	0x10b2	; 0x10b2 <MCAL_Dio_WritePin>
    30a8:	fe 01       	movw	r30, r28
    30aa:	ed 59       	subi	r30, 0x9D	; 157
    30ac:	ff 4f       	sbci	r31, 0xFF	; 255
    30ae:	80 83       	st	Z, r24
    30b0:	80 e0       	ldi	r24, 0x00	; 0
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	a0 e8       	ldi	r26, 0x80	; 128
    30b6:	bf e3       	ldi	r27, 0x3F	; 63
    30b8:	89 8f       	std	Y+25, r24	; 0x19
    30ba:	9a 8f       	std	Y+26, r25	; 0x1a
    30bc:	ab 8f       	std	Y+27, r26	; 0x1b
    30be:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30c0:	69 8d       	ldd	r22, Y+25	; 0x19
    30c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30c8:	20 e0       	ldi	r18, 0x00	; 0
    30ca:	30 e0       	ldi	r19, 0x00	; 0
    30cc:	4a e7       	ldi	r20, 0x7A	; 122
    30ce:	55 e4       	ldi	r21, 0x45	; 69
    30d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    30d4:	dc 01       	movw	r26, r24
    30d6:	cb 01       	movw	r24, r22
    30d8:	8d 8b       	std	Y+21, r24	; 0x15
    30da:	9e 8b       	std	Y+22, r25	; 0x16
    30dc:	af 8b       	std	Y+23, r26	; 0x17
    30de:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    30e0:	6d 89       	ldd	r22, Y+21	; 0x15
    30e2:	7e 89       	ldd	r23, Y+22	; 0x16
    30e4:	8f 89       	ldd	r24, Y+23	; 0x17
    30e6:	98 8d       	ldd	r25, Y+24	; 0x18
    30e8:	20 e0       	ldi	r18, 0x00	; 0
    30ea:	30 e0       	ldi	r19, 0x00	; 0
    30ec:	40 e8       	ldi	r20, 0x80	; 128
    30ee:	5f e3       	ldi	r21, 0x3F	; 63
    30f0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    30f4:	88 23       	and	r24, r24
    30f6:	2c f4       	brge	.+10     	; 0x3102 <HAL_LCD_sendCharacter+0x8be>
		__ticks = 1;
    30f8:	81 e0       	ldi	r24, 0x01	; 1
    30fa:	90 e0       	ldi	r25, 0x00	; 0
    30fc:	9c 8b       	std	Y+20, r25	; 0x14
    30fe:	8b 8b       	std	Y+19, r24	; 0x13
    3100:	3f c0       	rjmp	.+126    	; 0x3180 <HAL_LCD_sendCharacter+0x93c>
	else if (__tmp > 65535)
    3102:	6d 89       	ldd	r22, Y+21	; 0x15
    3104:	7e 89       	ldd	r23, Y+22	; 0x16
    3106:	8f 89       	ldd	r24, Y+23	; 0x17
    3108:	98 8d       	ldd	r25, Y+24	; 0x18
    310a:	20 e0       	ldi	r18, 0x00	; 0
    310c:	3f ef       	ldi	r19, 0xFF	; 255
    310e:	4f e7       	ldi	r20, 0x7F	; 127
    3110:	57 e4       	ldi	r21, 0x47	; 71
    3112:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3116:	18 16       	cp	r1, r24
    3118:	4c f5       	brge	.+82     	; 0x316c <HAL_LCD_sendCharacter+0x928>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    311a:	69 8d       	ldd	r22, Y+25	; 0x19
    311c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    311e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3120:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3122:	20 e0       	ldi	r18, 0x00	; 0
    3124:	30 e0       	ldi	r19, 0x00	; 0
    3126:	40 e2       	ldi	r20, 0x20	; 32
    3128:	51 e4       	ldi	r21, 0x41	; 65
    312a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    312e:	dc 01       	movw	r26, r24
    3130:	cb 01       	movw	r24, r22
    3132:	bc 01       	movw	r22, r24
    3134:	cd 01       	movw	r24, r26
    3136:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    313a:	dc 01       	movw	r26, r24
    313c:	cb 01       	movw	r24, r22
    313e:	9c 8b       	std	Y+20, r25	; 0x14
    3140:	8b 8b       	std	Y+19, r24	; 0x13
    3142:	0f c0       	rjmp	.+30     	; 0x3162 <HAL_LCD_sendCharacter+0x91e>
    3144:	80 e9       	ldi	r24, 0x90	; 144
    3146:	91 e0       	ldi	r25, 0x01	; 1
    3148:	9a 8b       	std	Y+18, r25	; 0x12
    314a:	89 8b       	std	Y+17, r24	; 0x11
    314c:	89 89       	ldd	r24, Y+17	; 0x11
    314e:	9a 89       	ldd	r25, Y+18	; 0x12
    3150:	01 97       	sbiw	r24, 0x01	; 1
    3152:	f1 f7       	brne	.-4      	; 0x3150 <HAL_LCD_sendCharacter+0x90c>
    3154:	9a 8b       	std	Y+18, r25	; 0x12
    3156:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3158:	8b 89       	ldd	r24, Y+19	; 0x13
    315a:	9c 89       	ldd	r25, Y+20	; 0x14
    315c:	01 97       	sbiw	r24, 0x01	; 1
    315e:	9c 8b       	std	Y+20, r25	; 0x14
    3160:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3162:	8b 89       	ldd	r24, Y+19	; 0x13
    3164:	9c 89       	ldd	r25, Y+20	; 0x14
    3166:	00 97       	sbiw	r24, 0x00	; 0
    3168:	69 f7       	brne	.-38     	; 0x3144 <HAL_LCD_sendCharacter+0x900>
    316a:	14 c0       	rjmp	.+40     	; 0x3194 <HAL_LCD_sendCharacter+0x950>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    316c:	6d 89       	ldd	r22, Y+21	; 0x15
    316e:	7e 89       	ldd	r23, Y+22	; 0x16
    3170:	8f 89       	ldd	r24, Y+23	; 0x17
    3172:	98 8d       	ldd	r25, Y+24	; 0x18
    3174:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3178:	dc 01       	movw	r26, r24
    317a:	cb 01       	movw	r24, r22
    317c:	9c 8b       	std	Y+20, r25	; 0x14
    317e:	8b 8b       	std	Y+19, r24	; 0x13
    3180:	8b 89       	ldd	r24, Y+19	; 0x13
    3182:	9c 89       	ldd	r25, Y+20	; 0x14
    3184:	98 8b       	std	Y+16, r25	; 0x10
    3186:	8f 87       	std	Y+15, r24	; 0x0f
    3188:	8f 85       	ldd	r24, Y+15	; 0x0f
    318a:	98 89       	ldd	r25, Y+16	; 0x10
    318c:	01 97       	sbiw	r24, 0x01	; 1
    318e:	f1 f7       	brne	.-4      	; 0x318c <HAL_LCD_sendCharacter+0x948>
    3190:	98 8b       	std	Y+16, r25	; 0x10
    3192:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		u8LocalReturn = MCAL_Dio_WritePin(&LCD_E_interface, PIN_LOW);
    3194:	ce 01       	movw	r24, r28
    3196:	89 59       	subi	r24, 0x99	; 153
    3198:	9f 4f       	sbci	r25, 0xFF	; 255
    319a:	60 e0       	ldi	r22, 0x00	; 0
    319c:	0e 94 59 08 	call	0x10b2	; 0x10b2 <MCAL_Dio_WritePin>
    31a0:	fe 01       	movw	r30, r28
    31a2:	ed 59       	subi	r30, 0x9D	; 157
    31a4:	ff 4f       	sbci	r31, 0xFF	; 255
    31a6:	80 83       	st	Z, r24
    31a8:	80 e0       	ldi	r24, 0x00	; 0
    31aa:	90 e0       	ldi	r25, 0x00	; 0
    31ac:	a0 e8       	ldi	r26, 0x80	; 128
    31ae:	bf e3       	ldi	r27, 0x3F	; 63
    31b0:	8b 87       	std	Y+11, r24	; 0x0b
    31b2:	9c 87       	std	Y+12, r25	; 0x0c
    31b4:	ad 87       	std	Y+13, r26	; 0x0d
    31b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    31ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    31bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    31be:	9e 85       	ldd	r25, Y+14	; 0x0e
    31c0:	20 e0       	ldi	r18, 0x00	; 0
    31c2:	30 e0       	ldi	r19, 0x00	; 0
    31c4:	4a e7       	ldi	r20, 0x7A	; 122
    31c6:	55 e4       	ldi	r21, 0x45	; 69
    31c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    31cc:	dc 01       	movw	r26, r24
    31ce:	cb 01       	movw	r24, r22
    31d0:	8f 83       	std	Y+7, r24	; 0x07
    31d2:	98 87       	std	Y+8, r25	; 0x08
    31d4:	a9 87       	std	Y+9, r26	; 0x09
    31d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31d8:	6f 81       	ldd	r22, Y+7	; 0x07
    31da:	78 85       	ldd	r23, Y+8	; 0x08
    31dc:	89 85       	ldd	r24, Y+9	; 0x09
    31de:	9a 85       	ldd	r25, Y+10	; 0x0a
    31e0:	20 e0       	ldi	r18, 0x00	; 0
    31e2:	30 e0       	ldi	r19, 0x00	; 0
    31e4:	40 e8       	ldi	r20, 0x80	; 128
    31e6:	5f e3       	ldi	r21, 0x3F	; 63
    31e8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    31ec:	88 23       	and	r24, r24
    31ee:	2c f4       	brge	.+10     	; 0x31fa <HAL_LCD_sendCharacter+0x9b6>
		__ticks = 1;
    31f0:	81 e0       	ldi	r24, 0x01	; 1
    31f2:	90 e0       	ldi	r25, 0x00	; 0
    31f4:	9e 83       	std	Y+6, r25	; 0x06
    31f6:	8d 83       	std	Y+5, r24	; 0x05
    31f8:	3f c0       	rjmp	.+126    	; 0x3278 <HAL_LCD_sendCharacter+0xa34>
	else if (__tmp > 65535)
    31fa:	6f 81       	ldd	r22, Y+7	; 0x07
    31fc:	78 85       	ldd	r23, Y+8	; 0x08
    31fe:	89 85       	ldd	r24, Y+9	; 0x09
    3200:	9a 85       	ldd	r25, Y+10	; 0x0a
    3202:	20 e0       	ldi	r18, 0x00	; 0
    3204:	3f ef       	ldi	r19, 0xFF	; 255
    3206:	4f e7       	ldi	r20, 0x7F	; 127
    3208:	57 e4       	ldi	r21, 0x47	; 71
    320a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    320e:	18 16       	cp	r1, r24
    3210:	4c f5       	brge	.+82     	; 0x3264 <HAL_LCD_sendCharacter+0xa20>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3212:	6b 85       	ldd	r22, Y+11	; 0x0b
    3214:	7c 85       	ldd	r23, Y+12	; 0x0c
    3216:	8d 85       	ldd	r24, Y+13	; 0x0d
    3218:	9e 85       	ldd	r25, Y+14	; 0x0e
    321a:	20 e0       	ldi	r18, 0x00	; 0
    321c:	30 e0       	ldi	r19, 0x00	; 0
    321e:	40 e2       	ldi	r20, 0x20	; 32
    3220:	51 e4       	ldi	r21, 0x41	; 65
    3222:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3226:	dc 01       	movw	r26, r24
    3228:	cb 01       	movw	r24, r22
    322a:	bc 01       	movw	r22, r24
    322c:	cd 01       	movw	r24, r26
    322e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3232:	dc 01       	movw	r26, r24
    3234:	cb 01       	movw	r24, r22
    3236:	9e 83       	std	Y+6, r25	; 0x06
    3238:	8d 83       	std	Y+5, r24	; 0x05
    323a:	0f c0       	rjmp	.+30     	; 0x325a <HAL_LCD_sendCharacter+0xa16>
    323c:	80 e9       	ldi	r24, 0x90	; 144
    323e:	91 e0       	ldi	r25, 0x01	; 1
    3240:	9c 83       	std	Y+4, r25	; 0x04
    3242:	8b 83       	std	Y+3, r24	; 0x03
    3244:	8b 81       	ldd	r24, Y+3	; 0x03
    3246:	9c 81       	ldd	r25, Y+4	; 0x04
    3248:	01 97       	sbiw	r24, 0x01	; 1
    324a:	f1 f7       	brne	.-4      	; 0x3248 <HAL_LCD_sendCharacter+0xa04>
    324c:	9c 83       	std	Y+4, r25	; 0x04
    324e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3250:	8d 81       	ldd	r24, Y+5	; 0x05
    3252:	9e 81       	ldd	r25, Y+6	; 0x06
    3254:	01 97       	sbiw	r24, 0x01	; 1
    3256:	9e 83       	std	Y+6, r25	; 0x06
    3258:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    325a:	8d 81       	ldd	r24, Y+5	; 0x05
    325c:	9e 81       	ldd	r25, Y+6	; 0x06
    325e:	00 97       	sbiw	r24, 0x00	; 0
    3260:	69 f7       	brne	.-38     	; 0x323c <HAL_LCD_sendCharacter+0x9f8>
    3262:	14 c0       	rjmp	.+40     	; 0x328c <HAL_LCD_sendCharacter+0xa48>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3264:	6f 81       	ldd	r22, Y+7	; 0x07
    3266:	78 85       	ldd	r23, Y+8	; 0x08
    3268:	89 85       	ldd	r24, Y+9	; 0x09
    326a:	9a 85       	ldd	r25, Y+10	; 0x0a
    326c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3270:	dc 01       	movw	r26, r24
    3272:	cb 01       	movw	r24, r22
    3274:	9e 83       	std	Y+6, r25	; 0x06
    3276:	8d 83       	std	Y+5, r24	; 0x05
    3278:	8d 81       	ldd	r24, Y+5	; 0x05
    327a:	9e 81       	ldd	r25, Y+6	; 0x06
    327c:	9a 83       	std	Y+2, r25	; 0x02
    327e:	89 83       	std	Y+1, r24	; 0x01
    3280:	89 81       	ldd	r24, Y+1	; 0x01
    3282:	9a 81       	ldd	r25, Y+2	; 0x02
    3284:	01 97       	sbiw	r24, 0x01	; 1
    3286:	f1 f7       	brne	.-4      	; 0x3284 <HAL_LCD_sendCharacter+0xa40>
    3288:	9a 83       	std	Y+2, r25	; 0x02
    328a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		#endif

	return u8LocalReturn;
    328c:	fe 01       	movw	r30, r28
    328e:	ed 59       	subi	r30, 0x9D	; 157
    3290:	ff 4f       	sbci	r31, 0xFF	; 255
    3292:	80 81       	ld	r24, Z
}
    3294:	c4 58       	subi	r28, 0x84	; 132
    3296:	df 4f       	sbci	r29, 0xFF	; 255
    3298:	0f b6       	in	r0, 0x3f	; 63
    329a:	f8 94       	cli
    329c:	de bf       	out	0x3e, r29	; 62
    329e:	0f be       	out	0x3f, r0	; 63
    32a0:	cd bf       	out	0x3d, r28	; 61
    32a2:	cf 91       	pop	r28
    32a4:	df 91       	pop	r29
    32a6:	1f 91       	pop	r17
    32a8:	0f 91       	pop	r16
    32aa:	08 95       	ret

000032ac <HAL_LCD_sendString>:

/* Function to display a string on the LCD */
E_ErrorType HAL_LCD_sendString(LCD_string str)
{
    32ac:	df 93       	push	r29
    32ae:	cf 93       	push	r28
    32b0:	00 d0       	rcall	.+0      	; 0x32b2 <HAL_LCD_sendString+0x6>
    32b2:	00 d0       	rcall	.+0      	; 0x32b4 <HAL_LCD_sendString+0x8>
    32b4:	cd b7       	in	r28, 0x3d	; 61
    32b6:	de b7       	in	r29, 0x3e	; 62
    32b8:	9c 83       	std	Y+4, r25	; 0x04
    32ba:	8b 83       	std	Y+3, r24	; 0x03
	E_ErrorType u8LocalReturn = E_NOT_OK;
    32bc:	81 e0       	ldi	r24, 0x01	; 1
    32be:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char i;
	for(i =0 ; str[i] != 0; i++)
    32c0:	19 82       	std	Y+1, r1	; 0x01
    32c2:	0f c0       	rjmp	.+30     	; 0x32e2 <HAL_LCD_sendString+0x36>
	{
		u8LocalReturn = HAL_LCD_sendCharacter(str[i]);
    32c4:	89 81       	ldd	r24, Y+1	; 0x01
    32c6:	28 2f       	mov	r18, r24
    32c8:	30 e0       	ldi	r19, 0x00	; 0
    32ca:	8b 81       	ldd	r24, Y+3	; 0x03
    32cc:	9c 81       	ldd	r25, Y+4	; 0x04
    32ce:	fc 01       	movw	r30, r24
    32d0:	e2 0f       	add	r30, r18
    32d2:	f3 1f       	adc	r31, r19
    32d4:	80 81       	ld	r24, Z
    32d6:	0e 94 22 14 	call	0x2844	; 0x2844 <HAL_LCD_sendCharacter>
    32da:	8a 83       	std	Y+2, r24	; 0x02
/* Function to display a string on the LCD */
E_ErrorType HAL_LCD_sendString(LCD_string str)
{
	E_ErrorType u8LocalReturn = E_NOT_OK;
	unsigned char i;
	for(i =0 ; str[i] != 0; i++)
    32dc:	89 81       	ldd	r24, Y+1	; 0x01
    32de:	8f 5f       	subi	r24, 0xFF	; 255
    32e0:	89 83       	std	Y+1, r24	; 0x01
    32e2:	89 81       	ldd	r24, Y+1	; 0x01
    32e4:	28 2f       	mov	r18, r24
    32e6:	30 e0       	ldi	r19, 0x00	; 0
    32e8:	8b 81       	ldd	r24, Y+3	; 0x03
    32ea:	9c 81       	ldd	r25, Y+4	; 0x04
    32ec:	fc 01       	movw	r30, r24
    32ee:	e2 0f       	add	r30, r18
    32f0:	f3 1f       	adc	r31, r19
    32f2:	80 81       	ld	r24, Z
    32f4:	88 23       	and	r24, r24
    32f6:	31 f7       	brne	.-52     	; 0x32c4 <HAL_LCD_sendString+0x18>
	{
		u8LocalReturn = HAL_LCD_sendCharacter(str[i]);
	}
	return u8LocalReturn;
    32f8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    32fa:	0f 90       	pop	r0
    32fc:	0f 90       	pop	r0
    32fe:	0f 90       	pop	r0
    3300:	0f 90       	pop	r0
    3302:	cf 91       	pop	r28
    3304:	df 91       	pop	r29
    3306:	08 95       	ret

00003308 <HAL_LCD_clearScreen>:

/* Function to clear the LCD screen */
E_ErrorType HAL_LCD_clearScreen()
{
    3308:	df 93       	push	r29
    330a:	cf 93       	push	r28
    330c:	cd b7       	in	r28, 0x3d	; 61
    330e:	de b7       	in	r29, 0x3e	; 62
    3310:	2f 97       	sbiw	r28, 0x0f	; 15
    3312:	0f b6       	in	r0, 0x3f	; 63
    3314:	f8 94       	cli
    3316:	de bf       	out	0x3e, r29	; 62
    3318:	0f be       	out	0x3f, r0	; 63
    331a:	cd bf       	out	0x3d, r28	; 61
	E_ErrorType u8LocalReturn = E_NOT_OK;
    331c:	81 e0       	ldi	r24, 0x01	; 1
    331e:	8f 87       	std	Y+15, r24	; 0x0f
	u8LocalReturn = HAL_LCD_sendCommand(CLEAR_COMMAND);
    3320:	81 e0       	ldi	r24, 0x01	; 1
    3322:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <HAL_LCD_sendCommand>
    3326:	8f 87       	std	Y+15, r24	; 0x0f
    3328:	80 e0       	ldi	r24, 0x00	; 0
    332a:	90 e0       	ldi	r25, 0x00	; 0
    332c:	a0 e2       	ldi	r26, 0x20	; 32
    332e:	b1 e4       	ldi	r27, 0x41	; 65
    3330:	8b 87       	std	Y+11, r24	; 0x0b
    3332:	9c 87       	std	Y+12, r25	; 0x0c
    3334:	ad 87       	std	Y+13, r26	; 0x0d
    3336:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3338:	6b 85       	ldd	r22, Y+11	; 0x0b
    333a:	7c 85       	ldd	r23, Y+12	; 0x0c
    333c:	8d 85       	ldd	r24, Y+13	; 0x0d
    333e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3340:	20 e0       	ldi	r18, 0x00	; 0
    3342:	30 e0       	ldi	r19, 0x00	; 0
    3344:	4a e7       	ldi	r20, 0x7A	; 122
    3346:	55 e4       	ldi	r21, 0x45	; 69
    3348:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    334c:	dc 01       	movw	r26, r24
    334e:	cb 01       	movw	r24, r22
    3350:	8f 83       	std	Y+7, r24	; 0x07
    3352:	98 87       	std	Y+8, r25	; 0x08
    3354:	a9 87       	std	Y+9, r26	; 0x09
    3356:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3358:	6f 81       	ldd	r22, Y+7	; 0x07
    335a:	78 85       	ldd	r23, Y+8	; 0x08
    335c:	89 85       	ldd	r24, Y+9	; 0x09
    335e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3360:	20 e0       	ldi	r18, 0x00	; 0
    3362:	30 e0       	ldi	r19, 0x00	; 0
    3364:	40 e8       	ldi	r20, 0x80	; 128
    3366:	5f e3       	ldi	r21, 0x3F	; 63
    3368:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    336c:	88 23       	and	r24, r24
    336e:	2c f4       	brge	.+10     	; 0x337a <HAL_LCD_clearScreen+0x72>
		__ticks = 1;
    3370:	81 e0       	ldi	r24, 0x01	; 1
    3372:	90 e0       	ldi	r25, 0x00	; 0
    3374:	9e 83       	std	Y+6, r25	; 0x06
    3376:	8d 83       	std	Y+5, r24	; 0x05
    3378:	3f c0       	rjmp	.+126    	; 0x33f8 <HAL_LCD_clearScreen+0xf0>
	else if (__tmp > 65535)
    337a:	6f 81       	ldd	r22, Y+7	; 0x07
    337c:	78 85       	ldd	r23, Y+8	; 0x08
    337e:	89 85       	ldd	r24, Y+9	; 0x09
    3380:	9a 85       	ldd	r25, Y+10	; 0x0a
    3382:	20 e0       	ldi	r18, 0x00	; 0
    3384:	3f ef       	ldi	r19, 0xFF	; 255
    3386:	4f e7       	ldi	r20, 0x7F	; 127
    3388:	57 e4       	ldi	r21, 0x47	; 71
    338a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    338e:	18 16       	cp	r1, r24
    3390:	4c f5       	brge	.+82     	; 0x33e4 <HAL_LCD_clearScreen+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3392:	6b 85       	ldd	r22, Y+11	; 0x0b
    3394:	7c 85       	ldd	r23, Y+12	; 0x0c
    3396:	8d 85       	ldd	r24, Y+13	; 0x0d
    3398:	9e 85       	ldd	r25, Y+14	; 0x0e
    339a:	20 e0       	ldi	r18, 0x00	; 0
    339c:	30 e0       	ldi	r19, 0x00	; 0
    339e:	40 e2       	ldi	r20, 0x20	; 32
    33a0:	51 e4       	ldi	r21, 0x41	; 65
    33a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    33a6:	dc 01       	movw	r26, r24
    33a8:	cb 01       	movw	r24, r22
    33aa:	bc 01       	movw	r22, r24
    33ac:	cd 01       	movw	r24, r26
    33ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    33b2:	dc 01       	movw	r26, r24
    33b4:	cb 01       	movw	r24, r22
    33b6:	9e 83       	std	Y+6, r25	; 0x06
    33b8:	8d 83       	std	Y+5, r24	; 0x05
    33ba:	0f c0       	rjmp	.+30     	; 0x33da <HAL_LCD_clearScreen+0xd2>
    33bc:	80 e9       	ldi	r24, 0x90	; 144
    33be:	91 e0       	ldi	r25, 0x01	; 1
    33c0:	9c 83       	std	Y+4, r25	; 0x04
    33c2:	8b 83       	std	Y+3, r24	; 0x03
    33c4:	8b 81       	ldd	r24, Y+3	; 0x03
    33c6:	9c 81       	ldd	r25, Y+4	; 0x04
    33c8:	01 97       	sbiw	r24, 0x01	; 1
    33ca:	f1 f7       	brne	.-4      	; 0x33c8 <HAL_LCD_clearScreen+0xc0>
    33cc:	9c 83       	std	Y+4, r25	; 0x04
    33ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33d0:	8d 81       	ldd	r24, Y+5	; 0x05
    33d2:	9e 81       	ldd	r25, Y+6	; 0x06
    33d4:	01 97       	sbiw	r24, 0x01	; 1
    33d6:	9e 83       	std	Y+6, r25	; 0x06
    33d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33da:	8d 81       	ldd	r24, Y+5	; 0x05
    33dc:	9e 81       	ldd	r25, Y+6	; 0x06
    33de:	00 97       	sbiw	r24, 0x00	; 0
    33e0:	69 f7       	brne	.-38     	; 0x33bc <HAL_LCD_clearScreen+0xb4>
    33e2:	14 c0       	rjmp	.+40     	; 0x340c <HAL_LCD_clearScreen+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33e4:	6f 81       	ldd	r22, Y+7	; 0x07
    33e6:	78 85       	ldd	r23, Y+8	; 0x08
    33e8:	89 85       	ldd	r24, Y+9	; 0x09
    33ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    33ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    33f0:	dc 01       	movw	r26, r24
    33f2:	cb 01       	movw	r24, r22
    33f4:	9e 83       	std	Y+6, r25	; 0x06
    33f6:	8d 83       	std	Y+5, r24	; 0x05
    33f8:	8d 81       	ldd	r24, Y+5	; 0x05
    33fa:	9e 81       	ldd	r25, Y+6	; 0x06
    33fc:	9a 83       	std	Y+2, r25	; 0x02
    33fe:	89 83       	std	Y+1, r24	; 0x01
    3400:	89 81       	ldd	r24, Y+1	; 0x01
    3402:	9a 81       	ldd	r25, Y+2	; 0x02
    3404:	01 97       	sbiw	r24, 0x01	; 1
    3406:	f1 f7       	brne	.-4      	; 0x3404 <HAL_LCD_clearScreen+0xfc>
    3408:	9a 83       	std	Y+2, r25	; 0x02
    340a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	u8LocalReturn = HAL_LCD_sendCommand(SHIFT_CURSOR_RIGHT);
    340c:	86 e0       	ldi	r24, 0x06	; 6
    340e:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <HAL_LCD_sendCommand>
    3412:	8f 87       	std	Y+15, r24	; 0x0f
	return u8LocalReturn;
    3414:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    3416:	2f 96       	adiw	r28, 0x0f	; 15
    3418:	0f b6       	in	r0, 0x3f	; 63
    341a:	f8 94       	cli
    341c:	de bf       	out	0x3e, r29	; 62
    341e:	0f be       	out	0x3f, r0	; 63
    3420:	cd bf       	out	0x3d, r28	; 61
    3422:	cf 91       	pop	r28
    3424:	df 91       	pop	r29
    3426:	08 95       	ret

00003428 <HAL_LCD_displaystringRowColumn>:

/* Function to display a string on a certain row and column on the LCD screen */
E_ErrorType HAL_LCD_displaystringRowColumn(LCD_string str, LCD_row row, LCD_column col)
{
    3428:	df 93       	push	r29
    342a:	cf 93       	push	r28
    342c:	00 d0       	rcall	.+0      	; 0x342e <HAL_LCD_displaystringRowColumn+0x6>
    342e:	00 d0       	rcall	.+0      	; 0x3430 <HAL_LCD_displaystringRowColumn+0x8>
    3430:	0f 92       	push	r0
    3432:	cd b7       	in	r28, 0x3d	; 61
    3434:	de b7       	in	r29, 0x3e	; 62
    3436:	9b 83       	std	Y+3, r25	; 0x03
    3438:	8a 83       	std	Y+2, r24	; 0x02
    343a:	6c 83       	std	Y+4, r22	; 0x04
    343c:	4d 83       	std	Y+5, r20	; 0x05
	E_ErrorType u8LocalReturn = E_NOT_OK;
    343e:	81 e0       	ldi	r24, 0x01	; 1
    3440:	89 83       	std	Y+1, r24	; 0x01
	u8LocalReturn = HAL_LCD_goToRowColumn(row, col);
    3442:	8c 81       	ldd	r24, Y+4	; 0x04
    3444:	6d 81       	ldd	r22, Y+5	; 0x05
    3446:	0e 94 34 1a 	call	0x3468	; 0x3468 <HAL_LCD_goToRowColumn>
    344a:	89 83       	std	Y+1, r24	; 0x01
	u8LocalReturn = HAL_LCD_sendString(str);
    344c:	8a 81       	ldd	r24, Y+2	; 0x02
    344e:	9b 81       	ldd	r25, Y+3	; 0x03
    3450:	0e 94 56 19 	call	0x32ac	; 0x32ac <HAL_LCD_sendString>
    3454:	89 83       	std	Y+1, r24	; 0x01
	return u8LocalReturn;
    3456:	89 81       	ldd	r24, Y+1	; 0x01
}
    3458:	0f 90       	pop	r0
    345a:	0f 90       	pop	r0
    345c:	0f 90       	pop	r0
    345e:	0f 90       	pop	r0
    3460:	0f 90       	pop	r0
    3462:	cf 91       	pop	r28
    3464:	df 91       	pop	r29
    3466:	08 95       	ret

00003468 <HAL_LCD_goToRowColumn>:

/* Function to move the cursor to a certain row and column on the LCD screen */
E_ErrorType HAL_LCD_goToRowColumn(LCD_row row, LCD_column col)
{
    3468:	df 93       	push	r29
    346a:	cf 93       	push	r28
    346c:	00 d0       	rcall	.+0      	; 0x346e <HAL_LCD_goToRowColumn+0x6>
    346e:	00 d0       	rcall	.+0      	; 0x3470 <HAL_LCD_goToRowColumn+0x8>
    3470:	00 d0       	rcall	.+0      	; 0x3472 <HAL_LCD_goToRowColumn+0xa>
    3472:	cd b7       	in	r28, 0x3d	; 61
    3474:	de b7       	in	r29, 0x3e	; 62
    3476:	8b 83       	std	Y+3, r24	; 0x03
    3478:	6c 83       	std	Y+4, r22	; 0x04
	E_ErrorType u8LocalReturn = E_NOT_OK;
    347a:	81 e0       	ldi	r24, 0x01	; 1
    347c:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char Address = 0;
    347e:	19 82       	std	Y+1, r1	; 0x01
	/* calculate the required address */
	switch(row)
    3480:	8b 81       	ldd	r24, Y+3	; 0x03
    3482:	28 2f       	mov	r18, r24
    3484:	30 e0       	ldi	r19, 0x00	; 0
    3486:	3e 83       	std	Y+6, r19	; 0x06
    3488:	2d 83       	std	Y+5, r18	; 0x05
    348a:	8d 81       	ldd	r24, Y+5	; 0x05
    348c:	9e 81       	ldd	r25, Y+6	; 0x06
    348e:	81 30       	cpi	r24, 0x01	; 1
    3490:	91 05       	cpc	r25, r1
    3492:	c9 f0       	breq	.+50     	; 0x34c6 <HAL_LCD_goToRowColumn+0x5e>
    3494:	2d 81       	ldd	r18, Y+5	; 0x05
    3496:	3e 81       	ldd	r19, Y+6	; 0x06
    3498:	22 30       	cpi	r18, 0x02	; 2
    349a:	31 05       	cpc	r19, r1
    349c:	2c f4       	brge	.+10     	; 0x34a8 <HAL_LCD_goToRowColumn+0x40>
    349e:	8d 81       	ldd	r24, Y+5	; 0x05
    34a0:	9e 81       	ldd	r25, Y+6	; 0x06
    34a2:	00 97       	sbiw	r24, 0x00	; 0
    34a4:	61 f0       	breq	.+24     	; 0x34be <HAL_LCD_goToRowColumn+0x56>
    34a6:	1e c0       	rjmp	.+60     	; 0x34e4 <HAL_LCD_goToRowColumn+0x7c>
    34a8:	2d 81       	ldd	r18, Y+5	; 0x05
    34aa:	3e 81       	ldd	r19, Y+6	; 0x06
    34ac:	22 30       	cpi	r18, 0x02	; 2
    34ae:	31 05       	cpc	r19, r1
    34b0:	79 f0       	breq	.+30     	; 0x34d0 <HAL_LCD_goToRowColumn+0x68>
    34b2:	8d 81       	ldd	r24, Y+5	; 0x05
    34b4:	9e 81       	ldd	r25, Y+6	; 0x06
    34b6:	83 30       	cpi	r24, 0x03	; 3
    34b8:	91 05       	cpc	r25, r1
    34ba:	79 f0       	breq	.+30     	; 0x34da <HAL_LCD_goToRowColumn+0x72>
    34bc:	13 c0       	rjmp	.+38     	; 0x34e4 <HAL_LCD_goToRowColumn+0x7c>
	{
		case 0:
			Address = col;
    34be:	8c 81       	ldd	r24, Y+4	; 0x04
    34c0:	89 83       	std	Y+1, r24	; 0x01
			u8LocalReturn = E_OK;
    34c2:	1a 82       	std	Y+2, r1	; 0x02
    34c4:	11 c0       	rjmp	.+34     	; 0x34e8 <HAL_LCD_goToRowColumn+0x80>
			break;
		case 1:
			Address = col + row1col1;
    34c6:	8c 81       	ldd	r24, Y+4	; 0x04
    34c8:	80 5c       	subi	r24, 0xC0	; 192
    34ca:	89 83       	std	Y+1, r24	; 0x01
			u8LocalReturn = E_OK;
    34cc:	1a 82       	std	Y+2, r1	; 0x02
    34ce:	0c c0       	rjmp	.+24     	; 0x34e8 <HAL_LCD_goToRowColumn+0x80>
			break;
		case 2:
			Address = col + row2col1;
    34d0:	8c 81       	ldd	r24, Y+4	; 0x04
    34d2:	8c 5e       	subi	r24, 0xEC	; 236
    34d4:	89 83       	std	Y+1, r24	; 0x01
			u8LocalReturn = E_OK;
    34d6:	1a 82       	std	Y+2, r1	; 0x02
    34d8:	07 c0       	rjmp	.+14     	; 0x34e8 <HAL_LCD_goToRowColumn+0x80>
			break;
		case 3:
			Address = col + row3col1;
    34da:	8c 81       	ldd	r24, Y+4	; 0x04
    34dc:	8c 5a       	subi	r24, 0xAC	; 172
    34de:	89 83       	std	Y+1, r24	; 0x01
			u8LocalReturn = E_OK;
    34e0:	1a 82       	std	Y+2, r1	; 0x02
    34e2:	02 c0       	rjmp	.+4      	; 0x34e8 <HAL_LCD_goToRowColumn+0x80>
			break;
		default :
			u8LocalReturn = E_NOT_OK;
    34e4:	81 e0       	ldi	r24, 0x01	; 1
    34e6:	8a 83       	std	Y+2, r24	; 0x02
			break;
	}
	u8LocalReturn = HAL_LCD_sendCommand(SET_CURSOR_LOCATION | Address);
    34e8:	89 81       	ldd	r24, Y+1	; 0x01
    34ea:	80 68       	ori	r24, 0x80	; 128
    34ec:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <HAL_LCD_sendCommand>
    34f0:	8a 83       	std	Y+2, r24	; 0x02
	return u8LocalReturn;
    34f2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    34f4:	26 96       	adiw	r28, 0x06	; 6
    34f6:	0f b6       	in	r0, 0x3f	; 63
    34f8:	f8 94       	cli
    34fa:	de bf       	out	0x3e, r29	; 62
    34fc:	0f be       	out	0x3f, r0	; 63
    34fe:	cd bf       	out	0x3d, r28	; 61
    3500:	cf 91       	pop	r28
    3502:	df 91       	pop	r29
    3504:	08 95       	ret

00003506 <HAL_LCD_integerToString>:

/* Function to convert an integer to string */
E_ErrorType HAL_LCD_integerToString(LCD_integer num)
{
    3506:	df 93       	push	r29
    3508:	cf 93       	push	r28
    350a:	cd b7       	in	r28, 0x3d	; 61
    350c:	de b7       	in	r29, 0x3e	; 62
    350e:	6d 97       	sbiw	r28, 0x1d	; 29
    3510:	0f b6       	in	r0, 0x3f	; 63
    3512:	f8 94       	cli
    3514:	de bf       	out	0x3e, r29	; 62
    3516:	0f be       	out	0x3f, r0	; 63
    3518:	cd bf       	out	0x3d, r28	; 61
    351a:	69 8f       	std	Y+25, r22	; 0x19
    351c:	7a 8f       	std	Y+26, r23	; 0x1a
    351e:	8b 8f       	std	Y+27, r24	; 0x1b
    3520:	9c 8f       	std	Y+28, r25	; 0x1c
	E_ErrorType u8LocalReturn = E_NOT_OK;
    3522:	81 e0       	ldi	r24, 0x01	; 1
    3524:	88 87       	std	Y+8, r24	; 0x08
	signed char str[16];
	unsigned char i, rem, len=0;
    3526:	1d 82       	std	Y+5, r1	; 0x05
	LCD_integer n = num;
    3528:	89 8d       	ldd	r24, Y+25	; 0x19
    352a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    352c:	ab 8d       	ldd	r26, Y+27	; 0x1b
    352e:	bc 8d       	ldd	r27, Y+28	; 0x1c
    3530:	89 83       	std	Y+1, r24	; 0x01
    3532:	9a 83       	std	Y+2, r25	; 0x02
    3534:	ab 83       	std	Y+3, r26	; 0x03
    3536:	bc 83       	std	Y+4, r27	; 0x04
	if(n ==0)
    3538:	89 81       	ldd	r24, Y+1	; 0x01
    353a:	9a 81       	ldd	r25, Y+2	; 0x02
    353c:	ab 81       	ldd	r26, Y+3	; 0x03
    353e:	bc 81       	ldd	r27, Y+4	; 0x04
    3540:	00 97       	sbiw	r24, 0x00	; 0
    3542:	a1 05       	cpc	r26, r1
    3544:	b1 05       	cpc	r27, r1
    3546:	c1 f4       	brne	.+48     	; 0x3578 <HAL_LCD_integerToString+0x72>
	{
		len = 1;
    3548:	81 e0       	ldi	r24, 0x01	; 1
    354a:	8d 83       	std	Y+5, r24	; 0x05
    354c:	1d c0       	rjmp	.+58     	; 0x3588 <HAL_LCD_integerToString+0x82>
	}
	else
	{
		while(n != 0)
		{
			len++;
    354e:	8d 81       	ldd	r24, Y+5	; 0x05
    3550:	8f 5f       	subi	r24, 0xFF	; 255
    3552:	8d 83       	std	Y+5, r24	; 0x05
			n /= 10;
    3554:	89 81       	ldd	r24, Y+1	; 0x01
    3556:	9a 81       	ldd	r25, Y+2	; 0x02
    3558:	ab 81       	ldd	r26, Y+3	; 0x03
    355a:	bc 81       	ldd	r27, Y+4	; 0x04
    355c:	2a e0       	ldi	r18, 0x0A	; 10
    355e:	30 e0       	ldi	r19, 0x00	; 0
    3560:	40 e0       	ldi	r20, 0x00	; 0
    3562:	50 e0       	ldi	r21, 0x00	; 0
    3564:	bc 01       	movw	r22, r24
    3566:	cd 01       	movw	r24, r26
    3568:	0e 94 6d 1b 	call	0x36da	; 0x36da <__udivmodsi4>
    356c:	da 01       	movw	r26, r20
    356e:	c9 01       	movw	r24, r18
    3570:	89 83       	std	Y+1, r24	; 0x01
    3572:	9a 83       	std	Y+2, r25	; 0x02
    3574:	ab 83       	std	Y+3, r26	; 0x03
    3576:	bc 83       	std	Y+4, r27	; 0x04
	{
		len = 1;
	}
	else
	{
		while(n != 0)
    3578:	89 81       	ldd	r24, Y+1	; 0x01
    357a:	9a 81       	ldd	r25, Y+2	; 0x02
    357c:	ab 81       	ldd	r26, Y+3	; 0x03
    357e:	bc 81       	ldd	r27, Y+4	; 0x04
    3580:	00 97       	sbiw	r24, 0x00	; 0
    3582:	a1 05       	cpc	r26, r1
    3584:	b1 05       	cpc	r27, r1
    3586:	19 f7       	brne	.-58     	; 0x354e <HAL_LCD_integerToString+0x48>
		{
			len++;
			n /= 10;
		}
	}
	if(len >= 15)
    3588:	8d 81       	ldd	r24, Y+5	; 0x05
    358a:	8f 30       	cpi	r24, 0x0F	; 15
    358c:	28 f0       	brcs	.+10     	; 0x3598 <HAL_LCD_integerToString+0x92>
	{
		u8LocalReturn = E_NOT_OK;
    358e:	81 e0       	ldi	r24, 0x01	; 1
    3590:	88 87       	std	Y+8, r24	; 0x08
		return u8LocalReturn;
    3592:	88 85       	ldd	r24, Y+8	; 0x08
    3594:	8d 8f       	std	Y+29, r24	; 0x1d
    3596:	4d c0       	rjmp	.+154    	; 0x3632 <HAL_LCD_integerToString+0x12c>
	}
	for(i=0 ; i<len ; i++)
    3598:	1f 82       	std	Y+7, r1	; 0x07
    359a:	37 c0       	rjmp	.+110    	; 0x360a <HAL_LCD_integerToString+0x104>
	{
		rem = num % 10;
    359c:	89 8d       	ldd	r24, Y+25	; 0x19
    359e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    35a0:	ab 8d       	ldd	r26, Y+27	; 0x1b
    35a2:	bc 8d       	ldd	r27, Y+28	; 0x1c
    35a4:	2a e0       	ldi	r18, 0x0A	; 10
    35a6:	30 e0       	ldi	r19, 0x00	; 0
    35a8:	40 e0       	ldi	r20, 0x00	; 0
    35aa:	50 e0       	ldi	r21, 0x00	; 0
    35ac:	bc 01       	movw	r22, r24
    35ae:	cd 01       	movw	r24, r26
    35b0:	0e 94 6d 1b 	call	0x36da	; 0x36da <__udivmodsi4>
    35b4:	dc 01       	movw	r26, r24
    35b6:	cb 01       	movw	r24, r22
    35b8:	8e 83       	std	Y+6, r24	; 0x06
		num = num /10;
    35ba:	89 8d       	ldd	r24, Y+25	; 0x19
    35bc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    35be:	ab 8d       	ldd	r26, Y+27	; 0x1b
    35c0:	bc 8d       	ldd	r27, Y+28	; 0x1c
    35c2:	2a e0       	ldi	r18, 0x0A	; 10
    35c4:	30 e0       	ldi	r19, 0x00	; 0
    35c6:	40 e0       	ldi	r20, 0x00	; 0
    35c8:	50 e0       	ldi	r21, 0x00	; 0
    35ca:	bc 01       	movw	r22, r24
    35cc:	cd 01       	movw	r24, r26
    35ce:	0e 94 6d 1b 	call	0x36da	; 0x36da <__udivmodsi4>
    35d2:	da 01       	movw	r26, r20
    35d4:	c9 01       	movw	r24, r18
    35d6:	89 8f       	std	Y+25, r24	; 0x19
    35d8:	9a 8f       	std	Y+26, r25	; 0x1a
    35da:	ab 8f       	std	Y+27, r26	; 0x1b
    35dc:	bc 8f       	std	Y+28, r27	; 0x1c
		str[len - (i + 1)] = rem + '0';
    35de:	8d 81       	ldd	r24, Y+5	; 0x05
    35e0:	28 2f       	mov	r18, r24
    35e2:	30 e0       	ldi	r19, 0x00	; 0
    35e4:	8f 81       	ldd	r24, Y+7	; 0x07
    35e6:	88 2f       	mov	r24, r24
    35e8:	90 e0       	ldi	r25, 0x00	; 0
    35ea:	80 95       	com	r24
    35ec:	90 95       	com	r25
    35ee:	28 0f       	add	r18, r24
    35f0:	39 1f       	adc	r19, r25
    35f2:	8e 81       	ldd	r24, Y+6	; 0x06
    35f4:	80 5d       	subi	r24, 0xD0	; 208
    35f6:	48 2f       	mov	r20, r24
    35f8:	ce 01       	movw	r24, r28
    35fa:	09 96       	adiw	r24, 0x09	; 9
    35fc:	fc 01       	movw	r30, r24
    35fe:	e2 0f       	add	r30, r18
    3600:	f3 1f       	adc	r31, r19
    3602:	40 83       	st	Z, r20
	if(len >= 15)
	{
		u8LocalReturn = E_NOT_OK;
		return u8LocalReturn;
	}
	for(i=0 ; i<len ; i++)
    3604:	8f 81       	ldd	r24, Y+7	; 0x07
    3606:	8f 5f       	subi	r24, 0xFF	; 255
    3608:	8f 83       	std	Y+7, r24	; 0x07
    360a:	9f 81       	ldd	r25, Y+7	; 0x07
    360c:	8d 81       	ldd	r24, Y+5	; 0x05
    360e:	98 17       	cp	r25, r24
    3610:	28 f2       	brcs	.-118    	; 0x359c <HAL_LCD_integerToString+0x96>
	{
		rem = num % 10;
		num = num /10;
		str[len - (i + 1)] = rem + '0';
	}
	str[len] = '\0';
    3612:	8d 81       	ldd	r24, Y+5	; 0x05
    3614:	28 2f       	mov	r18, r24
    3616:	30 e0       	ldi	r19, 0x00	; 0
    3618:	ce 01       	movw	r24, r28
    361a:	09 96       	adiw	r24, 0x09	; 9
    361c:	fc 01       	movw	r30, r24
    361e:	e2 0f       	add	r30, r18
    3620:	f3 1f       	adc	r31, r19
    3622:	10 82       	st	Z, r1
	u8LocalReturn = HAL_LCD_sendString(str);
    3624:	ce 01       	movw	r24, r28
    3626:	09 96       	adiw	r24, 0x09	; 9
    3628:	0e 94 56 19 	call	0x32ac	; 0x32ac <HAL_LCD_sendString>
    362c:	88 87       	std	Y+8, r24	; 0x08
	return u8LocalReturn;
    362e:	88 85       	ldd	r24, Y+8	; 0x08
    3630:	8d 8f       	std	Y+29, r24	; 0x1d
    3632:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    3634:	6d 96       	adiw	r28, 0x1d	; 29
    3636:	0f b6       	in	r0, 0x3f	; 63
    3638:	f8 94       	cli
    363a:	de bf       	out	0x3e, r29	; 62
    363c:	0f be       	out	0x3f, r0	; 63
    363e:	cd bf       	out	0x3d, r28	; 61
    3640:	cf 91       	pop	r28
    3642:	df 91       	pop	r29
    3644:	08 95       	ret

00003646 <HAL_LCD_displayIntegerRowColumn>:

/* Function to display an integer on a certain row and column on the LCD screen */
E_ErrorType HAL_LCD_displayIntegerRowColumn(LCD_integer num, LCD_row row, LCD_column col)
{
    3646:	df 93       	push	r29
    3648:	cf 93       	push	r28
    364a:	cd b7       	in	r28, 0x3d	; 61
    364c:	de b7       	in	r29, 0x3e	; 62
    364e:	27 97       	sbiw	r28, 0x07	; 7
    3650:	0f b6       	in	r0, 0x3f	; 63
    3652:	f8 94       	cli
    3654:	de bf       	out	0x3e, r29	; 62
    3656:	0f be       	out	0x3f, r0	; 63
    3658:	cd bf       	out	0x3d, r28	; 61
    365a:	6a 83       	std	Y+2, r22	; 0x02
    365c:	7b 83       	std	Y+3, r23	; 0x03
    365e:	8c 83       	std	Y+4, r24	; 0x04
    3660:	9d 83       	std	Y+5, r25	; 0x05
    3662:	4e 83       	std	Y+6, r20	; 0x06
    3664:	2f 83       	std	Y+7, r18	; 0x07
	E_ErrorType u8LocalReturn = E_NOT_OK;
    3666:	81 e0       	ldi	r24, 0x01	; 1
    3668:	89 83       	std	Y+1, r24	; 0x01
	u8LocalReturn = HAL_LCD_goToRowColumn(row, col);
    366a:	8e 81       	ldd	r24, Y+6	; 0x06
    366c:	6f 81       	ldd	r22, Y+7	; 0x07
    366e:	0e 94 34 1a 	call	0x3468	; 0x3468 <HAL_LCD_goToRowColumn>
    3672:	89 83       	std	Y+1, r24	; 0x01
	u8LocalReturn = HAL_LCD_integerToString(num);
    3674:	8a 81       	ldd	r24, Y+2	; 0x02
    3676:	9b 81       	ldd	r25, Y+3	; 0x03
    3678:	ac 81       	ldd	r26, Y+4	; 0x04
    367a:	bd 81       	ldd	r27, Y+5	; 0x05
    367c:	bc 01       	movw	r22, r24
    367e:	cd 01       	movw	r24, r26
    3680:	0e 94 83 1a 	call	0x3506	; 0x3506 <HAL_LCD_integerToString>
    3684:	89 83       	std	Y+1, r24	; 0x01
	return u8LocalReturn;
    3686:	89 81       	ldd	r24, Y+1	; 0x01
}
    3688:	27 96       	adiw	r28, 0x07	; 7
    368a:	0f b6       	in	r0, 0x3f	; 63
    368c:	f8 94       	cli
    368e:	de bf       	out	0x3e, r29	; 62
    3690:	0f be       	out	0x3f, r0	; 63
    3692:	cd bf       	out	0x3d, r28	; 61
    3694:	cf 91       	pop	r28
    3696:	df 91       	pop	r29
    3698:	08 95       	ret

0000369a <main>:

#define HIGH 1


int main()
{
    369a:	df 93       	push	r29
    369c:	cf 93       	push	r28
    369e:	cd b7       	in	r28, 0x3d	; 61
    36a0:	de b7       	in	r29, 0x3e	; 62

	HAL_LCD_init();
    36a2:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <HAL_LCD_init>
	HAL_LCD_sendCharacter('a');
    36a6:	81 e6       	ldi	r24, 0x61	; 97
    36a8:	0e 94 22 14 	call	0x2844	; 0x2844 <HAL_LCD_sendCharacter>
	HAL_LCD_sendString("Ayaya");
    36ac:	80 e6       	ldi	r24, 0x60	; 96
    36ae:	90 e0       	ldi	r25, 0x00	; 0
    36b0:	0e 94 56 19 	call	0x32ac	; 0x32ac <HAL_LCD_sendString>
	HAL_LCD_displaystringRowColumn("Hello", 1, 5);
    36b4:	86 e6       	ldi	r24, 0x66	; 102
    36b6:	90 e0       	ldi	r25, 0x00	; 0
    36b8:	61 e0       	ldi	r22, 0x01	; 1
    36ba:	45 e0       	ldi	r20, 0x05	; 5
    36bc:	0e 94 14 1a 	call	0x3428	; 0x3428 <HAL_LCD_displaystringRowColumn>
	HAL_LCD_displayIntegerRowColumn(1234, 2, 5);
    36c0:	62 ed       	ldi	r22, 0xD2	; 210
    36c2:	74 e0       	ldi	r23, 0x04	; 4
    36c4:	80 e0       	ldi	r24, 0x00	; 0
    36c6:	90 e0       	ldi	r25, 0x00	; 0
    36c8:	42 e0       	ldi	r20, 0x02	; 2
    36ca:	25 e0       	ldi	r18, 0x05	; 5
    36cc:	0e 94 23 1b 	call	0x3646	; 0x3646 <HAL_LCD_displayIntegerRowColumn>
	return 0;
    36d0:	80 e0       	ldi	r24, 0x00	; 0
    36d2:	90 e0       	ldi	r25, 0x00	; 0


}
    36d4:	cf 91       	pop	r28
    36d6:	df 91       	pop	r29
    36d8:	08 95       	ret

000036da <__udivmodsi4>:
    36da:	a1 e2       	ldi	r26, 0x21	; 33
    36dc:	1a 2e       	mov	r1, r26
    36de:	aa 1b       	sub	r26, r26
    36e0:	bb 1b       	sub	r27, r27
    36e2:	fd 01       	movw	r30, r26
    36e4:	0d c0       	rjmp	.+26     	; 0x3700 <__udivmodsi4_ep>

000036e6 <__udivmodsi4_loop>:
    36e6:	aa 1f       	adc	r26, r26
    36e8:	bb 1f       	adc	r27, r27
    36ea:	ee 1f       	adc	r30, r30
    36ec:	ff 1f       	adc	r31, r31
    36ee:	a2 17       	cp	r26, r18
    36f0:	b3 07       	cpc	r27, r19
    36f2:	e4 07       	cpc	r30, r20
    36f4:	f5 07       	cpc	r31, r21
    36f6:	20 f0       	brcs	.+8      	; 0x3700 <__udivmodsi4_ep>
    36f8:	a2 1b       	sub	r26, r18
    36fa:	b3 0b       	sbc	r27, r19
    36fc:	e4 0b       	sbc	r30, r20
    36fe:	f5 0b       	sbc	r31, r21

00003700 <__udivmodsi4_ep>:
    3700:	66 1f       	adc	r22, r22
    3702:	77 1f       	adc	r23, r23
    3704:	88 1f       	adc	r24, r24
    3706:	99 1f       	adc	r25, r25
    3708:	1a 94       	dec	r1
    370a:	69 f7       	brne	.-38     	; 0x36e6 <__udivmodsi4_loop>
    370c:	60 95       	com	r22
    370e:	70 95       	com	r23
    3710:	80 95       	com	r24
    3712:	90 95       	com	r25
    3714:	9b 01       	movw	r18, r22
    3716:	ac 01       	movw	r20, r24
    3718:	bd 01       	movw	r22, r26
    371a:	cf 01       	movw	r24, r30
    371c:	08 95       	ret

0000371e <__prologue_saves__>:
    371e:	2f 92       	push	r2
    3720:	3f 92       	push	r3
    3722:	4f 92       	push	r4
    3724:	5f 92       	push	r5
    3726:	6f 92       	push	r6
    3728:	7f 92       	push	r7
    372a:	8f 92       	push	r8
    372c:	9f 92       	push	r9
    372e:	af 92       	push	r10
    3730:	bf 92       	push	r11
    3732:	cf 92       	push	r12
    3734:	df 92       	push	r13
    3736:	ef 92       	push	r14
    3738:	ff 92       	push	r15
    373a:	0f 93       	push	r16
    373c:	1f 93       	push	r17
    373e:	cf 93       	push	r28
    3740:	df 93       	push	r29
    3742:	cd b7       	in	r28, 0x3d	; 61
    3744:	de b7       	in	r29, 0x3e	; 62
    3746:	ca 1b       	sub	r28, r26
    3748:	db 0b       	sbc	r29, r27
    374a:	0f b6       	in	r0, 0x3f	; 63
    374c:	f8 94       	cli
    374e:	de bf       	out	0x3e, r29	; 62
    3750:	0f be       	out	0x3f, r0	; 63
    3752:	cd bf       	out	0x3d, r28	; 61
    3754:	09 94       	ijmp

00003756 <__epilogue_restores__>:
    3756:	2a 88       	ldd	r2, Y+18	; 0x12
    3758:	39 88       	ldd	r3, Y+17	; 0x11
    375a:	48 88       	ldd	r4, Y+16	; 0x10
    375c:	5f 84       	ldd	r5, Y+15	; 0x0f
    375e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3760:	7d 84       	ldd	r7, Y+13	; 0x0d
    3762:	8c 84       	ldd	r8, Y+12	; 0x0c
    3764:	9b 84       	ldd	r9, Y+11	; 0x0b
    3766:	aa 84       	ldd	r10, Y+10	; 0x0a
    3768:	b9 84       	ldd	r11, Y+9	; 0x09
    376a:	c8 84       	ldd	r12, Y+8	; 0x08
    376c:	df 80       	ldd	r13, Y+7	; 0x07
    376e:	ee 80       	ldd	r14, Y+6	; 0x06
    3770:	fd 80       	ldd	r15, Y+5	; 0x05
    3772:	0c 81       	ldd	r16, Y+4	; 0x04
    3774:	1b 81       	ldd	r17, Y+3	; 0x03
    3776:	aa 81       	ldd	r26, Y+2	; 0x02
    3778:	b9 81       	ldd	r27, Y+1	; 0x01
    377a:	ce 0f       	add	r28, r30
    377c:	d1 1d       	adc	r29, r1
    377e:	0f b6       	in	r0, 0x3f	; 63
    3780:	f8 94       	cli
    3782:	de bf       	out	0x3e, r29	; 62
    3784:	0f be       	out	0x3f, r0	; 63
    3786:	cd bf       	out	0x3d, r28	; 61
    3788:	ed 01       	movw	r28, r26
    378a:	08 95       	ret

0000378c <_exit>:
    378c:	f8 94       	cli

0000378e <__stop_program>:
    378e:	ff cf       	rjmp	.-2      	; 0x378e <__stop_program>
