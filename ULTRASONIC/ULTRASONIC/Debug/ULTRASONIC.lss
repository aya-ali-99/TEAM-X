
ULTRASONIC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000aa2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000aa2  00000b16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000b22  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b54  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000168  00000000  00000000  00000b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001f00  00000000  00000000  00000cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b91  00000000  00000000  00002bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000012c1  00000000  00000000  00003789  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000314  00000000  00000000  00004a4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007d5  00000000  00000000  00004d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001d89  00000000  00000000  00005535  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000118  00000000  00000000  000072be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  40:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  54:	95 00       	.word	0x0095	; ????
  56:	ae 00       	.word	0x00ae	; ????
  58:	c7 00       	.word	0x00c7	; ????
  5a:	e0 00       	.word	0x00e0	; ????
  5c:	f8 00       	.word	0x00f8	; ????
  5e:	f8 00       	.word	0x00f8	; ????
  60:	f8 00       	.word	0x00f8	; ????
  62:	f8 00       	.word	0x00f8	; ????
  64:	f8 00       	.word	0x00f8	; ????
  66:	f8 00       	.word	0x00f8	; ????
  68:	f8 00       	.word	0x00f8	; ????
  6a:	f8 00       	.word	0x00f8	; ????
  6c:	f8 00       	.word	0x00f8	; ????
  6e:	f8 00       	.word	0x00f8	; ????
  70:	f8 00       	.word	0x00f8	; ????
  72:	f8 00       	.word	0x00f8	; ????
  74:	f8 00       	.word	0x00f8	; ????
  76:	f8 00       	.word	0x00f8	; ????
  78:	f8 00       	.word	0x00f8	; ????
  7a:	f8 00       	.word	0x00f8	; ????
  7c:	f8 00       	.word	0x00f8	; ????
  7e:	f8 00       	.word	0x00f8	; ????
  80:	f8 00       	.word	0x00f8	; ????
  82:	f8 00       	.word	0x00f8	; ????
  84:	f8 00       	.word	0x00f8	; ????
  86:	f8 00       	.word	0x00f8	; ????
  88:	f8 00       	.word	0x00f8	; ????
  8a:	f8 00       	.word	0x00f8	; ????
  8c:	f8 00       	.word	0x00f8	; ????
  8e:	f8 00       	.word	0x00f8	; ????
  90:	f8 00       	.word	0x00f8	; ????
  92:	f8 00       	.word	0x00f8	; ????
  94:	95 00       	.word	0x0095	; ????
  96:	ae 00       	.word	0x00ae	; ????
  98:	c7 00       	.word	0x00c7	; ????
  9a:	e0 00       	.word	0x00e0	; ????
  9c:	05 01       	movw	r0, r10
  9e:	1e 01       	movw	r2, r28
  a0:	37 01       	movw	r6, r14
  a2:	50 01       	movw	r10, r0
  a4:	68 01       	movw	r12, r16
  a6:	68 01       	movw	r12, r16
  a8:	68 01       	movw	r12, r16
  aa:	68 01       	movw	r12, r16
  ac:	68 01       	movw	r12, r16
  ae:	68 01       	movw	r12, r16
  b0:	68 01       	movw	r12, r16
  b2:	68 01       	movw	r12, r16
  b4:	68 01       	movw	r12, r16
  b6:	68 01       	movw	r12, r16
  b8:	68 01       	movw	r12, r16
  ba:	68 01       	movw	r12, r16
  bc:	68 01       	movw	r12, r16
  be:	68 01       	movw	r12, r16
  c0:	68 01       	movw	r12, r16
  c2:	68 01       	movw	r12, r16
  c4:	68 01       	movw	r12, r16
  c6:	68 01       	movw	r12, r16
  c8:	68 01       	movw	r12, r16
  ca:	68 01       	movw	r12, r16
  cc:	68 01       	movw	r12, r16
  ce:	68 01       	movw	r12, r16
  d0:	68 01       	movw	r12, r16
  d2:	68 01       	movw	r12, r16
  d4:	68 01       	movw	r12, r16
  d6:	68 01       	movw	r12, r16
  d8:	68 01       	movw	r12, r16
  da:	68 01       	movw	r12, r16
  dc:	05 01       	movw	r0, r10
  de:	1e 01       	movw	r2, r28
  e0:	37 01       	movw	r6, r14
  e2:	50 01       	movw	r10, r0

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf e5       	ldi	r28, 0x5F	; 95
  ea:	d8 e0       	ldi	r29, 0x08	; 8
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	10 e0       	ldi	r17, 0x00	; 0
  f2:	a0 e6       	ldi	r26, 0x60	; 96
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	e2 ea       	ldi	r30, 0xA2	; 162
  f8:	fa e0       	ldi	r31, 0x0A	; 10
  fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
  fc:	05 90       	lpm	r0, Z+
  fe:	0d 92       	st	X+, r0
 100:	ac 36       	cpi	r26, 0x6C	; 108
 102:	b1 07       	cpc	r27, r17
 104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>
 106:	0e 94 8e 04 	call	0x91c	; 0x91c <main>
 10a:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <_exit>

0000010e <__bad_interrupt>:
 10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <DIO_vsetbitdir>:
		break;
		case 'D':
		case 'd':	if (dir==0)
		CLR_PORT(DDRD);
		else
		SET_PORT(DDRD);
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	fc 01       	movw	r30, r24
 116:	e1 54       	subi	r30, 0x41	; 65
 118:	f1 09       	sbc	r31, r1
 11a:	e4 32       	cpi	r30, 0x24	; 36
 11c:	f1 05       	cpc	r31, r1
 11e:	08 f0       	brcs	.+2      	; 0x122 <DIO_vsetbitdir+0x10>
 120:	67 c0       	rjmp	.+206    	; 0x1f0 <DIO_vsetbitdir+0xde>
 122:	e6 5d       	subi	r30, 0xD6	; 214
 124:	ff 4f       	sbci	r31, 0xFF	; 255
 126:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <__tablejump2__>
 12a:	41 11       	cpse	r20, r1
 12c:	0c c0       	rjmp	.+24     	; 0x146 <DIO_vsetbitdir+0x34>
 12e:	2a b3       	in	r18, 0x1a	; 26
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_vsetbitdir+0x28>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_vsetbitdir+0x24>
 13e:	80 95       	com	r24
 140:	82 23       	and	r24, r18
 142:	8a bb       	out	0x1a, r24	; 26
 144:	08 95       	ret
 146:	2a b3       	in	r18, 0x1a	; 26
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_vsetbitdir+0x40>
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_vsetbitdir+0x3c>
 156:	82 2b       	or	r24, r18
 158:	8a bb       	out	0x1a, r24	; 26
 15a:	08 95       	ret
 15c:	41 11       	cpse	r20, r1
 15e:	0c c0       	rjmp	.+24     	; 0x178 <DIO_vsetbitdir+0x66>
 160:	27 b3       	in	r18, 0x17	; 23
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_vsetbitdir+0x5a>
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	6a 95       	dec	r22
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_vsetbitdir+0x56>
 170:	80 95       	com	r24
 172:	82 23       	and	r24, r18
 174:	87 bb       	out	0x17, r24	; 23
 176:	08 95       	ret
 178:	27 b3       	in	r18, 0x17	; 23
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	02 c0       	rjmp	.+4      	; 0x184 <DIO_vsetbitdir+0x72>
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	6a 95       	dec	r22
 186:	e2 f7       	brpl	.-8      	; 0x180 <DIO_vsetbitdir+0x6e>
 188:	82 2b       	or	r24, r18
 18a:	87 bb       	out	0x17, r24	; 23
 18c:	08 95       	ret
 18e:	41 11       	cpse	r20, r1
 190:	0c c0       	rjmp	.+24     	; 0x1aa <DIO_vsetbitdir+0x98>
 192:	24 b3       	in	r18, 0x14	; 20
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	02 c0       	rjmp	.+4      	; 0x19e <DIO_vsetbitdir+0x8c>
 19a:	88 0f       	add	r24, r24
 19c:	99 1f       	adc	r25, r25
 19e:	6a 95       	dec	r22
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <DIO_vsetbitdir+0x88>
 1a2:	80 95       	com	r24
 1a4:	82 23       	and	r24, r18
 1a6:	84 bb       	out	0x14, r24	; 20
 1a8:	08 95       	ret
 1aa:	24 b3       	in	r18, 0x14	; 20
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_vsetbitdir+0xa4>
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	6a 95       	dec	r22
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_vsetbitdir+0xa0>
 1ba:	82 2b       	or	r24, r18
 1bc:	84 bb       	out	0x14, r24	; 20
 1be:	08 95       	ret
 1c0:	41 11       	cpse	r20, r1
 1c2:	0c c0       	rjmp	.+24     	; 0x1dc <DIO_vsetbitdir+0xca>
 1c4:	21 b3       	in	r18, 0x11	; 17
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <DIO_vsetbitdir+0xbe>
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	6a 95       	dec	r22
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <DIO_vsetbitdir+0xba>
 1d4:	80 95       	com	r24
 1d6:	82 23       	and	r24, r18
 1d8:	81 bb       	out	0x11, r24	; 17
 1da:	08 95       	ret
 1dc:	21 b3       	in	r18, 0x11	; 17
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <DIO_vsetbitdir+0xd6>
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	6a 95       	dec	r22
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <DIO_vsetbitdir+0xd2>
 1ec:	82 2b       	or	r24, r18
 1ee:	81 bb       	out	0x11, r24	; 17
 1f0:	08 95       	ret

000001f2 <DIO_vpinwrite>:
		break;
	}
}
void DIO_vpinwrite(char port, char pin, char data)
{
	switch(port)
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	fc 01       	movw	r30, r24
 1f6:	e1 54       	subi	r30, 0x41	; 65
 1f8:	f1 09       	sbc	r31, r1
 1fa:	e4 32       	cpi	r30, 0x24	; 36
 1fc:	f1 05       	cpc	r31, r1
 1fe:	08 f0       	brcs	.+2      	; 0x202 <DIO_vpinwrite+0x10>
 200:	67 c0       	rjmp	.+206    	; 0x2d0 <DIO_vpinwrite+0xde>
 202:	e2 5b       	subi	r30, 0xB2	; 178
 204:	ff 4f       	sbci	r31, 0xFF	; 255
 206:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <__tablejump2__>
	{	case 'A':
		case 'a':	if (data==0)
 20a:	41 11       	cpse	r20, r1
 20c:	0c c0       	rjmp	.+24     	; 0x226 <DIO_vpinwrite+0x34>
		CLR_BIT(PORTA,pin);
 20e:	2b b3       	in	r18, 0x1b	; 27
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_vpinwrite+0x28>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_vpinwrite+0x24>
 21e:	80 95       	com	r24
 220:	82 23       	and	r24, r18
 222:	8b bb       	out	0x1b, r24	; 27
 224:	08 95       	ret
		else
		SET_BIT(PORTA,pin);
 226:	2b b3       	in	r18, 0x1b	; 27
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <DIO_vpinwrite+0x40>
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	6a 95       	dec	r22
 234:	e2 f7       	brpl	.-8      	; 0x22e <DIO_vpinwrite+0x3c>
 236:	82 2b       	or	r24, r18
 238:	8b bb       	out	0x1b, r24	; 27
 23a:	08 95       	ret
		break;
		
		case 'B':
		case 'b':	if (data==0)
 23c:	41 11       	cpse	r20, r1
 23e:	0c c0       	rjmp	.+24     	; 0x258 <DIO_vpinwrite+0x66>
		CLR_BIT(PORTB,pin);
 240:	28 b3       	in	r18, 0x18	; 24
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_vpinwrite+0x5a>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	6a 95       	dec	r22
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_vpinwrite+0x56>
 250:	80 95       	com	r24
 252:	82 23       	and	r24, r18
 254:	88 bb       	out	0x18, r24	; 24
 256:	08 95       	ret
		else
		SET_BIT(PORTB,pin);
 258:	28 b3       	in	r18, 0x18	; 24
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	02 c0       	rjmp	.+4      	; 0x264 <DIO_vpinwrite+0x72>
 260:	88 0f       	add	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	6a 95       	dec	r22
 266:	e2 f7       	brpl	.-8      	; 0x260 <DIO_vpinwrite+0x6e>
 268:	82 2b       	or	r24, r18
 26a:	88 bb       	out	0x18, r24	; 24
 26c:	08 95       	ret
		break;
		case 'C':
		case 'c':	if (data==0)
 26e:	41 11       	cpse	r20, r1
 270:	0c c0       	rjmp	.+24     	; 0x28a <DIO_vpinwrite+0x98>
		CLR_BIT(PORTC,pin);
 272:	25 b3       	in	r18, 0x15	; 21
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_vpinwrite+0x8c>
 27a:	88 0f       	add	r24, r24
 27c:	99 1f       	adc	r25, r25
 27e:	6a 95       	dec	r22
 280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_vpinwrite+0x88>
 282:	80 95       	com	r24
 284:	82 23       	and	r24, r18
 286:	85 bb       	out	0x15, r24	; 21
 288:	08 95       	ret
		else
		SET_BIT(PORTC,pin);
 28a:	25 b3       	in	r18, 0x15	; 21
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	02 c0       	rjmp	.+4      	; 0x296 <DIO_vpinwrite+0xa4>
 292:	88 0f       	add	r24, r24
 294:	99 1f       	adc	r25, r25
 296:	6a 95       	dec	r22
 298:	e2 f7       	brpl	.-8      	; 0x292 <DIO_vpinwrite+0xa0>
 29a:	82 2b       	or	r24, r18
 29c:	85 bb       	out	0x15, r24	; 21
 29e:	08 95       	ret
		break;
		case 'D':
		case 'd':	if (data==0)
 2a0:	41 11       	cpse	r20, r1
 2a2:	0c c0       	rjmp	.+24     	; 0x2bc <DIO_vpinwrite+0xca>
		CLR_BIT(PORTD,pin);
 2a4:	22 b3       	in	r18, 0x12	; 18
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_vpinwrite+0xbe>
 2ac:	88 0f       	add	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	6a 95       	dec	r22
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_vpinwrite+0xba>
 2b4:	80 95       	com	r24
 2b6:	82 23       	and	r24, r18
 2b8:	82 bb       	out	0x12, r24	; 18
 2ba:	08 95       	ret
		else
		SET_BIT(PORTD,pin);
 2bc:	22 b3       	in	r18, 0x12	; 18
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_vpinwrite+0xd6>
 2c4:	88 0f       	add	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	6a 95       	dec	r22
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_vpinwrite+0xd2>
 2cc:	82 2b       	or	r24, r18
 2ce:	82 bb       	out	0x12, r24	; 18
 2d0:	08 95       	ret

000002d2 <MCAL_Dio_Init>:
			DIO_PORTD = Port_Value;
			break;
		}
	}
	return error;
}
 2d2:	fc 01       	movw	r30, r24
 2d4:	90 81       	ld	r25, Z
 2d6:	94 30       	cpi	r25, 0x04	; 4
 2d8:	48 f5       	brcc	.+82     	; 0x32c <MCAL_Dio_Init+0x5a>
 2da:	81 81       	ldd	r24, Z+1	; 0x01
 2dc:	22 81       	ldd	r18, Z+2	; 0x02
 2de:	28 23       	and	r18, r24
 2e0:	91 30       	cpi	r25, 0x01	; 1
 2e2:	79 f0       	breq	.+30     	; 0x302 <MCAL_Dio_Init+0x30>
 2e4:	28 f0       	brcs	.+10     	; 0x2f0 <MCAL_Dio_Init+0x1e>
 2e6:	92 30       	cpi	r25, 0x02	; 2
 2e8:	99 f0       	breq	.+38     	; 0x310 <MCAL_Dio_Init+0x3e>
 2ea:	93 30       	cpi	r25, 0x03	; 3
 2ec:	c1 f0       	breq	.+48     	; 0x31e <MCAL_Dio_Init+0x4c>
 2ee:	20 c0       	rjmp	.+64     	; 0x330 <MCAL_Dio_Init+0x5e>
 2f0:	3a b3       	in	r19, 0x1a	; 26
 2f2:	98 2f       	mov	r25, r24
 2f4:	90 95       	com	r25
 2f6:	89 2f       	mov	r24, r25
 2f8:	83 23       	and	r24, r19
 2fa:	28 2b       	or	r18, r24
 2fc:	2a bb       	out	0x1a, r18	; 26
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	08 95       	ret
 302:	97 b3       	in	r25, 0x17	; 23
 304:	80 95       	com	r24
 306:	89 23       	and	r24, r25
 308:	28 2b       	or	r18, r24
 30a:	27 bb       	out	0x17, r18	; 23
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	08 95       	ret
 310:	94 b3       	in	r25, 0x14	; 20
 312:	80 95       	com	r24
 314:	89 23       	and	r24, r25
 316:	28 2b       	or	r18, r24
 318:	24 bb       	out	0x14, r18	; 20
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	08 95       	ret
 31e:	91 b3       	in	r25, 0x11	; 17
 320:	80 95       	com	r24
 322:	89 23       	and	r24, r25
 324:	28 2b       	or	r18, r24
 326:	21 bb       	out	0x11, r18	; 17
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	08 95       	ret
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	08 95       	ret
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	08 95       	ret

00000334 <MCAL_Dio_WritePin>:


Std_type MCAL_Dio_WritePin(S_Dio *Dio_WritePin,u8PinValue Pin_value)
{
 334:	fc 01       	movw	r30, r24
	u8RegisterValue Mask1,Mask2;
	if(DIO_STATUS_ERROR == NOT_OK)
	{
		error = NOT_OK;
	}
	else if(Dio_WritePin->port_num >= DIO_CONFIGURED_PORTS)
 336:	90 81       	ld	r25, Z
 338:	94 30       	cpi	r25, 0x04	; 4
 33a:	30 f5       	brcc	.+76     	; 0x388 <MCAL_Dio_WritePin+0x54>
		error = NOT_OK;
	}
	else
	{

		Mask2 = ((Dio_WritePin->pin_num) & (Pin_value));
 33c:	81 81       	ldd	r24, Z+1	; 0x01
 33e:	68 23       	and	r22, r24
		switch(Dio_WritePin->port_num)
 340:	91 30       	cpi	r25, 0x01	; 1
 342:	69 f0       	breq	.+26     	; 0x35e <MCAL_Dio_WritePin+0x2a>
 344:	28 f0       	brcs	.+10     	; 0x350 <MCAL_Dio_WritePin+0x1c>
 346:	92 30       	cpi	r25, 0x02	; 2
 348:	89 f0       	breq	.+34     	; 0x36c <MCAL_Dio_WritePin+0x38>
 34a:	93 30       	cpi	r25, 0x03	; 3
 34c:	b1 f0       	breq	.+44     	; 0x37a <MCAL_Dio_WritePin+0x46>
 34e:	1e c0       	rjmp	.+60     	; 0x38c <MCAL_Dio_WritePin+0x58>
		{
		case PORTA_ID:
			Mask1 = ((DIO_PORTA) & (~(Dio_WritePin->pin_num)));
 350:	9b b3       	in	r25, 0x1b	; 27
 352:	80 95       	com	r24
 354:	89 23       	and	r24, r25
			DIO_PORTA = Mask1 | Mask2;
 356:	68 2b       	or	r22, r24
 358:	6b bb       	out	0x1b, r22	; 27
}


Std_type MCAL_Dio_WritePin(S_Dio *Dio_WritePin,u8PinValue Pin_value)
{
	Std_type error = OK;
 35a:	80 e0       	ldi	r24, 0x00	; 0
		switch(Dio_WritePin->port_num)
		{
		case PORTA_ID:
			Mask1 = ((DIO_PORTA) & (~(Dio_WritePin->pin_num)));
			DIO_PORTA = Mask1 | Mask2;
			break;
 35c:	08 95       	ret
		case PORTB_ID:
			Mask1 = ((DIO_PORTB) & (~(Dio_WritePin->pin_num)));
 35e:	98 b3       	in	r25, 0x18	; 24
 360:	80 95       	com	r24
 362:	89 23       	and	r24, r25
			DIO_PORTB = Mask1 | Mask2;
 364:	68 2b       	or	r22, r24
 366:	68 bb       	out	0x18, r22	; 24
}


Std_type MCAL_Dio_WritePin(S_Dio *Dio_WritePin,u8PinValue Pin_value)
{
	Std_type error = OK;
 368:	80 e0       	ldi	r24, 0x00	; 0
			DIO_PORTA = Mask1 | Mask2;
			break;
		case PORTB_ID:
			Mask1 = ((DIO_PORTB) & (~(Dio_WritePin->pin_num)));
			DIO_PORTB = Mask1 | Mask2;
			break;
 36a:	08 95       	ret
		case PORTC_ID:
			Mask1 = ((DIO_PORTC) & (~(Dio_WritePin->pin_num)));
 36c:	95 b3       	in	r25, 0x15	; 21
 36e:	80 95       	com	r24
 370:	89 23       	and	r24, r25
			DIO_PORTC = Mask1 | Mask2;
 372:	68 2b       	or	r22, r24
 374:	65 bb       	out	0x15, r22	; 21
}


Std_type MCAL_Dio_WritePin(S_Dio *Dio_WritePin,u8PinValue Pin_value)
{
	Std_type error = OK;
 376:	80 e0       	ldi	r24, 0x00	; 0
			DIO_PORTB = Mask1 | Mask2;
			break;
		case PORTC_ID:
			Mask1 = ((DIO_PORTC) & (~(Dio_WritePin->pin_num)));
			DIO_PORTC = Mask1 | Mask2;
			break;
 378:	08 95       	ret
		case PORTD_ID:
			Mask1 = ((DIO_PORTD) & (~(Dio_WritePin->pin_num)));
 37a:	92 b3       	in	r25, 0x12	; 18
 37c:	80 95       	com	r24
 37e:	89 23       	and	r24, r25
			DIO_PORTD = Mask1 | Mask2;
 380:	68 2b       	or	r22, r24
 382:	62 bb       	out	0x12, r22	; 18
}


Std_type MCAL_Dio_WritePin(S_Dio *Dio_WritePin,u8PinValue Pin_value)
{
	Std_type error = OK;
 384:	80 e0       	ldi	r24, 0x00	; 0
			DIO_PORTC = Mask1 | Mask2;
			break;
		case PORTD_ID:
			Mask1 = ((DIO_PORTD) & (~(Dio_WritePin->pin_num)));
			DIO_PORTD = Mask1 | Mask2;
			break;
 386:	08 95       	ret
		error = NOT_OK;
	}
	else if(Dio_WritePin->port_num >= DIO_CONFIGURED_PORTS)
	{

		error = NOT_OK;
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	08 95       	ret
}


Std_type MCAL_Dio_WritePin(S_Dio *Dio_WritePin,u8PinValue Pin_value)
{
	Std_type error = OK;
 38c:	80 e0       	ldi	r24, 0x00	; 0
			break;

		}
	}
	return error;
}
 38e:	08 95       	ret

00000390 <MCAL_Dio_WriteSinglePin>:
		u8PinNumber bitNumber;
		if(DIO_STATUS_ERROR == NOT_OK)
		{
			error = NOT_OK;
		}
		else if(Dio_WritePin->port_num >= DIO_CONFIGURED_PORTS)
 390:	fc 01       	movw	r30, r24
 392:	50 81       	ld	r21, Z
 394:	54 30       	cpi	r21, 0x04	; 4
 396:	08 f0       	brcs	.+2      	; 0x39a <MCAL_Dio_WriteSinglePin+0xa>
 398:	88 c0       	rjmp	.+272    	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	0d c0       	rjmp	.+26     	; 0x3ba <MCAL_Dio_WriteSinglePin+0x2a>
			error = NOT_OK;
		}
		else
		{
			for (int i = 0; i < DIO_CONFIGURED_PINS; i++) {
						if (Pin_Num & (1 << i)) {
 3a0:	26 2f       	mov	r18, r22
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	08 2e       	mov	r0, r24
 3a6:	02 c0       	rjmp	.+4      	; 0x3ac <MCAL_Dio_WriteSinglePin+0x1c>
 3a8:	35 95       	asr	r19
 3aa:	27 95       	ror	r18
 3ac:	0a 94       	dec	r0
 3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <MCAL_Dio_WriteSinglePin+0x18>
 3b0:	20 ff       	sbrs	r18, 0
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <MCAL_Dio_WriteSinglePin+0x28>
							bitNumber = i;
 3b4:	78 2f       	mov	r23, r24
							break;
 3b6:	04 c0       	rjmp	.+8      	; 0x3c0 <MCAL_Dio_WriteSinglePin+0x30>

			error = NOT_OK;
		}
		else
		{
			for (int i = 0; i < DIO_CONFIGURED_PINS; i++) {
 3b8:	01 96       	adiw	r24, 0x01	; 1
 3ba:	88 30       	cpi	r24, 0x08	; 8
 3bc:	91 05       	cpc	r25, r1
 3be:	84 f3       	brlt	.-32     	; 0x3a0 <MCAL_Dio_WriteSinglePin+0x10>
						if (Pin_Num & (1 << i)) {
							bitNumber = i;
							break;
						}
					}
			switch(Dio_WritePin->port_num)
 3c0:	51 30       	cpi	r21, 0x01	; 1
 3c2:	11 f1       	breq	.+68     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3c4:	30 f0       	brcs	.+12     	; 0x3d2 <MCAL_Dio_WriteSinglePin+0x42>
 3c6:	52 30       	cpi	r21, 0x02	; 2
 3c8:	d1 f1       	breq	.+116    	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 3ca:	53 30       	cpi	r21, 0x03	; 3
 3cc:	09 f4       	brne	.+2      	; 0x3d0 <MCAL_Dio_WriteSinglePin+0x40>
 3ce:	52 c0       	rjmp	.+164    	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 3d0:	6e c0       	rjmp	.+220    	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
					{
					case PORTA_ID:
						if(Pin_value == 1) // compare with one as i define LOGIC_HIGH 1 in DIO_std but ican't use it
 3d2:	41 30       	cpi	r20, 0x01	; 1
 3d4:	61 f4       	brne	.+24     	; 0x3ee <MCAL_Dio_WriteSinglePin+0x5e>
						{
							SET_BIT(DIO_PORTA,bitNumber);
 3d6:	2b b3       	in	r18, 0x1b	; 27
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <MCAL_Dio_WriteSinglePin+0x52>
 3de:	88 0f       	add	r24, r24
 3e0:	99 1f       	adc	r25, r25
 3e2:	7a 95       	dec	r23
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <MCAL_Dio_WriteSinglePin+0x4e>
 3e6:	82 2b       	or	r24, r18
 3e8:	8b bb       	out	0x1b, r24	; 27
	return error;
}

Std_type MCAL_Dio_WriteSinglePin(S_Dio *Dio_WritePin,E_DioPin Pin_Num,u8PinValue Pin_value)
{
		Std_type error = OK;
 3ea:	80 e0       	ldi	r24, 0x00	; 0
 3ec:	08 95       	ret
						{
							SET_BIT(DIO_PORTA,bitNumber);
						}
						else
						{
							CLEAR_BIT(DIO_PORTA,bitNumber);
 3ee:	2b b3       	in	r18, 0x1b	; 27
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <MCAL_Dio_WriteSinglePin+0x6a>
 3f6:	88 0f       	add	r24, r24
 3f8:	99 1f       	adc	r25, r25
 3fa:	7a 95       	dec	r23
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <MCAL_Dio_WriteSinglePin+0x66>
 3fe:	80 95       	com	r24
 400:	82 23       	and	r24, r18
 402:	8b bb       	out	0x1b, r24	; 27
	return error;
}

Std_type MCAL_Dio_WriteSinglePin(S_Dio *Dio_WritePin,E_DioPin Pin_Num,u8PinValue Pin_value)
{
		Std_type error = OK;
 404:	80 e0       	ldi	r24, 0x00	; 0
 406:	08 95       	ret
						{
							CLEAR_BIT(DIO_PORTA,bitNumber);
						}
						break;
					case PORTB_ID:
						if(Pin_value == 1)
 408:	41 30       	cpi	r20, 0x01	; 1
 40a:	61 f4       	brne	.+24     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
						{
							SET_BIT(DIO_PORTB,bitNumber);
 40c:	28 b3       	in	r18, 0x18	; 24
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	02 c0       	rjmp	.+4      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 414:	88 0f       	add	r24, r24
 416:	99 1f       	adc	r25, r25
 418:	7a 95       	dec	r23
 41a:	e2 f7       	brpl	.-8      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 41c:	82 2b       	or	r24, r18
 41e:	88 bb       	out	0x18, r24	; 24
	return error;
}

Std_type MCAL_Dio_WriteSinglePin(S_Dio *Dio_WritePin,E_DioPin Pin_Num,u8PinValue Pin_value)
{
		Std_type error = OK;
 420:	80 e0       	ldi	r24, 0x00	; 0
 422:	08 95       	ret
						{
							SET_BIT(DIO_PORTB,bitNumber);
						}
						else
						{
							CLEAR_BIT(DIO_PORTB,bitNumber);
 424:	28 b3       	in	r18, 0x18	; 24
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	02 c0       	rjmp	.+4      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 42c:	88 0f       	add	r24, r24
 42e:	99 1f       	adc	r25, r25
 430:	7a 95       	dec	r23
 432:	e2 f7       	brpl	.-8      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 434:	80 95       	com	r24
 436:	82 23       	and	r24, r18
 438:	88 bb       	out	0x18, r24	; 24
	return error;
}

Std_type MCAL_Dio_WriteSinglePin(S_Dio *Dio_WritePin,E_DioPin Pin_Num,u8PinValue Pin_value)
{
		Std_type error = OK;
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	08 95       	ret
						{
							CLEAR_BIT(DIO_PORTB,bitNumber);
						}
						break;
					case PORTC_ID:
						if(Pin_value == 1)
 43e:	41 30       	cpi	r20, 0x01	; 1
 440:	61 f4       	brne	.+24     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
						{
							SET_BIT(DIO_PORTC,bitNumber);
 442:	25 b3       	in	r18, 0x15	; 21
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	02 c0       	rjmp	.+4      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 44a:	88 0f       	add	r24, r24
 44c:	99 1f       	adc	r25, r25
 44e:	7a 95       	dec	r23
 450:	e2 f7       	brpl	.-8      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 452:	82 2b       	or	r24, r18
 454:	85 bb       	out	0x15, r24	; 21
	return error;
}

Std_type MCAL_Dio_WriteSinglePin(S_Dio *Dio_WritePin,E_DioPin Pin_Num,u8PinValue Pin_value)
{
		Std_type error = OK;
 456:	80 e0       	ldi	r24, 0x00	; 0
 458:	08 95       	ret
						{
							SET_BIT(DIO_PORTC,bitNumber);
						}
						else
						{
							CLEAR_BIT(DIO_PORTC,bitNumber);
 45a:	25 b3       	in	r18, 0x15	; 21
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	02 c0       	rjmp	.+4      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 462:	88 0f       	add	r24, r24
 464:	99 1f       	adc	r25, r25
 466:	7a 95       	dec	r23
 468:	e2 f7       	brpl	.-8      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 46a:	80 95       	com	r24
 46c:	82 23       	and	r24, r18
 46e:	85 bb       	out	0x15, r24	; 21
	return error;
}

Std_type MCAL_Dio_WriteSinglePin(S_Dio *Dio_WritePin,E_DioPin Pin_Num,u8PinValue Pin_value)
{
		Std_type error = OK;
 470:	80 e0       	ldi	r24, 0x00	; 0
 472:	08 95       	ret
						{
							CLEAR_BIT(DIO_PORTC,bitNumber);
						}
						break;
					case PORTD_ID:
						if(Pin_value == 1)
 474:	41 30       	cpi	r20, 0x01	; 1
 476:	61 f4       	brne	.+24     	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
						{
							SET_BIT(DIO_PORTD,bitNumber);
 478:	22 b3       	in	r18, 0x12	; 18
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	02 c0       	rjmp	.+4      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 480:	88 0f       	add	r24, r24
 482:	99 1f       	adc	r25, r25
 484:	7a 95       	dec	r23
 486:	e2 f7       	brpl	.-8      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 488:	82 2b       	or	r24, r18
 48a:	82 bb       	out	0x12, r24	; 18
	return error;
}

Std_type MCAL_Dio_WriteSinglePin(S_Dio *Dio_WritePin,E_DioPin Pin_Num,u8PinValue Pin_value)
{
		Std_type error = OK;
 48c:	80 e0       	ldi	r24, 0x00	; 0
 48e:	08 95       	ret
						{
							SET_BIT(DIO_PORTD,bitNumber);
						}
						else
						{
							CLEAR_BIT(DIO_PORTD,bitNumber);
 490:	22 b3       	in	r18, 0x12	; 18
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	02 c0       	rjmp	.+4      	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 498:	88 0f       	add	r24, r24
 49a:	99 1f       	adc	r25, r25
 49c:	7a 95       	dec	r23
 49e:	e2 f7       	brpl	.-8      	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 4a0:	80 95       	com	r24
 4a2:	82 23       	and	r24, r18
 4a4:	82 bb       	out	0x12, r24	; 18
	return error;
}

Std_type MCAL_Dio_WriteSinglePin(S_Dio *Dio_WritePin,E_DioPin Pin_Num,u8PinValue Pin_value)
{
		Std_type error = OK;
 4a6:	80 e0       	ldi	r24, 0x00	; 0
 4a8:	08 95       	ret
			error = NOT_OK;
		}
		else if(Dio_WritePin->port_num >= DIO_CONFIGURED_PORTS)
		{

			error = NOT_OK;
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	08 95       	ret
	return error;
}

Std_type MCAL_Dio_WriteSinglePin(S_Dio *Dio_WritePin,E_DioPin Pin_Num,u8PinValue Pin_value)
{
		Std_type error = OK;
 4ae:	80 e0       	ldi	r24, 0x00	; 0

		}

		return error;

}
 4b0:	08 95       	ret

000004b2 <HAL_LCD_sendCommand>:
{
	E_ErrorType u8LocalReturn = E_NOT_OK;
	u8LocalReturn = HAL_LCD_goToRowColumn(row, col);
	u8LocalReturn = HAL_LCD_sendString(str);
	return u8LocalReturn;
}
 4b2:	1f 93       	push	r17
 4b4:	cf 93       	push	r28
 4b6:	df 93       	push	r29
 4b8:	cd b7       	in	r28, 0x3d	; 61
 4ba:	de b7       	in	r29, 0x3e	; 62
 4bc:	29 97       	sbiw	r28, 0x09	; 9
 4be:	0f b6       	in	r0, 0x3f	; 63
 4c0:	f8 94       	cli
 4c2:	de bf       	out	0x3e, r29	; 62
 4c4:	0f be       	out	0x3f, r0	; 63
 4c6:	cd bf       	out	0x3d, r28	; 61
 4c8:	18 2f       	mov	r17, r24
 4ca:	19 82       	std	Y+1, r1	; 0x01
 4cc:	88 e0       	ldi	r24, 0x08	; 8
 4ce:	8a 83       	std	Y+2, r24	; 0x02
 4d0:	1b 82       	std	Y+3, r1	; 0x03
 4d2:	60 e0       	ldi	r22, 0x00	; 0
 4d4:	ce 01       	movw	r24, r28
 4d6:	01 96       	adiw	r24, 0x01	; 1
 4d8:	0e 94 9a 01 	call	0x334	; 0x334 <MCAL_Dio_WritePin>
 4dc:	89 ef       	ldi	r24, 0xF9	; 249
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	01 97       	sbiw	r24, 0x01	; 1
 4e2:	f1 f7       	brne	.-4      	; 0x4e0 <HAL_LCD_sendCommand+0x2e>
 4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <HAL_LCD_sendCommand+0x34>
 4e6:	00 00       	nop
 4e8:	1c 82       	std	Y+4, r1	; 0x04
 4ea:	84 e0       	ldi	r24, 0x04	; 4
 4ec:	8d 83       	std	Y+5, r24	; 0x05
 4ee:	1e 82       	std	Y+6, r1	; 0x06
 4f0:	e9 ef       	ldi	r30, 0xF9	; 249
 4f2:	f0 e0       	ldi	r31, 0x00	; 0
 4f4:	31 97       	sbiw	r30, 0x01	; 1
 4f6:	f1 f7       	brne	.-4      	; 0x4f4 <HAL_LCD_sendCommand+0x42>
 4f8:	00 c0       	rjmp	.+0      	; 0x4fa <HAL_LCD_sendCommand+0x48>
 4fa:	00 00       	nop
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	8f 83       	std	Y+7, r24	; 0x07
 500:	87 e1       	ldi	r24, 0x17	; 23
 502:	88 87       	std	Y+8, r24	; 0x08
 504:	8f ef       	ldi	r24, 0xFF	; 255
 506:	89 87       	std	Y+9, r24	; 0x09
 508:	14 fb       	bst	r17, 4
 50a:	44 27       	eor	r20, r20
 50c:	40 f9       	bld	r20, 0
 50e:	61 e0       	ldi	r22, 0x01	; 1
 510:	ce 01       	movw	r24, r28
 512:	07 96       	adiw	r24, 0x07	; 7
 514:	0e 94 c8 01 	call	0x390	; 0x390 <MCAL_Dio_WriteSinglePin>
 518:	15 fb       	bst	r17, 5
 51a:	44 27       	eor	r20, r20
 51c:	40 f9       	bld	r20, 0
 51e:	62 e0       	ldi	r22, 0x02	; 2
 520:	ce 01       	movw	r24, r28
 522:	07 96       	adiw	r24, 0x07	; 7
 524:	0e 94 c8 01 	call	0x390	; 0x390 <MCAL_Dio_WriteSinglePin>
 528:	16 fb       	bst	r17, 6
 52a:	44 27       	eor	r20, r20
 52c:	40 f9       	bld	r20, 0
 52e:	64 e0       	ldi	r22, 0x04	; 4
 530:	ce 01       	movw	r24, r28
 532:	07 96       	adiw	r24, 0x07	; 7
 534:	0e 94 c8 01 	call	0x390	; 0x390 <MCAL_Dio_WriteSinglePin>
 538:	41 2f       	mov	r20, r17
 53a:	44 1f       	adc	r20, r20
 53c:	44 27       	eor	r20, r20
 53e:	44 1f       	adc	r20, r20
 540:	60 e1       	ldi	r22, 0x10	; 16
 542:	ce 01       	movw	r24, r28
 544:	07 96       	adiw	r24, 0x07	; 7
 546:	0e 94 c8 01 	call	0x390	; 0x390 <MCAL_Dio_WriteSinglePin>
 54a:	89 ef       	ldi	r24, 0xF9	; 249
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	01 97       	sbiw	r24, 0x01	; 1
 550:	f1 f7       	brne	.-4      	; 0x54e <HAL_LCD_sendCommand+0x9c>
 552:	00 c0       	rjmp	.+0      	; 0x554 <HAL_LCD_sendCommand+0xa2>
 554:	00 00       	nop
 556:	6f ef       	ldi	r22, 0xFF	; 255
 558:	ce 01       	movw	r24, r28
 55a:	04 96       	adiw	r24, 0x04	; 4
 55c:	0e 94 9a 01 	call	0x334	; 0x334 <MCAL_Dio_WritePin>
 560:	e9 ef       	ldi	r30, 0xF9	; 249
 562:	f0 e0       	ldi	r31, 0x00	; 0
 564:	31 97       	sbiw	r30, 0x01	; 1
 566:	f1 f7       	brne	.-4      	; 0x564 <HAL_LCD_sendCommand+0xb2>
 568:	00 c0       	rjmp	.+0      	; 0x56a <HAL_LCD_sendCommand+0xb8>
 56a:	00 00       	nop
 56c:	60 e0       	ldi	r22, 0x00	; 0
 56e:	ce 01       	movw	r24, r28
 570:	04 96       	adiw	r24, 0x04	; 4
 572:	0e 94 9a 01 	call	0x334	; 0x334 <MCAL_Dio_WritePin>
 576:	89 ef       	ldi	r24, 0xF9	; 249
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	01 97       	sbiw	r24, 0x01	; 1
 57c:	f1 f7       	brne	.-4      	; 0x57a <HAL_LCD_sendCommand+0xc8>
 57e:	00 c0       	rjmp	.+0      	; 0x580 <HAL_LCD_sendCommand+0xce>
 580:	00 00       	nop
 582:	41 2f       	mov	r20, r17
 584:	41 70       	andi	r20, 0x01	; 1
 586:	61 e0       	ldi	r22, 0x01	; 1
 588:	ce 01       	movw	r24, r28
 58a:	07 96       	adiw	r24, 0x07	; 7
 58c:	0e 94 c8 01 	call	0x390	; 0x390 <MCAL_Dio_WriteSinglePin>
 590:	11 fb       	bst	r17, 1
 592:	44 27       	eor	r20, r20
 594:	40 f9       	bld	r20, 0
 596:	62 e0       	ldi	r22, 0x02	; 2
 598:	ce 01       	movw	r24, r28
 59a:	07 96       	adiw	r24, 0x07	; 7
 59c:	0e 94 c8 01 	call	0x390	; 0x390 <MCAL_Dio_WriteSinglePin>
 5a0:	12 fb       	bst	r17, 2
 5a2:	44 27       	eor	r20, r20
 5a4:	40 f9       	bld	r20, 0
 5a6:	64 e0       	ldi	r22, 0x04	; 4
 5a8:	ce 01       	movw	r24, r28
 5aa:	07 96       	adiw	r24, 0x07	; 7
 5ac:	0e 94 c8 01 	call	0x390	; 0x390 <MCAL_Dio_WriteSinglePin>
 5b0:	13 fb       	bst	r17, 3
 5b2:	44 27       	eor	r20, r20
 5b4:	40 f9       	bld	r20, 0
 5b6:	60 e1       	ldi	r22, 0x10	; 16
 5b8:	ce 01       	movw	r24, r28
 5ba:	07 96       	adiw	r24, 0x07	; 7
 5bc:	0e 94 c8 01 	call	0x390	; 0x390 <MCAL_Dio_WriteSinglePin>
 5c0:	e9 ef       	ldi	r30, 0xF9	; 249
 5c2:	f0 e0       	ldi	r31, 0x00	; 0
 5c4:	31 97       	sbiw	r30, 0x01	; 1
 5c6:	f1 f7       	brne	.-4      	; 0x5c4 <HAL_LCD_sendCommand+0x112>
 5c8:	00 c0       	rjmp	.+0      	; 0x5ca <HAL_LCD_sendCommand+0x118>
 5ca:	00 00       	nop
 5cc:	6f ef       	ldi	r22, 0xFF	; 255
 5ce:	ce 01       	movw	r24, r28
 5d0:	04 96       	adiw	r24, 0x04	; 4
 5d2:	0e 94 9a 01 	call	0x334	; 0x334 <MCAL_Dio_WritePin>
 5d6:	89 ef       	ldi	r24, 0xF9	; 249
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	01 97       	sbiw	r24, 0x01	; 1
 5dc:	f1 f7       	brne	.-4      	; 0x5da <HAL_LCD_sendCommand+0x128>
 5de:	00 c0       	rjmp	.+0      	; 0x5e0 <HAL_LCD_sendCommand+0x12e>
 5e0:	00 00       	nop
 5e2:	60 e0       	ldi	r22, 0x00	; 0
 5e4:	ce 01       	movw	r24, r28
 5e6:	04 96       	adiw	r24, 0x04	; 4
 5e8:	0e 94 9a 01 	call	0x334	; 0x334 <MCAL_Dio_WritePin>
 5ec:	e9 ef       	ldi	r30, 0xF9	; 249
 5ee:	f0 e0       	ldi	r31, 0x00	; 0
 5f0:	31 97       	sbiw	r30, 0x01	; 1
 5f2:	f1 f7       	brne	.-4      	; 0x5f0 <HAL_LCD_sendCommand+0x13e>
 5f4:	00 c0       	rjmp	.+0      	; 0x5f6 <HAL_LCD_sendCommand+0x144>
 5f6:	00 00       	nop
 5f8:	29 96       	adiw	r28, 0x09	; 9
 5fa:	0f b6       	in	r0, 0x3f	; 63
 5fc:	f8 94       	cli
 5fe:	de bf       	out	0x3e, r29	; 62
 600:	0f be       	out	0x3f, r0	; 63
 602:	cd bf       	out	0x3d, r28	; 61
 604:	df 91       	pop	r29
 606:	cf 91       	pop	r28
 608:	1f 91       	pop	r17
 60a:	08 95       	ret

0000060c <HAL_LCD_init>:
 60c:	1f 93       	push	r17
 60e:	cf 93       	push	r28
 610:	df 93       	push	r29
 612:	cd b7       	in	r28, 0x3d	; 61
 614:	de b7       	in	r29, 0x3e	; 62
 616:	29 97       	sbiw	r28, 0x09	; 9
 618:	0f b6       	in	r0, 0x3f	; 63
 61a:	f8 94       	cli
 61c:	de bf       	out	0x3e, r29	; 62
 61e:	0f be       	out	0x3f, r0	; 63
 620:	cd bf       	out	0x3d, r28	; 61
 622:	19 82       	std	Y+1, r1	; 0x01
 624:	88 e0       	ldi	r24, 0x08	; 8
 626:	8a 83       	std	Y+2, r24	; 0x02
 628:	1f ef       	ldi	r17, 0xFF	; 255
 62a:	1b 83       	std	Y+3, r17	; 0x03
 62c:	ce 01       	movw	r24, r28
 62e:	01 96       	adiw	r24, 0x01	; 1
 630:	0e 94 69 01 	call	0x2d2	; 0x2d2 <MCAL_Dio_Init>
 634:	1c 82       	std	Y+4, r1	; 0x04
 636:	84 e0       	ldi	r24, 0x04	; 4
 638:	8d 83       	std	Y+5, r24	; 0x05
 63a:	1e 83       	std	Y+6, r17	; 0x06
 63c:	ce 01       	movw	r24, r28
 63e:	04 96       	adiw	r24, 0x04	; 4
 640:	0e 94 69 01 	call	0x2d2	; 0x2d2 <MCAL_Dio_Init>
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	8f 83       	std	Y+7, r24	; 0x07
 648:	87 e1       	ldi	r24, 0x17	; 23
 64a:	88 87       	std	Y+8, r24	; 0x08
 64c:	19 87       	std	Y+9, r17	; 0x09
 64e:	ce 01       	movw	r24, r28
 650:	07 96       	adiw	r24, 0x07	; 7
 652:	0e 94 69 01 	call	0x2d2	; 0x2d2 <MCAL_Dio_Init>
 656:	18 2f       	mov	r17, r24
 658:	8d e2       	ldi	r24, 0x2D	; 45
 65a:	92 e2       	ldi	r25, 0x22	; 34
 65c:	01 97       	sbiw	r24, 0x01	; 1
 65e:	f1 f7       	brne	.-4      	; 0x65c <HAL_LCD_init+0x50>
 660:	00 c0       	rjmp	.+0      	; 0x662 <HAL_LCD_init+0x56>
 662:	00 00       	nop
 664:	82 e0       	ldi	r24, 0x02	; 2
 666:	0e 94 59 02 	call	0x4b2	; 0x4b2 <HAL_LCD_sendCommand>
 66a:	88 e2       	ldi	r24, 0x28	; 40
 66c:	0e 94 59 02 	call	0x4b2	; 0x4b2 <HAL_LCD_sendCommand>
 670:	8f e0       	ldi	r24, 0x0F	; 15
 672:	97 e2       	ldi	r25, 0x27	; 39
 674:	01 97       	sbiw	r24, 0x01	; 1
 676:	f1 f7       	brne	.-4      	; 0x674 <HAL_LCD_init+0x68>
 678:	00 c0       	rjmp	.+0      	; 0x67a <HAL_LCD_init+0x6e>
 67a:	00 00       	nop
 67c:	8e e0       	ldi	r24, 0x0E	; 14
 67e:	0e 94 59 02 	call	0x4b2	; 0x4b2 <HAL_LCD_sendCommand>
 682:	8f e0       	ldi	r24, 0x0F	; 15
 684:	97 e2       	ldi	r25, 0x27	; 39
 686:	01 97       	sbiw	r24, 0x01	; 1
 688:	f1 f7       	brne	.-4      	; 0x686 <HAL_LCD_init+0x7a>
 68a:	00 c0       	rjmp	.+0      	; 0x68c <HAL_LCD_init+0x80>
 68c:	00 00       	nop
 68e:	81 e0       	ldi	r24, 0x01	; 1
 690:	0e 94 59 02 	call	0x4b2	; 0x4b2 <HAL_LCD_sendCommand>
 694:	83 ef       	ldi	r24, 0xF3	; 243
 696:	91 e0       	ldi	r25, 0x01	; 1
 698:	01 97       	sbiw	r24, 0x01	; 1
 69a:	f1 f7       	brne	.-4      	; 0x698 <HAL_LCD_init+0x8c>
 69c:	00 c0       	rjmp	.+0      	; 0x69e <HAL_LCD_init+0x92>
 69e:	00 00       	nop
 6a0:	86 e0       	ldi	r24, 0x06	; 6
 6a2:	0e 94 59 02 	call	0x4b2	; 0x4b2 <HAL_LCD_sendCommand>
 6a6:	81 2f       	mov	r24, r17
 6a8:	29 96       	adiw	r28, 0x09	; 9
 6aa:	0f b6       	in	r0, 0x3f	; 63
 6ac:	f8 94       	cli
 6ae:	de bf       	out	0x3e, r29	; 62
 6b0:	0f be       	out	0x3f, r0	; 63
 6b2:	cd bf       	out	0x3d, r28	; 61
 6b4:	df 91       	pop	r29
 6b6:	cf 91       	pop	r28
 6b8:	1f 91       	pop	r17
 6ba:	08 95       	ret

000006bc <HAL_LCD_sendCharacter>:
 6bc:	1f 93       	push	r17
 6be:	cf 93       	push	r28
 6c0:	df 93       	push	r29
 6c2:	cd b7       	in	r28, 0x3d	; 61
 6c4:	de b7       	in	r29, 0x3e	; 62
 6c6:	29 97       	sbiw	r28, 0x09	; 9
 6c8:	0f b6       	in	r0, 0x3f	; 63
 6ca:	f8 94       	cli
 6cc:	de bf       	out	0x3e, r29	; 62
 6ce:	0f be       	out	0x3f, r0	; 63
 6d0:	cd bf       	out	0x3d, r28	; 61
 6d2:	18 2f       	mov	r17, r24
 6d4:	19 82       	std	Y+1, r1	; 0x01
 6d6:	88 e0       	ldi	r24, 0x08	; 8
 6d8:	8a 83       	std	Y+2, r24	; 0x02
 6da:	1b 82       	std	Y+3, r1	; 0x03
 6dc:	6f ef       	ldi	r22, 0xFF	; 255
 6de:	ce 01       	movw	r24, r28
 6e0:	01 96       	adiw	r24, 0x01	; 1
 6e2:	0e 94 9a 01 	call	0x334	; 0x334 <MCAL_Dio_WritePin>
 6e6:	1c 82       	std	Y+4, r1	; 0x04
 6e8:	84 e0       	ldi	r24, 0x04	; 4
 6ea:	8d 83       	std	Y+5, r24	; 0x05
 6ec:	1e 82       	std	Y+6, r1	; 0x06
 6ee:	89 ef       	ldi	r24, 0xF9	; 249
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	01 97       	sbiw	r24, 0x01	; 1
 6f4:	f1 f7       	brne	.-4      	; 0x6f2 <HAL_LCD_sendCharacter+0x36>
 6f6:	00 c0       	rjmp	.+0      	; 0x6f8 <HAL_LCD_sendCharacter+0x3c>
 6f8:	00 00       	nop
 6fa:	81 e0       	ldi	r24, 0x01	; 1
 6fc:	8f 83       	std	Y+7, r24	; 0x07
 6fe:	87 e1       	ldi	r24, 0x17	; 23
 700:	88 87       	std	Y+8, r24	; 0x08
 702:	8f ef       	ldi	r24, 0xFF	; 255
 704:	89 87       	std	Y+9, r24	; 0x09
 706:	14 fb       	bst	r17, 4
 708:	44 27       	eor	r20, r20
 70a:	40 f9       	bld	r20, 0
 70c:	61 e0       	ldi	r22, 0x01	; 1
 70e:	ce 01       	movw	r24, r28
 710:	07 96       	adiw	r24, 0x07	; 7
 712:	0e 94 c8 01 	call	0x390	; 0x390 <MCAL_Dio_WriteSinglePin>
 716:	15 fb       	bst	r17, 5
 718:	44 27       	eor	r20, r20
 71a:	40 f9       	bld	r20, 0
 71c:	62 e0       	ldi	r22, 0x02	; 2
 71e:	ce 01       	movw	r24, r28
 720:	07 96       	adiw	r24, 0x07	; 7
 722:	0e 94 c8 01 	call	0x390	; 0x390 <MCAL_Dio_WriteSinglePin>
 726:	16 fb       	bst	r17, 6
 728:	44 27       	eor	r20, r20
 72a:	40 f9       	bld	r20, 0
 72c:	64 e0       	ldi	r22, 0x04	; 4
 72e:	ce 01       	movw	r24, r28
 730:	07 96       	adiw	r24, 0x07	; 7
 732:	0e 94 c8 01 	call	0x390	; 0x390 <MCAL_Dio_WriteSinglePin>
 736:	41 2f       	mov	r20, r17
 738:	44 1f       	adc	r20, r20
 73a:	44 27       	eor	r20, r20
 73c:	44 1f       	adc	r20, r20
 73e:	60 e1       	ldi	r22, 0x10	; 16
 740:	ce 01       	movw	r24, r28
 742:	07 96       	adiw	r24, 0x07	; 7
 744:	0e 94 c8 01 	call	0x390	; 0x390 <MCAL_Dio_WriteSinglePin>
 748:	e9 ef       	ldi	r30, 0xF9	; 249
 74a:	f0 e0       	ldi	r31, 0x00	; 0
 74c:	31 97       	sbiw	r30, 0x01	; 1
 74e:	f1 f7       	brne	.-4      	; 0x74c <HAL_LCD_sendCharacter+0x90>
 750:	00 c0       	rjmp	.+0      	; 0x752 <HAL_LCD_sendCharacter+0x96>
 752:	00 00       	nop
 754:	6f ef       	ldi	r22, 0xFF	; 255
 756:	ce 01       	movw	r24, r28
 758:	04 96       	adiw	r24, 0x04	; 4
 75a:	0e 94 9a 01 	call	0x334	; 0x334 <MCAL_Dio_WritePin>
 75e:	89 ef       	ldi	r24, 0xF9	; 249
 760:	90 e0       	ldi	r25, 0x00	; 0
 762:	01 97       	sbiw	r24, 0x01	; 1
 764:	f1 f7       	brne	.-4      	; 0x762 <HAL_LCD_sendCharacter+0xa6>
 766:	00 c0       	rjmp	.+0      	; 0x768 <HAL_LCD_sendCharacter+0xac>
 768:	00 00       	nop
 76a:	60 e0       	ldi	r22, 0x00	; 0
 76c:	ce 01       	movw	r24, r28
 76e:	04 96       	adiw	r24, 0x04	; 4
 770:	0e 94 9a 01 	call	0x334	; 0x334 <MCAL_Dio_WritePin>
 774:	e9 ef       	ldi	r30, 0xF9	; 249
 776:	f0 e0       	ldi	r31, 0x00	; 0
 778:	31 97       	sbiw	r30, 0x01	; 1
 77a:	f1 f7       	brne	.-4      	; 0x778 <HAL_LCD_sendCharacter+0xbc>
 77c:	00 c0       	rjmp	.+0      	; 0x77e <HAL_LCD_sendCharacter+0xc2>
 77e:	00 00       	nop
 780:	41 2f       	mov	r20, r17
 782:	41 70       	andi	r20, 0x01	; 1
 784:	61 e0       	ldi	r22, 0x01	; 1
 786:	ce 01       	movw	r24, r28
 788:	07 96       	adiw	r24, 0x07	; 7
 78a:	0e 94 c8 01 	call	0x390	; 0x390 <MCAL_Dio_WriteSinglePin>
 78e:	11 fb       	bst	r17, 1
 790:	44 27       	eor	r20, r20
 792:	40 f9       	bld	r20, 0
 794:	62 e0       	ldi	r22, 0x02	; 2
 796:	ce 01       	movw	r24, r28
 798:	07 96       	adiw	r24, 0x07	; 7
 79a:	0e 94 c8 01 	call	0x390	; 0x390 <MCAL_Dio_WriteSinglePin>
 79e:	12 fb       	bst	r17, 2
 7a0:	44 27       	eor	r20, r20
 7a2:	40 f9       	bld	r20, 0
 7a4:	64 e0       	ldi	r22, 0x04	; 4
 7a6:	ce 01       	movw	r24, r28
 7a8:	07 96       	adiw	r24, 0x07	; 7
 7aa:	0e 94 c8 01 	call	0x390	; 0x390 <MCAL_Dio_WriteSinglePin>
 7ae:	13 fb       	bst	r17, 3
 7b0:	44 27       	eor	r20, r20
 7b2:	40 f9       	bld	r20, 0
 7b4:	60 e1       	ldi	r22, 0x10	; 16
 7b6:	ce 01       	movw	r24, r28
 7b8:	07 96       	adiw	r24, 0x07	; 7
 7ba:	0e 94 c8 01 	call	0x390	; 0x390 <MCAL_Dio_WriteSinglePin>
 7be:	89 ef       	ldi	r24, 0xF9	; 249
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	01 97       	sbiw	r24, 0x01	; 1
 7c4:	f1 f7       	brne	.-4      	; 0x7c2 <HAL_LCD_sendCharacter+0x106>
 7c6:	00 c0       	rjmp	.+0      	; 0x7c8 <HAL_LCD_sendCharacter+0x10c>
 7c8:	00 00       	nop
 7ca:	6f ef       	ldi	r22, 0xFF	; 255
 7cc:	ce 01       	movw	r24, r28
 7ce:	04 96       	adiw	r24, 0x04	; 4
 7d0:	0e 94 9a 01 	call	0x334	; 0x334 <MCAL_Dio_WritePin>
 7d4:	e9 ef       	ldi	r30, 0xF9	; 249
 7d6:	f0 e0       	ldi	r31, 0x00	; 0
 7d8:	31 97       	sbiw	r30, 0x01	; 1
 7da:	f1 f7       	brne	.-4      	; 0x7d8 <HAL_LCD_sendCharacter+0x11c>
 7dc:	00 c0       	rjmp	.+0      	; 0x7de <HAL_LCD_sendCharacter+0x122>
 7de:	00 00       	nop
 7e0:	60 e0       	ldi	r22, 0x00	; 0
 7e2:	ce 01       	movw	r24, r28
 7e4:	04 96       	adiw	r24, 0x04	; 4
 7e6:	0e 94 9a 01 	call	0x334	; 0x334 <MCAL_Dio_WritePin>
 7ea:	e9 ef       	ldi	r30, 0xF9	; 249
 7ec:	f0 e0       	ldi	r31, 0x00	; 0
 7ee:	31 97       	sbiw	r30, 0x01	; 1
 7f0:	f1 f7       	brne	.-4      	; 0x7ee <HAL_LCD_sendCharacter+0x132>
 7f2:	00 c0       	rjmp	.+0      	; 0x7f4 <HAL_LCD_sendCharacter+0x138>
 7f4:	00 00       	nop
 7f6:	29 96       	adiw	r28, 0x09	; 9
 7f8:	0f b6       	in	r0, 0x3f	; 63
 7fa:	f8 94       	cli
 7fc:	de bf       	out	0x3e, r29	; 62
 7fe:	0f be       	out	0x3f, r0	; 63
 800:	cd bf       	out	0x3d, r28	; 61
 802:	df 91       	pop	r29
 804:	cf 91       	pop	r28
 806:	1f 91       	pop	r17
 808:	08 95       	ret

0000080a <HAL_LCD_sendString>:
 80a:	0f 93       	push	r16
 80c:	1f 93       	push	r17
 80e:	cf 93       	push	r28
 810:	8c 01       	movw	r16, r24
 812:	c0 e0       	ldi	r28, 0x00	; 0
 814:	81 e0       	ldi	r24, 0x01	; 1
 816:	04 c0       	rjmp	.+8      	; 0x820 <HAL_LCD_sendString+0x16>
 818:	89 2f       	mov	r24, r25
 81a:	0e 94 5e 03 	call	0x6bc	; 0x6bc <HAL_LCD_sendCharacter>
 81e:	cf 5f       	subi	r28, 0xFF	; 255
 820:	f8 01       	movw	r30, r16
 822:	ec 0f       	add	r30, r28
 824:	f1 1d       	adc	r31, r1
 826:	90 81       	ld	r25, Z
 828:	91 11       	cpse	r25, r1
 82a:	f6 cf       	rjmp	.-20     	; 0x818 <HAL_LCD_sendString+0xe>
 82c:	cf 91       	pop	r28
 82e:	1f 91       	pop	r17
 830:	0f 91       	pop	r16
 832:	08 95       	ret

00000834 <HAL_LCD_clearScreen>:
 834:	81 e0       	ldi	r24, 0x01	; 1
 836:	0e 94 59 02 	call	0x4b2	; 0x4b2 <HAL_LCD_sendCommand>
 83a:	83 ec       	ldi	r24, 0xC3	; 195
 83c:	99 e0       	ldi	r25, 0x09	; 9
 83e:	01 97       	sbiw	r24, 0x01	; 1
 840:	f1 f7       	brne	.-4      	; 0x83e <HAL_LCD_clearScreen+0xa>
 842:	00 c0       	rjmp	.+0      	; 0x844 <HAL_LCD_clearScreen+0x10>
 844:	00 00       	nop
 846:	86 e0       	ldi	r24, 0x06	; 6
 848:	0e 94 59 02 	call	0x4b2	; 0x4b2 <HAL_LCD_sendCommand>
 84c:	08 95       	ret

0000084e <HAL_LCD_integerToString>:
	return u8LocalReturn;
}

/* Function to convert an integer to string */
E_ErrorType HAL_LCD_integerToString(LCD_integer num)
{
 84e:	cf 92       	push	r12
 850:	df 92       	push	r13
 852:	ef 92       	push	r14
 854:	ff 92       	push	r15
 856:	0f 93       	push	r16
 858:	1f 93       	push	r17
 85a:	cf 93       	push	r28
 85c:	df 93       	push	r29
 85e:	cd b7       	in	r28, 0x3d	; 61
 860:	de b7       	in	r29, 0x3e	; 62
 862:	60 97       	sbiw	r28, 0x10	; 16
 864:	0f b6       	in	r0, 0x3f	; 63
 866:	f8 94       	cli
 868:	de bf       	out	0x3e, r29	; 62
 86a:	0f be       	out	0x3f, r0	; 63
 86c:	cd bf       	out	0x3d, r28	; 61
 86e:	6b 01       	movw	r12, r22
 870:	7c 01       	movw	r14, r24
	E_ErrorType u8LocalReturn = E_NOT_OK;
	signed char str[16];
	unsigned char i, rem, len=0;
	LCD_integer n = num;
	if(n ==0)
 872:	61 15       	cp	r22, r1
 874:	71 05       	cpc	r23, r1
 876:	81 05       	cpc	r24, r1
 878:	91 05       	cpc	r25, r1
 87a:	99 f0       	breq	.+38     	; 0x8a2 <__stack+0x43>
 87c:	9b 01       	movw	r18, r22
 87e:	ac 01       	movw	r20, r24
 880:	00 e0       	ldi	r16, 0x00	; 0
 882:	09 c0       	rjmp	.+18     	; 0x896 <__stack+0x37>
	}
	else
	{
		while(n != 0)
		{
			len++;
 884:	0f 5f       	subi	r16, 0xFF	; 255
			n /= 10;
 886:	ca 01       	movw	r24, r20
 888:	b9 01       	movw	r22, r18
 88a:	2a e0       	ldi	r18, 0x0A	; 10
 88c:	30 e0       	ldi	r19, 0x00	; 0
 88e:	40 e0       	ldi	r20, 0x00	; 0
 890:	50 e0       	ldi	r21, 0x00	; 0
 892:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__udivmodsi4>
	{
		len = 1;
	}
	else
	{
		while(n != 0)
 896:	21 15       	cp	r18, r1
 898:	31 05       	cpc	r19, r1
 89a:	41 05       	cpc	r20, r1
 89c:	51 05       	cpc	r21, r1
 89e:	91 f7       	brne	.-28     	; 0x884 <__stack+0x25>
 8a0:	01 c0       	rjmp	.+2      	; 0x8a4 <__stack+0x45>
	signed char str[16];
	unsigned char i, rem, len=0;
	LCD_integer n = num;
	if(n ==0)
	{
		len = 1;
 8a2:	01 e0       	ldi	r16, 0x01	; 1
		{
			len++;
			n /= 10;
		}
	}
	if(len >= 15)
 8a4:	0f 30       	cpi	r16, 0x0F	; 15
 8a6:	50 f5       	brcc	.+84     	; 0x8fc <__stack+0x9d>
 8a8:	10 e0       	ldi	r17, 0x00	; 0
 8aa:	1a c0       	rjmp	.+52     	; 0x8e0 <__stack+0x81>
		return u8LocalReturn;
	}
	for(i=0 ; i<len ; i++)
	{
		rem = num % 10;
		num = num /10;
 8ac:	c7 01       	movw	r24, r14
 8ae:	b6 01       	movw	r22, r12
 8b0:	2a e0       	ldi	r18, 0x0A	; 10
 8b2:	30 e0       	ldi	r19, 0x00	; 0
 8b4:	40 e0       	ldi	r20, 0x00	; 0
 8b6:	50 e0       	ldi	r21, 0x00	; 0
 8b8:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__udivmodsi4>
 8bc:	69 01       	movw	r12, r18
 8be:	7a 01       	movw	r14, r20
		str[len - (i + 1)] = rem + '0';
 8c0:	81 2f       	mov	r24, r17
 8c2:	90 e0       	ldi	r25, 0x00	; 0
 8c4:	01 96       	adiw	r24, 0x01	; 1
 8c6:	e0 2f       	mov	r30, r16
 8c8:	f0 e0       	ldi	r31, 0x00	; 0
 8ca:	e8 1b       	sub	r30, r24
 8cc:	f9 0b       	sbc	r31, r25
 8ce:	81 e0       	ldi	r24, 0x01	; 1
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	8c 0f       	add	r24, r28
 8d4:	9d 1f       	adc	r25, r29
 8d6:	e8 0f       	add	r30, r24
 8d8:	f9 1f       	adc	r31, r25
 8da:	60 5d       	subi	r22, 0xD0	; 208
 8dc:	60 83       	st	Z, r22
	if(len >= 15)
	{
		u8LocalReturn = E_NOT_OK;
		return u8LocalReturn;
	}
	for(i=0 ; i<len ; i++)
 8de:	1f 5f       	subi	r17, 0xFF	; 255
 8e0:	10 17       	cp	r17, r16
 8e2:	20 f3       	brcs	.-56     	; 0x8ac <__stack+0x4d>
	{
		rem = num % 10;
		num = num /10;
		str[len - (i + 1)] = rem + '0';
	}
	str[len] = '\0';
 8e4:	e1 e0       	ldi	r30, 0x01	; 1
 8e6:	f0 e0       	ldi	r31, 0x00	; 0
 8e8:	ec 0f       	add	r30, r28
 8ea:	fd 1f       	adc	r31, r29
 8ec:	e0 0f       	add	r30, r16
 8ee:	f1 1d       	adc	r31, r1
 8f0:	10 82       	st	Z, r1
	u8LocalReturn = HAL_LCD_sendString(str);
 8f2:	ce 01       	movw	r24, r28
 8f4:	01 96       	adiw	r24, 0x01	; 1
 8f6:	0e 94 05 04 	call	0x80a	; 0x80a <HAL_LCD_sendString>
	return u8LocalReturn;
 8fa:	01 c0       	rjmp	.+2      	; 0x8fe <__stack+0x9f>
		}
	}
	if(len >= 15)
	{
		u8LocalReturn = E_NOT_OK;
		return u8LocalReturn;
 8fc:	81 e0       	ldi	r24, 0x01	; 1
		str[len - (i + 1)] = rem + '0';
	}
	str[len] = '\0';
	u8LocalReturn = HAL_LCD_sendString(str);
	return u8LocalReturn;
}
 8fe:	60 96       	adiw	r28, 0x10	; 16
 900:	0f b6       	in	r0, 0x3f	; 63
 902:	f8 94       	cli
 904:	de bf       	out	0x3e, r29	; 62
 906:	0f be       	out	0x3f, r0	; 63
 908:	cd bf       	out	0x3d, r28	; 61
 90a:	df 91       	pop	r29
 90c:	cf 91       	pop	r28
 90e:	1f 91       	pop	r17
 910:	0f 91       	pop	r16
 912:	ff 90       	pop	r15
 914:	ef 90       	pop	r14
 916:	df 90       	pop	r13
 918:	cf 90       	pop	r12
 91a:	08 95       	ret

0000091c <main>:
#define  F_CPU 16000000UL
#include <util/delay.h>
#include "LCD_Interface.h"
#include "ultrasonic_interface.h"
int main(void)
{
 91c:	cf 93       	push	r28
 91e:	df 93       	push	r29
 920:	00 d0       	rcall	.+0      	; 0x922 <main+0x6>
 922:	cd b7       	in	r28, 0x3d	; 61
 924:	de b7       	in	r29, 0x3e	; 62
	HAL_LCD_init();
 926:	0e 94 06 03 	call	0x60c	; 0x60c <HAL_LCD_init>
	unsigned short dis=0;
 92a:	1a 82       	std	Y+2, r1	; 0x02
 92c:	19 82       	std	Y+1, r1	; 0x01
	unsigned short* distance=&dis;
	HAL_ULTRASONIC_EInit();
 92e:	0e 94 b7 04 	call	0x96e	; 0x96e <HAL_ULTRASONIC_EInit>
	while(1)
	{
		HAL_ULTRASONIC_u8ReadDistance(distance);
 932:	ce 01       	movw	r24, r28
 934:	01 96       	adiw	r24, 0x01	; 1
 936:	0e 94 bd 04 	call	0x97a	; 0x97a <HAL_ULTRASONIC_u8ReadDistance>
		HAL_LCD_clearScreen();
 93a:	0e 94 1a 04 	call	0x834	; 0x834 <HAL_LCD_clearScreen>
		HAL_LCD_sendString("DISTANCE");
 93e:	80 e6       	ldi	r24, 0x60	; 96
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	0e 94 05 04 	call	0x80a	; 0x80a <HAL_LCD_sendString>
		HAL_LCD_integerToString(*distance);
 946:	69 81       	ldd	r22, Y+1	; 0x01
 948:	7a 81       	ldd	r23, Y+2	; 0x02
 94a:	80 e0       	ldi	r24, 0x00	; 0
 94c:	90 e0       	ldi	r25, 0x00	; 0
 94e:	0e 94 27 04 	call	0x84e	; 0x84e <HAL_LCD_integerToString>
		HAL_LCD_sendString("cm");
 952:	89 e6       	ldi	r24, 0x69	; 105
 954:	90 e0       	ldi	r25, 0x00	; 0
 956:	0e 94 05 04 	call	0x80a	; 0x80a <HAL_LCD_sendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 95a:	2f ef       	ldi	r18, 0xFF	; 255
 95c:	89 e6       	ldi	r24, 0x69	; 105
 95e:	98 e1       	ldi	r25, 0x18	; 24
 960:	21 50       	subi	r18, 0x01	; 1
 962:	80 40       	sbci	r24, 0x00	; 0
 964:	90 40       	sbci	r25, 0x00	; 0
 966:	e1 f7       	brne	.-8      	; 0x960 <main+0x44>
 968:	00 c0       	rjmp	.+0      	; 0x96a <main+0x4e>
 96a:	00 00       	nop
 96c:	e2 cf       	rjmp	.-60     	; 0x932 <main+0x16>

0000096e <HAL_ULTRASONIC_EInit>:
{
	/*S_Dio* trig;
	trig->pin_num=TRIGGER_PIN;
	trig->port_num=TRIGGER_PORT;
	trig->Direction=0xFF;*///set it as output
	DIO_vsetbitdir(TRIGGER_PORT,TRIGGER_PIN,1);
 96e:	41 e0       	ldi	r20, 0x01	; 1
 970:	65 e0       	ldi	r22, 0x05	; 5
 972:	84 e4       	ldi	r24, 0x44	; 68
 974:	0e 94 89 00 	call	0x112	; 0x112 <DIO_vsetbitdir>
 978:	08 95       	ret

0000097a <HAL_ULTRASONIC_u8ReadDistance>:
}

void HAL_ULTRASONIC_u8ReadDistance(unsigned short* distance)
{	
 97a:	cf 93       	push	r28
 97c:	df 93       	push	r29
 97e:	ec 01       	movw	r28, r24
	unsigned short a,high,b;
	TCCR1A = 0;
 980:	1f bc       	out	0x2f, r1	; 47
	TIFR = (1<<ICF1);  	/* Clear ICF (Input Capture flag)  */
 982:	80 e2       	ldi	r24, 0x20	; 32
 984:	88 bf       	out	0x38, r24	; 56
	DIO_vpinwrite('D',5,1);
 986:	41 e0       	ldi	r20, 0x01	; 1
 988:	65 e0       	ldi	r22, 0x05	; 5
 98a:	84 e4       	ldi	r24, 0x44	; 68
 98c:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_vpinwrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 990:	87 ec       	ldi	r24, 0xC7	; 199
 992:	90 e0       	ldi	r25, 0x00	; 0
 994:	01 97       	sbiw	r24, 0x01	; 1
 996:	f1 f7       	brne	.-4      	; 0x994 <HAL_ULTRASONIC_u8ReadDistance+0x1a>
 998:	00 c0       	rjmp	.+0      	; 0x99a <HAL_ULTRASONIC_u8ReadDistance+0x20>
 99a:	00 00       	nop
	_delay_us(50);
	DIO_vpinwrite('D',5,0);
 99c:	40 e0       	ldi	r20, 0x00	; 0
 99e:	65 e0       	ldi	r22, 0x05	; 5
 9a0:	84 e4       	ldi	r24, 0x44	; 68
 9a2:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_vpinwrite>
	
	TCCR1B = 0xc1;  	/* Rising edge, no prescaler , noise canceler*/
 9a6:	81 ec       	ldi	r24, 0xC1	; 193
 9a8:	8e bd       	out	0x2e, r24	; 46
	while ((TIFR&(1<<ICF1)) == 0);
 9aa:	08 b6       	in	r0, 0x38	; 56
 9ac:	05 fe       	sbrs	r0, 5
 9ae:	fd cf       	rjmp	.-6      	; 0x9aa <HAL_ULTRASONIC_u8ReadDistance+0x30>
	a = ICR1;  		/* Take value of capture register */
 9b0:	86 b5       	in	r24, 0x26	; 38
 9b2:	97 b5       	in	r25, 0x27	; 39
	TIFR = (1<<ICF1);  	/* Clear ICF flag */
 9b4:	20 e2       	ldi	r18, 0x20	; 32
 9b6:	28 bf       	out	0x38, r18	; 56
	TCCR1B = 0x81;  	/* Falling edge, no prescaler ,noise canceler*/
 9b8:	21 e8       	ldi	r18, 0x81	; 129
 9ba:	2e bd       	out	0x2e, r18	; 46
	while ((TIFR&(1<<ICF1)) == 0);
 9bc:	08 b6       	in	r0, 0x38	; 56
 9be:	05 fe       	sbrs	r0, 5
 9c0:	fd cf       	rjmp	.-6      	; 0x9bc <HAL_ULTRASONIC_u8ReadDistance+0x42>
	b = ICR1;  		/* Take value of capture register */
 9c2:	26 b5       	in	r18, 0x26	; 38
 9c4:	37 b5       	in	r19, 0x27	; 39
	TIFR = (1<<ICF1);  	/* Clear ICF flag */
 9c6:	40 e2       	ldi	r20, 0x20	; 32
 9c8:	48 bf       	out	0x38, r20	; 56
	TCNT1=0;
 9ca:	1d bc       	out	0x2d, r1	; 45
 9cc:	1c bc       	out	0x2c, r1	; 44
	TCCR1B = 0;  		/* Stop the timer */
 9ce:	1e bc       	out	0x2e, r1	; 46
	high=b-a;
 9d0:	28 1b       	sub	r18, r24
 9d2:	39 0b       	sbc	r19, r25
	*distance=((high*34600)/(F_CPU*2));
 9d4:	a8 e2       	ldi	r26, 0x28	; 40
 9d6:	b7 e8       	ldi	r27, 0x87	; 135
 9d8:	0e 94 40 05 	call	0xa80	; 0xa80 <__umulhisi3>
 9dc:	20 e0       	ldi	r18, 0x00	; 0
 9de:	38 e4       	ldi	r19, 0x48	; 72
 9e0:	48 ee       	ldi	r20, 0xE8	; 232
 9e2:	51 e0       	ldi	r21, 0x01	; 1
 9e4:	0e 94 1b 05 	call	0xa36	; 0xa36 <__divmodsi4>
 9e8:	39 83       	std	Y+1, r19	; 0x01
 9ea:	28 83       	st	Y, r18
}
 9ec:	df 91       	pop	r29
 9ee:	cf 91       	pop	r28
 9f0:	08 95       	ret

000009f2 <__udivmodsi4>:
 9f2:	a1 e2       	ldi	r26, 0x21	; 33
 9f4:	1a 2e       	mov	r1, r26
 9f6:	aa 1b       	sub	r26, r26
 9f8:	bb 1b       	sub	r27, r27
 9fa:	fd 01       	movw	r30, r26
 9fc:	0d c0       	rjmp	.+26     	; 0xa18 <__udivmodsi4_ep>

000009fe <__udivmodsi4_loop>:
 9fe:	aa 1f       	adc	r26, r26
 a00:	bb 1f       	adc	r27, r27
 a02:	ee 1f       	adc	r30, r30
 a04:	ff 1f       	adc	r31, r31
 a06:	a2 17       	cp	r26, r18
 a08:	b3 07       	cpc	r27, r19
 a0a:	e4 07       	cpc	r30, r20
 a0c:	f5 07       	cpc	r31, r21
 a0e:	20 f0       	brcs	.+8      	; 0xa18 <__udivmodsi4_ep>
 a10:	a2 1b       	sub	r26, r18
 a12:	b3 0b       	sbc	r27, r19
 a14:	e4 0b       	sbc	r30, r20
 a16:	f5 0b       	sbc	r31, r21

00000a18 <__udivmodsi4_ep>:
 a18:	66 1f       	adc	r22, r22
 a1a:	77 1f       	adc	r23, r23
 a1c:	88 1f       	adc	r24, r24
 a1e:	99 1f       	adc	r25, r25
 a20:	1a 94       	dec	r1
 a22:	69 f7       	brne	.-38     	; 0x9fe <__udivmodsi4_loop>
 a24:	60 95       	com	r22
 a26:	70 95       	com	r23
 a28:	80 95       	com	r24
 a2a:	90 95       	com	r25
 a2c:	9b 01       	movw	r18, r22
 a2e:	ac 01       	movw	r20, r24
 a30:	bd 01       	movw	r22, r26
 a32:	cf 01       	movw	r24, r30
 a34:	08 95       	ret

00000a36 <__divmodsi4>:
 a36:	05 2e       	mov	r0, r21
 a38:	97 fb       	bst	r25, 7
 a3a:	1e f4       	brtc	.+6      	; 0xa42 <__divmodsi4+0xc>
 a3c:	00 94       	com	r0
 a3e:	0e 94 32 05 	call	0xa64	; 0xa64 <__negsi2>
 a42:	57 fd       	sbrc	r21, 7
 a44:	07 d0       	rcall	.+14     	; 0xa54 <__divmodsi4_neg2>
 a46:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__udivmodsi4>
 a4a:	07 fc       	sbrc	r0, 7
 a4c:	03 d0       	rcall	.+6      	; 0xa54 <__divmodsi4_neg2>
 a4e:	4e f4       	brtc	.+18     	; 0xa62 <__divmodsi4_exit>
 a50:	0c 94 32 05 	jmp	0xa64	; 0xa64 <__negsi2>

00000a54 <__divmodsi4_neg2>:
 a54:	50 95       	com	r21
 a56:	40 95       	com	r20
 a58:	30 95       	com	r19
 a5a:	21 95       	neg	r18
 a5c:	3f 4f       	sbci	r19, 0xFF	; 255
 a5e:	4f 4f       	sbci	r20, 0xFF	; 255
 a60:	5f 4f       	sbci	r21, 0xFF	; 255

00000a62 <__divmodsi4_exit>:
 a62:	08 95       	ret

00000a64 <__negsi2>:
 a64:	90 95       	com	r25
 a66:	80 95       	com	r24
 a68:	70 95       	com	r23
 a6a:	61 95       	neg	r22
 a6c:	7f 4f       	sbci	r23, 0xFF	; 255
 a6e:	8f 4f       	sbci	r24, 0xFF	; 255
 a70:	9f 4f       	sbci	r25, 0xFF	; 255
 a72:	08 95       	ret

00000a74 <__tablejump2__>:
 a74:	ee 0f       	add	r30, r30
 a76:	ff 1f       	adc	r31, r31
 a78:	05 90       	lpm	r0, Z+
 a7a:	f4 91       	lpm	r31, Z
 a7c:	e0 2d       	mov	r30, r0
 a7e:	09 94       	ijmp

00000a80 <__umulhisi3>:
 a80:	a2 9f       	mul	r26, r18
 a82:	b0 01       	movw	r22, r0
 a84:	b3 9f       	mul	r27, r19
 a86:	c0 01       	movw	r24, r0
 a88:	a3 9f       	mul	r26, r19
 a8a:	70 0d       	add	r23, r0
 a8c:	81 1d       	adc	r24, r1
 a8e:	11 24       	eor	r1, r1
 a90:	91 1d       	adc	r25, r1
 a92:	b2 9f       	mul	r27, r18
 a94:	70 0d       	add	r23, r0
 a96:	81 1d       	adc	r24, r1
 a98:	11 24       	eor	r1, r1
 a9a:	91 1d       	adc	r25, r1
 a9c:	08 95       	ret

00000a9e <_exit>:
 a9e:	f8 94       	cli

00000aa0 <__stop_program>:
 aa0:	ff cf       	rjmp	.-2      	; 0xaa0 <__stop_program>
