
garage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  000009e8  00000a5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000aa2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ad4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000148  00000000  00000000  00000b10  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000021a9  00000000  00000000  00000c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b6f  00000000  00000000  00002e01  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000108f  00000000  00000000  00003970  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002f0  00000000  00000000  00004a00  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000082a  00000000  00000000  00004cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001ada  00000000  00000000  0000551a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  00006ff4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ee       	ldi	r30, 0xE8	; 232
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3a       	cpi	r26, 0xA6	; 166
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 1b 04 	call	0x836	; 0x836 <main>
  7a:	0c 94 f2 04 	jmp	0x9e4	; 0x9e4 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <MCAL_Dio_Init>:
			DIO_PORTD = Port_Value;
			break;
		}
	}
	return error;
}
  82:	fc 01       	movw	r30, r24
  84:	90 81       	ld	r25, Z
  86:	94 30       	cpi	r25, 0x04	; 4
  88:	48 f5       	brcc	.+82     	; 0xdc <MCAL_Dio_Init+0x5a>
  8a:	81 81       	ldd	r24, Z+1	; 0x01
  8c:	22 81       	ldd	r18, Z+2	; 0x02
  8e:	28 23       	and	r18, r24
  90:	91 30       	cpi	r25, 0x01	; 1
  92:	79 f0       	breq	.+30     	; 0xb2 <MCAL_Dio_Init+0x30>
  94:	28 f0       	brcs	.+10     	; 0xa0 <MCAL_Dio_Init+0x1e>
  96:	92 30       	cpi	r25, 0x02	; 2
  98:	99 f0       	breq	.+38     	; 0xc0 <MCAL_Dio_Init+0x3e>
  9a:	93 30       	cpi	r25, 0x03	; 3
  9c:	c1 f0       	breq	.+48     	; 0xce <MCAL_Dio_Init+0x4c>
  9e:	20 c0       	rjmp	.+64     	; 0xe0 <MCAL_Dio_Init+0x5e>
  a0:	3a b3       	in	r19, 0x1a	; 26
  a2:	98 2f       	mov	r25, r24
  a4:	90 95       	com	r25
  a6:	89 2f       	mov	r24, r25
  a8:	83 23       	and	r24, r19
  aa:	28 2b       	or	r18, r24
  ac:	2a bb       	out	0x1a, r18	; 26
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	08 95       	ret
  b2:	97 b3       	in	r25, 0x17	; 23
  b4:	80 95       	com	r24
  b6:	89 23       	and	r24, r25
  b8:	28 2b       	or	r18, r24
  ba:	27 bb       	out	0x17, r18	; 23
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	08 95       	ret
  c0:	94 b3       	in	r25, 0x14	; 20
  c2:	80 95       	com	r24
  c4:	89 23       	and	r24, r25
  c6:	28 2b       	or	r18, r24
  c8:	24 bb       	out	0x14, r18	; 20
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	08 95       	ret
  ce:	91 b3       	in	r25, 0x11	; 17
  d0:	80 95       	com	r24
  d2:	89 23       	and	r24, r25
  d4:	28 2b       	or	r18, r24
  d6:	21 bb       	out	0x11, r18	; 17
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	08 95       	ret
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	08 95       	ret
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	08 95       	ret

000000e4 <MCAL_Dio_WritePin>:


Std_type MCAL_Dio_WritePin(S_Dio *Dio_WritePin,u8PinValue Pin_value)
{
  e4:	fc 01       	movw	r30, r24
	u8RegisterValue Mask1,Mask2;
	if(DIO_STATUS_ERROR == NOT_OK)
	{
		error = NOT_OK;
	}
	else if(Dio_WritePin->port_num >= DIO_CONFIGURED_PORTS)
  e6:	90 81       	ld	r25, Z
  e8:	94 30       	cpi	r25, 0x04	; 4
  ea:	30 f5       	brcc	.+76     	; 0x138 <MCAL_Dio_WritePin+0x54>
		error = NOT_OK;
	}
	else
	{

		Mask2 = ((Dio_WritePin->pin_num) & (Pin_value));
  ec:	81 81       	ldd	r24, Z+1	; 0x01
  ee:	68 23       	and	r22, r24
		switch(Dio_WritePin->port_num)
  f0:	91 30       	cpi	r25, 0x01	; 1
  f2:	69 f0       	breq	.+26     	; 0x10e <MCAL_Dio_WritePin+0x2a>
  f4:	28 f0       	brcs	.+10     	; 0x100 <MCAL_Dio_WritePin+0x1c>
  f6:	92 30       	cpi	r25, 0x02	; 2
  f8:	89 f0       	breq	.+34     	; 0x11c <MCAL_Dio_WritePin+0x38>
  fa:	93 30       	cpi	r25, 0x03	; 3
  fc:	b1 f0       	breq	.+44     	; 0x12a <MCAL_Dio_WritePin+0x46>
  fe:	1e c0       	rjmp	.+60     	; 0x13c <MCAL_Dio_WritePin+0x58>
		{
		case PORTA_ID:
			Mask1 = ((DIO_PORTA) & (~(Dio_WritePin->pin_num)));
 100:	9b b3       	in	r25, 0x1b	; 27
 102:	80 95       	com	r24
 104:	89 23       	and	r24, r25
			DIO_PORTA = Mask1 | Mask2;
 106:	68 2b       	or	r22, r24
 108:	6b bb       	out	0x1b, r22	; 27
}


Std_type MCAL_Dio_WritePin(S_Dio *Dio_WritePin,u8PinValue Pin_value)
{
	Std_type error = OK;
 10a:	80 e0       	ldi	r24, 0x00	; 0
		switch(Dio_WritePin->port_num)
		{
		case PORTA_ID:
			Mask1 = ((DIO_PORTA) & (~(Dio_WritePin->pin_num)));
			DIO_PORTA = Mask1 | Mask2;
			break;
 10c:	08 95       	ret
		case PORTB_ID:
			Mask1 = ((DIO_PORTB) & (~(Dio_WritePin->pin_num)));
 10e:	98 b3       	in	r25, 0x18	; 24
 110:	80 95       	com	r24
 112:	89 23       	and	r24, r25
			DIO_PORTB = Mask1 | Mask2;
 114:	68 2b       	or	r22, r24
 116:	68 bb       	out	0x18, r22	; 24
}


Std_type MCAL_Dio_WritePin(S_Dio *Dio_WritePin,u8PinValue Pin_value)
{
	Std_type error = OK;
 118:	80 e0       	ldi	r24, 0x00	; 0
			DIO_PORTA = Mask1 | Mask2;
			break;
		case PORTB_ID:
			Mask1 = ((DIO_PORTB) & (~(Dio_WritePin->pin_num)));
			DIO_PORTB = Mask1 | Mask2;
			break;
 11a:	08 95       	ret
		case PORTC_ID:
			Mask1 = ((DIO_PORTC) & (~(Dio_WritePin->pin_num)));
 11c:	95 b3       	in	r25, 0x15	; 21
 11e:	80 95       	com	r24
 120:	89 23       	and	r24, r25
			DIO_PORTC = Mask1 | Mask2;
 122:	68 2b       	or	r22, r24
 124:	65 bb       	out	0x15, r22	; 21
}


Std_type MCAL_Dio_WritePin(S_Dio *Dio_WritePin,u8PinValue Pin_value)
{
	Std_type error = OK;
 126:	80 e0       	ldi	r24, 0x00	; 0
			DIO_PORTB = Mask1 | Mask2;
			break;
		case PORTC_ID:
			Mask1 = ((DIO_PORTC) & (~(Dio_WritePin->pin_num)));
			DIO_PORTC = Mask1 | Mask2;
			break;
 128:	08 95       	ret
		case PORTD_ID:
			Mask1 = ((DIO_PORTD) & (~(Dio_WritePin->pin_num)));
 12a:	92 b3       	in	r25, 0x12	; 18
 12c:	80 95       	com	r24
 12e:	89 23       	and	r24, r25
			DIO_PORTD = Mask1 | Mask2;
 130:	68 2b       	or	r22, r24
 132:	62 bb       	out	0x12, r22	; 18
}


Std_type MCAL_Dio_WritePin(S_Dio *Dio_WritePin,u8PinValue Pin_value)
{
	Std_type error = OK;
 134:	80 e0       	ldi	r24, 0x00	; 0
			DIO_PORTC = Mask1 | Mask2;
			break;
		case PORTD_ID:
			Mask1 = ((DIO_PORTD) & (~(Dio_WritePin->pin_num)));
			DIO_PORTD = Mask1 | Mask2;
			break;
 136:	08 95       	ret
		error = NOT_OK;
	}
	else if(Dio_WritePin->port_num >= DIO_CONFIGURED_PORTS)
	{

		error = NOT_OK;
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	08 95       	ret
}


Std_type MCAL_Dio_WritePin(S_Dio *Dio_WritePin,u8PinValue Pin_value)
{
	Std_type error = OK;
 13c:	80 e0       	ldi	r24, 0x00	; 0
			break;

		}
	}
	return error;
}
 13e:	08 95       	ret

00000140 <MCAL_Dio_WriteSinglePin>:
		u8PinNumber bitNumber;
		if(DIO_STATUS_ERROR == NOT_OK)
		{
			error = NOT_OK;
		}
		else if(Dio_WritePin->port_num >= DIO_CONFIGURED_PORTS)
 140:	fc 01       	movw	r30, r24
 142:	50 81       	ld	r21, Z
 144:	54 30       	cpi	r21, 0x04	; 4
 146:	08 f0       	brcs	.+2      	; 0x14a <MCAL_Dio_WriteSinglePin+0xa>
 148:	88 c0       	rjmp	.+272    	; 0x25a <MCAL_Dio_WriteSinglePin+0x11a>
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0d c0       	rjmp	.+26     	; 0x16a <MCAL_Dio_WriteSinglePin+0x2a>
			error = NOT_OK;
		}
		else
		{
			for (int i = 0; i < DIO_CONFIGURED_PINS; i++) {
						if (Pin_Num & (1 << i)) {
 150:	26 2f       	mov	r18, r22
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	08 2e       	mov	r0, r24
 156:	02 c0       	rjmp	.+4      	; 0x15c <MCAL_Dio_WriteSinglePin+0x1c>
 158:	35 95       	asr	r19
 15a:	27 95       	ror	r18
 15c:	0a 94       	dec	r0
 15e:	e2 f7       	brpl	.-8      	; 0x158 <MCAL_Dio_WriteSinglePin+0x18>
 160:	20 ff       	sbrs	r18, 0
 162:	02 c0       	rjmp	.+4      	; 0x168 <MCAL_Dio_WriteSinglePin+0x28>
							bitNumber = i;
 164:	78 2f       	mov	r23, r24
							break;
 166:	04 c0       	rjmp	.+8      	; 0x170 <MCAL_Dio_WriteSinglePin+0x30>

			error = NOT_OK;
		}
		else
		{
			for (int i = 0; i < DIO_CONFIGURED_PINS; i++) {
 168:	01 96       	adiw	r24, 0x01	; 1
 16a:	88 30       	cpi	r24, 0x08	; 8
 16c:	91 05       	cpc	r25, r1
 16e:	84 f3       	brlt	.-32     	; 0x150 <MCAL_Dio_WriteSinglePin+0x10>
						if (Pin_Num & (1 << i)) {
							bitNumber = i;
							break;
						}
					}
			switch(Dio_WritePin->port_num)
 170:	51 30       	cpi	r21, 0x01	; 1
 172:	11 f1       	breq	.+68     	; 0x1b8 <MCAL_Dio_WriteSinglePin+0x78>
 174:	30 f0       	brcs	.+12     	; 0x182 <MCAL_Dio_WriteSinglePin+0x42>
 176:	52 30       	cpi	r21, 0x02	; 2
 178:	d1 f1       	breq	.+116    	; 0x1ee <MCAL_Dio_WriteSinglePin+0xae>
 17a:	53 30       	cpi	r21, 0x03	; 3
 17c:	09 f4       	brne	.+2      	; 0x180 <MCAL_Dio_WriteSinglePin+0x40>
 17e:	52 c0       	rjmp	.+164    	; 0x224 <MCAL_Dio_WriteSinglePin+0xe4>
 180:	6e c0       	rjmp	.+220    	; 0x25e <MCAL_Dio_WriteSinglePin+0x11e>
					{
					case PORTA_ID:
						if(Pin_value == 1) // compare with one as i define LOGIC_HIGH 1 in DIO_std but ican't use it
 182:	41 30       	cpi	r20, 0x01	; 1
 184:	61 f4       	brne	.+24     	; 0x19e <MCAL_Dio_WriteSinglePin+0x5e>
						{
							SET_BIT(DIO_PORTA,bitNumber);
 186:	2b b3       	in	r18, 0x1b	; 27
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	02 c0       	rjmp	.+4      	; 0x192 <MCAL_Dio_WriteSinglePin+0x52>
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	7a 95       	dec	r23
 194:	e2 f7       	brpl	.-8      	; 0x18e <MCAL_Dio_WriteSinglePin+0x4e>
 196:	82 2b       	or	r24, r18
 198:	8b bb       	out	0x1b, r24	; 27
	return error;
}

Std_type MCAL_Dio_WriteSinglePin(S_Dio *Dio_WritePin,E_DioPin Pin_Num,u8PinValue Pin_value)
{
		Std_type error = OK;
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	08 95       	ret
						{
							SET_BIT(DIO_PORTA,bitNumber);
						}
						else
						{
							CLEAR_BIT(DIO_PORTA,bitNumber);
 19e:	2b b3       	in	r18, 0x1b	; 27
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <MCAL_Dio_WriteSinglePin+0x6a>
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	7a 95       	dec	r23
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <MCAL_Dio_WriteSinglePin+0x66>
 1ae:	80 95       	com	r24
 1b0:	82 23       	and	r24, r18
 1b2:	8b bb       	out	0x1b, r24	; 27
	return error;
}

Std_type MCAL_Dio_WriteSinglePin(S_Dio *Dio_WritePin,E_DioPin Pin_Num,u8PinValue Pin_value)
{
		Std_type error = OK;
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	08 95       	ret
						{
							CLEAR_BIT(DIO_PORTA,bitNumber);
						}
						break;
					case PORTB_ID:
						if(Pin_value == 1)
 1b8:	41 30       	cpi	r20, 0x01	; 1
 1ba:	61 f4       	brne	.+24     	; 0x1d4 <MCAL_Dio_WriteSinglePin+0x94>
						{
							SET_BIT(DIO_PORTB,bitNumber);
 1bc:	28 b3       	in	r18, 0x18	; 24
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <MCAL_Dio_WriteSinglePin+0x88>
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	7a 95       	dec	r23
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <MCAL_Dio_WriteSinglePin+0x84>
 1cc:	82 2b       	or	r24, r18
 1ce:	88 bb       	out	0x18, r24	; 24
	return error;
}

Std_type MCAL_Dio_WriteSinglePin(S_Dio *Dio_WritePin,E_DioPin Pin_Num,u8PinValue Pin_value)
{
		Std_type error = OK;
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	08 95       	ret
						{
							SET_BIT(DIO_PORTB,bitNumber);
						}
						else
						{
							CLEAR_BIT(DIO_PORTB,bitNumber);
 1d4:	28 b3       	in	r18, 0x18	; 24
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <MCAL_Dio_WriteSinglePin+0xa0>
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	7a 95       	dec	r23
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <MCAL_Dio_WriteSinglePin+0x9c>
 1e4:	80 95       	com	r24
 1e6:	82 23       	and	r24, r18
 1e8:	88 bb       	out	0x18, r24	; 24
	return error;
}

Std_type MCAL_Dio_WriteSinglePin(S_Dio *Dio_WritePin,E_DioPin Pin_Num,u8PinValue Pin_value)
{
		Std_type error = OK;
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	08 95       	ret
						{
							CLEAR_BIT(DIO_PORTB,bitNumber);
						}
						break;
					case PORTC_ID:
						if(Pin_value == 1)
 1ee:	41 30       	cpi	r20, 0x01	; 1
 1f0:	61 f4       	brne	.+24     	; 0x20a <MCAL_Dio_WriteSinglePin+0xca>
						{
							SET_BIT(DIO_PORTC,bitNumber);
 1f2:	25 b3       	in	r18, 0x15	; 21
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <MCAL_Dio_WriteSinglePin+0xbe>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	7a 95       	dec	r23
 200:	e2 f7       	brpl	.-8      	; 0x1fa <MCAL_Dio_WriteSinglePin+0xba>
 202:	82 2b       	or	r24, r18
 204:	85 bb       	out	0x15, r24	; 21
	return error;
}

Std_type MCAL_Dio_WriteSinglePin(S_Dio *Dio_WritePin,E_DioPin Pin_Num,u8PinValue Pin_value)
{
		Std_type error = OK;
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	08 95       	ret
						{
							SET_BIT(DIO_PORTC,bitNumber);
						}
						else
						{
							CLEAR_BIT(DIO_PORTC,bitNumber);
 20a:	25 b3       	in	r18, 0x15	; 21
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	02 c0       	rjmp	.+4      	; 0x216 <MCAL_Dio_WriteSinglePin+0xd6>
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	7a 95       	dec	r23
 218:	e2 f7       	brpl	.-8      	; 0x212 <MCAL_Dio_WriteSinglePin+0xd2>
 21a:	80 95       	com	r24
 21c:	82 23       	and	r24, r18
 21e:	85 bb       	out	0x15, r24	; 21
	return error;
}

Std_type MCAL_Dio_WriteSinglePin(S_Dio *Dio_WritePin,E_DioPin Pin_Num,u8PinValue Pin_value)
{
		Std_type error = OK;
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	08 95       	ret
						{
							CLEAR_BIT(DIO_PORTC,bitNumber);
						}
						break;
					case PORTD_ID:
						if(Pin_value == 1)
 224:	41 30       	cpi	r20, 0x01	; 1
 226:	61 f4       	brne	.+24     	; 0x240 <MCAL_Dio_WriteSinglePin+0x100>
						{
							SET_BIT(DIO_PORTD,bitNumber);
 228:	22 b3       	in	r18, 0x12	; 18
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	02 c0       	rjmp	.+4      	; 0x234 <MCAL_Dio_WriteSinglePin+0xf4>
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	7a 95       	dec	r23
 236:	e2 f7       	brpl	.-8      	; 0x230 <MCAL_Dio_WriteSinglePin+0xf0>
 238:	82 2b       	or	r24, r18
 23a:	82 bb       	out	0x12, r24	; 18
	return error;
}

Std_type MCAL_Dio_WriteSinglePin(S_Dio *Dio_WritePin,E_DioPin Pin_Num,u8PinValue Pin_value)
{
		Std_type error = OK;
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	08 95       	ret
						{
							SET_BIT(DIO_PORTD,bitNumber);
						}
						else
						{
							CLEAR_BIT(DIO_PORTD,bitNumber);
 240:	22 b3       	in	r18, 0x12	; 18
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	02 c0       	rjmp	.+4      	; 0x24c <MCAL_Dio_WriteSinglePin+0x10c>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	7a 95       	dec	r23
 24e:	e2 f7       	brpl	.-8      	; 0x248 <MCAL_Dio_WriteSinglePin+0x108>
 250:	80 95       	com	r24
 252:	82 23       	and	r24, r18
 254:	82 bb       	out	0x12, r24	; 18
	return error;
}

Std_type MCAL_Dio_WriteSinglePin(S_Dio *Dio_WritePin,E_DioPin Pin_Num,u8PinValue Pin_value)
{
		Std_type error = OK;
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	08 95       	ret
			error = NOT_OK;
		}
		else if(Dio_WritePin->port_num >= DIO_CONFIGURED_PORTS)
		{

			error = NOT_OK;
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	08 95       	ret
	return error;
}

Std_type MCAL_Dio_WriteSinglePin(S_Dio *Dio_WritePin,E_DioPin Pin_Num,u8PinValue Pin_value)
{
		Std_type error = OK;
 25e:	80 e0       	ldi	r24, 0x00	; 0

		}

		return error;

}
 260:	08 95       	ret

00000262 <SERVICE_GARAGE_Einit>:
#include "GARAGE.h"
#define F_CPU 16000000UL
#include <util/delay.h>
E_GARAGE_ERROR SERVICE_GARAGE_Einit(void)
{	E_GARAGE_ERROR error=GARAGE_OK;
	error=HAL_ULTRASONIC_EINIT();
 262:	0e 94 22 04 	call	0x844	; 0x844 <HAL_ULTRASONIC_EINIT>
	error=HAL_LCD_init();
 266:	0e 94 80 02 	call	0x500	; 0x500 <HAL_LCD_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 26a:	ef e4       	ldi	r30, 0x4F	; 79
 26c:	f3 ec       	ldi	r31, 0xC3	; 195
 26e:	31 97       	sbiw	r30, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <SERVICE_GARAGE_Einit+0xc>
 272:	00 c0       	rjmp	.+0      	; 0x274 <SERVICE_GARAGE_Einit+0x12>
 274:	00 00       	nop
	_delay_ms(200);
	return error;
}
 276:	08 95       	ret

00000278 <SERVICE_GARAGE_openDoor>:
E_GARAGE_ERROR SERVICE_GARAGE_openDoor(void)
{	E_GARAGE_ERROR error=GARAGE_OK;
	//MARIEM: CALL servo to open at 0 deg
	error=HAL_LCD_sendString("open");
 278:	80 e6       	ldi	r24, 0x60	; 96
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <HAL_LCD_sendString>
	return error;
}
 280:	08 95       	ret

00000282 <SERVICE_GARAGE_closeDoor>:
E_GARAGE_ERROR SERVICE_GARAGE_closeDoor(void)
{	
 282:	1f 93       	push	r17
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
 288:	00 d0       	rcall	.+0      	; 0x28a <SERVICE_GARAGE_closeDoor+0x8>
 28a:	cd b7       	in	r28, 0x3d	; 61
 28c:	de b7       	in	r29, 0x3e	; 62
	E_GARAGE_ERROR error=GARAGE_OK;
	unsigned short distance=DOOR_HIEGHT;
 28e:	8c e3       	ldi	r24, 0x3C	; 60
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	9a 83       	std	Y+2, r25	; 0x02
 294:	89 83       	std	Y+1, r24	; 0x01
	unsigned char garagePOS=0;
 296:	10 e0       	ldi	r17, 0x00	; 0
	
	while(garagePOS<180)//not completely closed 
 298:	6e c0       	rjmp	.+220    	; 0x376 <SERVICE_GARAGE_closeDoor+0xf4>
	{	error=HAL_LCD_clearScreen();
 29a:	0e 94 94 03 	call	0x728	; 0x728 <HAL_LCD_clearScreen>
		error=HAL_LCD_sendString("ANGLE: ");
 29e:	85 e6       	ldi	r24, 0x65	; 101
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	0e 94 7f 03 	call	0x6fe	; 0x6fe <HAL_LCD_sendString>
		error=HAL_LCD_integerToString(garagePOS);
 2a6:	61 2f       	mov	r22, r17
 2a8:	70 e0       	ldi	r23, 0x00	; 0
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 b4 03 	call	0x768	; 0x768 <HAL_LCD_integerToString>
 2b2:	2f e9       	ldi	r18, 0x9F	; 159
 2b4:	36 e8       	ldi	r19, 0x86	; 134
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	21 50       	subi	r18, 0x01	; 1
 2ba:	30 40       	sbci	r19, 0x00	; 0
 2bc:	80 40       	sbci	r24, 0x00	; 0
 2be:	e1 f7       	brne	.-8      	; 0x2b8 <SERVICE_GARAGE_closeDoor+0x36>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <SERVICE_GARAGE_closeDoor+0x40>
 2c2:	00 00       	nop
		_delay_ms(500);
		error=HAL_ULTRASONIC_EdistanceESTIMATION(&distance);
 2c4:	ce 01       	movw	r24, r28
 2c6:	01 96       	adiw	r24, 0x01	; 1
 2c8:	0e 94 6e 04 	call	0x8dc	; 0x8dc <HAL_ULTRASONIC_EdistanceESTIMATION>
		error=HAL_LCD_clearScreen();
 2cc:	0e 94 94 03 	call	0x728	; 0x728 <HAL_LCD_clearScreen>
		error=HAL_LCD_integerToString(distance);
 2d0:	69 81       	ldd	r22, Y+1	; 0x01
 2d2:	7a 81       	ldd	r23, Y+2	; 0x02
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	0e 94 b4 03 	call	0x768	; 0x768 <HAL_LCD_integerToString>
		error=HAL_LCD_goToRowColumn(2,1);
 2dc:	61 e0       	ldi	r22, 0x01	; 1
 2de:	82 e0       	ldi	r24, 0x02	; 2
 2e0:	0e 94 a1 03 	call	0x742	; 0x742 <HAL_LCD_goToRowColumn>
		
		if (distance<=DOOR_THER)
 2e4:	89 81       	ldd	r24, Y+1	; 0x01
 2e6:	9a 81       	ldd	r25, Y+2	; 0x02
 2e8:	45 97       	sbiw	r24, 0x15	; 21
 2ea:	88 f5       	brcc	.+98     	; 0x34e <SERVICE_GARAGE_closeDoor+0xcc>
 2ec:	9f e5       	ldi	r25, 0x5F	; 95
 2ee:	2a ee       	ldi	r18, 0xEA	; 234
 2f0:	30 e0       	ldi	r19, 0x00	; 0
 2f2:	91 50       	subi	r25, 0x01	; 1
 2f4:	20 40       	sbci	r18, 0x00	; 0
 2f6:	30 40       	sbci	r19, 0x00	; 0
 2f8:	e1 f7       	brne	.-8      	; 0x2f2 <SERVICE_GARAGE_closeDoor+0x70>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <SERVICE_GARAGE_closeDoor+0x7a>
 2fc:	00 00       	nop
		{	_delay_ms(300);
			if (distance<=DOOR_THER)//OBSTACLE
 2fe:	89 81       	ldd	r24, Y+1	; 0x01
 300:	9a 81       	ldd	r25, Y+2	; 0x02
 302:	45 97       	sbiw	r24, 0x15	; 21
 304:	10 f5       	brcc	.+68     	; 0x34a <SERVICE_GARAGE_closeDoor+0xc8>
			{	error=HAL_LCD_sendString("WATCH OUT");
 306:	8d e6       	ldi	r24, 0x6D	; 109
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	0e 94 7f 03 	call	0x6fe	; 0x6fe <HAL_LCD_sendString>
 30e:	8f ed       	ldi	r24, 0xDF	; 223
 310:	92 e2       	ldi	r25, 0x22	; 34
 312:	22 e0       	ldi	r18, 0x02	; 2
 314:	81 50       	subi	r24, 0x01	; 1
 316:	90 40       	sbci	r25, 0x00	; 0
 318:	20 40       	sbci	r18, 0x00	; 0
 31a:	e1 f7       	brne	.-8      	; 0x314 <SERVICE_GARAGE_closeDoor+0x92>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <SERVICE_GARAGE_closeDoor+0x9c>
 31e:	00 00       	nop
				_delay_ms(700);
				error=HAL_LCD_goToRowColumn(2,1);
 320:	61 e0       	ldi	r22, 0x01	; 1
 322:	82 e0       	ldi	r24, 0x02	; 2
 324:	0e 94 a1 03 	call	0x742	; 0x742 <HAL_LCD_goToRowColumn>
				error=HAL_LCD_sendString("open garage again");
 328:	87 e7       	ldi	r24, 0x77	; 119
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <HAL_LCD_sendString>
 330:	3f ef       	ldi	r19, 0xFF	; 255
 332:	80 e7       	ldi	r24, 0x70	; 112
 334:	92 e0       	ldi	r25, 0x02	; 2
 336:	31 50       	subi	r19, 0x01	; 1
 338:	80 40       	sbci	r24, 0x00	; 0
 33a:	90 40       	sbci	r25, 0x00	; 0
 33c:	e1 f7       	brne	.-8      	; 0x336 <SERVICE_GARAGE_closeDoor+0xb4>
 33e:	00 c0       	rjmp	.+0      	; 0x340 <SERVICE_GARAGE_closeDoor+0xbe>
 340:	00 00       	nop
				_delay_ms(800);
				error=SERVICE_GARAGE_openDoor();
 342:	0e 94 3c 01 	call	0x278	; 0x278 <SERVICE_GARAGE_openDoor>
				garagePOS=0;
 346:	10 e0       	ldi	r17, 0x00	; 0
 348:	16 c0       	rjmp	.+44     	; 0x376 <SERVICE_GARAGE_closeDoor+0xf4>
			}
			else//no obstacle
			{
				garagePOS+=10;
 34a:	16 5f       	subi	r17, 0xF6	; 246
 34c:	14 c0       	rjmp	.+40     	; 0x376 <SERVICE_GARAGE_closeDoor+0xf4>
				
				//MARIEM: CALL SERVO TO SPIN AT garagePOS degree
			}
		}
		else
		{	garagePOS+=10;
 34e:	16 5f       	subi	r17, 0xF6	; 246
			//MARIEM: CALL SERVO TO SPIN AT garagePOS degree
			error=HAL_LCD_sendString("Increment SERVO");
 350:	89 e8       	ldi	r24, 0x89	; 137
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	0e 94 7f 03 	call	0x6fe	; 0x6fe <HAL_LCD_sendString>
 358:	2f ed       	ldi	r18, 0xDF	; 223
 35a:	32 e2       	ldi	r19, 0x22	; 34
 35c:	82 e0       	ldi	r24, 0x02	; 2
 35e:	21 50       	subi	r18, 0x01	; 1
 360:	30 40       	sbci	r19, 0x00	; 0
 362:	80 40       	sbci	r24, 0x00	; 0
 364:	e1 f7       	brne	.-8      	; 0x35e <SERVICE_GARAGE_closeDoor+0xdc>
 366:	00 c0       	rjmp	.+0      	; 0x368 <SERVICE_GARAGE_closeDoor+0xe6>
 368:	00 00       	nop
			_delay_ms(700);
			error=HAL_LCD_integerToString(garagePOS);
 36a:	61 2f       	mov	r22, r17
 36c:	70 e0       	ldi	r23, 0x00	; 0
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	0e 94 b4 03 	call	0x768	; 0x768 <HAL_LCD_integerToString>
{	
	E_GARAGE_ERROR error=GARAGE_OK;
	unsigned short distance=DOOR_HIEGHT;
	unsigned char garagePOS=0;
	
	while(garagePOS<180)//not completely closed 
 376:	14 3b       	cpi	r17, 0xB4	; 180
 378:	08 f4       	brcc	.+2      	; 0x37c <SERVICE_GARAGE_closeDoor+0xfa>
 37a:	8f cf       	rjmp	.-226    	; 0x29a <SERVICE_GARAGE_closeDoor+0x18>
			error=HAL_LCD_sendString("Increment SERVO");
			_delay_ms(700);
			error=HAL_LCD_integerToString(garagePOS);
		}
	}
	error=HAL_LCD_clearScreen();
 37c:	0e 94 94 03 	call	0x728	; 0x728 <HAL_LCD_clearScreen>
	error=HAL_LCD_sendString("DOOR CLOSED");
 380:	89 e9       	ldi	r24, 0x99	; 153
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	0e 94 7f 03 	call	0x6fe	; 0x6fe <HAL_LCD_sendString>
 388:	9f e7       	ldi	r25, 0x7F	; 127
 38a:	2a e1       	ldi	r18, 0x1A	; 26
 38c:	36 e0       	ldi	r19, 0x06	; 6
 38e:	91 50       	subi	r25, 0x01	; 1
 390:	20 40       	sbci	r18, 0x00	; 0
 392:	30 40       	sbci	r19, 0x00	; 0
 394:	e1 f7       	brne	.-8      	; 0x38e <SERVICE_GARAGE_closeDoor+0x10c>
 396:	00 c0       	rjmp	.+0      	; 0x398 <SERVICE_GARAGE_closeDoor+0x116>
 398:	00 00       	nop
	_delay_ms(2000);
	return error;
 39a:	0f 90       	pop	r0
 39c:	0f 90       	pop	r0
 39e:	df 91       	pop	r29
 3a0:	cf 91       	pop	r28
 3a2:	1f 91       	pop	r17
 3a4:	08 95       	ret

000003a6 <HAL_LCD_sendCommand>:
{
	E_ErrorType u8LocalReturn = E_NOT_OK;
	u8LocalReturn = HAL_LCD_goToRowColumn(row, col);
	u8LocalReturn = HAL_LCD_sendString(str);
	return u8LocalReturn;
}
 3a6:	1f 93       	push	r17
 3a8:	cf 93       	push	r28
 3aa:	df 93       	push	r29
 3ac:	cd b7       	in	r28, 0x3d	; 61
 3ae:	de b7       	in	r29, 0x3e	; 62
 3b0:	29 97       	sbiw	r28, 0x09	; 9
 3b2:	0f b6       	in	r0, 0x3f	; 63
 3b4:	f8 94       	cli
 3b6:	de bf       	out	0x3e, r29	; 62
 3b8:	0f be       	out	0x3f, r0	; 63
 3ba:	cd bf       	out	0x3d, r28	; 61
 3bc:	18 2f       	mov	r17, r24
 3be:	19 82       	std	Y+1, r1	; 0x01
 3c0:	88 e0       	ldi	r24, 0x08	; 8
 3c2:	8a 83       	std	Y+2, r24	; 0x02
 3c4:	1b 82       	std	Y+3, r1	; 0x03
 3c6:	60 e0       	ldi	r22, 0x00	; 0
 3c8:	ce 01       	movw	r24, r28
 3ca:	01 96       	adiw	r24, 0x01	; 1
 3cc:	0e 94 72 00 	call	0xe4	; 0xe4 <MCAL_Dio_WritePin>
 3d0:	89 ef       	ldi	r24, 0xF9	; 249
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	01 97       	sbiw	r24, 0x01	; 1
 3d6:	f1 f7       	brne	.-4      	; 0x3d4 <HAL_LCD_sendCommand+0x2e>
 3d8:	00 c0       	rjmp	.+0      	; 0x3da <HAL_LCD_sendCommand+0x34>
 3da:	00 00       	nop
 3dc:	1c 82       	std	Y+4, r1	; 0x04
 3de:	84 e0       	ldi	r24, 0x04	; 4
 3e0:	8d 83       	std	Y+5, r24	; 0x05
 3e2:	1e 82       	std	Y+6, r1	; 0x06
 3e4:	e9 ef       	ldi	r30, 0xF9	; 249
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	31 97       	sbiw	r30, 0x01	; 1
 3ea:	f1 f7       	brne	.-4      	; 0x3e8 <HAL_LCD_sendCommand+0x42>
 3ec:	00 c0       	rjmp	.+0      	; 0x3ee <HAL_LCD_sendCommand+0x48>
 3ee:	00 00       	nop
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	8f 83       	std	Y+7, r24	; 0x07
 3f4:	87 e1       	ldi	r24, 0x17	; 23
 3f6:	88 87       	std	Y+8, r24	; 0x08
 3f8:	8f ef       	ldi	r24, 0xFF	; 255
 3fa:	89 87       	std	Y+9, r24	; 0x09
 3fc:	14 fb       	bst	r17, 4
 3fe:	44 27       	eor	r20, r20
 400:	40 f9       	bld	r20, 0
 402:	61 e0       	ldi	r22, 0x01	; 1
 404:	ce 01       	movw	r24, r28
 406:	07 96       	adiw	r24, 0x07	; 7
 408:	0e 94 a0 00 	call	0x140	; 0x140 <MCAL_Dio_WriteSinglePin>
 40c:	15 fb       	bst	r17, 5
 40e:	44 27       	eor	r20, r20
 410:	40 f9       	bld	r20, 0
 412:	62 e0       	ldi	r22, 0x02	; 2
 414:	ce 01       	movw	r24, r28
 416:	07 96       	adiw	r24, 0x07	; 7
 418:	0e 94 a0 00 	call	0x140	; 0x140 <MCAL_Dio_WriteSinglePin>
 41c:	16 fb       	bst	r17, 6
 41e:	44 27       	eor	r20, r20
 420:	40 f9       	bld	r20, 0
 422:	64 e0       	ldi	r22, 0x04	; 4
 424:	ce 01       	movw	r24, r28
 426:	07 96       	adiw	r24, 0x07	; 7
 428:	0e 94 a0 00 	call	0x140	; 0x140 <MCAL_Dio_WriteSinglePin>
 42c:	41 2f       	mov	r20, r17
 42e:	44 1f       	adc	r20, r20
 430:	44 27       	eor	r20, r20
 432:	44 1f       	adc	r20, r20
 434:	60 e1       	ldi	r22, 0x10	; 16
 436:	ce 01       	movw	r24, r28
 438:	07 96       	adiw	r24, 0x07	; 7
 43a:	0e 94 a0 00 	call	0x140	; 0x140 <MCAL_Dio_WriteSinglePin>
 43e:	89 ef       	ldi	r24, 0xF9	; 249
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	01 97       	sbiw	r24, 0x01	; 1
 444:	f1 f7       	brne	.-4      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 446:	00 c0       	rjmp	.+0      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 448:	00 00       	nop
 44a:	6f ef       	ldi	r22, 0xFF	; 255
 44c:	ce 01       	movw	r24, r28
 44e:	04 96       	adiw	r24, 0x04	; 4
 450:	0e 94 72 00 	call	0xe4	; 0xe4 <MCAL_Dio_WritePin>
 454:	e9 ef       	ldi	r30, 0xF9	; 249
 456:	f0 e0       	ldi	r31, 0x00	; 0
 458:	31 97       	sbiw	r30, 0x01	; 1
 45a:	f1 f7       	brne	.-4      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 45c:	00 c0       	rjmp	.+0      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 45e:	00 00       	nop
 460:	60 e0       	ldi	r22, 0x00	; 0
 462:	ce 01       	movw	r24, r28
 464:	04 96       	adiw	r24, 0x04	; 4
 466:	0e 94 72 00 	call	0xe4	; 0xe4 <MCAL_Dio_WritePin>
 46a:	89 ef       	ldi	r24, 0xF9	; 249
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	01 97       	sbiw	r24, 0x01	; 1
 470:	f1 f7       	brne	.-4      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 472:	00 c0       	rjmp	.+0      	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 474:	00 00       	nop
 476:	41 2f       	mov	r20, r17
 478:	41 70       	andi	r20, 0x01	; 1
 47a:	61 e0       	ldi	r22, 0x01	; 1
 47c:	ce 01       	movw	r24, r28
 47e:	07 96       	adiw	r24, 0x07	; 7
 480:	0e 94 a0 00 	call	0x140	; 0x140 <MCAL_Dio_WriteSinglePin>
 484:	11 fb       	bst	r17, 1
 486:	44 27       	eor	r20, r20
 488:	40 f9       	bld	r20, 0
 48a:	62 e0       	ldi	r22, 0x02	; 2
 48c:	ce 01       	movw	r24, r28
 48e:	07 96       	adiw	r24, 0x07	; 7
 490:	0e 94 a0 00 	call	0x140	; 0x140 <MCAL_Dio_WriteSinglePin>
 494:	12 fb       	bst	r17, 2
 496:	44 27       	eor	r20, r20
 498:	40 f9       	bld	r20, 0
 49a:	64 e0       	ldi	r22, 0x04	; 4
 49c:	ce 01       	movw	r24, r28
 49e:	07 96       	adiw	r24, 0x07	; 7
 4a0:	0e 94 a0 00 	call	0x140	; 0x140 <MCAL_Dio_WriteSinglePin>
 4a4:	13 fb       	bst	r17, 3
 4a6:	44 27       	eor	r20, r20
 4a8:	40 f9       	bld	r20, 0
 4aa:	60 e1       	ldi	r22, 0x10	; 16
 4ac:	ce 01       	movw	r24, r28
 4ae:	07 96       	adiw	r24, 0x07	; 7
 4b0:	0e 94 a0 00 	call	0x140	; 0x140 <MCAL_Dio_WriteSinglePin>
 4b4:	e9 ef       	ldi	r30, 0xF9	; 249
 4b6:	f0 e0       	ldi	r31, 0x00	; 0
 4b8:	31 97       	sbiw	r30, 0x01	; 1
 4ba:	f1 f7       	brne	.-4      	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
 4bc:	00 c0       	rjmp	.+0      	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 4be:	00 00       	nop
 4c0:	6f ef       	ldi	r22, 0xFF	; 255
 4c2:	ce 01       	movw	r24, r28
 4c4:	04 96       	adiw	r24, 0x04	; 4
 4c6:	0e 94 72 00 	call	0xe4	; 0xe4 <MCAL_Dio_WritePin>
 4ca:	89 ef       	ldi	r24, 0xF9	; 249
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	01 97       	sbiw	r24, 0x01	; 1
 4d0:	f1 f7       	brne	.-4      	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
 4d2:	00 c0       	rjmp	.+0      	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
 4d4:	00 00       	nop
 4d6:	60 e0       	ldi	r22, 0x00	; 0
 4d8:	ce 01       	movw	r24, r28
 4da:	04 96       	adiw	r24, 0x04	; 4
 4dc:	0e 94 72 00 	call	0xe4	; 0xe4 <MCAL_Dio_WritePin>
 4e0:	e9 ef       	ldi	r30, 0xF9	; 249
 4e2:	f0 e0       	ldi	r31, 0x00	; 0
 4e4:	31 97       	sbiw	r30, 0x01	; 1
 4e6:	f1 f7       	brne	.-4      	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 4e8:	00 c0       	rjmp	.+0      	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
 4ea:	00 00       	nop
 4ec:	29 96       	adiw	r28, 0x09	; 9
 4ee:	0f b6       	in	r0, 0x3f	; 63
 4f0:	f8 94       	cli
 4f2:	de bf       	out	0x3e, r29	; 62
 4f4:	0f be       	out	0x3f, r0	; 63
 4f6:	cd bf       	out	0x3d, r28	; 61
 4f8:	df 91       	pop	r29
 4fa:	cf 91       	pop	r28
 4fc:	1f 91       	pop	r17
 4fe:	08 95       	ret

00000500 <HAL_LCD_init>:
 500:	1f 93       	push	r17
 502:	cf 93       	push	r28
 504:	df 93       	push	r29
 506:	cd b7       	in	r28, 0x3d	; 61
 508:	de b7       	in	r29, 0x3e	; 62
 50a:	29 97       	sbiw	r28, 0x09	; 9
 50c:	0f b6       	in	r0, 0x3f	; 63
 50e:	f8 94       	cli
 510:	de bf       	out	0x3e, r29	; 62
 512:	0f be       	out	0x3f, r0	; 63
 514:	cd bf       	out	0x3d, r28	; 61
 516:	19 82       	std	Y+1, r1	; 0x01
 518:	88 e0       	ldi	r24, 0x08	; 8
 51a:	8a 83       	std	Y+2, r24	; 0x02
 51c:	1f ef       	ldi	r17, 0xFF	; 255
 51e:	1b 83       	std	Y+3, r17	; 0x03
 520:	ce 01       	movw	r24, r28
 522:	01 96       	adiw	r24, 0x01	; 1
 524:	0e 94 41 00 	call	0x82	; 0x82 <MCAL_Dio_Init>
 528:	1c 82       	std	Y+4, r1	; 0x04
 52a:	84 e0       	ldi	r24, 0x04	; 4
 52c:	8d 83       	std	Y+5, r24	; 0x05
 52e:	1e 83       	std	Y+6, r17	; 0x06
 530:	ce 01       	movw	r24, r28
 532:	04 96       	adiw	r24, 0x04	; 4
 534:	0e 94 41 00 	call	0x82	; 0x82 <MCAL_Dio_Init>
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	8f 83       	std	Y+7, r24	; 0x07
 53c:	87 e1       	ldi	r24, 0x17	; 23
 53e:	88 87       	std	Y+8, r24	; 0x08
 540:	19 87       	std	Y+9, r17	; 0x09
 542:	ce 01       	movw	r24, r28
 544:	07 96       	adiw	r24, 0x07	; 7
 546:	0e 94 41 00 	call	0x82	; 0x82 <MCAL_Dio_Init>
 54a:	18 2f       	mov	r17, r24
 54c:	8d e2       	ldi	r24, 0x2D	; 45
 54e:	92 e2       	ldi	r25, 0x22	; 34
 550:	01 97       	sbiw	r24, 0x01	; 1
 552:	f1 f7       	brne	.-4      	; 0x550 <HAL_LCD_init+0x50>
 554:	00 c0       	rjmp	.+0      	; 0x556 <HAL_LCD_init+0x56>
 556:	00 00       	nop
 558:	82 e0       	ldi	r24, 0x02	; 2
 55a:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <HAL_LCD_sendCommand>
 55e:	88 e2       	ldi	r24, 0x28	; 40
 560:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <HAL_LCD_sendCommand>
 564:	8f e0       	ldi	r24, 0x0F	; 15
 566:	97 e2       	ldi	r25, 0x27	; 39
 568:	01 97       	sbiw	r24, 0x01	; 1
 56a:	f1 f7       	brne	.-4      	; 0x568 <HAL_LCD_init+0x68>
 56c:	00 c0       	rjmp	.+0      	; 0x56e <HAL_LCD_init+0x6e>
 56e:	00 00       	nop
 570:	8e e0       	ldi	r24, 0x0E	; 14
 572:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <HAL_LCD_sendCommand>
 576:	8f e0       	ldi	r24, 0x0F	; 15
 578:	97 e2       	ldi	r25, 0x27	; 39
 57a:	01 97       	sbiw	r24, 0x01	; 1
 57c:	f1 f7       	brne	.-4      	; 0x57a <HAL_LCD_init+0x7a>
 57e:	00 c0       	rjmp	.+0      	; 0x580 <HAL_LCD_init+0x80>
 580:	00 00       	nop
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <HAL_LCD_sendCommand>
 588:	83 ef       	ldi	r24, 0xF3	; 243
 58a:	91 e0       	ldi	r25, 0x01	; 1
 58c:	01 97       	sbiw	r24, 0x01	; 1
 58e:	f1 f7       	brne	.-4      	; 0x58c <HAL_LCD_init+0x8c>
 590:	00 c0       	rjmp	.+0      	; 0x592 <HAL_LCD_init+0x92>
 592:	00 00       	nop
 594:	86 e0       	ldi	r24, 0x06	; 6
 596:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <HAL_LCD_sendCommand>
 59a:	81 2f       	mov	r24, r17
 59c:	29 96       	adiw	r28, 0x09	; 9
 59e:	0f b6       	in	r0, 0x3f	; 63
 5a0:	f8 94       	cli
 5a2:	de bf       	out	0x3e, r29	; 62
 5a4:	0f be       	out	0x3f, r0	; 63
 5a6:	cd bf       	out	0x3d, r28	; 61
 5a8:	df 91       	pop	r29
 5aa:	cf 91       	pop	r28
 5ac:	1f 91       	pop	r17
 5ae:	08 95       	ret

000005b0 <HAL_LCD_sendCharacter>:
 5b0:	1f 93       	push	r17
 5b2:	cf 93       	push	r28
 5b4:	df 93       	push	r29
 5b6:	cd b7       	in	r28, 0x3d	; 61
 5b8:	de b7       	in	r29, 0x3e	; 62
 5ba:	29 97       	sbiw	r28, 0x09	; 9
 5bc:	0f b6       	in	r0, 0x3f	; 63
 5be:	f8 94       	cli
 5c0:	de bf       	out	0x3e, r29	; 62
 5c2:	0f be       	out	0x3f, r0	; 63
 5c4:	cd bf       	out	0x3d, r28	; 61
 5c6:	18 2f       	mov	r17, r24
 5c8:	19 82       	std	Y+1, r1	; 0x01
 5ca:	88 e0       	ldi	r24, 0x08	; 8
 5cc:	8a 83       	std	Y+2, r24	; 0x02
 5ce:	1b 82       	std	Y+3, r1	; 0x03
 5d0:	6f ef       	ldi	r22, 0xFF	; 255
 5d2:	ce 01       	movw	r24, r28
 5d4:	01 96       	adiw	r24, 0x01	; 1
 5d6:	0e 94 72 00 	call	0xe4	; 0xe4 <MCAL_Dio_WritePin>
 5da:	1c 82       	std	Y+4, r1	; 0x04
 5dc:	84 e0       	ldi	r24, 0x04	; 4
 5de:	8d 83       	std	Y+5, r24	; 0x05
 5e0:	1e 82       	std	Y+6, r1	; 0x06
 5e2:	89 ef       	ldi	r24, 0xF9	; 249
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	01 97       	sbiw	r24, 0x01	; 1
 5e8:	f1 f7       	brne	.-4      	; 0x5e6 <HAL_LCD_sendCharacter+0x36>
 5ea:	00 c0       	rjmp	.+0      	; 0x5ec <HAL_LCD_sendCharacter+0x3c>
 5ec:	00 00       	nop
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	8f 83       	std	Y+7, r24	; 0x07
 5f2:	87 e1       	ldi	r24, 0x17	; 23
 5f4:	88 87       	std	Y+8, r24	; 0x08
 5f6:	8f ef       	ldi	r24, 0xFF	; 255
 5f8:	89 87       	std	Y+9, r24	; 0x09
 5fa:	14 fb       	bst	r17, 4
 5fc:	44 27       	eor	r20, r20
 5fe:	40 f9       	bld	r20, 0
 600:	61 e0       	ldi	r22, 0x01	; 1
 602:	ce 01       	movw	r24, r28
 604:	07 96       	adiw	r24, 0x07	; 7
 606:	0e 94 a0 00 	call	0x140	; 0x140 <MCAL_Dio_WriteSinglePin>
 60a:	15 fb       	bst	r17, 5
 60c:	44 27       	eor	r20, r20
 60e:	40 f9       	bld	r20, 0
 610:	62 e0       	ldi	r22, 0x02	; 2
 612:	ce 01       	movw	r24, r28
 614:	07 96       	adiw	r24, 0x07	; 7
 616:	0e 94 a0 00 	call	0x140	; 0x140 <MCAL_Dio_WriteSinglePin>
 61a:	16 fb       	bst	r17, 6
 61c:	44 27       	eor	r20, r20
 61e:	40 f9       	bld	r20, 0
 620:	64 e0       	ldi	r22, 0x04	; 4
 622:	ce 01       	movw	r24, r28
 624:	07 96       	adiw	r24, 0x07	; 7
 626:	0e 94 a0 00 	call	0x140	; 0x140 <MCAL_Dio_WriteSinglePin>
 62a:	41 2f       	mov	r20, r17
 62c:	44 1f       	adc	r20, r20
 62e:	44 27       	eor	r20, r20
 630:	44 1f       	adc	r20, r20
 632:	60 e1       	ldi	r22, 0x10	; 16
 634:	ce 01       	movw	r24, r28
 636:	07 96       	adiw	r24, 0x07	; 7
 638:	0e 94 a0 00 	call	0x140	; 0x140 <MCAL_Dio_WriteSinglePin>
 63c:	e9 ef       	ldi	r30, 0xF9	; 249
 63e:	f0 e0       	ldi	r31, 0x00	; 0
 640:	31 97       	sbiw	r30, 0x01	; 1
 642:	f1 f7       	brne	.-4      	; 0x640 <HAL_LCD_sendCharacter+0x90>
 644:	00 c0       	rjmp	.+0      	; 0x646 <HAL_LCD_sendCharacter+0x96>
 646:	00 00       	nop
 648:	6f ef       	ldi	r22, 0xFF	; 255
 64a:	ce 01       	movw	r24, r28
 64c:	04 96       	adiw	r24, 0x04	; 4
 64e:	0e 94 72 00 	call	0xe4	; 0xe4 <MCAL_Dio_WritePin>
 652:	89 ef       	ldi	r24, 0xF9	; 249
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	01 97       	sbiw	r24, 0x01	; 1
 658:	f1 f7       	brne	.-4      	; 0x656 <HAL_LCD_sendCharacter+0xa6>
 65a:	00 c0       	rjmp	.+0      	; 0x65c <HAL_LCD_sendCharacter+0xac>
 65c:	00 00       	nop
 65e:	60 e0       	ldi	r22, 0x00	; 0
 660:	ce 01       	movw	r24, r28
 662:	04 96       	adiw	r24, 0x04	; 4
 664:	0e 94 72 00 	call	0xe4	; 0xe4 <MCAL_Dio_WritePin>
 668:	e9 ef       	ldi	r30, 0xF9	; 249
 66a:	f0 e0       	ldi	r31, 0x00	; 0
 66c:	31 97       	sbiw	r30, 0x01	; 1
 66e:	f1 f7       	brne	.-4      	; 0x66c <HAL_LCD_sendCharacter+0xbc>
 670:	00 c0       	rjmp	.+0      	; 0x672 <HAL_LCD_sendCharacter+0xc2>
 672:	00 00       	nop
 674:	41 2f       	mov	r20, r17
 676:	41 70       	andi	r20, 0x01	; 1
 678:	61 e0       	ldi	r22, 0x01	; 1
 67a:	ce 01       	movw	r24, r28
 67c:	07 96       	adiw	r24, 0x07	; 7
 67e:	0e 94 a0 00 	call	0x140	; 0x140 <MCAL_Dio_WriteSinglePin>
 682:	11 fb       	bst	r17, 1
 684:	44 27       	eor	r20, r20
 686:	40 f9       	bld	r20, 0
 688:	62 e0       	ldi	r22, 0x02	; 2
 68a:	ce 01       	movw	r24, r28
 68c:	07 96       	adiw	r24, 0x07	; 7
 68e:	0e 94 a0 00 	call	0x140	; 0x140 <MCAL_Dio_WriteSinglePin>
 692:	12 fb       	bst	r17, 2
 694:	44 27       	eor	r20, r20
 696:	40 f9       	bld	r20, 0
 698:	64 e0       	ldi	r22, 0x04	; 4
 69a:	ce 01       	movw	r24, r28
 69c:	07 96       	adiw	r24, 0x07	; 7
 69e:	0e 94 a0 00 	call	0x140	; 0x140 <MCAL_Dio_WriteSinglePin>
 6a2:	13 fb       	bst	r17, 3
 6a4:	44 27       	eor	r20, r20
 6a6:	40 f9       	bld	r20, 0
 6a8:	60 e1       	ldi	r22, 0x10	; 16
 6aa:	ce 01       	movw	r24, r28
 6ac:	07 96       	adiw	r24, 0x07	; 7
 6ae:	0e 94 a0 00 	call	0x140	; 0x140 <MCAL_Dio_WriteSinglePin>
 6b2:	89 ef       	ldi	r24, 0xF9	; 249
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	01 97       	sbiw	r24, 0x01	; 1
 6b8:	f1 f7       	brne	.-4      	; 0x6b6 <HAL_LCD_sendCharacter+0x106>
 6ba:	00 c0       	rjmp	.+0      	; 0x6bc <HAL_LCD_sendCharacter+0x10c>
 6bc:	00 00       	nop
 6be:	6f ef       	ldi	r22, 0xFF	; 255
 6c0:	ce 01       	movw	r24, r28
 6c2:	04 96       	adiw	r24, 0x04	; 4
 6c4:	0e 94 72 00 	call	0xe4	; 0xe4 <MCAL_Dio_WritePin>
 6c8:	e9 ef       	ldi	r30, 0xF9	; 249
 6ca:	f0 e0       	ldi	r31, 0x00	; 0
 6cc:	31 97       	sbiw	r30, 0x01	; 1
 6ce:	f1 f7       	brne	.-4      	; 0x6cc <HAL_LCD_sendCharacter+0x11c>
 6d0:	00 c0       	rjmp	.+0      	; 0x6d2 <HAL_LCD_sendCharacter+0x122>
 6d2:	00 00       	nop
 6d4:	60 e0       	ldi	r22, 0x00	; 0
 6d6:	ce 01       	movw	r24, r28
 6d8:	04 96       	adiw	r24, 0x04	; 4
 6da:	0e 94 72 00 	call	0xe4	; 0xe4 <MCAL_Dio_WritePin>
 6de:	e9 ef       	ldi	r30, 0xF9	; 249
 6e0:	f0 e0       	ldi	r31, 0x00	; 0
 6e2:	31 97       	sbiw	r30, 0x01	; 1
 6e4:	f1 f7       	brne	.-4      	; 0x6e2 <HAL_LCD_sendCharacter+0x132>
 6e6:	00 c0       	rjmp	.+0      	; 0x6e8 <HAL_LCD_sendCharacter+0x138>
 6e8:	00 00       	nop
 6ea:	29 96       	adiw	r28, 0x09	; 9
 6ec:	0f b6       	in	r0, 0x3f	; 63
 6ee:	f8 94       	cli
 6f0:	de bf       	out	0x3e, r29	; 62
 6f2:	0f be       	out	0x3f, r0	; 63
 6f4:	cd bf       	out	0x3d, r28	; 61
 6f6:	df 91       	pop	r29
 6f8:	cf 91       	pop	r28
 6fa:	1f 91       	pop	r17
 6fc:	08 95       	ret

000006fe <HAL_LCD_sendString>:
 6fe:	0f 93       	push	r16
 700:	1f 93       	push	r17
 702:	cf 93       	push	r28
 704:	8c 01       	movw	r16, r24
 706:	c0 e0       	ldi	r28, 0x00	; 0
 708:	81 e0       	ldi	r24, 0x01	; 1
 70a:	04 c0       	rjmp	.+8      	; 0x714 <HAL_LCD_sendString+0x16>
 70c:	89 2f       	mov	r24, r25
 70e:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <HAL_LCD_sendCharacter>
 712:	cf 5f       	subi	r28, 0xFF	; 255
 714:	f8 01       	movw	r30, r16
 716:	ec 0f       	add	r30, r28
 718:	f1 1d       	adc	r31, r1
 71a:	90 81       	ld	r25, Z
 71c:	91 11       	cpse	r25, r1
 71e:	f6 cf       	rjmp	.-20     	; 0x70c <HAL_LCD_sendString+0xe>
 720:	cf 91       	pop	r28
 722:	1f 91       	pop	r17
 724:	0f 91       	pop	r16
 726:	08 95       	ret

00000728 <HAL_LCD_clearScreen>:
 728:	81 e0       	ldi	r24, 0x01	; 1
 72a:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <HAL_LCD_sendCommand>
 72e:	83 ec       	ldi	r24, 0xC3	; 195
 730:	99 e0       	ldi	r25, 0x09	; 9
 732:	01 97       	sbiw	r24, 0x01	; 1
 734:	f1 f7       	brne	.-4      	; 0x732 <HAL_LCD_clearScreen+0xa>
 736:	00 c0       	rjmp	.+0      	; 0x738 <HAL_LCD_clearScreen+0x10>
 738:	00 00       	nop
 73a:	86 e0       	ldi	r24, 0x06	; 6
 73c:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <HAL_LCD_sendCommand>
 740:	08 95       	ret

00000742 <HAL_LCD_goToRowColumn>:
 742:	81 30       	cpi	r24, 0x01	; 1
 744:	39 f0       	breq	.+14     	; 0x754 <HAL_LCD_goToRowColumn+0x12>
 746:	58 f0       	brcs	.+22     	; 0x75e <HAL_LCD_goToRowColumn+0x1c>
 748:	82 30       	cpi	r24, 0x02	; 2
 74a:	31 f0       	breq	.+12     	; 0x758 <HAL_LCD_goToRowColumn+0x16>
 74c:	83 30       	cpi	r24, 0x03	; 3
 74e:	31 f0       	breq	.+12     	; 0x75c <HAL_LCD_goToRowColumn+0x1a>
 750:	60 e0       	ldi	r22, 0x00	; 0
 752:	05 c0       	rjmp	.+10     	; 0x75e <HAL_LCD_goToRowColumn+0x1c>
 754:	60 5c       	subi	r22, 0xC0	; 192
 756:	03 c0       	rjmp	.+6      	; 0x75e <HAL_LCD_goToRowColumn+0x1c>
 758:	6c 5e       	subi	r22, 0xEC	; 236
 75a:	01 c0       	rjmp	.+2      	; 0x75e <HAL_LCD_goToRowColumn+0x1c>
 75c:	6c 5a       	subi	r22, 0xAC	; 172
 75e:	86 2f       	mov	r24, r22
 760:	80 68       	ori	r24, 0x80	; 128
 762:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <HAL_LCD_sendCommand>
 766:	08 95       	ret

00000768 <HAL_LCD_integerToString>:
	return u8LocalReturn;
}

/* Function to convert an integer to string */
E_ErrorType HAL_LCD_integerToString(LCD_integer num)
{
 768:	cf 92       	push	r12
 76a:	df 92       	push	r13
 76c:	ef 92       	push	r14
 76e:	ff 92       	push	r15
 770:	0f 93       	push	r16
 772:	1f 93       	push	r17
 774:	cf 93       	push	r28
 776:	df 93       	push	r29
 778:	cd b7       	in	r28, 0x3d	; 61
 77a:	de b7       	in	r29, 0x3e	; 62
 77c:	60 97       	sbiw	r28, 0x10	; 16
 77e:	0f b6       	in	r0, 0x3f	; 63
 780:	f8 94       	cli
 782:	de bf       	out	0x3e, r29	; 62
 784:	0f be       	out	0x3f, r0	; 63
 786:	cd bf       	out	0x3d, r28	; 61
 788:	6b 01       	movw	r12, r22
 78a:	7c 01       	movw	r14, r24
	E_ErrorType u8LocalReturn = E_NOT_OK;
	signed char str[16];
	unsigned char i, rem, len=0;
	LCD_integer n = num;
	if(n ==0)
 78c:	61 15       	cp	r22, r1
 78e:	71 05       	cpc	r23, r1
 790:	81 05       	cpc	r24, r1
 792:	91 05       	cpc	r25, r1
 794:	99 f0       	breq	.+38     	; 0x7bc <HAL_LCD_integerToString+0x54>
 796:	9b 01       	movw	r18, r22
 798:	ac 01       	movw	r20, r24
 79a:	00 e0       	ldi	r16, 0x00	; 0
 79c:	09 c0       	rjmp	.+18     	; 0x7b0 <HAL_LCD_integerToString+0x48>
	}
	else
	{
		while(n != 0)
		{
			len++;
 79e:	0f 5f       	subi	r16, 0xFF	; 255
			n /= 10;
 7a0:	ca 01       	movw	r24, r20
 7a2:	b9 01       	movw	r22, r18
 7a4:	2a e0       	ldi	r18, 0x0A	; 10
 7a6:	30 e0       	ldi	r19, 0x00	; 0
 7a8:	40 e0       	ldi	r20, 0x00	; 0
 7aa:	50 e0       	ldi	r21, 0x00	; 0
 7ac:	0e 94 a2 04 	call	0x944	; 0x944 <__udivmodsi4>
	{
		len = 1;
	}
	else
	{
		while(n != 0)
 7b0:	21 15       	cp	r18, r1
 7b2:	31 05       	cpc	r19, r1
 7b4:	41 05       	cpc	r20, r1
 7b6:	51 05       	cpc	r21, r1
 7b8:	91 f7       	brne	.-28     	; 0x79e <HAL_LCD_integerToString+0x36>
 7ba:	01 c0       	rjmp	.+2      	; 0x7be <HAL_LCD_integerToString+0x56>
	signed char str[16];
	unsigned char i, rem, len=0;
	LCD_integer n = num;
	if(n ==0)
	{
		len = 1;
 7bc:	01 e0       	ldi	r16, 0x01	; 1
		{
			len++;
			n /= 10;
		}
	}
	if(len >= 15)
 7be:	0f 30       	cpi	r16, 0x0F	; 15
 7c0:	50 f5       	brcc	.+84     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 7c2:	10 e0       	ldi	r17, 0x00	; 0
 7c4:	1a c0       	rjmp	.+52     	; 0x7fa <HAL_LCD_integerToString+0x92>
		return u8LocalReturn;
	}
	for(i=0 ; i<len ; i++)
	{
		rem = num % 10;
		num = num /10;
 7c6:	c7 01       	movw	r24, r14
 7c8:	b6 01       	movw	r22, r12
 7ca:	2a e0       	ldi	r18, 0x0A	; 10
 7cc:	30 e0       	ldi	r19, 0x00	; 0
 7ce:	40 e0       	ldi	r20, 0x00	; 0
 7d0:	50 e0       	ldi	r21, 0x00	; 0
 7d2:	0e 94 a2 04 	call	0x944	; 0x944 <__udivmodsi4>
 7d6:	69 01       	movw	r12, r18
 7d8:	7a 01       	movw	r14, r20
		str[len - (i + 1)] = rem + '0';
 7da:	81 2f       	mov	r24, r17
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	01 96       	adiw	r24, 0x01	; 1
 7e0:	e0 2f       	mov	r30, r16
 7e2:	f0 e0       	ldi	r31, 0x00	; 0
 7e4:	e8 1b       	sub	r30, r24
 7e6:	f9 0b       	sbc	r31, r25
 7e8:	81 e0       	ldi	r24, 0x01	; 1
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	8c 0f       	add	r24, r28
 7ee:	9d 1f       	adc	r25, r29
 7f0:	e8 0f       	add	r30, r24
 7f2:	f9 1f       	adc	r31, r25
 7f4:	60 5d       	subi	r22, 0xD0	; 208
 7f6:	60 83       	st	Z, r22
	if(len >= 15)
	{
		u8LocalReturn = E_NOT_OK;
		return u8LocalReturn;
	}
	for(i=0 ; i<len ; i++)
 7f8:	1f 5f       	subi	r17, 0xFF	; 255
 7fa:	10 17       	cp	r17, r16
 7fc:	20 f3       	brcs	.-56     	; 0x7c6 <HAL_LCD_integerToString+0x5e>
	{
		rem = num % 10;
		num = num /10;
		str[len - (i + 1)] = rem + '0';
	}
	str[len] = '\0';
 7fe:	e1 e0       	ldi	r30, 0x01	; 1
 800:	f0 e0       	ldi	r31, 0x00	; 0
 802:	ec 0f       	add	r30, r28
 804:	fd 1f       	adc	r31, r29
 806:	e0 0f       	add	r30, r16
 808:	f1 1d       	adc	r31, r1
 80a:	10 82       	st	Z, r1
	u8LocalReturn = HAL_LCD_sendString(str);
 80c:	ce 01       	movw	r24, r28
 80e:	01 96       	adiw	r24, 0x01	; 1
 810:	0e 94 7f 03 	call	0x6fe	; 0x6fe <HAL_LCD_sendString>
	return u8LocalReturn;
 814:	01 c0       	rjmp	.+2      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
		}
	}
	if(len >= 15)
	{
		u8LocalReturn = E_NOT_OK;
		return u8LocalReturn;
 816:	81 e0       	ldi	r24, 0x01	; 1
		str[len - (i + 1)] = rem + '0';
	}
	str[len] = '\0';
	u8LocalReturn = HAL_LCD_sendString(str);
	return u8LocalReturn;
}
 818:	60 96       	adiw	r28, 0x10	; 16
 81a:	0f b6       	in	r0, 0x3f	; 63
 81c:	f8 94       	cli
 81e:	de bf       	out	0x3e, r29	; 62
 820:	0f be       	out	0x3f, r0	; 63
 822:	cd bf       	out	0x3d, r28	; 61
 824:	df 91       	pop	r29
 826:	cf 91       	pop	r28
 828:	1f 91       	pop	r17
 82a:	0f 91       	pop	r16
 82c:	ff 90       	pop	r15
 82e:	ef 90       	pop	r14
 830:	df 90       	pop	r13
 832:	cf 90       	pop	r12
 834:	08 95       	ret

00000836 <main>:
#include "GARAGE.h"


int main(void)
{
    SERVICE_GARAGE_Einit();
 836:	0e 94 31 01 	call	0x262	; 0x262 <SERVICE_GARAGE_Einit>
    SERVICE_GARAGE_openDoor();
 83a:	0e 94 3c 01 	call	0x278	; 0x278 <SERVICE_GARAGE_openDoor>
	SERVICE_GARAGE_closeDoor();
 83e:	0e 94 41 01 	call	0x282	; 0x282 <SERVICE_GARAGE_closeDoor>
 842:	ff cf       	rjmp	.-2      	; 0x842 <main+0xc>

00000844 <HAL_ULTRASONIC_EINIT>:
#include "common_macros.h"
#define F_CPU	16000000
#include <util/delay.h>
#include <avr/io.h>//DON'T FORGET!! delete it and include the TIMER1 REG FILE
E_ULTRASONIC_ERROR HAL_ULTRASONIC_EINIT(void)
{	
 844:	cf 93       	push	r28
 846:	df 93       	push	r29
 848:	00 d0       	rcall	.+0      	; 0x84a <HAL_ULTRASONIC_EINIT+0x6>
 84a:	00 d0       	rcall	.+0      	; 0x84c <HAL_ULTRASONIC_EINIT+0x8>
 84c:	00 d0       	rcall	.+0      	; 0x84e <HAL_ULTRASONIC_EINIT+0xa>
 84e:	cd b7       	in	r28, 0x3d	; 61
 850:	de b7       	in	r29, 0x3e	; 62
	E_ULTRASONIC_ERROR e= ULTRASONIC_OK;
	S_Dio	S_trigger={TRIGGER_PORT,TRIGGER_PIN,OUTPUT};
 852:	84 e4       	ldi	r24, 0x44	; 68
 854:	89 83       	std	Y+1, r24	; 0x01
 856:	97 e0       	ldi	r25, 0x07	; 7
 858:	9a 83       	std	Y+2, r25	; 0x02
 85a:	9f ef       	ldi	r25, 0xFF	; 255
 85c:	9b 83       	std	Y+3, r25	; 0x03
	S_Dio S_ECHO={ECHO_PORT,ECHO_PIN,INPUT};
 85e:	8c 83       	std	Y+4, r24	; 0x04
 860:	86 e0       	ldi	r24, 0x06	; 6
 862:	8d 83       	std	Y+5, r24	; 0x05
 864:	1e 82       	std	Y+6, r1	; 0x06
	e=MCAL_Dio_Init(&S_trigger);
 866:	ce 01       	movw	r24, r28
 868:	01 96       	adiw	r24, 0x01	; 1
 86a:	0e 94 41 00 	call	0x82	; 0x82 <MCAL_Dio_Init>
	e=MCAL_Dio_Init(&S_ECHO);
 86e:	ce 01       	movw	r24, r28
 870:	04 96       	adiw	r24, 0x04	; 4
 872:	0e 94 41 00 	call	0x82	; 0x82 <MCAL_Dio_Init>
	e=MCAL_Dio_WriteSinglePin(&S_ECHO,ECHO_PIN,1);
 876:	41 e0       	ldi	r20, 0x01	; 1
 878:	66 e0       	ldi	r22, 0x06	; 6
 87a:	ce 01       	movw	r24, r28
 87c:	04 96       	adiw	r24, 0x04	; 4
 87e:	0e 94 a0 00 	call	0x140	; 0x140 <MCAL_Dio_WriteSinglePin>
	//SET_BIT(TIMSK,TICIE1);
	return e;
}
 882:	26 96       	adiw	r28, 0x06	; 6
 884:	0f b6       	in	r0, 0x3f	; 63
 886:	f8 94       	cli
 888:	de bf       	out	0x3e, r29	; 62
 88a:	0f be       	out	0x3f, r0	; 63
 88c:	cd bf       	out	0x3d, r28	; 61
 88e:	df 91       	pop	r29
 890:	cf 91       	pop	r28
 892:	08 95       	ret

00000894 <HAL_ULTRASONIC_EtrigPULSE>:

E_ULTRASONIC_ERROR HAL_ULTRASONIC_EtrigPULSE(void)
{	E_ULTRASONIC_ERROR e= ULTRASONIC_OK;
 894:	cf 93       	push	r28
 896:	df 93       	push	r29
 898:	00 d0       	rcall	.+0      	; 0x89a <HAL_ULTRASONIC_EtrigPULSE+0x6>
 89a:	1f 92       	push	r1
 89c:	cd b7       	in	r28, 0x3d	; 61
 89e:	de b7       	in	r29, 0x3e	; 62
	S_Dio	S_trigger={TRIGGER_PORT,TRIGGER_PIN,OUTPUT};
 8a0:	84 e4       	ldi	r24, 0x44	; 68
 8a2:	89 83       	std	Y+1, r24	; 0x01
 8a4:	87 e0       	ldi	r24, 0x07	; 7
 8a6:	8a 83       	std	Y+2, r24	; 0x02
 8a8:	8f ef       	ldi	r24, 0xFF	; 255
 8aa:	8b 83       	std	Y+3, r24	; 0x03
	e= MCAL_Dio_WriteSinglePin(&S_trigger,TRIGGER_PIN,1);
 8ac:	41 e0       	ldi	r20, 0x01	; 1
 8ae:	67 e0       	ldi	r22, 0x07	; 7
 8b0:	ce 01       	movw	r24, r28
 8b2:	01 96       	adiw	r24, 0x01	; 1
 8b4:	0e 94 a0 00 	call	0x140	; 0x140 <MCAL_Dio_WriteSinglePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 8b8:	87 ec       	ldi	r24, 0xC7	; 199
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	01 97       	sbiw	r24, 0x01	; 1
 8be:	f1 f7       	brne	.-4      	; 0x8bc <HAL_ULTRASONIC_EtrigPULSE+0x28>
 8c0:	00 c0       	rjmp	.+0      	; 0x8c2 <HAL_ULTRASONIC_EtrigPULSE+0x2e>
 8c2:	00 00       	nop
	_delay_us(50);
	e= MCAL_Dio_WriteSinglePin(&S_trigger,TRIGGER_PIN,0);
 8c4:	40 e0       	ldi	r20, 0x00	; 0
 8c6:	67 e0       	ldi	r22, 0x07	; 7
 8c8:	ce 01       	movw	r24, r28
 8ca:	01 96       	adiw	r24, 0x01	; 1
 8cc:	0e 94 a0 00 	call	0x140	; 0x140 <MCAL_Dio_WriteSinglePin>
	return e;
}
 8d0:	0f 90       	pop	r0
 8d2:	0f 90       	pop	r0
 8d4:	0f 90       	pop	r0
 8d6:	df 91       	pop	r29
 8d8:	cf 91       	pop	r28
 8da:	08 95       	ret

000008dc <HAL_ULTRASONIC_EdistanceESTIMATION>:

E_ULTRASONIC_ERROR HAL_ULTRASONIC_EdistanceESTIMATION(unsigned short* distance)
{	E_ULTRASONIC_ERROR e= ULTRASONIC_OK;
 8dc:	cf 93       	push	r28
 8de:	df 93       	push	r29
 8e0:	ec 01       	movw	r28, r24
	TCCR1A=0;
 8e2:	1f bc       	out	0x2f, r1	; 47
	unsigned short rise,fall,high;
	SET_BIT(TIFR,ICF1);
 8e4:	88 b7       	in	r24, 0x38	; 56
 8e6:	80 62       	ori	r24, 0x20	; 32
 8e8:	88 bf       	out	0x38, r24	; 56
	HAL_ULTRASONIC_EtrigPULSE();
 8ea:	0e 94 4a 04 	call	0x894	; 0x894 <HAL_ULTRASONIC_EtrigPULSE>
	TCNT1=0X0000;
 8ee:	1d bc       	out	0x2d, r1	; 45
 8f0:	1c bc       	out	0x2c, r1	; 44
	TCCR1B=0b11000001;//0xc1 NOISE CANCELLER & RISING EDGE & NO PRESCALLER
 8f2:	81 ec       	ldi	r24, 0xC1	; 193
 8f4:	8e bd       	out	0x2e, r24	; 46
	while (GET_BIT(TIFR,ICF1)!=1);
 8f6:	08 b6       	in	r0, 0x38	; 56
 8f8:	05 fe       	sbrs	r0, 5
 8fa:	fd cf       	rjmp	.-6      	; 0x8f6 <HAL_ULTRASONIC_EdistanceESTIMATION+0x1a>
	rise=ICR1;
 8fc:	46 b5       	in	r20, 0x26	; 38
 8fe:	57 b5       	in	r21, 0x27	; 39
	SET_BIT(TIFR,ICF1);
 900:	88 b7       	in	r24, 0x38	; 56
 902:	80 62       	ori	r24, 0x20	; 32
 904:	88 bf       	out	0x38, r24	; 56
	TCCR1B=0b10000001;//0x81 NOISE CANCELLER & FALLING EDGE & NO PRESCALLER
 906:	81 e8       	ldi	r24, 0x81	; 129
 908:	8e bd       	out	0x2e, r24	; 46
	
	while (GET_BIT(TIFR,ICF1)!=1);
 90a:	08 b6       	in	r0, 0x38	; 56
 90c:	05 fe       	sbrs	r0, 5
 90e:	fd cf       	rjmp	.-6      	; 0x90a <HAL_ULTRASONIC_EdistanceESTIMATION+0x2e>
	fall=ICR1;
 910:	26 b5       	in	r18, 0x26	; 38
 912:	37 b5       	in	r19, 0x27	; 39
	SET_BIT(TIFR,ICF1);
 914:	88 b7       	in	r24, 0x38	; 56
 916:	80 62       	ori	r24, 0x20	; 32
 918:	88 bf       	out	0x38, r24	; 56
	TCNT1=0X0000;
 91a:	1d bc       	out	0x2d, r1	; 45
 91c:	1c bc       	out	0x2c, r1	; 44
	TCCR1B=0X00;
 91e:	1e bc       	out	0x2e, r1	; 46
	high=fall-rise;
 920:	24 1b       	sub	r18, r20
 922:	35 0b       	sbc	r19, r21
	(*distance)=(high*SPEED_OF_SOUND)/(F_CPU*2);
 924:	ac ef       	ldi	r26, 0xFC	; 252
 926:	b5 e8       	ldi	r27, 0x85	; 133
 928:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__umulhisi3>
 92c:	20 e0       	ldi	r18, 0x00	; 0
 92e:	38 e4       	ldi	r19, 0x48	; 72
 930:	48 ee       	ldi	r20, 0xE8	; 232
 932:	51 e0       	ldi	r21, 0x01	; 1
 934:	0e 94 c4 04 	call	0x988	; 0x988 <__divmodsi4>
 938:	39 83       	std	Y+1, r19	; 0x01
 93a:	28 83       	st	Y, r18
	return e;
 93c:	80 e0       	ldi	r24, 0x00	; 0
 93e:	df 91       	pop	r29
 940:	cf 91       	pop	r28
 942:	08 95       	ret

00000944 <__udivmodsi4>:
 944:	a1 e2       	ldi	r26, 0x21	; 33
 946:	1a 2e       	mov	r1, r26
 948:	aa 1b       	sub	r26, r26
 94a:	bb 1b       	sub	r27, r27
 94c:	fd 01       	movw	r30, r26
 94e:	0d c0       	rjmp	.+26     	; 0x96a <__udivmodsi4_ep>

00000950 <__udivmodsi4_loop>:
 950:	aa 1f       	adc	r26, r26
 952:	bb 1f       	adc	r27, r27
 954:	ee 1f       	adc	r30, r30
 956:	ff 1f       	adc	r31, r31
 958:	a2 17       	cp	r26, r18
 95a:	b3 07       	cpc	r27, r19
 95c:	e4 07       	cpc	r30, r20
 95e:	f5 07       	cpc	r31, r21
 960:	20 f0       	brcs	.+8      	; 0x96a <__udivmodsi4_ep>
 962:	a2 1b       	sub	r26, r18
 964:	b3 0b       	sbc	r27, r19
 966:	e4 0b       	sbc	r30, r20
 968:	f5 0b       	sbc	r31, r21

0000096a <__udivmodsi4_ep>:
 96a:	66 1f       	adc	r22, r22
 96c:	77 1f       	adc	r23, r23
 96e:	88 1f       	adc	r24, r24
 970:	99 1f       	adc	r25, r25
 972:	1a 94       	dec	r1
 974:	69 f7       	brne	.-38     	; 0x950 <__udivmodsi4_loop>
 976:	60 95       	com	r22
 978:	70 95       	com	r23
 97a:	80 95       	com	r24
 97c:	90 95       	com	r25
 97e:	9b 01       	movw	r18, r22
 980:	ac 01       	movw	r20, r24
 982:	bd 01       	movw	r22, r26
 984:	cf 01       	movw	r24, r30
 986:	08 95       	ret

00000988 <__divmodsi4>:
 988:	05 2e       	mov	r0, r21
 98a:	97 fb       	bst	r25, 7
 98c:	1e f4       	brtc	.+6      	; 0x994 <__divmodsi4+0xc>
 98e:	00 94       	com	r0
 990:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__negsi2>
 994:	57 fd       	sbrc	r21, 7
 996:	07 d0       	rcall	.+14     	; 0x9a6 <__divmodsi4_neg2>
 998:	0e 94 a2 04 	call	0x944	; 0x944 <__udivmodsi4>
 99c:	07 fc       	sbrc	r0, 7
 99e:	03 d0       	rcall	.+6      	; 0x9a6 <__divmodsi4_neg2>
 9a0:	4e f4       	brtc	.+18     	; 0x9b4 <__divmodsi4_exit>
 9a2:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <__negsi2>

000009a6 <__divmodsi4_neg2>:
 9a6:	50 95       	com	r21
 9a8:	40 95       	com	r20
 9aa:	30 95       	com	r19
 9ac:	21 95       	neg	r18
 9ae:	3f 4f       	sbci	r19, 0xFF	; 255
 9b0:	4f 4f       	sbci	r20, 0xFF	; 255
 9b2:	5f 4f       	sbci	r21, 0xFF	; 255

000009b4 <__divmodsi4_exit>:
 9b4:	08 95       	ret

000009b6 <__negsi2>:
 9b6:	90 95       	com	r25
 9b8:	80 95       	com	r24
 9ba:	70 95       	com	r23
 9bc:	61 95       	neg	r22
 9be:	7f 4f       	sbci	r23, 0xFF	; 255
 9c0:	8f 4f       	sbci	r24, 0xFF	; 255
 9c2:	9f 4f       	sbci	r25, 0xFF	; 255
 9c4:	08 95       	ret

000009c6 <__umulhisi3>:
 9c6:	a2 9f       	mul	r26, r18
 9c8:	b0 01       	movw	r22, r0
 9ca:	b3 9f       	mul	r27, r19
 9cc:	c0 01       	movw	r24, r0
 9ce:	a3 9f       	mul	r26, r19
 9d0:	70 0d       	add	r23, r0
 9d2:	81 1d       	adc	r24, r1
 9d4:	11 24       	eor	r1, r1
 9d6:	91 1d       	adc	r25, r1
 9d8:	b2 9f       	mul	r27, r18
 9da:	70 0d       	add	r23, r0
 9dc:	81 1d       	adc	r24, r1
 9de:	11 24       	eor	r1, r1
 9e0:	91 1d       	adc	r25, r1
 9e2:	08 95       	ret

000009e4 <_exit>:
 9e4:	f8 94       	cli

000009e6 <__stop_program>:
 9e6:	ff cf       	rjmp	.-2      	; 0x9e6 <__stop_program>
