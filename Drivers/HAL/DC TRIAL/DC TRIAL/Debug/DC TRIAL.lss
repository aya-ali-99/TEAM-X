
DC TRIAL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000043c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000043c  000004b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d12  00000000  00000000  000005dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007b5  00000000  00000000  000012ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007d3  00000000  00000000  00001aa3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000150  00000000  00000000  00002278  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000048f  00000000  00000000  000023c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008be  00000000  00000000  00002857  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00003115  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  40:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  54:	f2 00       	.word	0x00f2	; ????
  56:	0b 01       	movw	r0, r22
  58:	24 01       	movw	r4, r8
  5a:	3d 01       	movw	r6, r26
  5c:	55 01       	movw	r10, r10
  5e:	55 01       	movw	r10, r10
  60:	55 01       	movw	r10, r10
  62:	55 01       	movw	r10, r10
  64:	55 01       	movw	r10, r10
  66:	55 01       	movw	r10, r10
  68:	55 01       	movw	r10, r10
  6a:	55 01       	movw	r10, r10
  6c:	55 01       	movw	r10, r10
  6e:	55 01       	movw	r10, r10
  70:	55 01       	movw	r10, r10
  72:	55 01       	movw	r10, r10
  74:	55 01       	movw	r10, r10
  76:	55 01       	movw	r10, r10
  78:	55 01       	movw	r10, r10
  7a:	55 01       	movw	r10, r10
  7c:	55 01       	movw	r10, r10
  7e:	55 01       	movw	r10, r10
  80:	55 01       	movw	r10, r10
  82:	55 01       	movw	r10, r10
  84:	55 01       	movw	r10, r10
  86:	55 01       	movw	r10, r10
  88:	55 01       	movw	r10, r10
  8a:	55 01       	movw	r10, r10
  8c:	55 01       	movw	r10, r10
  8e:	55 01       	movw	r10, r10
  90:	55 01       	movw	r10, r10
  92:	55 01       	movw	r10, r10
  94:	f2 00       	.word	0x00f2	; ????
  96:	0b 01       	movw	r0, r22
  98:	24 01       	movw	r4, r8
  9a:	3d 01       	movw	r6, r26
  9c:	62 01       	movw	r12, r4
  9e:	7b 01       	movw	r14, r22
  a0:	94 01       	movw	r18, r8
  a2:	ad 01       	movw	r20, r26
  a4:	c5 01       	movw	r24, r10
  a6:	c5 01       	movw	r24, r10
  a8:	c5 01       	movw	r24, r10
  aa:	c5 01       	movw	r24, r10
  ac:	c5 01       	movw	r24, r10
  ae:	c5 01       	movw	r24, r10
  b0:	c5 01       	movw	r24, r10
  b2:	c5 01       	movw	r24, r10
  b4:	c5 01       	movw	r24, r10
  b6:	c5 01       	movw	r24, r10
  b8:	c5 01       	movw	r24, r10
  ba:	c5 01       	movw	r24, r10
  bc:	c5 01       	movw	r24, r10
  be:	c5 01       	movw	r24, r10
  c0:	c5 01       	movw	r24, r10
  c2:	c5 01       	movw	r24, r10
  c4:	c5 01       	movw	r24, r10
  c6:	c5 01       	movw	r24, r10
  c8:	c5 01       	movw	r24, r10
  ca:	c5 01       	movw	r24, r10
  cc:	c5 01       	movw	r24, r10
  ce:	c5 01       	movw	r24, r10
  d0:	c5 01       	movw	r24, r10
  d2:	c5 01       	movw	r24, r10
  d4:	c5 01       	movw	r24, r10
  d6:	c5 01       	movw	r24, r10
  d8:	c5 01       	movw	r24, r10
  da:	c5 01       	movw	r24, r10
  dc:	62 01       	movw	r12, r4
  de:	7b 01       	movw	r14, r22
  e0:	94 01       	movw	r18, r8
  e2:	ad 01       	movw	r20, r26

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf e5       	ldi	r28, 0x5F	; 95
  ea:	d8 e0       	ldi	r29, 0x08	; 8
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	10 e0       	ldi	r17, 0x00	; 0
  f2:	a0 e6       	ldi	r26, 0x60	; 96
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	ec e3       	ldi	r30, 0x3C	; 60
  f8:	f4 e0       	ldi	r31, 0x04	; 4
  fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
  fc:	05 90       	lpm	r0, Z+
  fe:	0d 92       	st	X+, r0
 100:	a8 36       	cpi	r26, 0x68	; 104
 102:	b1 07       	cpc	r27, r17
 104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>
 106:	0e 94 c6 01 	call	0x38c	; 0x38c <main>
 10a:	0c 94 1c 02 	jmp	0x438	; 0x438 <_exit>

0000010e <__bad_interrupt>:
 10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <HAL_DCMOTOR_Einit>:
#include "DIO.h"
#include "common_macros.h"
//#include <avr/io.h>

E_DCMOTOR_ERROR HAL_DCMOTOR_Einit(S_DCMOTOR* S_DC)
{	E_DCMOTOR_ERROR error=DCMOTOR_E_OK;
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	ec 01       	movw	r28, r24
	//make sure that PWM is the OC0 PIN PB3 if you want half the speed
	DIO_vsetbitdir(S_DC->PWM_port,S_DC->PWM_pin,1);//set dc motor driver PWM SIGNAL as avr output
 118:	41 e0       	ldi	r20, 0x01	; 1
 11a:	6b 81       	ldd	r22, Y+3	; 0x03
 11c:	88 81       	ld	r24, Y
 11e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_vsetbitdir>
	DIO_vsetbitdir(S_DC->DIR_port,S_DC->DIR_pin,1);//set DC motor direction pin as avr output
 122:	41 e0       	ldi	r20, 0x01	; 1
 124:	6c 81       	ldd	r22, Y+4	; 0x04
 126:	89 81       	ldd	r24, Y+1	; 0x01
 128:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_vsetbitdir>
	DIO_vsetbitdir(S_DC->EN_port,S_DC->EN_pin,1);//set DC motor driver enable as avr output
 12c:	41 e0       	ldi	r20, 0x01	; 1
 12e:	6d 81       	ldd	r22, Y+5	; 0x05
 130:	8a 81       	ldd	r24, Y+2	; 0x02
 132:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_vsetbitdir>
	DIO_vpinwrite(S_DC->EN_port,S_DC->EN_pin,1);//enable the DC MOTOR DRIVER L298
 136:	6d 81       	ldd	r22, Y+5	; 0x05
 138:	41 e0       	ldi	r20, 0x01	; 1
 13a:	8a 81       	ldd	r24, Y+2	; 0x02
 13c:	0e 94 56 01 	call	0x2ac	; 0x2ac <DIO_vpinwrite>
	return error;
}
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	08 95       	ret

00000148 <HAL_DCMOTOR_Edirection>:

E_DCMOTOR_ERROR HAL_DCMOTOR_Edirection(S_DCMOTOR* S_DC)
{	E_DCMOTOR_ERROR error=DCMOTOR_E_OK;
 148:	fc 01       	movw	r30, r24
	//set the direction clkwise or anti-clkwise
	if (S_DC->clkwise==1)
 14a:	96 81       	ldd	r25, Z+6	; 0x06
 14c:	91 30       	cpi	r25, 0x01	; 1
 14e:	31 f4       	brne	.+12     	; 0x15c <HAL_DCMOTOR_Edirection+0x14>
	{
		DIO_vpinwrite(S_DC->DIR_port,S_DC->DIR_pin,1);		
 150:	64 81       	ldd	r22, Z+4	; 0x04
 152:	41 e0       	ldi	r20, 0x01	; 1
 154:	81 81       	ldd	r24, Z+1	; 0x01
 156:	0e 94 56 01 	call	0x2ac	; 0x2ac <DIO_vpinwrite>
 15a:	07 c0       	rjmp	.+14     	; 0x16a <HAL_DCMOTOR_Edirection+0x22>
	}
	else if (S_DC->clkwise==0)
 15c:	91 11       	cpse	r25, r1
 15e:	05 c0       	rjmp	.+10     	; 0x16a <HAL_DCMOTOR_Edirection+0x22>
	{
		DIO_vpinwrite(S_DC->DIR_port,S_DC->DIR_pin,0);
 160:	64 81       	ldd	r22, Z+4	; 0x04
 162:	40 e0       	ldi	r20, 0x00	; 0
 164:	81 81       	ldd	r24, Z+1	; 0x01
 166:	0e 94 56 01 	call	0x2ac	; 0x2ac <DIO_vpinwrite>
	}
	return error;
}
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	08 95       	ret

0000016e <HAL_DCMOTOR_Efullspeed>:

E_DCMOTOR_ERROR HAL_DCMOTOR_Efullspeed(S_DCMOTOR* S_DC)
{	E_DCMOTOR_ERROR error=DCMOTOR_E_OK;
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	ec 01       	movw	r28, r24
	HAL_DCMOTOR_Edirection(S_DC);
 174:	0e 94 a4 00 	call	0x148	; 0x148 <HAL_DCMOTOR_Edirection>
	DIO_vpinwrite(S_DC->PWM_port,S_DC->PWM_pin,1);
 178:	6b 81       	ldd	r22, Y+3	; 0x03
 17a:	41 e0       	ldi	r20, 0x01	; 1
 17c:	88 81       	ld	r24, Y
 17e:	0e 94 56 01 	call	0x2ac	; 0x2ac <DIO_vpinwrite>
	return error;
};
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <HAL_DCMOTOR_Ehalfspeed>:

E_DCMOTOR_ERROR HAL_DCMOTOR_Ehalfspeed(S_DCMOTOR* S_DC)
{	E_DCMOTOR_ERROR error=DCMOTOR_E_OK;
	//use TIMER0 fast PWM to generate 50% Duty cycle 
	SET_BIT(TCCR0,WGM01);//fast PWM mode
 18a:	83 b7       	in	r24, 0x33	; 51
 18c:	88 60       	ori	r24, 0x08	; 8
 18e:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,WGM00);
 190:	83 b7       	in	r24, 0x33	; 51
 192:	80 64       	ori	r24, 0x40	; 64
 194:	83 bf       	out	0x33, r24	; 51
	
	SET_BIT(TCCR0,COM00);//Set at the compare match and clear at BOTTOM (Inverting mode)
 196:	83 b7       	in	r24, 0x33	; 51
 198:	80 61       	ori	r24, 0x10	; 16
 19a:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,COM01);
 19c:	83 b7       	in	r24, 0x33	; 51
 19e:	80 62       	ori	r24, 0x20	; 32
 1a0:	83 bf       	out	0x33, r24	; 51
	
	SET_BIT(TCCR0,CS00);//NO PRESCALAR
 1a2:	83 b7       	in	r24, 0x33	; 51
 1a4:	81 60       	ori	r24, 0x01	; 1
 1a6:	83 bf       	out	0x33, r24	; 51
	
	OCR0=OCR0_HALFSPEED;
 1a8:	80 e8       	ldi	r24, 0x80	; 128
 1aa:	8c bf       	out	0x3c, r24	; 60
	return error;
}
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	08 95       	ret

000001b0 <HAL_DCMOTOR_stop>:
E_DCMOTOR_ERROR HAL_DCMOTOR_stop(S_DCMOTOR*S_DC)
{	
 1b0:	fc 01       	movw	r30, r24
	E_DCMOTOR_ERROR error=DCMOTOR_E_OK;
	CLEAR_BIT(TCCR0,COM00);//CLEAR FOR NORMAL PIN MODE
 1b2:	93 b7       	in	r25, 0x33	; 51
 1b4:	9f 7e       	andi	r25, 0xEF	; 239
 1b6:	93 bf       	out	0x33, r25	; 51
	CLEAR_BIT(TCCR0,COM01);
 1b8:	93 b7       	in	r25, 0x33	; 51
 1ba:	9f 7d       	andi	r25, 0xDF	; 223
 1bc:	93 bf       	out	0x33, r25	; 51

	DIO_vpinwrite(S_DC->PWM_port,S_DC->PWM_pin,0);
 1be:	63 81       	ldd	r22, Z+3	; 0x03
 1c0:	40 e0       	ldi	r20, 0x00	; 0
 1c2:	80 81       	ld	r24, Z
 1c4:	0e 94 56 01 	call	0x2ac	; 0x2ac <DIO_vpinwrite>
	return error;
}
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	08 95       	ret

000001cc <DIO_vsetbitdir>:
		break;
		case 'D':
		case 'd':	if (dir==0)
		CLR_PORT(DDRD);
		else
		SET_PORT(DDRD);
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	fc 01       	movw	r30, r24
 1d0:	e1 54       	subi	r30, 0x41	; 65
 1d2:	f1 09       	sbc	r31, r1
 1d4:	e4 32       	cpi	r30, 0x24	; 36
 1d6:	f1 05       	cpc	r31, r1
 1d8:	08 f0       	brcs	.+2      	; 0x1dc <DIO_vsetbitdir+0x10>
 1da:	67 c0       	rjmp	.+206    	; 0x2aa <DIO_vsetbitdir+0xde>
 1dc:	e6 5d       	subi	r30, 0xD6	; 214
 1de:	ff 4f       	sbci	r31, 0xFF	; 255
 1e0:	0c 94 16 02 	jmp	0x42c	; 0x42c <__tablejump2__>
 1e4:	41 11       	cpse	r20, r1
 1e6:	0c c0       	rjmp	.+24     	; 0x200 <DIO_vsetbitdir+0x34>
 1e8:	2a b3       	in	r18, 0x1a	; 26
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <DIO_vsetbitdir+0x28>
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	6a 95       	dec	r22
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <DIO_vsetbitdir+0x24>
 1f8:	80 95       	com	r24
 1fa:	82 23       	and	r24, r18
 1fc:	8a bb       	out	0x1a, r24	; 26
 1fe:	08 95       	ret
 200:	2a b3       	in	r18, 0x1a	; 26
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_vsetbitdir+0x40>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	6a 95       	dec	r22
 20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_vsetbitdir+0x3c>
 210:	82 2b       	or	r24, r18
 212:	8a bb       	out	0x1a, r24	; 26
 214:	08 95       	ret
 216:	41 11       	cpse	r20, r1
 218:	0c c0       	rjmp	.+24     	; 0x232 <DIO_vsetbitdir+0x66>
 21a:	27 b3       	in	r18, 0x17	; 23
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	02 c0       	rjmp	.+4      	; 0x226 <DIO_vsetbitdir+0x5a>
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	6a 95       	dec	r22
 228:	e2 f7       	brpl	.-8      	; 0x222 <DIO_vsetbitdir+0x56>
 22a:	80 95       	com	r24
 22c:	82 23       	and	r24, r18
 22e:	87 bb       	out	0x17, r24	; 23
 230:	08 95       	ret
 232:	27 b3       	in	r18, 0x17	; 23
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_vsetbitdir+0x72>
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	6a 95       	dec	r22
 240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_vsetbitdir+0x6e>
 242:	82 2b       	or	r24, r18
 244:	87 bb       	out	0x17, r24	; 23
 246:	08 95       	ret
 248:	41 11       	cpse	r20, r1
 24a:	0c c0       	rjmp	.+24     	; 0x264 <DIO_vsetbitdir+0x98>
 24c:	24 b3       	in	r18, 0x14	; 20
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	02 c0       	rjmp	.+4      	; 0x258 <DIO_vsetbitdir+0x8c>
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	6a 95       	dec	r22
 25a:	e2 f7       	brpl	.-8      	; 0x254 <DIO_vsetbitdir+0x88>
 25c:	80 95       	com	r24
 25e:	82 23       	and	r24, r18
 260:	84 bb       	out	0x14, r24	; 20
 262:	08 95       	ret
 264:	24 b3       	in	r18, 0x14	; 20
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	02 c0       	rjmp	.+4      	; 0x270 <DIO_vsetbitdir+0xa4>
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	6a 95       	dec	r22
 272:	e2 f7       	brpl	.-8      	; 0x26c <DIO_vsetbitdir+0xa0>
 274:	82 2b       	or	r24, r18
 276:	84 bb       	out	0x14, r24	; 20
 278:	08 95       	ret
 27a:	41 11       	cpse	r20, r1
 27c:	0c c0       	rjmp	.+24     	; 0x296 <DIO_vsetbitdir+0xca>
 27e:	21 b3       	in	r18, 0x11	; 17
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	02 c0       	rjmp	.+4      	; 0x28a <DIO_vsetbitdir+0xbe>
 286:	88 0f       	add	r24, r24
 288:	99 1f       	adc	r25, r25
 28a:	6a 95       	dec	r22
 28c:	e2 f7       	brpl	.-8      	; 0x286 <DIO_vsetbitdir+0xba>
 28e:	80 95       	com	r24
 290:	82 23       	and	r24, r18
 292:	81 bb       	out	0x11, r24	; 17
 294:	08 95       	ret
 296:	21 b3       	in	r18, 0x11	; 17
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_vsetbitdir+0xd6>
 29e:	88 0f       	add	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	6a 95       	dec	r22
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <DIO_vsetbitdir+0xd2>
 2a6:	82 2b       	or	r24, r18
 2a8:	81 bb       	out	0x11, r24	; 17
 2aa:	08 95       	ret

000002ac <DIO_vpinwrite>:
		break;
	}
}
void DIO_vpinwrite(char port, char pin, char data)
{
	switch(port)
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	fc 01       	movw	r30, r24
 2b0:	e1 54       	subi	r30, 0x41	; 65
 2b2:	f1 09       	sbc	r31, r1
 2b4:	e4 32       	cpi	r30, 0x24	; 36
 2b6:	f1 05       	cpc	r31, r1
 2b8:	08 f0       	brcs	.+2      	; 0x2bc <DIO_vpinwrite+0x10>
 2ba:	67 c0       	rjmp	.+206    	; 0x38a <DIO_vpinwrite+0xde>
 2bc:	e2 5b       	subi	r30, 0xB2	; 178
 2be:	ff 4f       	sbci	r31, 0xFF	; 255
 2c0:	0c 94 16 02 	jmp	0x42c	; 0x42c <__tablejump2__>
	{	case 'A':
		case 'a':	if (data==0)
 2c4:	41 11       	cpse	r20, r1
 2c6:	0c c0       	rjmp	.+24     	; 0x2e0 <DIO_vpinwrite+0x34>
		CLR_BIT(PORTA,pin);
 2c8:	2b b3       	in	r18, 0x1b	; 27
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <DIO_vpinwrite+0x28>
 2d0:	88 0f       	add	r24, r24
 2d2:	99 1f       	adc	r25, r25
 2d4:	6a 95       	dec	r22
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <DIO_vpinwrite+0x24>
 2d8:	80 95       	com	r24
 2da:	82 23       	and	r24, r18
 2dc:	8b bb       	out	0x1b, r24	; 27
 2de:	08 95       	ret
		else
		SET_BIT(PORTA,pin);
 2e0:	2b b3       	in	r18, 0x1b	; 27
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_vpinwrite+0x40>
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	6a 95       	dec	r22
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_vpinwrite+0x3c>
 2f0:	82 2b       	or	r24, r18
 2f2:	8b bb       	out	0x1b, r24	; 27
 2f4:	08 95       	ret
		break;
		
		case 'B':
		case 'b':	if (data==0)
 2f6:	41 11       	cpse	r20, r1
 2f8:	0c c0       	rjmp	.+24     	; 0x312 <DIO_vpinwrite+0x66>
		CLR_BIT(PORTB,pin);
 2fa:	28 b3       	in	r18, 0x18	; 24
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	02 c0       	rjmp	.+4      	; 0x306 <DIO_vpinwrite+0x5a>
 302:	88 0f       	add	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	6a 95       	dec	r22
 308:	e2 f7       	brpl	.-8      	; 0x302 <DIO_vpinwrite+0x56>
 30a:	80 95       	com	r24
 30c:	82 23       	and	r24, r18
 30e:	88 bb       	out	0x18, r24	; 24
 310:	08 95       	ret
		else
		SET_BIT(PORTB,pin);
 312:	28 b3       	in	r18, 0x18	; 24
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	02 c0       	rjmp	.+4      	; 0x31e <DIO_vpinwrite+0x72>
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	6a 95       	dec	r22
 320:	e2 f7       	brpl	.-8      	; 0x31a <DIO_vpinwrite+0x6e>
 322:	82 2b       	or	r24, r18
 324:	88 bb       	out	0x18, r24	; 24
 326:	08 95       	ret
		break;
		case 'C':
		case 'c':	if (data==0)
 328:	41 11       	cpse	r20, r1
 32a:	0c c0       	rjmp	.+24     	; 0x344 <DIO_vpinwrite+0x98>
		CLR_BIT(PORTC,pin);
 32c:	25 b3       	in	r18, 0x15	; 21
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	02 c0       	rjmp	.+4      	; 0x338 <DIO_vpinwrite+0x8c>
 334:	88 0f       	add	r24, r24
 336:	99 1f       	adc	r25, r25
 338:	6a 95       	dec	r22
 33a:	e2 f7       	brpl	.-8      	; 0x334 <DIO_vpinwrite+0x88>
 33c:	80 95       	com	r24
 33e:	82 23       	and	r24, r18
 340:	85 bb       	out	0x15, r24	; 21
 342:	08 95       	ret
		else
		SET_BIT(PORTC,pin);
 344:	25 b3       	in	r18, 0x15	; 21
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	02 c0       	rjmp	.+4      	; 0x350 <DIO_vpinwrite+0xa4>
 34c:	88 0f       	add	r24, r24
 34e:	99 1f       	adc	r25, r25
 350:	6a 95       	dec	r22
 352:	e2 f7       	brpl	.-8      	; 0x34c <DIO_vpinwrite+0xa0>
 354:	82 2b       	or	r24, r18
 356:	85 bb       	out	0x15, r24	; 21
 358:	08 95       	ret
		break;
		case 'D':
		case 'd':	if (data==0)
 35a:	41 11       	cpse	r20, r1
 35c:	0c c0       	rjmp	.+24     	; 0x376 <DIO_vpinwrite+0xca>
		CLR_BIT(PORTD,pin);
 35e:	22 b3       	in	r18, 0x12	; 18
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	02 c0       	rjmp	.+4      	; 0x36a <DIO_vpinwrite+0xbe>
 366:	88 0f       	add	r24, r24
 368:	99 1f       	adc	r25, r25
 36a:	6a 95       	dec	r22
 36c:	e2 f7       	brpl	.-8      	; 0x366 <DIO_vpinwrite+0xba>
 36e:	80 95       	com	r24
 370:	82 23       	and	r24, r18
 372:	82 bb       	out	0x12, r24	; 18
 374:	08 95       	ret
		else
		SET_BIT(PORTD,pin);
 376:	22 b3       	in	r18, 0x12	; 18
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	02 c0       	rjmp	.+4      	; 0x382 <DIO_vpinwrite+0xd6>
 37e:	88 0f       	add	r24, r24
 380:	99 1f       	adc	r25, r25
 382:	6a 95       	dec	r22
 384:	e2 f7       	brpl	.-8      	; 0x37e <DIO_vpinwrite+0xd2>
 386:	82 2b       	or	r24, r18
 388:	82 bb       	out	0x12, r24	; 18
 38a:	08 95       	ret

0000038c <main>:
#include "DCMOTOR_Interface.h"
#define F_CPU	16000000ul
#include "util/delay.h"

int main(void)
{	S_DCMOTOR dc={PWM_PORT,DIR_PORT,EN_PORT,PWM_PIN,DIR_PIN,EN_PIN,CLKWISE};
 38c:	cf 93       	push	r28
 38e:	df 93       	push	r29
 390:	cd b7       	in	r28, 0x3d	; 61
 392:	de b7       	in	r29, 0x3e	; 62
 394:	27 97       	sbiw	r28, 0x07	; 7
 396:	0f b6       	in	r0, 0x3f	; 63
 398:	f8 94       	cli
 39a:	de bf       	out	0x3e, r29	; 62
 39c:	0f be       	out	0x3f, r0	; 63
 39e:	cd bf       	out	0x3d, r28	; 61
 3a0:	87 e0       	ldi	r24, 0x07	; 7
 3a2:	e0 e6       	ldi	r30, 0x60	; 96
 3a4:	f0 e0       	ldi	r31, 0x00	; 0
 3a6:	de 01       	movw	r26, r28
 3a8:	11 96       	adiw	r26, 0x01	; 1
 3aa:	01 90       	ld	r0, Z+
 3ac:	0d 92       	st	X+, r0
 3ae:	8a 95       	dec	r24
 3b0:	e1 f7       	brne	.-8      	; 0x3aa <main+0x1e>
	HAL_DCMOTOR_Einit(&dc);
 3b2:	ce 01       	movw	r24, r28
 3b4:	01 96       	adiw	r24, 0x01	; 1
 3b6:	0e 94 89 00 	call	0x112	; 0x112 <HAL_DCMOTOR_Einit>
	
    while (1) 
    {
		HAL_DCMOTOR_Edirection(&dc);
 3ba:	ce 01       	movw	r24, r28
 3bc:	01 96       	adiw	r24, 0x01	; 1
 3be:	0e 94 a4 00 	call	0x148	; 0x148 <HAL_DCMOTOR_Edirection>
    HAL_DCMOTOR_Ehalfspeed(&dc);
 3c2:	ce 01       	movw	r24, r28
 3c4:	01 96       	adiw	r24, 0x01	; 1
 3c6:	0e 94 c5 00 	call	0x18a	; 0x18a <HAL_DCMOTOR_Ehalfspeed>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ca:	2f ef       	ldi	r18, 0xFF	; 255
 3cc:	83 ed       	ldi	r24, 0xD3	; 211
 3ce:	90 e3       	ldi	r25, 0x30	; 48
 3d0:	21 50       	subi	r18, 0x01	; 1
 3d2:	80 40       	sbci	r24, 0x00	; 0
 3d4:	90 40       	sbci	r25, 0x00	; 0
 3d6:	e1 f7       	brne	.-8      	; 0x3d0 <main+0x44>
 3d8:	00 c0       	rjmp	.+0      	; 0x3da <main+0x4e>
 3da:	00 00       	nop
	_delay_ms(1000);//2sec
	HAL_DCMOTOR_stop(&dc);
 3dc:	ce 01       	movw	r24, r28
 3de:	01 96       	adiw	r24, 0x01	; 1
 3e0:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <HAL_DCMOTOR_stop>
 3e4:	2f ef       	ldi	r18, 0xFF	; 255
 3e6:	8b e7       	ldi	r24, 0x7B	; 123
 3e8:	92 e9       	ldi	r25, 0x92	; 146
 3ea:	21 50       	subi	r18, 0x01	; 1
 3ec:	80 40       	sbci	r24, 0x00	; 0
 3ee:	90 40       	sbci	r25, 0x00	; 0
 3f0:	e1 f7       	brne	.-8      	; 0x3ea <main+0x5e>
 3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <main+0x68>
 3f4:	00 00       	nop
	_delay_ms(3000);//2sec
	 HAL_DCMOTOR_Efullspeed(&dc);
 3f6:	ce 01       	movw	r24, r28
 3f8:	01 96       	adiw	r24, 0x01	; 1
 3fa:	0e 94 b7 00 	call	0x16e	; 0x16e <HAL_DCMOTOR_Efullspeed>
 3fe:	2f ef       	ldi	r18, 0xFF	; 255
 400:	87 ea       	ldi	r24, 0xA7	; 167
 402:	91 e6       	ldi	r25, 0x61	; 97
 404:	21 50       	subi	r18, 0x01	; 1
 406:	80 40       	sbci	r24, 0x00	; 0
 408:	90 40       	sbci	r25, 0x00	; 0
 40a:	e1 f7       	brne	.-8      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 40c:	00 c0       	rjmp	.+0      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 40e:	00 00       	nop
	 _delay_ms(2000);//2sec
	 HAL_DCMOTOR_stop(&dc);
 410:	ce 01       	movw	r24, r28
 412:	01 96       	adiw	r24, 0x01	; 1
 414:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <HAL_DCMOTOR_stop>
 418:	2f ef       	ldi	r18, 0xFF	; 255
 41a:	8b e7       	ldi	r24, 0x7B	; 123
 41c:	92 e9       	ldi	r25, 0x92	; 146
 41e:	21 50       	subi	r18, 0x01	; 1
 420:	80 40       	sbci	r24, 0x00	; 0
 422:	90 40       	sbci	r25, 0x00	; 0
 424:	e1 f7       	brne	.-8      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 426:	00 c0       	rjmp	.+0      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 428:	00 00       	nop
 42a:	c7 cf       	rjmp	.-114    	; 0x3ba <main+0x2e>

0000042c <__tablejump2__>:
 42c:	ee 0f       	add	r30, r30
 42e:	ff 1f       	adc	r31, r31
 430:	05 90       	lpm	r0, Z+
 432:	f4 91       	lpm	r31, Z
 434:	e0 2d       	mov	r30, r0
 436:	09 94       	ijmp

00000438 <_exit>:
 438:	f8 94       	cli

0000043a <__stop_program>:
 43a:	ff cf       	rjmp	.-2      	; 0x43a <__stop_program>
