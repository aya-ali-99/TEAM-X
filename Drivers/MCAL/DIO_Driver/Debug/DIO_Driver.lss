
DIO_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cd2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000cd2  00000d46  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000fe4  00000000  00000000  00000d50  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c0c  00000000  00000000  00001d34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ed       	ldi	r30, 0xD2	; 210
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <main>
  7a:	0c 94 67 06 	jmp	0xcce	; 0xcce <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <MCAL_Dio_Init>:
#include "DIO_interface.h"
#include "DIO.stdtypes.h"


E_ErrorType MCAL_Dio_Init(S_Dio *Dio_Config)
{
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	27 97       	sbiw	r28, 0x07	; 7
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
  96:	9d 83       	std	Y+5, r25	; 0x05
  98:	8c 83       	std	Y+4, r24	; 0x04
	E_ErrorType error = E_OK;
  9a:	1b 82       	std	Y+3, r1	; 0x03

	if(DIO_STATUS_ERROR == E_NOT_OK)
	{
		error = E_NOT_OK;
	}
	else if(Dio_Config->port_num >= DIO_CONFIGURED_PORTS)
  9c:	ec 81       	ldd	r30, Y+4	; 0x04
  9e:	fd 81       	ldd	r31, Y+5	; 0x05
  a0:	80 81       	ld	r24, Z
  a2:	84 30       	cpi	r24, 0x04	; 4
  a4:	18 f0       	brcs	.+6      	; 0xac <MCAL_Dio_Init+0x2a>
	{

		error = E_NOT_OK;
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	8b 83       	std	Y+3, r24	; 0x03
  aa:	6c c0       	rjmp	.+216    	; 0x184 <MCAL_Dio_Init+0x102>
	}
	else
	{

		Mask2 = ((Dio_Config->pin_num) & (Dio_Config->Direction));
  ac:	ec 81       	ldd	r30, Y+4	; 0x04
  ae:	fd 81       	ldd	r31, Y+5	; 0x05
  b0:	91 81       	ldd	r25, Z+1	; 0x01
  b2:	ec 81       	ldd	r30, Y+4	; 0x04
  b4:	fd 81       	ldd	r31, Y+5	; 0x05
  b6:	82 81       	ldd	r24, Z+2	; 0x02
  b8:	89 23       	and	r24, r25
  ba:	89 83       	std	Y+1, r24	; 0x01
		switch(Dio_Config->port_num)
  bc:	ec 81       	ldd	r30, Y+4	; 0x04
  be:	fd 81       	ldd	r31, Y+5	; 0x05
  c0:	80 81       	ld	r24, Z
  c2:	28 2f       	mov	r18, r24
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	3f 83       	std	Y+7, r19	; 0x07
  c8:	2e 83       	std	Y+6, r18	; 0x06
  ca:	8e 81       	ldd	r24, Y+6	; 0x06
  cc:	9f 81       	ldd	r25, Y+7	; 0x07
  ce:	81 30       	cpi	r24, 0x01	; 1
  d0:	91 05       	cpc	r25, r1
  d2:	31 f1       	breq	.+76     	; 0x120 <MCAL_Dio_Init+0x9e>
  d4:	2e 81       	ldd	r18, Y+6	; 0x06
  d6:	3f 81       	ldd	r19, Y+7	; 0x07
  d8:	22 30       	cpi	r18, 0x02	; 2
  da:	31 05       	cpc	r19, r1
  dc:	2c f4       	brge	.+10     	; 0xe8 <MCAL_Dio_Init+0x66>
  de:	8e 81       	ldd	r24, Y+6	; 0x06
  e0:	9f 81       	ldd	r25, Y+7	; 0x07
  e2:	00 97       	sbiw	r24, 0x00	; 0
  e4:	61 f0       	breq	.+24     	; 0xfe <MCAL_Dio_Init+0x7c>
  e6:	4e c0       	rjmp	.+156    	; 0x184 <MCAL_Dio_Init+0x102>
  e8:	2e 81       	ldd	r18, Y+6	; 0x06
  ea:	3f 81       	ldd	r19, Y+7	; 0x07
  ec:	22 30       	cpi	r18, 0x02	; 2
  ee:	31 05       	cpc	r19, r1
  f0:	41 f1       	breq	.+80     	; 0x142 <MCAL_Dio_Init+0xc0>
  f2:	8e 81       	ldd	r24, Y+6	; 0x06
  f4:	9f 81       	ldd	r25, Y+7	; 0x07
  f6:	83 30       	cpi	r24, 0x03	; 3
  f8:	91 05       	cpc	r25, r1
  fa:	a1 f1       	breq	.+104    	; 0x164 <MCAL_Dio_Init+0xe2>
  fc:	43 c0       	rjmp	.+134    	; 0x184 <MCAL_Dio_Init+0x102>
		{
		case PORTA_ID:
			Mask1 = ((DIO_DDRA) & (~(Dio_Config->pin_num)));
  fe:	ea e3       	ldi	r30, 0x3A	; 58
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	98 2f       	mov	r25, r24
 106:	ec 81       	ldd	r30, Y+4	; 0x04
 108:	fd 81       	ldd	r31, Y+5	; 0x05
 10a:	81 81       	ldd	r24, Z+1	; 0x01
 10c:	80 95       	com	r24
 10e:	89 23       	and	r24, r25
 110:	8a 83       	std	Y+2, r24	; 0x02
			DIO_DDRA = Mask1 | Mask2;
 112:	ea e3       	ldi	r30, 0x3A	; 58
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	9a 81       	ldd	r25, Y+2	; 0x02
 118:	89 81       	ldd	r24, Y+1	; 0x01
 11a:	89 2b       	or	r24, r25
 11c:	80 83       	st	Z, r24
 11e:	32 c0       	rjmp	.+100    	; 0x184 <MCAL_Dio_Init+0x102>
			break;
		case PORTB_ID:
			Mask1 = ((DIO_DDRB) & (~(Dio_Config->pin_num)));
 120:	e7 e3       	ldi	r30, 0x37	; 55
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	98 2f       	mov	r25, r24
 128:	ec 81       	ldd	r30, Y+4	; 0x04
 12a:	fd 81       	ldd	r31, Y+5	; 0x05
 12c:	81 81       	ldd	r24, Z+1	; 0x01
 12e:	80 95       	com	r24
 130:	89 23       	and	r24, r25
 132:	8a 83       	std	Y+2, r24	; 0x02
			DIO_DDRB = Mask1 | Mask2;
 134:	e7 e3       	ldi	r30, 0x37	; 55
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	9a 81       	ldd	r25, Y+2	; 0x02
 13a:	89 81       	ldd	r24, Y+1	; 0x01
 13c:	89 2b       	or	r24, r25
 13e:	80 83       	st	Z, r24
 140:	21 c0       	rjmp	.+66     	; 0x184 <MCAL_Dio_Init+0x102>
			break;
		case PORTC_ID:
			Mask1 = ((DIO_DDRC) & (~(Dio_Config->pin_num)));
 142:	e4 e3       	ldi	r30, 0x34	; 52
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	98 2f       	mov	r25, r24
 14a:	ec 81       	ldd	r30, Y+4	; 0x04
 14c:	fd 81       	ldd	r31, Y+5	; 0x05
 14e:	81 81       	ldd	r24, Z+1	; 0x01
 150:	80 95       	com	r24
 152:	89 23       	and	r24, r25
 154:	8a 83       	std	Y+2, r24	; 0x02
			DIO_DDRC = Mask1 | Mask2;
 156:	e4 e3       	ldi	r30, 0x34	; 52
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	9a 81       	ldd	r25, Y+2	; 0x02
 15c:	89 81       	ldd	r24, Y+1	; 0x01
 15e:	89 2b       	or	r24, r25
 160:	80 83       	st	Z, r24
 162:	10 c0       	rjmp	.+32     	; 0x184 <MCAL_Dio_Init+0x102>
			break;
		case PORTD_ID:
			Mask1 = ((DIO_DDRD) & (~(Dio_Config->pin_num)));
 164:	e1 e3       	ldi	r30, 0x31	; 49
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	98 2f       	mov	r25, r24
 16c:	ec 81       	ldd	r30, Y+4	; 0x04
 16e:	fd 81       	ldd	r31, Y+5	; 0x05
 170:	81 81       	ldd	r24, Z+1	; 0x01
 172:	80 95       	com	r24
 174:	89 23       	and	r24, r25
 176:	8a 83       	std	Y+2, r24	; 0x02
			DIO_DDRD = Mask1 | Mask2;
 178:	e1 e3       	ldi	r30, 0x31	; 49
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	9a 81       	ldd	r25, Y+2	; 0x02
 17e:	89 81       	ldd	r24, Y+1	; 0x01
 180:	89 2b       	or	r24, r25
 182:	80 83       	st	Z, r24
			break;

		}
	}

	return error;
 184:	8b 81       	ldd	r24, Y+3	; 0x03
}
 186:	27 96       	adiw	r28, 0x07	; 7
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	f8 94       	cli
 18c:	de bf       	out	0x3e, r29	; 62
 18e:	0f be       	out	0x3f, r0	; 63
 190:	cd bf       	out	0x3d, r28	; 61
 192:	cf 91       	pop	r28
 194:	df 91       	pop	r29
 196:	08 95       	ret

00000198 <MCAL_Dio_SetPortDirection>:

E_ErrorType MCAL_Dio_SetPortDirection(S_Dio *Dio_ConfigPort)
{
 198:	df 93       	push	r29
 19a:	cf 93       	push	r28
 19c:	00 d0       	rcall	.+0      	; 0x19e <MCAL_Dio_SetPortDirection+0x6>
 19e:	00 d0       	rcall	.+0      	; 0x1a0 <MCAL_Dio_SetPortDirection+0x8>
 1a0:	0f 92       	push	r0
 1a2:	cd b7       	in	r28, 0x3d	; 61
 1a4:	de b7       	in	r29, 0x3e	; 62
 1a6:	9b 83       	std	Y+3, r25	; 0x03
 1a8:	8a 83       	std	Y+2, r24	; 0x02
	E_ErrorType error = E_OK;
 1aa:	19 82       	std	Y+1, r1	; 0x01

	if(DIO_STATUS_ERROR == E_NOT_OK)
	{
		error = E_NOT_OK;
	}
	else if(Dio_ConfigPort->port_num >= DIO_CONFIGURED_PORTS)
 1ac:	ea 81       	ldd	r30, Y+2	; 0x02
 1ae:	fb 81       	ldd	r31, Y+3	; 0x03
 1b0:	80 81       	ld	r24, Z
 1b2:	84 30       	cpi	r24, 0x04	; 4
 1b4:	18 f0       	brcs	.+6      	; 0x1bc <MCAL_Dio_SetPortDirection+0x24>
	{

		error = E_NOT_OK;
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	89 83       	std	Y+1, r24	; 0x01
 1ba:	44 c0       	rjmp	.+136    	; 0x244 <MCAL_Dio_SetPortDirection+0xac>
	}
	else
	{
		switch(Dio_ConfigPort->port_num)
 1bc:	ea 81       	ldd	r30, Y+2	; 0x02
 1be:	fb 81       	ldd	r31, Y+3	; 0x03
 1c0:	80 81       	ld	r24, Z
 1c2:	28 2f       	mov	r18, r24
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	3d 83       	std	Y+5, r19	; 0x05
 1c8:	2c 83       	std	Y+4, r18	; 0x04
 1ca:	8c 81       	ldd	r24, Y+4	; 0x04
 1cc:	9d 81       	ldd	r25, Y+5	; 0x05
 1ce:	81 30       	cpi	r24, 0x01	; 1
 1d0:	91 05       	cpc	r25, r1
 1d2:	f1 f0       	breq	.+60     	; 0x210 <MCAL_Dio_SetPortDirection+0x78>
 1d4:	2c 81       	ldd	r18, Y+4	; 0x04
 1d6:	3d 81       	ldd	r19, Y+5	; 0x05
 1d8:	22 30       	cpi	r18, 0x02	; 2
 1da:	31 05       	cpc	r19, r1
 1dc:	2c f4       	brge	.+10     	; 0x1e8 <MCAL_Dio_SetPortDirection+0x50>
 1de:	8c 81       	ldd	r24, Y+4	; 0x04
 1e0:	9d 81       	ldd	r25, Y+5	; 0x05
 1e2:	00 97       	sbiw	r24, 0x00	; 0
 1e4:	61 f0       	breq	.+24     	; 0x1fe <MCAL_Dio_SetPortDirection+0x66>
 1e6:	2e c0       	rjmp	.+92     	; 0x244 <MCAL_Dio_SetPortDirection+0xac>
 1e8:	2c 81       	ldd	r18, Y+4	; 0x04
 1ea:	3d 81       	ldd	r19, Y+5	; 0x05
 1ec:	22 30       	cpi	r18, 0x02	; 2
 1ee:	31 05       	cpc	r19, r1
 1f0:	c1 f0       	breq	.+48     	; 0x222 <MCAL_Dio_SetPortDirection+0x8a>
 1f2:	8c 81       	ldd	r24, Y+4	; 0x04
 1f4:	9d 81       	ldd	r25, Y+5	; 0x05
 1f6:	83 30       	cpi	r24, 0x03	; 3
 1f8:	91 05       	cpc	r25, r1
 1fa:	e1 f0       	breq	.+56     	; 0x234 <MCAL_Dio_SetPortDirection+0x9c>
 1fc:	23 c0       	rjmp	.+70     	; 0x244 <MCAL_Dio_SetPortDirection+0xac>
		{
		case PORTA_ID:
			DIO_DDRA = Dio_ConfigPort->Direction;
 1fe:	ea e3       	ldi	r30, 0x3A	; 58
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	aa 81       	ldd	r26, Y+2	; 0x02
 204:	bb 81       	ldd	r27, Y+3	; 0x03
 206:	12 96       	adiw	r26, 0x02	; 2
 208:	8c 91       	ld	r24, X
 20a:	12 97       	sbiw	r26, 0x02	; 2
 20c:	80 83       	st	Z, r24
 20e:	1a c0       	rjmp	.+52     	; 0x244 <MCAL_Dio_SetPortDirection+0xac>
			break;
		case PORTB_ID:
			DIO_DDRB = Dio_ConfigPort->Direction;
 210:	e7 e3       	ldi	r30, 0x37	; 55
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	aa 81       	ldd	r26, Y+2	; 0x02
 216:	bb 81       	ldd	r27, Y+3	; 0x03
 218:	12 96       	adiw	r26, 0x02	; 2
 21a:	8c 91       	ld	r24, X
 21c:	12 97       	sbiw	r26, 0x02	; 2
 21e:	80 83       	st	Z, r24
 220:	11 c0       	rjmp	.+34     	; 0x244 <MCAL_Dio_SetPortDirection+0xac>
			break;
		case PORTC_ID:
			DIO_DDRC = Dio_ConfigPort->Direction;
 222:	e4 e3       	ldi	r30, 0x34	; 52
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	aa 81       	ldd	r26, Y+2	; 0x02
 228:	bb 81       	ldd	r27, Y+3	; 0x03
 22a:	12 96       	adiw	r26, 0x02	; 2
 22c:	8c 91       	ld	r24, X
 22e:	12 97       	sbiw	r26, 0x02	; 2
 230:	80 83       	st	Z, r24
 232:	08 c0       	rjmp	.+16     	; 0x244 <MCAL_Dio_SetPortDirection+0xac>
			break;
		case PORTD_ID:
			DIO_DDRD = Dio_ConfigPort->Direction;
 234:	e1 e3       	ldi	r30, 0x31	; 49
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	aa 81       	ldd	r26, Y+2	; 0x02
 23a:	bb 81       	ldd	r27, Y+3	; 0x03
 23c:	12 96       	adiw	r26, 0x02	; 2
 23e:	8c 91       	ld	r24, X
 240:	12 97       	sbiw	r26, 0x02	; 2
 242:	80 83       	st	Z, r24
			break;

		}
	}

	return error;
 244:	89 81       	ldd	r24, Y+1	; 0x01
}
 246:	0f 90       	pop	r0
 248:	0f 90       	pop	r0
 24a:	0f 90       	pop	r0
 24c:	0f 90       	pop	r0
 24e:	0f 90       	pop	r0
 250:	cf 91       	pop	r28
 252:	df 91       	pop	r29
 254:	08 95       	ret

00000256 <MCAL_Dio_SetPinDirection>:

E_ErrorType MCAL_Dio_SetPinDirection(S_Dio *Dio_ConfigPin)
{
 256:	df 93       	push	r29
 258:	cf 93       	push	r28
 25a:	cd b7       	in	r28, 0x3d	; 61
 25c:	de b7       	in	r29, 0x3e	; 62
 25e:	27 97       	sbiw	r28, 0x07	; 7
 260:	0f b6       	in	r0, 0x3f	; 63
 262:	f8 94       	cli
 264:	de bf       	out	0x3e, r29	; 62
 266:	0f be       	out	0x3f, r0	; 63
 268:	cd bf       	out	0x3d, r28	; 61
 26a:	9d 83       	std	Y+5, r25	; 0x05
 26c:	8c 83       	std	Y+4, r24	; 0x04
	E_ErrorType error = E_OK;
 26e:	1b 82       	std	Y+3, r1	; 0x03
	if(DIO_STATUS_ERROR == E_NOT_OK)
	{

		error = E_NOT_OK;
	}
	else if(Dio_ConfigPin->port_num >= DIO_CONFIGURED_PORTS)
 270:	ec 81       	ldd	r30, Y+4	; 0x04
 272:	fd 81       	ldd	r31, Y+5	; 0x05
 274:	80 81       	ld	r24, Z
 276:	84 30       	cpi	r24, 0x04	; 4
 278:	18 f0       	brcs	.+6      	; 0x280 <MCAL_Dio_SetPinDirection+0x2a>
	{

		error = E_NOT_OK;
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	8b 83       	std	Y+3, r24	; 0x03
 27e:	6c c0       	rjmp	.+216    	; 0x358 <MCAL_Dio_SetPinDirection+0x102>
	}
	else
	{
		Mask2 = ((Dio_ConfigPin->pin_num) & (Dio_ConfigPin->Direction));
 280:	ec 81       	ldd	r30, Y+4	; 0x04
 282:	fd 81       	ldd	r31, Y+5	; 0x05
 284:	91 81       	ldd	r25, Z+1	; 0x01
 286:	ec 81       	ldd	r30, Y+4	; 0x04
 288:	fd 81       	ldd	r31, Y+5	; 0x05
 28a:	82 81       	ldd	r24, Z+2	; 0x02
 28c:	89 23       	and	r24, r25
 28e:	89 83       	std	Y+1, r24	; 0x01
		switch(Dio_ConfigPin->port_num)
 290:	ec 81       	ldd	r30, Y+4	; 0x04
 292:	fd 81       	ldd	r31, Y+5	; 0x05
 294:	80 81       	ld	r24, Z
 296:	28 2f       	mov	r18, r24
 298:	30 e0       	ldi	r19, 0x00	; 0
 29a:	3f 83       	std	Y+7, r19	; 0x07
 29c:	2e 83       	std	Y+6, r18	; 0x06
 29e:	8e 81       	ldd	r24, Y+6	; 0x06
 2a0:	9f 81       	ldd	r25, Y+7	; 0x07
 2a2:	81 30       	cpi	r24, 0x01	; 1
 2a4:	91 05       	cpc	r25, r1
 2a6:	31 f1       	breq	.+76     	; 0x2f4 <MCAL_Dio_SetPinDirection+0x9e>
 2a8:	2e 81       	ldd	r18, Y+6	; 0x06
 2aa:	3f 81       	ldd	r19, Y+7	; 0x07
 2ac:	22 30       	cpi	r18, 0x02	; 2
 2ae:	31 05       	cpc	r19, r1
 2b0:	2c f4       	brge	.+10     	; 0x2bc <MCAL_Dio_SetPinDirection+0x66>
 2b2:	8e 81       	ldd	r24, Y+6	; 0x06
 2b4:	9f 81       	ldd	r25, Y+7	; 0x07
 2b6:	00 97       	sbiw	r24, 0x00	; 0
 2b8:	61 f0       	breq	.+24     	; 0x2d2 <MCAL_Dio_SetPinDirection+0x7c>
 2ba:	4e c0       	rjmp	.+156    	; 0x358 <MCAL_Dio_SetPinDirection+0x102>
 2bc:	2e 81       	ldd	r18, Y+6	; 0x06
 2be:	3f 81       	ldd	r19, Y+7	; 0x07
 2c0:	22 30       	cpi	r18, 0x02	; 2
 2c2:	31 05       	cpc	r19, r1
 2c4:	41 f1       	breq	.+80     	; 0x316 <MCAL_Dio_SetPinDirection+0xc0>
 2c6:	8e 81       	ldd	r24, Y+6	; 0x06
 2c8:	9f 81       	ldd	r25, Y+7	; 0x07
 2ca:	83 30       	cpi	r24, 0x03	; 3
 2cc:	91 05       	cpc	r25, r1
 2ce:	a1 f1       	breq	.+104    	; 0x338 <MCAL_Dio_SetPinDirection+0xe2>
 2d0:	43 c0       	rjmp	.+134    	; 0x358 <MCAL_Dio_SetPinDirection+0x102>
		{
		case PORTA_ID:
			Mask1 = ((DIO_DDRA) & (~(Dio_ConfigPin->pin_num)));
 2d2:	ea e3       	ldi	r30, 0x3A	; 58
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 81       	ld	r24, Z
 2d8:	98 2f       	mov	r25, r24
 2da:	ec 81       	ldd	r30, Y+4	; 0x04
 2dc:	fd 81       	ldd	r31, Y+5	; 0x05
 2de:	81 81       	ldd	r24, Z+1	; 0x01
 2e0:	80 95       	com	r24
 2e2:	89 23       	and	r24, r25
 2e4:	8a 83       	std	Y+2, r24	; 0x02
			DIO_DDRA = Mask1 | Mask2;
 2e6:	ea e3       	ldi	r30, 0x3A	; 58
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	9a 81       	ldd	r25, Y+2	; 0x02
 2ec:	89 81       	ldd	r24, Y+1	; 0x01
 2ee:	89 2b       	or	r24, r25
 2f0:	80 83       	st	Z, r24
 2f2:	32 c0       	rjmp	.+100    	; 0x358 <MCAL_Dio_SetPinDirection+0x102>
			break;
		case PORTB_ID:
			Mask1 = ((DIO_DDRB) & (~(Dio_ConfigPin->pin_num)));
 2f4:	e7 e3       	ldi	r30, 0x37	; 55
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	80 81       	ld	r24, Z
 2fa:	98 2f       	mov	r25, r24
 2fc:	ec 81       	ldd	r30, Y+4	; 0x04
 2fe:	fd 81       	ldd	r31, Y+5	; 0x05
 300:	81 81       	ldd	r24, Z+1	; 0x01
 302:	80 95       	com	r24
 304:	89 23       	and	r24, r25
 306:	8a 83       	std	Y+2, r24	; 0x02
			DIO_DDRB = Mask1 | Mask2;
 308:	e7 e3       	ldi	r30, 0x37	; 55
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	9a 81       	ldd	r25, Y+2	; 0x02
 30e:	89 81       	ldd	r24, Y+1	; 0x01
 310:	89 2b       	or	r24, r25
 312:	80 83       	st	Z, r24
 314:	21 c0       	rjmp	.+66     	; 0x358 <MCAL_Dio_SetPinDirection+0x102>
			break;
		case PORTC_ID:
			Mask1 = ((DIO_DDRC) & (~(Dio_ConfigPin->pin_num)));
 316:	e4 e3       	ldi	r30, 0x34	; 52
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	80 81       	ld	r24, Z
 31c:	98 2f       	mov	r25, r24
 31e:	ec 81       	ldd	r30, Y+4	; 0x04
 320:	fd 81       	ldd	r31, Y+5	; 0x05
 322:	81 81       	ldd	r24, Z+1	; 0x01
 324:	80 95       	com	r24
 326:	89 23       	and	r24, r25
 328:	8a 83       	std	Y+2, r24	; 0x02
			DIO_DDRC = Mask1 | Mask2;
 32a:	e4 e3       	ldi	r30, 0x34	; 52
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	9a 81       	ldd	r25, Y+2	; 0x02
 330:	89 81       	ldd	r24, Y+1	; 0x01
 332:	89 2b       	or	r24, r25
 334:	80 83       	st	Z, r24
 336:	10 c0       	rjmp	.+32     	; 0x358 <MCAL_Dio_SetPinDirection+0x102>
			break;
		case PORTD_ID:
			Mask1 = ((DIO_DDRD) & (~(Dio_ConfigPin->pin_num)));
 338:	e1 e3       	ldi	r30, 0x31	; 49
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	80 81       	ld	r24, Z
 33e:	98 2f       	mov	r25, r24
 340:	ec 81       	ldd	r30, Y+4	; 0x04
 342:	fd 81       	ldd	r31, Y+5	; 0x05
 344:	81 81       	ldd	r24, Z+1	; 0x01
 346:	80 95       	com	r24
 348:	89 23       	and	r24, r25
 34a:	8a 83       	std	Y+2, r24	; 0x02
			DIO_DDRD = Mask1 | Mask2;
 34c:	e1 e3       	ldi	r30, 0x31	; 49
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	9a 81       	ldd	r25, Y+2	; 0x02
 352:	89 81       	ldd	r24, Y+1	; 0x01
 354:	89 2b       	or	r24, r25
 356:	80 83       	st	Z, r24
			break;

		}
	}

	return error;
 358:	8b 81       	ldd	r24, Y+3	; 0x03

}
 35a:	27 96       	adiw	r28, 0x07	; 7
 35c:	0f b6       	in	r0, 0x3f	; 63
 35e:	f8 94       	cli
 360:	de bf       	out	0x3e, r29	; 62
 362:	0f be       	out	0x3f, r0	; 63
 364:	cd bf       	out	0x3d, r28	; 61
 366:	cf 91       	pop	r28
 368:	df 91       	pop	r29
 36a:	08 95       	ret

0000036c <MCAL_Dio_ReadPort>:


E_ErrorType MCAL_Dio_ReadPort(S_Dio *Dio_ReadPort,u8PortValue *Port_Value)
{
 36c:	df 93       	push	r29
 36e:	cf 93       	push	r28
 370:	cd b7       	in	r28, 0x3d	; 61
 372:	de b7       	in	r29, 0x3e	; 62
 374:	27 97       	sbiw	r28, 0x07	; 7
 376:	0f b6       	in	r0, 0x3f	; 63
 378:	f8 94       	cli
 37a:	de bf       	out	0x3e, r29	; 62
 37c:	0f be       	out	0x3f, r0	; 63
 37e:	cd bf       	out	0x3d, r28	; 61
 380:	9b 83       	std	Y+3, r25	; 0x03
 382:	8a 83       	std	Y+2, r24	; 0x02
 384:	7d 83       	std	Y+5, r23	; 0x05
 386:	6c 83       	std	Y+4, r22	; 0x04
	E_ErrorType error = E_OK;
 388:	19 82       	std	Y+1, r1	; 0x01
	if(DIO_STATUS_ERROR == E_NOT_OK)
	{
		error = E_NOT_OK;
	}
	else if(Dio_ReadPort->port_num >= DIO_CONFIGURED_PORTS)
 38a:	ea 81       	ldd	r30, Y+2	; 0x02
 38c:	fb 81       	ldd	r31, Y+3	; 0x03
 38e:	80 81       	ld	r24, Z
 390:	84 30       	cpi	r24, 0x04	; 4
 392:	18 f0       	brcs	.+6      	; 0x39a <MCAL_Dio_ReadPort+0x2e>
	{

		error = E_NOT_OK;
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	89 83       	std	Y+1, r24	; 0x01
 398:	3c c0       	rjmp	.+120    	; 0x412 <MCAL_Dio_ReadPort+0xa6>
	}
	else
	{
		switch (Dio_ReadPort->port_num )
 39a:	ea 81       	ldd	r30, Y+2	; 0x02
 39c:	fb 81       	ldd	r31, Y+3	; 0x03
 39e:	80 81       	ld	r24, Z
 3a0:	28 2f       	mov	r18, r24
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	3f 83       	std	Y+7, r19	; 0x07
 3a6:	2e 83       	std	Y+6, r18	; 0x06
 3a8:	8e 81       	ldd	r24, Y+6	; 0x06
 3aa:	9f 81       	ldd	r25, Y+7	; 0x07
 3ac:	81 30       	cpi	r24, 0x01	; 1
 3ae:	91 05       	cpc	r25, r1
 3b0:	e1 f0       	breq	.+56     	; 0x3ea <MCAL_Dio_ReadPort+0x7e>
 3b2:	2e 81       	ldd	r18, Y+6	; 0x06
 3b4:	3f 81       	ldd	r19, Y+7	; 0x07
 3b6:	22 30       	cpi	r18, 0x02	; 2
 3b8:	31 05       	cpc	r19, r1
 3ba:	2c f4       	brge	.+10     	; 0x3c6 <MCAL_Dio_ReadPort+0x5a>
 3bc:	8e 81       	ldd	r24, Y+6	; 0x06
 3be:	9f 81       	ldd	r25, Y+7	; 0x07
 3c0:	00 97       	sbiw	r24, 0x00	; 0
 3c2:	61 f0       	breq	.+24     	; 0x3dc <MCAL_Dio_ReadPort+0x70>
 3c4:	26 c0       	rjmp	.+76     	; 0x412 <MCAL_Dio_ReadPort+0xa6>
 3c6:	2e 81       	ldd	r18, Y+6	; 0x06
 3c8:	3f 81       	ldd	r19, Y+7	; 0x07
 3ca:	22 30       	cpi	r18, 0x02	; 2
 3cc:	31 05       	cpc	r19, r1
 3ce:	a1 f0       	breq	.+40     	; 0x3f8 <MCAL_Dio_ReadPort+0x8c>
 3d0:	8e 81       	ldd	r24, Y+6	; 0x06
 3d2:	9f 81       	ldd	r25, Y+7	; 0x07
 3d4:	83 30       	cpi	r24, 0x03	; 3
 3d6:	91 05       	cpc	r25, r1
 3d8:	b1 f0       	breq	.+44     	; 0x406 <MCAL_Dio_ReadPort+0x9a>
 3da:	1b c0       	rjmp	.+54     	; 0x412 <MCAL_Dio_ReadPort+0xa6>
		{
		case PORTA_ID:
			*Port_Value = DIO_PINA;
 3dc:	e9 e3       	ldi	r30, 0x39	; 57
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	80 81       	ld	r24, Z
 3e2:	ec 81       	ldd	r30, Y+4	; 0x04
 3e4:	fd 81       	ldd	r31, Y+5	; 0x05
 3e6:	80 83       	st	Z, r24
 3e8:	14 c0       	rjmp	.+40     	; 0x412 <MCAL_Dio_ReadPort+0xa6>
			break;
		case PORTB_ID:
			*Port_Value = DIO_PINB;
 3ea:	e6 e3       	ldi	r30, 0x36	; 54
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	80 81       	ld	r24, Z
 3f0:	ec 81       	ldd	r30, Y+4	; 0x04
 3f2:	fd 81       	ldd	r31, Y+5	; 0x05
 3f4:	80 83       	st	Z, r24
 3f6:	0d c0       	rjmp	.+26     	; 0x412 <MCAL_Dio_ReadPort+0xa6>
			break;
		case PORTC_ID:
			*Port_Value = DIO_PINC;
 3f8:	e3 e3       	ldi	r30, 0x33	; 51
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	80 81       	ld	r24, Z
 3fe:	ec 81       	ldd	r30, Y+4	; 0x04
 400:	fd 81       	ldd	r31, Y+5	; 0x05
 402:	80 83       	st	Z, r24
 404:	06 c0       	rjmp	.+12     	; 0x412 <MCAL_Dio_ReadPort+0xa6>
			break;
		case PORTD_ID:
			*Port_Value = DIO_PIND;
 406:	e0 e3       	ldi	r30, 0x30	; 48
 408:	f0 e0       	ldi	r31, 0x00	; 0
 40a:	80 81       	ld	r24, Z
 40c:	ec 81       	ldd	r30, Y+4	; 0x04
 40e:	fd 81       	ldd	r31, Y+5	; 0x05
 410:	80 83       	st	Z, r24
			break;

		}
	}
	return error;
 412:	89 81       	ldd	r24, Y+1	; 0x01
}
 414:	27 96       	adiw	r28, 0x07	; 7
 416:	0f b6       	in	r0, 0x3f	; 63
 418:	f8 94       	cli
 41a:	de bf       	out	0x3e, r29	; 62
 41c:	0f be       	out	0x3f, r0	; 63
 41e:	cd bf       	out	0x3d, r28	; 61
 420:	cf 91       	pop	r28
 422:	df 91       	pop	r29
 424:	08 95       	ret

00000426 <MCAL_Dio_ReadPin>:

E_ErrorType MCAL_Dio_ReadPin(S_Dio *Dio_ReadPin,u8PinValue *Pin_Value)
{
 426:	df 93       	push	r29
 428:	cf 93       	push	r28
 42a:	cd b7       	in	r28, 0x3d	; 61
 42c:	de b7       	in	r29, 0x3e	; 62
 42e:	27 97       	sbiw	r28, 0x07	; 7
 430:	0f b6       	in	r0, 0x3f	; 63
 432:	f8 94       	cli
 434:	de bf       	out	0x3e, r29	; 62
 436:	0f be       	out	0x3f, r0	; 63
 438:	cd bf       	out	0x3d, r28	; 61
 43a:	9b 83       	std	Y+3, r25	; 0x03
 43c:	8a 83       	std	Y+2, r24	; 0x02
 43e:	7d 83       	std	Y+5, r23	; 0x05
 440:	6c 83       	std	Y+4, r22	; 0x04
	E_ErrorType error = E_OK;
 442:	19 82       	std	Y+1, r1	; 0x01

	if(DIO_STATUS_ERROR == E_NOT_OK)
	{
		error = E_NOT_OK;
	}
	else if(Dio_ReadPin->port_num >= DIO_CONFIGURED_PORTS)
 444:	ea 81       	ldd	r30, Y+2	; 0x02
 446:	fb 81       	ldd	r31, Y+3	; 0x03
 448:	80 81       	ld	r24, Z
 44a:	84 30       	cpi	r24, 0x04	; 4
 44c:	18 f0       	brcs	.+6      	; 0x454 <MCAL_Dio_ReadPin+0x2e>
	{

		error = E_NOT_OK;
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	89 83       	std	Y+1, r24	; 0x01
 452:	7a c0       	rjmp	.+244    	; 0x548 <MCAL_Dio_ReadPin+0x122>

	}
	else
	{
		switch(Dio_ReadPin->port_num)
 454:	ea 81       	ldd	r30, Y+2	; 0x02
 456:	fb 81       	ldd	r31, Y+3	; 0x03
 458:	80 81       	ld	r24, Z
 45a:	28 2f       	mov	r18, r24
 45c:	30 e0       	ldi	r19, 0x00	; 0
 45e:	3f 83       	std	Y+7, r19	; 0x07
 460:	2e 83       	std	Y+6, r18	; 0x06
 462:	4e 81       	ldd	r20, Y+6	; 0x06
 464:	5f 81       	ldd	r21, Y+7	; 0x07
 466:	41 30       	cpi	r20, 0x01	; 1
 468:	51 05       	cpc	r21, r1
 46a:	69 f1       	breq	.+90     	; 0x4c6 <MCAL_Dio_ReadPin+0xa0>
 46c:	8e 81       	ldd	r24, Y+6	; 0x06
 46e:	9f 81       	ldd	r25, Y+7	; 0x07
 470:	82 30       	cpi	r24, 0x02	; 2
 472:	91 05       	cpc	r25, r1
 474:	34 f4       	brge	.+12     	; 0x482 <MCAL_Dio_ReadPin+0x5c>
 476:	2e 81       	ldd	r18, Y+6	; 0x06
 478:	3f 81       	ldd	r19, Y+7	; 0x07
 47a:	21 15       	cp	r18, r1
 47c:	31 05       	cpc	r19, r1
 47e:	69 f0       	breq	.+26     	; 0x49a <MCAL_Dio_ReadPin+0x74>
 480:	63 c0       	rjmp	.+198    	; 0x548 <MCAL_Dio_ReadPin+0x122>
 482:	4e 81       	ldd	r20, Y+6	; 0x06
 484:	5f 81       	ldd	r21, Y+7	; 0x07
 486:	42 30       	cpi	r20, 0x02	; 2
 488:	51 05       	cpc	r21, r1
 48a:	99 f1       	breq	.+102    	; 0x4f2 <MCAL_Dio_ReadPin+0xcc>
 48c:	8e 81       	ldd	r24, Y+6	; 0x06
 48e:	9f 81       	ldd	r25, Y+7	; 0x07
 490:	83 30       	cpi	r24, 0x03	; 3
 492:	91 05       	cpc	r25, r1
 494:	09 f4       	brne	.+2      	; 0x498 <MCAL_Dio_ReadPin+0x72>
 496:	43 c0       	rjmp	.+134    	; 0x51e <MCAL_Dio_ReadPin+0xf8>
 498:	57 c0       	rjmp	.+174    	; 0x548 <MCAL_Dio_ReadPin+0x122>
		{
		case PORTA_ID:
			*Pin_Value = GET_BIT(DIO_PINA,Dio_ReadPin->pin_num);
 49a:	e9 e3       	ldi	r30, 0x39	; 57
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	80 81       	ld	r24, Z
 4a0:	28 2f       	mov	r18, r24
 4a2:	30 e0       	ldi	r19, 0x00	; 0
 4a4:	ea 81       	ldd	r30, Y+2	; 0x02
 4a6:	fb 81       	ldd	r31, Y+3	; 0x03
 4a8:	81 81       	ldd	r24, Z+1	; 0x01
 4aa:	88 2f       	mov	r24, r24
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	a9 01       	movw	r20, r18
 4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <MCAL_Dio_ReadPin+0x90>
 4b2:	55 95       	asr	r21
 4b4:	47 95       	ror	r20
 4b6:	8a 95       	dec	r24
 4b8:	e2 f7       	brpl	.-8      	; 0x4b2 <MCAL_Dio_ReadPin+0x8c>
 4ba:	ca 01       	movw	r24, r20
 4bc:	81 70       	andi	r24, 0x01	; 1
 4be:	ec 81       	ldd	r30, Y+4	; 0x04
 4c0:	fd 81       	ldd	r31, Y+5	; 0x05
 4c2:	80 83       	st	Z, r24
 4c4:	41 c0       	rjmp	.+130    	; 0x548 <MCAL_Dio_ReadPin+0x122>
			break;
		case PORTB_ID:
			*Pin_Value = GET_BIT(DIO_PINB,Dio_ReadPin->pin_num);
 4c6:	e6 e3       	ldi	r30, 0x36	; 54
 4c8:	f0 e0       	ldi	r31, 0x00	; 0
 4ca:	80 81       	ld	r24, Z
 4cc:	28 2f       	mov	r18, r24
 4ce:	30 e0       	ldi	r19, 0x00	; 0
 4d0:	ea 81       	ldd	r30, Y+2	; 0x02
 4d2:	fb 81       	ldd	r31, Y+3	; 0x03
 4d4:	81 81       	ldd	r24, Z+1	; 0x01
 4d6:	88 2f       	mov	r24, r24
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	a9 01       	movw	r20, r18
 4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <MCAL_Dio_ReadPin+0xbc>
 4de:	55 95       	asr	r21
 4e0:	47 95       	ror	r20
 4e2:	8a 95       	dec	r24
 4e4:	e2 f7       	brpl	.-8      	; 0x4de <MCAL_Dio_ReadPin+0xb8>
 4e6:	ca 01       	movw	r24, r20
 4e8:	81 70       	andi	r24, 0x01	; 1
 4ea:	ec 81       	ldd	r30, Y+4	; 0x04
 4ec:	fd 81       	ldd	r31, Y+5	; 0x05
 4ee:	80 83       	st	Z, r24
 4f0:	2b c0       	rjmp	.+86     	; 0x548 <MCAL_Dio_ReadPin+0x122>
			break;
		case PORTC_ID:
			*Pin_Value = GET_BIT(DIO_PINC,Dio_ReadPin->pin_num);
 4f2:	e3 e3       	ldi	r30, 0x33	; 51
 4f4:	f0 e0       	ldi	r31, 0x00	; 0
 4f6:	80 81       	ld	r24, Z
 4f8:	28 2f       	mov	r18, r24
 4fa:	30 e0       	ldi	r19, 0x00	; 0
 4fc:	ea 81       	ldd	r30, Y+2	; 0x02
 4fe:	fb 81       	ldd	r31, Y+3	; 0x03
 500:	81 81       	ldd	r24, Z+1	; 0x01
 502:	88 2f       	mov	r24, r24
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	a9 01       	movw	r20, r18
 508:	02 c0       	rjmp	.+4      	; 0x50e <MCAL_Dio_ReadPin+0xe8>
 50a:	55 95       	asr	r21
 50c:	47 95       	ror	r20
 50e:	8a 95       	dec	r24
 510:	e2 f7       	brpl	.-8      	; 0x50a <MCAL_Dio_ReadPin+0xe4>
 512:	ca 01       	movw	r24, r20
 514:	81 70       	andi	r24, 0x01	; 1
 516:	ec 81       	ldd	r30, Y+4	; 0x04
 518:	fd 81       	ldd	r31, Y+5	; 0x05
 51a:	80 83       	st	Z, r24
 51c:	15 c0       	rjmp	.+42     	; 0x548 <MCAL_Dio_ReadPin+0x122>
			break;
		case PORTD_ID:
			*Pin_Value = GET_BIT(DIO_PIND,Dio_ReadPin->pin_num);
 51e:	e0 e3       	ldi	r30, 0x30	; 48
 520:	f0 e0       	ldi	r31, 0x00	; 0
 522:	80 81       	ld	r24, Z
 524:	28 2f       	mov	r18, r24
 526:	30 e0       	ldi	r19, 0x00	; 0
 528:	ea 81       	ldd	r30, Y+2	; 0x02
 52a:	fb 81       	ldd	r31, Y+3	; 0x03
 52c:	81 81       	ldd	r24, Z+1	; 0x01
 52e:	88 2f       	mov	r24, r24
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	a9 01       	movw	r20, r18
 534:	02 c0       	rjmp	.+4      	; 0x53a <MCAL_Dio_ReadPin+0x114>
 536:	55 95       	asr	r21
 538:	47 95       	ror	r20
 53a:	8a 95       	dec	r24
 53c:	e2 f7       	brpl	.-8      	; 0x536 <MCAL_Dio_ReadPin+0x110>
 53e:	ca 01       	movw	r24, r20
 540:	81 70       	andi	r24, 0x01	; 1
 542:	ec 81       	ldd	r30, Y+4	; 0x04
 544:	fd 81       	ldd	r31, Y+5	; 0x05
 546:	80 83       	st	Z, r24
			break;
		}
	}
	return error;
 548:	89 81       	ldd	r24, Y+1	; 0x01
}
 54a:	27 96       	adiw	r28, 0x07	; 7
 54c:	0f b6       	in	r0, 0x3f	; 63
 54e:	f8 94       	cli
 550:	de bf       	out	0x3e, r29	; 62
 552:	0f be       	out	0x3f, r0	; 63
 554:	cd bf       	out	0x3d, r28	; 61
 556:	cf 91       	pop	r28
 558:	df 91       	pop	r29
 55a:	08 95       	ret

0000055c <MCAL_Dio_WritePort>:


E_ErrorType MCAL_Dio_WritePort(S_Dio *Dio_WritePort,u8PortValue Port_Value)
{
 55c:	df 93       	push	r29
 55e:	cf 93       	push	r28
 560:	00 d0       	rcall	.+0      	; 0x562 <MCAL_Dio_WritePort+0x6>
 562:	00 d0       	rcall	.+0      	; 0x564 <MCAL_Dio_WritePort+0x8>
 564:	00 d0       	rcall	.+0      	; 0x566 <MCAL_Dio_WritePort+0xa>
 566:	cd b7       	in	r28, 0x3d	; 61
 568:	de b7       	in	r29, 0x3e	; 62
 56a:	9b 83       	std	Y+3, r25	; 0x03
 56c:	8a 83       	std	Y+2, r24	; 0x02
 56e:	6c 83       	std	Y+4, r22	; 0x04
	E_ErrorType error = E_OK;
 570:	19 82       	std	Y+1, r1	; 0x01

	if(DIO_STATUS_ERROR == E_NOT_OK)
	{
		error = E_NOT_OK;
	}
	else if(Dio_WritePort->port_num >= DIO_CONFIGURED_PORTS)
 572:	ea 81       	ldd	r30, Y+2	; 0x02
 574:	fb 81       	ldd	r31, Y+3	; 0x03
 576:	80 81       	ld	r24, Z
 578:	84 30       	cpi	r24, 0x04	; 4
 57a:	18 f0       	brcs	.+6      	; 0x582 <MCAL_Dio_WritePort+0x26>
	{

		error = E_NOT_OK;
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	89 83       	std	Y+1, r24	; 0x01
 580:	34 c0       	rjmp	.+104    	; 0x5ea <MCAL_Dio_WritePort+0x8e>
	}
	else
	{
		switch (Dio_WritePort->port_num)
 582:	ea 81       	ldd	r30, Y+2	; 0x02
 584:	fb 81       	ldd	r31, Y+3	; 0x03
 586:	80 81       	ld	r24, Z
 588:	28 2f       	mov	r18, r24
 58a:	30 e0       	ldi	r19, 0x00	; 0
 58c:	3e 83       	std	Y+6, r19	; 0x06
 58e:	2d 83       	std	Y+5, r18	; 0x05
 590:	8d 81       	ldd	r24, Y+5	; 0x05
 592:	9e 81       	ldd	r25, Y+6	; 0x06
 594:	81 30       	cpi	r24, 0x01	; 1
 596:	91 05       	cpc	r25, r1
 598:	d1 f0       	breq	.+52     	; 0x5ce <MCAL_Dio_WritePort+0x72>
 59a:	2d 81       	ldd	r18, Y+5	; 0x05
 59c:	3e 81       	ldd	r19, Y+6	; 0x06
 59e:	22 30       	cpi	r18, 0x02	; 2
 5a0:	31 05       	cpc	r19, r1
 5a2:	2c f4       	brge	.+10     	; 0x5ae <MCAL_Dio_WritePort+0x52>
 5a4:	8d 81       	ldd	r24, Y+5	; 0x05
 5a6:	9e 81       	ldd	r25, Y+6	; 0x06
 5a8:	00 97       	sbiw	r24, 0x00	; 0
 5aa:	61 f0       	breq	.+24     	; 0x5c4 <MCAL_Dio_WritePort+0x68>
 5ac:	1e c0       	rjmp	.+60     	; 0x5ea <MCAL_Dio_WritePort+0x8e>
 5ae:	2d 81       	ldd	r18, Y+5	; 0x05
 5b0:	3e 81       	ldd	r19, Y+6	; 0x06
 5b2:	22 30       	cpi	r18, 0x02	; 2
 5b4:	31 05       	cpc	r19, r1
 5b6:	81 f0       	breq	.+32     	; 0x5d8 <MCAL_Dio_WritePort+0x7c>
 5b8:	8d 81       	ldd	r24, Y+5	; 0x05
 5ba:	9e 81       	ldd	r25, Y+6	; 0x06
 5bc:	83 30       	cpi	r24, 0x03	; 3
 5be:	91 05       	cpc	r25, r1
 5c0:	81 f0       	breq	.+32     	; 0x5e2 <MCAL_Dio_WritePort+0x86>
 5c2:	13 c0       	rjmp	.+38     	; 0x5ea <MCAL_Dio_WritePort+0x8e>
		{
		case PORTA_ID:
			DIO_PORTA = Port_Value;
 5c4:	eb e3       	ldi	r30, 0x3B	; 59
 5c6:	f0 e0       	ldi	r31, 0x00	; 0
 5c8:	8c 81       	ldd	r24, Y+4	; 0x04
 5ca:	80 83       	st	Z, r24
 5cc:	0e c0       	rjmp	.+28     	; 0x5ea <MCAL_Dio_WritePort+0x8e>
			break;
		case PORTB_ID:
			DIO_PORTB = Port_Value;
 5ce:	e8 e3       	ldi	r30, 0x38	; 56
 5d0:	f0 e0       	ldi	r31, 0x00	; 0
 5d2:	8c 81       	ldd	r24, Y+4	; 0x04
 5d4:	80 83       	st	Z, r24
 5d6:	09 c0       	rjmp	.+18     	; 0x5ea <MCAL_Dio_WritePort+0x8e>
			break;
		case PORTC_ID:
			DIO_PORTC = Port_Value;
 5d8:	e5 e3       	ldi	r30, 0x35	; 53
 5da:	f0 e0       	ldi	r31, 0x00	; 0
 5dc:	8c 81       	ldd	r24, Y+4	; 0x04
 5de:	80 83       	st	Z, r24
 5e0:	04 c0       	rjmp	.+8      	; 0x5ea <MCAL_Dio_WritePort+0x8e>
			break;
		case PORTD_ID:
			DIO_PORTD = Port_Value;
 5e2:	e2 e3       	ldi	r30, 0x32	; 50
 5e4:	f0 e0       	ldi	r31, 0x00	; 0
 5e6:	8c 81       	ldd	r24, Y+4	; 0x04
 5e8:	80 83       	st	Z, r24
			break;
		}
	}
	return error;
 5ea:	89 81       	ldd	r24, Y+1	; 0x01
}
 5ec:	26 96       	adiw	r28, 0x06	; 6
 5ee:	0f b6       	in	r0, 0x3f	; 63
 5f0:	f8 94       	cli
 5f2:	de bf       	out	0x3e, r29	; 62
 5f4:	0f be       	out	0x3f, r0	; 63
 5f6:	cd bf       	out	0x3d, r28	; 61
 5f8:	cf 91       	pop	r28
 5fa:	df 91       	pop	r29
 5fc:	08 95       	ret

000005fe <MCAL_Dio_WritePin>:


E_ErrorType MCAL_Dio_WritePin(S_Dio *Dio_WritePin,u8PinValue Pin_value)
{
 5fe:	df 93       	push	r29
 600:	cf 93       	push	r28
 602:	cd b7       	in	r28, 0x3d	; 61
 604:	de b7       	in	r29, 0x3e	; 62
 606:	28 97       	sbiw	r28, 0x08	; 8
 608:	0f b6       	in	r0, 0x3f	; 63
 60a:	f8 94       	cli
 60c:	de bf       	out	0x3e, r29	; 62
 60e:	0f be       	out	0x3f, r0	; 63
 610:	cd bf       	out	0x3d, r28	; 61
 612:	9d 83       	std	Y+5, r25	; 0x05
 614:	8c 83       	std	Y+4, r24	; 0x04
 616:	6e 83       	std	Y+6, r22	; 0x06
	E_ErrorType error = E_OK;
 618:	1b 82       	std	Y+3, r1	; 0x03
	u8RegisterValue Mask1,Mask2;
	if(DIO_STATUS_ERROR == E_NOT_OK)
	{
		error = E_NOT_OK;
	}
	else if(Dio_WritePin->port_num >= DIO_CONFIGURED_PORTS)
 61a:	ec 81       	ldd	r30, Y+4	; 0x04
 61c:	fd 81       	ldd	r31, Y+5	; 0x05
 61e:	80 81       	ld	r24, Z
 620:	84 30       	cpi	r24, 0x04	; 4
 622:	18 f0       	brcs	.+6      	; 0x62a <MCAL_Dio_WritePin+0x2c>
	{

		error = E_NOT_OK;
 624:	81 e0       	ldi	r24, 0x01	; 1
 626:	8b 83       	std	Y+3, r24	; 0x03
 628:	6a c0       	rjmp	.+212    	; 0x6fe <MCAL_Dio_WritePin+0x100>
	}
	else
	{

		Mask2 = ((Dio_WritePin->pin_num) & (Pin_value));
 62a:	ec 81       	ldd	r30, Y+4	; 0x04
 62c:	fd 81       	ldd	r31, Y+5	; 0x05
 62e:	91 81       	ldd	r25, Z+1	; 0x01
 630:	8e 81       	ldd	r24, Y+6	; 0x06
 632:	89 23       	and	r24, r25
 634:	89 83       	std	Y+1, r24	; 0x01
		switch(Dio_WritePin->port_num)
 636:	ec 81       	ldd	r30, Y+4	; 0x04
 638:	fd 81       	ldd	r31, Y+5	; 0x05
 63a:	80 81       	ld	r24, Z
 63c:	28 2f       	mov	r18, r24
 63e:	30 e0       	ldi	r19, 0x00	; 0
 640:	38 87       	std	Y+8, r19	; 0x08
 642:	2f 83       	std	Y+7, r18	; 0x07
 644:	8f 81       	ldd	r24, Y+7	; 0x07
 646:	98 85       	ldd	r25, Y+8	; 0x08
 648:	81 30       	cpi	r24, 0x01	; 1
 64a:	91 05       	cpc	r25, r1
 64c:	31 f1       	breq	.+76     	; 0x69a <MCAL_Dio_WritePin+0x9c>
 64e:	2f 81       	ldd	r18, Y+7	; 0x07
 650:	38 85       	ldd	r19, Y+8	; 0x08
 652:	22 30       	cpi	r18, 0x02	; 2
 654:	31 05       	cpc	r19, r1
 656:	2c f4       	brge	.+10     	; 0x662 <MCAL_Dio_WritePin+0x64>
 658:	8f 81       	ldd	r24, Y+7	; 0x07
 65a:	98 85       	ldd	r25, Y+8	; 0x08
 65c:	00 97       	sbiw	r24, 0x00	; 0
 65e:	61 f0       	breq	.+24     	; 0x678 <MCAL_Dio_WritePin+0x7a>
 660:	4e c0       	rjmp	.+156    	; 0x6fe <MCAL_Dio_WritePin+0x100>
 662:	2f 81       	ldd	r18, Y+7	; 0x07
 664:	38 85       	ldd	r19, Y+8	; 0x08
 666:	22 30       	cpi	r18, 0x02	; 2
 668:	31 05       	cpc	r19, r1
 66a:	41 f1       	breq	.+80     	; 0x6bc <MCAL_Dio_WritePin+0xbe>
 66c:	8f 81       	ldd	r24, Y+7	; 0x07
 66e:	98 85       	ldd	r25, Y+8	; 0x08
 670:	83 30       	cpi	r24, 0x03	; 3
 672:	91 05       	cpc	r25, r1
 674:	a1 f1       	breq	.+104    	; 0x6de <MCAL_Dio_WritePin+0xe0>
 676:	43 c0       	rjmp	.+134    	; 0x6fe <MCAL_Dio_WritePin+0x100>
		{
		case PORTA_ID:
			Mask1 = ((DIO_PORTA) & (~(Dio_WritePin->pin_num)));
 678:	eb e3       	ldi	r30, 0x3B	; 59
 67a:	f0 e0       	ldi	r31, 0x00	; 0
 67c:	80 81       	ld	r24, Z
 67e:	98 2f       	mov	r25, r24
 680:	ec 81       	ldd	r30, Y+4	; 0x04
 682:	fd 81       	ldd	r31, Y+5	; 0x05
 684:	81 81       	ldd	r24, Z+1	; 0x01
 686:	80 95       	com	r24
 688:	89 23       	and	r24, r25
 68a:	8a 83       	std	Y+2, r24	; 0x02
			DIO_PORTA = Mask1 | Mask2;
 68c:	eb e3       	ldi	r30, 0x3B	; 59
 68e:	f0 e0       	ldi	r31, 0x00	; 0
 690:	9a 81       	ldd	r25, Y+2	; 0x02
 692:	89 81       	ldd	r24, Y+1	; 0x01
 694:	89 2b       	or	r24, r25
 696:	80 83       	st	Z, r24
 698:	32 c0       	rjmp	.+100    	; 0x6fe <MCAL_Dio_WritePin+0x100>
			break;
		case PORTB_ID:
			Mask1 = ((DIO_PORTB) & (~(Dio_WritePin->pin_num)));
 69a:	e8 e3       	ldi	r30, 0x38	; 56
 69c:	f0 e0       	ldi	r31, 0x00	; 0
 69e:	80 81       	ld	r24, Z
 6a0:	98 2f       	mov	r25, r24
 6a2:	ec 81       	ldd	r30, Y+4	; 0x04
 6a4:	fd 81       	ldd	r31, Y+5	; 0x05
 6a6:	81 81       	ldd	r24, Z+1	; 0x01
 6a8:	80 95       	com	r24
 6aa:	89 23       	and	r24, r25
 6ac:	8a 83       	std	Y+2, r24	; 0x02
			DIO_PORTB = Mask1 | Mask2;
 6ae:	e8 e3       	ldi	r30, 0x38	; 56
 6b0:	f0 e0       	ldi	r31, 0x00	; 0
 6b2:	9a 81       	ldd	r25, Y+2	; 0x02
 6b4:	89 81       	ldd	r24, Y+1	; 0x01
 6b6:	89 2b       	or	r24, r25
 6b8:	80 83       	st	Z, r24
 6ba:	21 c0       	rjmp	.+66     	; 0x6fe <MCAL_Dio_WritePin+0x100>
			break;
		case PORTC_ID:
			Mask1 = ((DIO_PORTC) & (~(Dio_WritePin->pin_num)));
 6bc:	e5 e3       	ldi	r30, 0x35	; 53
 6be:	f0 e0       	ldi	r31, 0x00	; 0
 6c0:	80 81       	ld	r24, Z
 6c2:	98 2f       	mov	r25, r24
 6c4:	ec 81       	ldd	r30, Y+4	; 0x04
 6c6:	fd 81       	ldd	r31, Y+5	; 0x05
 6c8:	81 81       	ldd	r24, Z+1	; 0x01
 6ca:	80 95       	com	r24
 6cc:	89 23       	and	r24, r25
 6ce:	8a 83       	std	Y+2, r24	; 0x02
			DIO_PORTC = Mask1 | Mask2;
 6d0:	e5 e3       	ldi	r30, 0x35	; 53
 6d2:	f0 e0       	ldi	r31, 0x00	; 0
 6d4:	9a 81       	ldd	r25, Y+2	; 0x02
 6d6:	89 81       	ldd	r24, Y+1	; 0x01
 6d8:	89 2b       	or	r24, r25
 6da:	80 83       	st	Z, r24
 6dc:	10 c0       	rjmp	.+32     	; 0x6fe <MCAL_Dio_WritePin+0x100>
			break;
		case PORTD_ID:
			Mask1 = ((DIO_PORTD) & (~(Dio_WritePin->pin_num)));
 6de:	e2 e3       	ldi	r30, 0x32	; 50
 6e0:	f0 e0       	ldi	r31, 0x00	; 0
 6e2:	80 81       	ld	r24, Z
 6e4:	98 2f       	mov	r25, r24
 6e6:	ec 81       	ldd	r30, Y+4	; 0x04
 6e8:	fd 81       	ldd	r31, Y+5	; 0x05
 6ea:	81 81       	ldd	r24, Z+1	; 0x01
 6ec:	80 95       	com	r24
 6ee:	89 23       	and	r24, r25
 6f0:	8a 83       	std	Y+2, r24	; 0x02
			DIO_PORTD = Mask1 | Mask2;
 6f2:	e2 e3       	ldi	r30, 0x32	; 50
 6f4:	f0 e0       	ldi	r31, 0x00	; 0
 6f6:	9a 81       	ldd	r25, Y+2	; 0x02
 6f8:	89 81       	ldd	r24, Y+1	; 0x01
 6fa:	89 2b       	or	r24, r25
 6fc:	80 83       	st	Z, r24
			break;

		}
	}
	return error;
 6fe:	8b 81       	ldd	r24, Y+3	; 0x03
}
 700:	28 96       	adiw	r28, 0x08	; 8
 702:	0f b6       	in	r0, 0x3f	; 63
 704:	f8 94       	cli
 706:	de bf       	out	0x3e, r29	; 62
 708:	0f be       	out	0x3f, r0	; 63
 70a:	cd bf       	out	0x3d, r28	; 61
 70c:	cf 91       	pop	r28
 70e:	df 91       	pop	r29
 710:	08 95       	ret

00000712 <MCAL_Dio_WriteSinglePin>:

E_ErrorType MCAL_Dio_WriteSinglePin(S_Dio *Dio_WritePin,E_DioPin Pin_Num,u8PinValue Pin_value)
{
 712:	df 93       	push	r29
 714:	cf 93       	push	r28
 716:	cd b7       	in	r28, 0x3d	; 61
 718:	de b7       	in	r29, 0x3e	; 62
 71a:	2a 97       	sbiw	r28, 0x0a	; 10
 71c:	0f b6       	in	r0, 0x3f	; 63
 71e:	f8 94       	cli
 720:	de bf       	out	0x3e, r29	; 62
 722:	0f be       	out	0x3f, r0	; 63
 724:	cd bf       	out	0x3d, r28	; 61
 726:	9e 83       	std	Y+6, r25	; 0x06
 728:	8d 83       	std	Y+5, r24	; 0x05
 72a:	6f 83       	std	Y+7, r22	; 0x07
 72c:	48 87       	std	Y+8, r20	; 0x08
		E_ErrorType error = E_OK;
 72e:	1c 82       	std	Y+4, r1	; 0x04
		u8PinNumber bitNumber;
		if(DIO_STATUS_ERROR == E_NOT_OK)
		{
			error = E_NOT_OK;
		}
		else if(Dio_WritePin->port_num >= DIO_CONFIGURED_PORTS)
 730:	ed 81       	ldd	r30, Y+5	; 0x05
 732:	fe 81       	ldd	r31, Y+6	; 0x06
 734:	80 81       	ld	r24, Z
 736:	84 30       	cpi	r24, 0x04	; 4
 738:	18 f0       	brcs	.+6      	; 0x740 <MCAL_Dio_WriteSinglePin+0x2e>
		{

			error = E_NOT_OK;
 73a:	81 e0       	ldi	r24, 0x01	; 1
 73c:	8c 83       	std	Y+4, r24	; 0x04
 73e:	f0 c0       	rjmp	.+480    	; 0x920 <__stack+0xc1>
		}
		else
		{
			for (int i = 0; i < DIO_CONFIGURED_PINS; i++) {
 740:	1a 82       	std	Y+2, r1	; 0x02
 742:	19 82       	std	Y+1, r1	; 0x01
 744:	15 c0       	rjmp	.+42     	; 0x770 <MCAL_Dio_WriteSinglePin+0x5e>
						if (Pin_Num & (1 << i)) {
 746:	8f 81       	ldd	r24, Y+7	; 0x07
 748:	88 2f       	mov	r24, r24
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	09 80       	ldd	r0, Y+1	; 0x01
 74e:	02 c0       	rjmp	.+4      	; 0x754 <MCAL_Dio_WriteSinglePin+0x42>
 750:	95 95       	asr	r25
 752:	87 95       	ror	r24
 754:	0a 94       	dec	r0
 756:	e2 f7       	brpl	.-8      	; 0x750 <MCAL_Dio_WriteSinglePin+0x3e>
 758:	81 70       	andi	r24, 0x01	; 1
 75a:	90 70       	andi	r25, 0x00	; 0
 75c:	88 23       	and	r24, r24
 75e:	19 f0       	breq	.+6      	; 0x766 <MCAL_Dio_WriteSinglePin+0x54>
							bitNumber = i;
 760:	89 81       	ldd	r24, Y+1	; 0x01
 762:	8b 83       	std	Y+3, r24	; 0x03
 764:	0a c0       	rjmp	.+20     	; 0x77a <MCAL_Dio_WriteSinglePin+0x68>

			error = E_NOT_OK;
		}
		else
		{
			for (int i = 0; i < DIO_CONFIGURED_PINS; i++) {
 766:	89 81       	ldd	r24, Y+1	; 0x01
 768:	9a 81       	ldd	r25, Y+2	; 0x02
 76a:	01 96       	adiw	r24, 0x01	; 1
 76c:	9a 83       	std	Y+2, r25	; 0x02
 76e:	89 83       	std	Y+1, r24	; 0x01
 770:	89 81       	ldd	r24, Y+1	; 0x01
 772:	9a 81       	ldd	r25, Y+2	; 0x02
 774:	88 30       	cpi	r24, 0x08	; 8
 776:	91 05       	cpc	r25, r1
 778:	34 f3       	brlt	.-52     	; 0x746 <MCAL_Dio_WriteSinglePin+0x34>
						if (Pin_Num & (1 << i)) {
							bitNumber = i;
							break;
						}
					}
			switch(Dio_WritePin->port_num)
 77a:	ed 81       	ldd	r30, Y+5	; 0x05
 77c:	fe 81       	ldd	r31, Y+6	; 0x06
 77e:	80 81       	ld	r24, Z
 780:	28 2f       	mov	r18, r24
 782:	30 e0       	ldi	r19, 0x00	; 0
 784:	3a 87       	std	Y+10, r19	; 0x0a
 786:	29 87       	std	Y+9, r18	; 0x09
 788:	89 85       	ldd	r24, Y+9	; 0x09
 78a:	9a 85       	ldd	r25, Y+10	; 0x0a
 78c:	81 30       	cpi	r24, 0x01	; 1
 78e:	91 05       	cpc	r25, r1
 790:	09 f4       	brne	.+2      	; 0x794 <MCAL_Dio_WriteSinglePin+0x82>
 792:	43 c0       	rjmp	.+134    	; 0x81a <MCAL_Dio_WriteSinglePin+0x108>
 794:	29 85       	ldd	r18, Y+9	; 0x09
 796:	3a 85       	ldd	r19, Y+10	; 0x0a
 798:	22 30       	cpi	r18, 0x02	; 2
 79a:	31 05       	cpc	r19, r1
 79c:	2c f4       	brge	.+10     	; 0x7a8 <MCAL_Dio_WriteSinglePin+0x96>
 79e:	89 85       	ldd	r24, Y+9	; 0x09
 7a0:	9a 85       	ldd	r25, Y+10	; 0x0a
 7a2:	00 97       	sbiw	r24, 0x00	; 0
 7a4:	71 f0       	breq	.+28     	; 0x7c2 <MCAL_Dio_WriteSinglePin+0xb0>
 7a6:	bc c0       	rjmp	.+376    	; 0x920 <__stack+0xc1>
 7a8:	29 85       	ldd	r18, Y+9	; 0x09
 7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
 7ac:	22 30       	cpi	r18, 0x02	; 2
 7ae:	31 05       	cpc	r19, r1
 7b0:	09 f4       	brne	.+2      	; 0x7b4 <MCAL_Dio_WriteSinglePin+0xa2>
 7b2:	5f c0       	rjmp	.+190    	; 0x872 <__stack+0x13>
 7b4:	89 85       	ldd	r24, Y+9	; 0x09
 7b6:	9a 85       	ldd	r25, Y+10	; 0x0a
 7b8:	83 30       	cpi	r24, 0x03	; 3
 7ba:	91 05       	cpc	r25, r1
 7bc:	09 f4       	brne	.+2      	; 0x7c0 <MCAL_Dio_WriteSinglePin+0xae>
 7be:	85 c0       	rjmp	.+266    	; 0x8ca <__stack+0x6b>
 7c0:	af c0       	rjmp	.+350    	; 0x920 <__stack+0xc1>
					{
					case PORTA_ID:
						if(Pin_value == LOGIC_HIGH) // compare with one as i define LOGIC_HIGH 1 in DIO_std but ican't use it
 7c2:	88 85       	ldd	r24, Y+8	; 0x08
 7c4:	81 30       	cpi	r24, 0x01	; 1
 7c6:	a1 f4       	brne	.+40     	; 0x7f0 <MCAL_Dio_WriteSinglePin+0xde>
						{
							SET_BIT(DIO_PORTA,bitNumber);
 7c8:	ab e3       	ldi	r26, 0x3B	; 59
 7ca:	b0 e0       	ldi	r27, 0x00	; 0
 7cc:	eb e3       	ldi	r30, 0x3B	; 59
 7ce:	f0 e0       	ldi	r31, 0x00	; 0
 7d0:	80 81       	ld	r24, Z
 7d2:	48 2f       	mov	r20, r24
 7d4:	8b 81       	ldd	r24, Y+3	; 0x03
 7d6:	28 2f       	mov	r18, r24
 7d8:	30 e0       	ldi	r19, 0x00	; 0
 7da:	81 e0       	ldi	r24, 0x01	; 1
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	02 2e       	mov	r0, r18
 7e0:	02 c0       	rjmp	.+4      	; 0x7e6 <MCAL_Dio_WriteSinglePin+0xd4>
 7e2:	88 0f       	add	r24, r24
 7e4:	99 1f       	adc	r25, r25
 7e6:	0a 94       	dec	r0
 7e8:	e2 f7       	brpl	.-8      	; 0x7e2 <MCAL_Dio_WriteSinglePin+0xd0>
 7ea:	84 2b       	or	r24, r20
 7ec:	8c 93       	st	X, r24
 7ee:	98 c0       	rjmp	.+304    	; 0x920 <__stack+0xc1>
						}
						else
						{
							CLEAR_BIT(DIO_PORTA,bitNumber);
 7f0:	ab e3       	ldi	r26, 0x3B	; 59
 7f2:	b0 e0       	ldi	r27, 0x00	; 0
 7f4:	eb e3       	ldi	r30, 0x3B	; 59
 7f6:	f0 e0       	ldi	r31, 0x00	; 0
 7f8:	80 81       	ld	r24, Z
 7fa:	48 2f       	mov	r20, r24
 7fc:	8b 81       	ldd	r24, Y+3	; 0x03
 7fe:	28 2f       	mov	r18, r24
 800:	30 e0       	ldi	r19, 0x00	; 0
 802:	81 e0       	ldi	r24, 0x01	; 1
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	02 2e       	mov	r0, r18
 808:	02 c0       	rjmp	.+4      	; 0x80e <MCAL_Dio_WriteSinglePin+0xfc>
 80a:	88 0f       	add	r24, r24
 80c:	99 1f       	adc	r25, r25
 80e:	0a 94       	dec	r0
 810:	e2 f7       	brpl	.-8      	; 0x80a <MCAL_Dio_WriteSinglePin+0xf8>
 812:	80 95       	com	r24
 814:	84 23       	and	r24, r20
 816:	8c 93       	st	X, r24
 818:	83 c0       	rjmp	.+262    	; 0x920 <__stack+0xc1>
						}
						break;
					case PORTB_ID:
						if(Pin_value == LOGIC_HIGH)
 81a:	88 85       	ldd	r24, Y+8	; 0x08
 81c:	81 30       	cpi	r24, 0x01	; 1
 81e:	a1 f4       	brne	.+40     	; 0x848 <MCAL_Dio_WriteSinglePin+0x136>
						{
							SET_BIT(DIO_PORTB,bitNumber);
 820:	a8 e3       	ldi	r26, 0x38	; 56
 822:	b0 e0       	ldi	r27, 0x00	; 0
 824:	e8 e3       	ldi	r30, 0x38	; 56
 826:	f0 e0       	ldi	r31, 0x00	; 0
 828:	80 81       	ld	r24, Z
 82a:	48 2f       	mov	r20, r24
 82c:	8b 81       	ldd	r24, Y+3	; 0x03
 82e:	28 2f       	mov	r18, r24
 830:	30 e0       	ldi	r19, 0x00	; 0
 832:	81 e0       	ldi	r24, 0x01	; 1
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	02 2e       	mov	r0, r18
 838:	02 c0       	rjmp	.+4      	; 0x83e <MCAL_Dio_WriteSinglePin+0x12c>
 83a:	88 0f       	add	r24, r24
 83c:	99 1f       	adc	r25, r25
 83e:	0a 94       	dec	r0
 840:	e2 f7       	brpl	.-8      	; 0x83a <MCAL_Dio_WriteSinglePin+0x128>
 842:	84 2b       	or	r24, r20
 844:	8c 93       	st	X, r24
 846:	6c c0       	rjmp	.+216    	; 0x920 <__stack+0xc1>
						}
						else
						{
							CLEAR_BIT(DIO_PORTB,bitNumber);
 848:	a8 e3       	ldi	r26, 0x38	; 56
 84a:	b0 e0       	ldi	r27, 0x00	; 0
 84c:	e8 e3       	ldi	r30, 0x38	; 56
 84e:	f0 e0       	ldi	r31, 0x00	; 0
 850:	80 81       	ld	r24, Z
 852:	48 2f       	mov	r20, r24
 854:	8b 81       	ldd	r24, Y+3	; 0x03
 856:	28 2f       	mov	r18, r24
 858:	30 e0       	ldi	r19, 0x00	; 0
 85a:	81 e0       	ldi	r24, 0x01	; 1
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	02 2e       	mov	r0, r18
 860:	02 c0       	rjmp	.+4      	; 0x866 <__stack+0x7>
 862:	88 0f       	add	r24, r24
 864:	99 1f       	adc	r25, r25
 866:	0a 94       	dec	r0
 868:	e2 f7       	brpl	.-8      	; 0x862 <__stack+0x3>
 86a:	80 95       	com	r24
 86c:	84 23       	and	r24, r20
 86e:	8c 93       	st	X, r24
 870:	57 c0       	rjmp	.+174    	; 0x920 <__stack+0xc1>
						}
						break;
					case PORTC_ID:
						if(Pin_value == LOGIC_HIGH)
 872:	88 85       	ldd	r24, Y+8	; 0x08
 874:	81 30       	cpi	r24, 0x01	; 1
 876:	a1 f4       	brne	.+40     	; 0x8a0 <__stack+0x41>
						{
							SET_BIT(DIO_PORTC,bitNumber);
 878:	a5 e3       	ldi	r26, 0x35	; 53
 87a:	b0 e0       	ldi	r27, 0x00	; 0
 87c:	e5 e3       	ldi	r30, 0x35	; 53
 87e:	f0 e0       	ldi	r31, 0x00	; 0
 880:	80 81       	ld	r24, Z
 882:	48 2f       	mov	r20, r24
 884:	8b 81       	ldd	r24, Y+3	; 0x03
 886:	28 2f       	mov	r18, r24
 888:	30 e0       	ldi	r19, 0x00	; 0
 88a:	81 e0       	ldi	r24, 0x01	; 1
 88c:	90 e0       	ldi	r25, 0x00	; 0
 88e:	02 2e       	mov	r0, r18
 890:	02 c0       	rjmp	.+4      	; 0x896 <__stack+0x37>
 892:	88 0f       	add	r24, r24
 894:	99 1f       	adc	r25, r25
 896:	0a 94       	dec	r0
 898:	e2 f7       	brpl	.-8      	; 0x892 <__stack+0x33>
 89a:	84 2b       	or	r24, r20
 89c:	8c 93       	st	X, r24
 89e:	40 c0       	rjmp	.+128    	; 0x920 <__stack+0xc1>
						}
						else
						{
							CLEAR_BIT(DIO_PORTC,bitNumber);
 8a0:	a5 e3       	ldi	r26, 0x35	; 53
 8a2:	b0 e0       	ldi	r27, 0x00	; 0
 8a4:	e5 e3       	ldi	r30, 0x35	; 53
 8a6:	f0 e0       	ldi	r31, 0x00	; 0
 8a8:	80 81       	ld	r24, Z
 8aa:	48 2f       	mov	r20, r24
 8ac:	8b 81       	ldd	r24, Y+3	; 0x03
 8ae:	28 2f       	mov	r18, r24
 8b0:	30 e0       	ldi	r19, 0x00	; 0
 8b2:	81 e0       	ldi	r24, 0x01	; 1
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	02 2e       	mov	r0, r18
 8b8:	02 c0       	rjmp	.+4      	; 0x8be <__stack+0x5f>
 8ba:	88 0f       	add	r24, r24
 8bc:	99 1f       	adc	r25, r25
 8be:	0a 94       	dec	r0
 8c0:	e2 f7       	brpl	.-8      	; 0x8ba <__stack+0x5b>
 8c2:	80 95       	com	r24
 8c4:	84 23       	and	r24, r20
 8c6:	8c 93       	st	X, r24
 8c8:	2b c0       	rjmp	.+86     	; 0x920 <__stack+0xc1>
						}
						break;
					case PORTD_ID:
						if(Pin_value == LOGIC_HIGH)
 8ca:	88 85       	ldd	r24, Y+8	; 0x08
 8cc:	81 30       	cpi	r24, 0x01	; 1
 8ce:	a1 f4       	brne	.+40     	; 0x8f8 <__stack+0x99>
						{
							SET_BIT(DIO_PORTD,bitNumber);
 8d0:	a2 e3       	ldi	r26, 0x32	; 50
 8d2:	b0 e0       	ldi	r27, 0x00	; 0
 8d4:	e2 e3       	ldi	r30, 0x32	; 50
 8d6:	f0 e0       	ldi	r31, 0x00	; 0
 8d8:	80 81       	ld	r24, Z
 8da:	48 2f       	mov	r20, r24
 8dc:	8b 81       	ldd	r24, Y+3	; 0x03
 8de:	28 2f       	mov	r18, r24
 8e0:	30 e0       	ldi	r19, 0x00	; 0
 8e2:	81 e0       	ldi	r24, 0x01	; 1
 8e4:	90 e0       	ldi	r25, 0x00	; 0
 8e6:	02 2e       	mov	r0, r18
 8e8:	02 c0       	rjmp	.+4      	; 0x8ee <__stack+0x8f>
 8ea:	88 0f       	add	r24, r24
 8ec:	99 1f       	adc	r25, r25
 8ee:	0a 94       	dec	r0
 8f0:	e2 f7       	brpl	.-8      	; 0x8ea <__stack+0x8b>
 8f2:	84 2b       	or	r24, r20
 8f4:	8c 93       	st	X, r24
 8f6:	14 c0       	rjmp	.+40     	; 0x920 <__stack+0xc1>
						}
						else
						{
							CLEAR_BIT(DIO_PORTD,bitNumber);
 8f8:	a2 e3       	ldi	r26, 0x32	; 50
 8fa:	b0 e0       	ldi	r27, 0x00	; 0
 8fc:	e2 e3       	ldi	r30, 0x32	; 50
 8fe:	f0 e0       	ldi	r31, 0x00	; 0
 900:	80 81       	ld	r24, Z
 902:	48 2f       	mov	r20, r24
 904:	8b 81       	ldd	r24, Y+3	; 0x03
 906:	28 2f       	mov	r18, r24
 908:	30 e0       	ldi	r19, 0x00	; 0
 90a:	81 e0       	ldi	r24, 0x01	; 1
 90c:	90 e0       	ldi	r25, 0x00	; 0
 90e:	02 2e       	mov	r0, r18
 910:	02 c0       	rjmp	.+4      	; 0x916 <__stack+0xb7>
 912:	88 0f       	add	r24, r24
 914:	99 1f       	adc	r25, r25
 916:	0a 94       	dec	r0
 918:	e2 f7       	brpl	.-8      	; 0x912 <__stack+0xb3>
 91a:	80 95       	com	r24
 91c:	84 23       	and	r24, r20
 91e:	8c 93       	st	X, r24
						break;
		}

		}

		return error;
 920:	8c 81       	ldd	r24, Y+4	; 0x04

}
 922:	2a 96       	adiw	r28, 0x0a	; 10
 924:	0f b6       	in	r0, 0x3f	; 63
 926:	f8 94       	cli
 928:	de bf       	out	0x3e, r29	; 62
 92a:	0f be       	out	0x3f, r0	; 63
 92c:	cd bf       	out	0x3d, r28	; 61
 92e:	cf 91       	pop	r28
 930:	df 91       	pop	r29
 932:	08 95       	ret

00000934 <MCAL_Dio_ReadSinglePin>:

E_ErrorType MCAL_Dio_ReadSinglePin(S_Dio *Dio_ReadPin,E_DioPin Pin_Num,u8PinValue *Pin_Value)
{
 934:	df 93       	push	r29
 936:	cf 93       	push	r28
 938:	cd b7       	in	r28, 0x3d	; 61
 93a:	de b7       	in	r29, 0x3e	; 62
 93c:	2b 97       	sbiw	r28, 0x0b	; 11
 93e:	0f b6       	in	r0, 0x3f	; 63
 940:	f8 94       	cli
 942:	de bf       	out	0x3e, r29	; 62
 944:	0f be       	out	0x3f, r0	; 63
 946:	cd bf       	out	0x3d, r28	; 61
 948:	9e 83       	std	Y+6, r25	; 0x06
 94a:	8d 83       	std	Y+5, r24	; 0x05
 94c:	6f 83       	std	Y+7, r22	; 0x07
 94e:	59 87       	std	Y+9, r21	; 0x09
 950:	48 87       	std	Y+8, r20	; 0x08
	E_ErrorType error = E_OK;
 952:	1c 82       	std	Y+4, r1	; 0x04
	{
		error = E_NOT_OK;


	}
	else if(Dio_ReadPin->port_num >= DIO_CONFIGURED_PORTS)
 954:	ed 81       	ldd	r30, Y+5	; 0x05
 956:	fe 81       	ldd	r31, Y+6	; 0x06
 958:	80 81       	ld	r24, Z
 95a:	84 30       	cpi	r24, 0x04	; 4
 95c:	18 f0       	brcs	.+6      	; 0x964 <MCAL_Dio_ReadSinglePin+0x30>
	{

		error = E_NOT_OK;
 95e:	81 e0       	ldi	r24, 0x01	; 1
 960:	8c 83       	std	Y+4, r24	; 0x04
 962:	8f c0       	rjmp	.+286    	; 0xa82 <MCAL_Dio_ReadSinglePin+0x14e>

	}
	else
	{
		for (int i = 0; i < DIO_CONFIGURED_PINS; i++) {
 964:	1a 82       	std	Y+2, r1	; 0x02
 966:	19 82       	std	Y+1, r1	; 0x01
 968:	15 c0       	rjmp	.+42     	; 0x994 <MCAL_Dio_ReadSinglePin+0x60>
			if (Pin_Num & (1 << i)) {
 96a:	8f 81       	ldd	r24, Y+7	; 0x07
 96c:	88 2f       	mov	r24, r24
 96e:	90 e0       	ldi	r25, 0x00	; 0
 970:	09 80       	ldd	r0, Y+1	; 0x01
 972:	02 c0       	rjmp	.+4      	; 0x978 <MCAL_Dio_ReadSinglePin+0x44>
 974:	95 95       	asr	r25
 976:	87 95       	ror	r24
 978:	0a 94       	dec	r0
 97a:	e2 f7       	brpl	.-8      	; 0x974 <MCAL_Dio_ReadSinglePin+0x40>
 97c:	81 70       	andi	r24, 0x01	; 1
 97e:	90 70       	andi	r25, 0x00	; 0
 980:	88 23       	and	r24, r24
 982:	19 f0       	breq	.+6      	; 0x98a <MCAL_Dio_ReadSinglePin+0x56>
				bitNumber = i;
 984:	89 81       	ldd	r24, Y+1	; 0x01
 986:	8b 83       	std	Y+3, r24	; 0x03
 988:	0a c0       	rjmp	.+20     	; 0x99e <MCAL_Dio_ReadSinglePin+0x6a>
		error = E_NOT_OK;

	}
	else
	{
		for (int i = 0; i < DIO_CONFIGURED_PINS; i++) {
 98a:	89 81       	ldd	r24, Y+1	; 0x01
 98c:	9a 81       	ldd	r25, Y+2	; 0x02
 98e:	01 96       	adiw	r24, 0x01	; 1
 990:	9a 83       	std	Y+2, r25	; 0x02
 992:	89 83       	std	Y+1, r24	; 0x01
 994:	89 81       	ldd	r24, Y+1	; 0x01
 996:	9a 81       	ldd	r25, Y+2	; 0x02
 998:	88 30       	cpi	r24, 0x08	; 8
 99a:	91 05       	cpc	r25, r1
 99c:	34 f3       	brlt	.-52     	; 0x96a <MCAL_Dio_ReadSinglePin+0x36>
			if (Pin_Num & (1 << i)) {
				bitNumber = i;
				break;
			}
		}
		switch(Dio_ReadPin->port_num)
 99e:	ed 81       	ldd	r30, Y+5	; 0x05
 9a0:	fe 81       	ldd	r31, Y+6	; 0x06
 9a2:	80 81       	ld	r24, Z
 9a4:	28 2f       	mov	r18, r24
 9a6:	30 e0       	ldi	r19, 0x00	; 0
 9a8:	3b 87       	std	Y+11, r19	; 0x0b
 9aa:	2a 87       	std	Y+10, r18	; 0x0a
 9ac:	4a 85       	ldd	r20, Y+10	; 0x0a
 9ae:	5b 85       	ldd	r21, Y+11	; 0x0b
 9b0:	41 30       	cpi	r20, 0x01	; 1
 9b2:	51 05       	cpc	r21, r1
 9b4:	59 f1       	breq	.+86     	; 0xa0c <MCAL_Dio_ReadSinglePin+0xd8>
 9b6:	8a 85       	ldd	r24, Y+10	; 0x0a
 9b8:	9b 85       	ldd	r25, Y+11	; 0x0b
 9ba:	82 30       	cpi	r24, 0x02	; 2
 9bc:	91 05       	cpc	r25, r1
 9be:	34 f4       	brge	.+12     	; 0x9cc <MCAL_Dio_ReadSinglePin+0x98>
 9c0:	2a 85       	ldd	r18, Y+10	; 0x0a
 9c2:	3b 85       	ldd	r19, Y+11	; 0x0b
 9c4:	21 15       	cp	r18, r1
 9c6:	31 05       	cpc	r19, r1
 9c8:	69 f0       	breq	.+26     	; 0x9e4 <MCAL_Dio_ReadSinglePin+0xb0>
 9ca:	5b c0       	rjmp	.+182    	; 0xa82 <MCAL_Dio_ReadSinglePin+0x14e>
 9cc:	4a 85       	ldd	r20, Y+10	; 0x0a
 9ce:	5b 85       	ldd	r21, Y+11	; 0x0b
 9d0:	42 30       	cpi	r20, 0x02	; 2
 9d2:	51 05       	cpc	r21, r1
 9d4:	79 f1       	breq	.+94     	; 0xa34 <MCAL_Dio_ReadSinglePin+0x100>
 9d6:	8a 85       	ldd	r24, Y+10	; 0x0a
 9d8:	9b 85       	ldd	r25, Y+11	; 0x0b
 9da:	83 30       	cpi	r24, 0x03	; 3
 9dc:	91 05       	cpc	r25, r1
 9de:	09 f4       	brne	.+2      	; 0x9e2 <MCAL_Dio_ReadSinglePin+0xae>
 9e0:	3d c0       	rjmp	.+122    	; 0xa5c <MCAL_Dio_ReadSinglePin+0x128>
 9e2:	4f c0       	rjmp	.+158    	; 0xa82 <MCAL_Dio_ReadSinglePin+0x14e>
				{
				case PORTA_ID:
					*Pin_Value = GET_BIT(DIO_PINA,bitNumber);
 9e4:	e9 e3       	ldi	r30, 0x39	; 57
 9e6:	f0 e0       	ldi	r31, 0x00	; 0
 9e8:	80 81       	ld	r24, Z
 9ea:	28 2f       	mov	r18, r24
 9ec:	30 e0       	ldi	r19, 0x00	; 0
 9ee:	8b 81       	ldd	r24, Y+3	; 0x03
 9f0:	88 2f       	mov	r24, r24
 9f2:	90 e0       	ldi	r25, 0x00	; 0
 9f4:	a9 01       	movw	r20, r18
 9f6:	02 c0       	rjmp	.+4      	; 0x9fc <MCAL_Dio_ReadSinglePin+0xc8>
 9f8:	55 95       	asr	r21
 9fa:	47 95       	ror	r20
 9fc:	8a 95       	dec	r24
 9fe:	e2 f7       	brpl	.-8      	; 0x9f8 <MCAL_Dio_ReadSinglePin+0xc4>
 a00:	ca 01       	movw	r24, r20
 a02:	81 70       	andi	r24, 0x01	; 1
 a04:	e8 85       	ldd	r30, Y+8	; 0x08
 a06:	f9 85       	ldd	r31, Y+9	; 0x09
 a08:	80 83       	st	Z, r24
 a0a:	3b c0       	rjmp	.+118    	; 0xa82 <MCAL_Dio_ReadSinglePin+0x14e>
					break;
				case PORTB_ID:
					*Pin_Value = GET_BIT(DIO_PINB,bitNumber);
 a0c:	e6 e3       	ldi	r30, 0x36	; 54
 a0e:	f0 e0       	ldi	r31, 0x00	; 0
 a10:	80 81       	ld	r24, Z
 a12:	28 2f       	mov	r18, r24
 a14:	30 e0       	ldi	r19, 0x00	; 0
 a16:	8b 81       	ldd	r24, Y+3	; 0x03
 a18:	88 2f       	mov	r24, r24
 a1a:	90 e0       	ldi	r25, 0x00	; 0
 a1c:	a9 01       	movw	r20, r18
 a1e:	02 c0       	rjmp	.+4      	; 0xa24 <MCAL_Dio_ReadSinglePin+0xf0>
 a20:	55 95       	asr	r21
 a22:	47 95       	ror	r20
 a24:	8a 95       	dec	r24
 a26:	e2 f7       	brpl	.-8      	; 0xa20 <MCAL_Dio_ReadSinglePin+0xec>
 a28:	ca 01       	movw	r24, r20
 a2a:	81 70       	andi	r24, 0x01	; 1
 a2c:	e8 85       	ldd	r30, Y+8	; 0x08
 a2e:	f9 85       	ldd	r31, Y+9	; 0x09
 a30:	80 83       	st	Z, r24
 a32:	27 c0       	rjmp	.+78     	; 0xa82 <MCAL_Dio_ReadSinglePin+0x14e>
					break;
				case PORTC_ID:
					*Pin_Value = GET_BIT(DIO_PINC,bitNumber);
 a34:	e3 e3       	ldi	r30, 0x33	; 51
 a36:	f0 e0       	ldi	r31, 0x00	; 0
 a38:	80 81       	ld	r24, Z
 a3a:	28 2f       	mov	r18, r24
 a3c:	30 e0       	ldi	r19, 0x00	; 0
 a3e:	8b 81       	ldd	r24, Y+3	; 0x03
 a40:	88 2f       	mov	r24, r24
 a42:	90 e0       	ldi	r25, 0x00	; 0
 a44:	a9 01       	movw	r20, r18
 a46:	02 c0       	rjmp	.+4      	; 0xa4c <MCAL_Dio_ReadSinglePin+0x118>
 a48:	55 95       	asr	r21
 a4a:	47 95       	ror	r20
 a4c:	8a 95       	dec	r24
 a4e:	e2 f7       	brpl	.-8      	; 0xa48 <MCAL_Dio_ReadSinglePin+0x114>
 a50:	ca 01       	movw	r24, r20
 a52:	81 70       	andi	r24, 0x01	; 1
 a54:	e8 85       	ldd	r30, Y+8	; 0x08
 a56:	f9 85       	ldd	r31, Y+9	; 0x09
 a58:	80 83       	st	Z, r24
 a5a:	13 c0       	rjmp	.+38     	; 0xa82 <MCAL_Dio_ReadSinglePin+0x14e>
					break;
				case PORTD_ID:
					*Pin_Value = GET_BIT(DIO_PIND,bitNumber);
 a5c:	e0 e3       	ldi	r30, 0x30	; 48
 a5e:	f0 e0       	ldi	r31, 0x00	; 0
 a60:	80 81       	ld	r24, Z
 a62:	28 2f       	mov	r18, r24
 a64:	30 e0       	ldi	r19, 0x00	; 0
 a66:	8b 81       	ldd	r24, Y+3	; 0x03
 a68:	88 2f       	mov	r24, r24
 a6a:	90 e0       	ldi	r25, 0x00	; 0
 a6c:	a9 01       	movw	r20, r18
 a6e:	02 c0       	rjmp	.+4      	; 0xa74 <MCAL_Dio_ReadSinglePin+0x140>
 a70:	55 95       	asr	r21
 a72:	47 95       	ror	r20
 a74:	8a 95       	dec	r24
 a76:	e2 f7       	brpl	.-8      	; 0xa70 <MCAL_Dio_ReadSinglePin+0x13c>
 a78:	ca 01       	movw	r24, r20
 a7a:	81 70       	andi	r24, 0x01	; 1
 a7c:	e8 85       	ldd	r30, Y+8	; 0x08
 a7e:	f9 85       	ldd	r31, Y+9	; 0x09
 a80:	80 83       	st	Z, r24
					break;
				}
	}
	return error;
 a82:	8c 81       	ldd	r24, Y+4	; 0x04
}
 a84:	2b 96       	adiw	r28, 0x0b	; 11
 a86:	0f b6       	in	r0, 0x3f	; 63
 a88:	f8 94       	cli
 a8a:	de bf       	out	0x3e, r29	; 62
 a8c:	0f be       	out	0x3f, r0	; 63
 a8e:	cd bf       	out	0x3d, r28	; 61
 a90:	cf 91       	pop	r28
 a92:	df 91       	pop	r29
 a94:	08 95       	ret

00000a96 <MCAL_Dio_TogglePin>:

E_ErrorType MCAL_Dio_TogglePin(S_Dio *Dio_TogglePin,E_DioPin Pin_Num)
{
 a96:	df 93       	push	r29
 a98:	cf 93       	push	r28
 a9a:	cd b7       	in	r28, 0x3d	; 61
 a9c:	de b7       	in	r29, 0x3e	; 62
 a9e:	29 97       	sbiw	r28, 0x09	; 9
 aa0:	0f b6       	in	r0, 0x3f	; 63
 aa2:	f8 94       	cli
 aa4:	de bf       	out	0x3e, r29	; 62
 aa6:	0f be       	out	0x3f, r0	; 63
 aa8:	cd bf       	out	0x3d, r28	; 61
 aaa:	9e 83       	std	Y+6, r25	; 0x06
 aac:	8d 83       	std	Y+5, r24	; 0x05
 aae:	6f 83       	std	Y+7, r22	; 0x07

	E_ErrorType error = E_OK;
 ab0:	1c 82       	std	Y+4, r1	; 0x04
	{
		error = E_NOT_OK;


	}
	else if(Dio_TogglePin->port_num >= DIO_CONFIGURED_PORTS)
 ab2:	ed 81       	ldd	r30, Y+5	; 0x05
 ab4:	fe 81       	ldd	r31, Y+6	; 0x06
 ab6:	80 81       	ld	r24, Z
 ab8:	84 30       	cpi	r24, 0x04	; 4
 aba:	18 f0       	brcs	.+6      	; 0xac2 <MCAL_Dio_TogglePin+0x2c>
	{

		error = E_NOT_OK;
 abc:	81 e0       	ldi	r24, 0x01	; 1
 abe:	8c 83       	std	Y+4, r24	; 0x04
 ac0:	8d c0       	rjmp	.+282    	; 0xbdc <MCAL_Dio_TogglePin+0x146>

	}
	else
	{
		for (int i = 0; i < DIO_CONFIGURED_PINS; i++) {
 ac2:	1a 82       	std	Y+2, r1	; 0x02
 ac4:	19 82       	std	Y+1, r1	; 0x01
 ac6:	15 c0       	rjmp	.+42     	; 0xaf2 <MCAL_Dio_TogglePin+0x5c>
			if (Pin_Num & (1 << i)) {
 ac8:	8f 81       	ldd	r24, Y+7	; 0x07
 aca:	88 2f       	mov	r24, r24
 acc:	90 e0       	ldi	r25, 0x00	; 0
 ace:	09 80       	ldd	r0, Y+1	; 0x01
 ad0:	02 c0       	rjmp	.+4      	; 0xad6 <MCAL_Dio_TogglePin+0x40>
 ad2:	95 95       	asr	r25
 ad4:	87 95       	ror	r24
 ad6:	0a 94       	dec	r0
 ad8:	e2 f7       	brpl	.-8      	; 0xad2 <MCAL_Dio_TogglePin+0x3c>
 ada:	81 70       	andi	r24, 0x01	; 1
 adc:	90 70       	andi	r25, 0x00	; 0
 ade:	88 23       	and	r24, r24
 ae0:	19 f0       	breq	.+6      	; 0xae8 <MCAL_Dio_TogglePin+0x52>
				bitNumber = i;
 ae2:	89 81       	ldd	r24, Y+1	; 0x01
 ae4:	8b 83       	std	Y+3, r24	; 0x03
 ae6:	0a c0       	rjmp	.+20     	; 0xafc <MCAL_Dio_TogglePin+0x66>
		error = E_NOT_OK;

	}
	else
	{
		for (int i = 0; i < DIO_CONFIGURED_PINS; i++) {
 ae8:	89 81       	ldd	r24, Y+1	; 0x01
 aea:	9a 81       	ldd	r25, Y+2	; 0x02
 aec:	01 96       	adiw	r24, 0x01	; 1
 aee:	9a 83       	std	Y+2, r25	; 0x02
 af0:	89 83       	std	Y+1, r24	; 0x01
 af2:	89 81       	ldd	r24, Y+1	; 0x01
 af4:	9a 81       	ldd	r25, Y+2	; 0x02
 af6:	88 30       	cpi	r24, 0x08	; 8
 af8:	91 05       	cpc	r25, r1
 afa:	34 f3       	brlt	.-52     	; 0xac8 <MCAL_Dio_TogglePin+0x32>
				bitNumber = i;
				break;
			}
		}

		switch (Dio_TogglePin->port_num)
 afc:	ed 81       	ldd	r30, Y+5	; 0x05
 afe:	fe 81       	ldd	r31, Y+6	; 0x06
 b00:	80 81       	ld	r24, Z
 b02:	28 2f       	mov	r18, r24
 b04:	30 e0       	ldi	r19, 0x00	; 0
 b06:	39 87       	std	Y+9, r19	; 0x09
 b08:	28 87       	std	Y+8, r18	; 0x08
 b0a:	88 85       	ldd	r24, Y+8	; 0x08
 b0c:	99 85       	ldd	r25, Y+9	; 0x09
 b0e:	81 30       	cpi	r24, 0x01	; 1
 b10:	91 05       	cpc	r25, r1
 b12:	49 f1       	breq	.+82     	; 0xb66 <MCAL_Dio_TogglePin+0xd0>
 b14:	28 85       	ldd	r18, Y+8	; 0x08
 b16:	39 85       	ldd	r19, Y+9	; 0x09
 b18:	22 30       	cpi	r18, 0x02	; 2
 b1a:	31 05       	cpc	r19, r1
 b1c:	2c f4       	brge	.+10     	; 0xb28 <MCAL_Dio_TogglePin+0x92>
 b1e:	88 85       	ldd	r24, Y+8	; 0x08
 b20:	99 85       	ldd	r25, Y+9	; 0x09
 b22:	00 97       	sbiw	r24, 0x00	; 0
 b24:	61 f0       	breq	.+24     	; 0xb3e <MCAL_Dio_TogglePin+0xa8>
 b26:	5a c0       	rjmp	.+180    	; 0xbdc <MCAL_Dio_TogglePin+0x146>
 b28:	28 85       	ldd	r18, Y+8	; 0x08
 b2a:	39 85       	ldd	r19, Y+9	; 0x09
 b2c:	22 30       	cpi	r18, 0x02	; 2
 b2e:	31 05       	cpc	r19, r1
 b30:	71 f1       	breq	.+92     	; 0xb8e <MCAL_Dio_TogglePin+0xf8>
 b32:	88 85       	ldd	r24, Y+8	; 0x08
 b34:	99 85       	ldd	r25, Y+9	; 0x09
 b36:	83 30       	cpi	r24, 0x03	; 3
 b38:	91 05       	cpc	r25, r1
 b3a:	e9 f1       	breq	.+122    	; 0xbb6 <MCAL_Dio_TogglePin+0x120>
 b3c:	4f c0       	rjmp	.+158    	; 0xbdc <MCAL_Dio_TogglePin+0x146>
		{
		case PORTA_ID:
			DIO_PORTA = DIO_PORTA ^ (1<<bitNumber);
 b3e:	ab e3       	ldi	r26, 0x3B	; 59
 b40:	b0 e0       	ldi	r27, 0x00	; 0
 b42:	eb e3       	ldi	r30, 0x3B	; 59
 b44:	f0 e0       	ldi	r31, 0x00	; 0
 b46:	80 81       	ld	r24, Z
 b48:	48 2f       	mov	r20, r24
 b4a:	8b 81       	ldd	r24, Y+3	; 0x03
 b4c:	28 2f       	mov	r18, r24
 b4e:	30 e0       	ldi	r19, 0x00	; 0
 b50:	81 e0       	ldi	r24, 0x01	; 1
 b52:	90 e0       	ldi	r25, 0x00	; 0
 b54:	02 2e       	mov	r0, r18
 b56:	02 c0       	rjmp	.+4      	; 0xb5c <MCAL_Dio_TogglePin+0xc6>
 b58:	88 0f       	add	r24, r24
 b5a:	99 1f       	adc	r25, r25
 b5c:	0a 94       	dec	r0
 b5e:	e2 f7       	brpl	.-8      	; 0xb58 <MCAL_Dio_TogglePin+0xc2>
 b60:	84 27       	eor	r24, r20
 b62:	8c 93       	st	X, r24
 b64:	3b c0       	rjmp	.+118    	; 0xbdc <MCAL_Dio_TogglePin+0x146>
			break;
		case PORTB_ID:
			DIO_PORTB = DIO_PORTB ^ (1<<bitNumber);
 b66:	a8 e3       	ldi	r26, 0x38	; 56
 b68:	b0 e0       	ldi	r27, 0x00	; 0
 b6a:	e8 e3       	ldi	r30, 0x38	; 56
 b6c:	f0 e0       	ldi	r31, 0x00	; 0
 b6e:	80 81       	ld	r24, Z
 b70:	48 2f       	mov	r20, r24
 b72:	8b 81       	ldd	r24, Y+3	; 0x03
 b74:	28 2f       	mov	r18, r24
 b76:	30 e0       	ldi	r19, 0x00	; 0
 b78:	81 e0       	ldi	r24, 0x01	; 1
 b7a:	90 e0       	ldi	r25, 0x00	; 0
 b7c:	02 2e       	mov	r0, r18
 b7e:	02 c0       	rjmp	.+4      	; 0xb84 <MCAL_Dio_TogglePin+0xee>
 b80:	88 0f       	add	r24, r24
 b82:	99 1f       	adc	r25, r25
 b84:	0a 94       	dec	r0
 b86:	e2 f7       	brpl	.-8      	; 0xb80 <MCAL_Dio_TogglePin+0xea>
 b88:	84 27       	eor	r24, r20
 b8a:	8c 93       	st	X, r24
 b8c:	27 c0       	rjmp	.+78     	; 0xbdc <MCAL_Dio_TogglePin+0x146>
			break;
		case PORTC_ID:
			DIO_PORTB = DIO_PORTC ^ (1<<bitNumber);
 b8e:	a8 e3       	ldi	r26, 0x38	; 56
 b90:	b0 e0       	ldi	r27, 0x00	; 0
 b92:	e5 e3       	ldi	r30, 0x35	; 53
 b94:	f0 e0       	ldi	r31, 0x00	; 0
 b96:	80 81       	ld	r24, Z
 b98:	48 2f       	mov	r20, r24
 b9a:	8b 81       	ldd	r24, Y+3	; 0x03
 b9c:	28 2f       	mov	r18, r24
 b9e:	30 e0       	ldi	r19, 0x00	; 0
 ba0:	81 e0       	ldi	r24, 0x01	; 1
 ba2:	90 e0       	ldi	r25, 0x00	; 0
 ba4:	02 2e       	mov	r0, r18
 ba6:	02 c0       	rjmp	.+4      	; 0xbac <MCAL_Dio_TogglePin+0x116>
 ba8:	88 0f       	add	r24, r24
 baa:	99 1f       	adc	r25, r25
 bac:	0a 94       	dec	r0
 bae:	e2 f7       	brpl	.-8      	; 0xba8 <MCAL_Dio_TogglePin+0x112>
 bb0:	84 27       	eor	r24, r20
 bb2:	8c 93       	st	X, r24
 bb4:	13 c0       	rjmp	.+38     	; 0xbdc <MCAL_Dio_TogglePin+0x146>
			break;
		case PORTD_ID:
			DIO_PORTB = DIO_PORTD ^ (1<<bitNumber);
 bb6:	a8 e3       	ldi	r26, 0x38	; 56
 bb8:	b0 e0       	ldi	r27, 0x00	; 0
 bba:	e2 e3       	ldi	r30, 0x32	; 50
 bbc:	f0 e0       	ldi	r31, 0x00	; 0
 bbe:	80 81       	ld	r24, Z
 bc0:	48 2f       	mov	r20, r24
 bc2:	8b 81       	ldd	r24, Y+3	; 0x03
 bc4:	28 2f       	mov	r18, r24
 bc6:	30 e0       	ldi	r19, 0x00	; 0
 bc8:	81 e0       	ldi	r24, 0x01	; 1
 bca:	90 e0       	ldi	r25, 0x00	; 0
 bcc:	02 2e       	mov	r0, r18
 bce:	02 c0       	rjmp	.+4      	; 0xbd4 <MCAL_Dio_TogglePin+0x13e>
 bd0:	88 0f       	add	r24, r24
 bd2:	99 1f       	adc	r25, r25
 bd4:	0a 94       	dec	r0
 bd6:	e2 f7       	brpl	.-8      	; 0xbd0 <MCAL_Dio_TogglePin+0x13a>
 bd8:	84 27       	eor	r24, r20
 bda:	8c 93       	st	X, r24

			break;
		}
	}

	return error;
 bdc:	8c 81       	ldd	r24, Y+4	; 0x04

}
 bde:	29 96       	adiw	r28, 0x09	; 9
 be0:	0f b6       	in	r0, 0x3f	; 63
 be2:	f8 94       	cli
 be4:	de bf       	out	0x3e, r29	; 62
 be6:	0f be       	out	0x3f, r0	; 63
 be8:	cd bf       	out	0x3d, r28	; 61
 bea:	cf 91       	pop	r28
 bec:	df 91       	pop	r29
 bee:	08 95       	ret

00000bf0 <main>:

#define HIGH 1


int main()
{
 bf0:	df 93       	push	r29
 bf2:	cf 93       	push	r28
 bf4:	cd b7       	in	r28, 0x3d	; 61
 bf6:	de b7       	in	r29, 0x3e	; 62
 bf8:	6d 97       	sbiw	r28, 0x1d	; 29
 bfa:	0f b6       	in	r0, 0x3f	; 63
 bfc:	f8 94       	cli
 bfe:	de bf       	out	0x3e, r29	; 62
 c00:	0f be       	out	0x3f, r0	; 63
 c02:	cd bf       	out	0x3d, r28	; 61
	S_Dio s1;




	S_Dio P1={PORTC_ID,PIN1_ID |PIN7_ID ,OUTPUT};
 c04:	ce 01       	movw	r24, r28
 c06:	06 96       	adiw	r24, 0x06	; 6
 c08:	98 8b       	std	Y+16, r25	; 0x10
 c0a:	8f 87       	std	Y+15, r24	; 0x0f
 c0c:	e6 e6       	ldi	r30, 0x66	; 102
 c0e:	f0 e0       	ldi	r31, 0x00	; 0
 c10:	fa 8b       	std	Y+18, r31	; 0x12
 c12:	e9 8b       	std	Y+17, r30	; 0x11
 c14:	f3 e0       	ldi	r31, 0x03	; 3
 c16:	fb 8b       	std	Y+19, r31	; 0x13
 c18:	e9 89       	ldd	r30, Y+17	; 0x11
 c1a:	fa 89       	ldd	r31, Y+18	; 0x12
 c1c:	00 80       	ld	r0, Z
 c1e:	89 89       	ldd	r24, Y+17	; 0x11
 c20:	9a 89       	ldd	r25, Y+18	; 0x12
 c22:	01 96       	adiw	r24, 0x01	; 1
 c24:	9a 8b       	std	Y+18, r25	; 0x12
 c26:	89 8b       	std	Y+17, r24	; 0x11
 c28:	ef 85       	ldd	r30, Y+15	; 0x0f
 c2a:	f8 89       	ldd	r31, Y+16	; 0x10
 c2c:	00 82       	st	Z, r0
 c2e:	8f 85       	ldd	r24, Y+15	; 0x0f
 c30:	98 89       	ldd	r25, Y+16	; 0x10
 c32:	01 96       	adiw	r24, 0x01	; 1
 c34:	98 8b       	std	Y+16, r25	; 0x10
 c36:	8f 87       	std	Y+15, r24	; 0x0f
 c38:	9b 89       	ldd	r25, Y+19	; 0x13
 c3a:	91 50       	subi	r25, 0x01	; 1
 c3c:	9b 8b       	std	Y+19, r25	; 0x13
 c3e:	eb 89       	ldd	r30, Y+19	; 0x13
 c40:	ee 23       	and	r30, r30
 c42:	51 f7       	brne	.-44     	; 0xc18 <main+0x28>

	S_Dio p2={PORTB_ID,(PIN3_ID | PIN5_ID),OUTPUT };
 c44:	ce 01       	movw	r24, r28
 c46:	09 96       	adiw	r24, 0x09	; 9
 c48:	9d 8b       	std	Y+21, r25	; 0x15
 c4a:	8c 8b       	std	Y+20, r24	; 0x14
 c4c:	e3 e6       	ldi	r30, 0x63	; 99
 c4e:	f0 e0       	ldi	r31, 0x00	; 0
 c50:	ff 8b       	std	Y+23, r31	; 0x17
 c52:	ee 8b       	std	Y+22, r30	; 0x16
 c54:	f3 e0       	ldi	r31, 0x03	; 3
 c56:	f8 8f       	std	Y+24, r31	; 0x18
 c58:	ee 89       	ldd	r30, Y+22	; 0x16
 c5a:	ff 89       	ldd	r31, Y+23	; 0x17
 c5c:	00 80       	ld	r0, Z
 c5e:	8e 89       	ldd	r24, Y+22	; 0x16
 c60:	9f 89       	ldd	r25, Y+23	; 0x17
 c62:	01 96       	adiw	r24, 0x01	; 1
 c64:	9f 8b       	std	Y+23, r25	; 0x17
 c66:	8e 8b       	std	Y+22, r24	; 0x16
 c68:	ec 89       	ldd	r30, Y+20	; 0x14
 c6a:	fd 89       	ldd	r31, Y+21	; 0x15
 c6c:	00 82       	st	Z, r0
 c6e:	8c 89       	ldd	r24, Y+20	; 0x14
 c70:	9d 89       	ldd	r25, Y+21	; 0x15
 c72:	01 96       	adiw	r24, 0x01	; 1
 c74:	9d 8b       	std	Y+21, r25	; 0x15
 c76:	8c 8b       	std	Y+20, r24	; 0x14
 c78:	98 8d       	ldd	r25, Y+24	; 0x18
 c7a:	91 50       	subi	r25, 0x01	; 1
 c7c:	98 8f       	std	Y+24, r25	; 0x18
 c7e:	e8 8d       	ldd	r30, Y+24	; 0x18
 c80:	ee 23       	and	r30, r30
 c82:	51 f7       	brne	.-44     	; 0xc58 <main+0x68>
	S_Dio p3={PORTB_ID,(PIN5_ID| PIN7_ID|PIN4_ID),OUTPUT};
 c84:	ce 01       	movw	r24, r28
 c86:	0c 96       	adiw	r24, 0x0c	; 12
 c88:	9a 8f       	std	Y+26, r25	; 0x1a
 c8a:	89 8f       	std	Y+25, r24	; 0x19
 c8c:	e0 e6       	ldi	r30, 0x60	; 96
 c8e:	f0 e0       	ldi	r31, 0x00	; 0
 c90:	fc 8f       	std	Y+28, r31	; 0x1c
 c92:	eb 8f       	std	Y+27, r30	; 0x1b
 c94:	f3 e0       	ldi	r31, 0x03	; 3
 c96:	fd 8f       	std	Y+29, r31	; 0x1d
 c98:	eb 8d       	ldd	r30, Y+27	; 0x1b
 c9a:	fc 8d       	ldd	r31, Y+28	; 0x1c
 c9c:	00 80       	ld	r0, Z
 c9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
 ca0:	9c 8d       	ldd	r25, Y+28	; 0x1c
 ca2:	01 96       	adiw	r24, 0x01	; 1
 ca4:	9c 8f       	std	Y+28, r25	; 0x1c
 ca6:	8b 8f       	std	Y+27, r24	; 0x1b
 ca8:	e9 8d       	ldd	r30, Y+25	; 0x19
 caa:	fa 8d       	ldd	r31, Y+26	; 0x1a
 cac:	00 82       	st	Z, r0
 cae:	89 8d       	ldd	r24, Y+25	; 0x19
 cb0:	9a 8d       	ldd	r25, Y+26	; 0x1a
 cb2:	01 96       	adiw	r24, 0x01	; 1
 cb4:	9a 8f       	std	Y+26, r25	; 0x1a
 cb6:	89 8f       	std	Y+25, r24	; 0x19
 cb8:	9d 8d       	ldd	r25, Y+29	; 0x1d
 cba:	91 50       	subi	r25, 0x01	; 1
 cbc:	9d 8f       	std	Y+29, r25	; 0x1d
 cbe:	ed 8d       	ldd	r30, Y+29	; 0x1d
 cc0:	ee 23       	and	r30, r30
 cc2:	51 f7       	brne	.-44     	; 0xc98 <main+0xa8>
	u8PinValue *x;
	//x = 0xFF;
	//Dio_SetPortDirection(&P1);
	//Dio_ReadPort(PORTD_ID,x);
	//MCAL_Dio_Init(&p2);
	MCAL_Dio_Init(&p2);
 cc4:	ce 01       	movw	r24, r28
 cc6:	09 96       	adiw	r24, 0x09	; 9
 cc8:	0e 94 41 00 	call	0x82	; 0x82 <MCAL_Dio_Init>
 ccc:	ff cf       	rjmp	.-2      	; 0xccc <main+0xdc>

00000cce <_exit>:
 cce:	f8 94       	cli

00000cd0 <__stop_program>:
 cd0:	ff cf       	rjmp	.-2      	; 0xcd0 <__stop_program>
