
DC motor driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000366  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000366  000003da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003e2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000414  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c5c  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000754  00000000  00000000  0000115c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006ca  00000000  00000000  000018b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000130  00000000  00000000  00001f7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000423  00000000  00000000  000020ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000089d  00000000  00000000  000024cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00002d6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  40:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  54:	ce 00       	.word	0x00ce	; ????
  56:	e7 00       	.word	0x00e7	; ????
  58:	00 01       	movw	r0, r0
  5a:	19 01       	movw	r2, r18
  5c:	31 01       	movw	r6, r2
  5e:	31 01       	movw	r6, r2
  60:	31 01       	movw	r6, r2
  62:	31 01       	movw	r6, r2
  64:	31 01       	movw	r6, r2
  66:	31 01       	movw	r6, r2
  68:	31 01       	movw	r6, r2
  6a:	31 01       	movw	r6, r2
  6c:	31 01       	movw	r6, r2
  6e:	31 01       	movw	r6, r2
  70:	31 01       	movw	r6, r2
  72:	31 01       	movw	r6, r2
  74:	31 01       	movw	r6, r2
  76:	31 01       	movw	r6, r2
  78:	31 01       	movw	r6, r2
  7a:	31 01       	movw	r6, r2
  7c:	31 01       	movw	r6, r2
  7e:	31 01       	movw	r6, r2
  80:	31 01       	movw	r6, r2
  82:	31 01       	movw	r6, r2
  84:	31 01       	movw	r6, r2
  86:	31 01       	movw	r6, r2
  88:	31 01       	movw	r6, r2
  8a:	31 01       	movw	r6, r2
  8c:	31 01       	movw	r6, r2
  8e:	31 01       	movw	r6, r2
  90:	31 01       	movw	r6, r2
  92:	31 01       	movw	r6, r2
  94:	ce 00       	.word	0x00ce	; ????
  96:	e7 00       	.word	0x00e7	; ????
  98:	00 01       	movw	r0, r0
  9a:	19 01       	movw	r2, r18
  9c:	3e 01       	movw	r6, r28
  9e:	57 01       	movw	r10, r14
  a0:	70 01       	movw	r14, r0
  a2:	89 01       	movw	r16, r18
  a4:	a1 01       	movw	r20, r2
  a6:	a1 01       	movw	r20, r2
  a8:	a1 01       	movw	r20, r2
  aa:	a1 01       	movw	r20, r2
  ac:	a1 01       	movw	r20, r2
  ae:	a1 01       	movw	r20, r2
  b0:	a1 01       	movw	r20, r2
  b2:	a1 01       	movw	r20, r2
  b4:	a1 01       	movw	r20, r2
  b6:	a1 01       	movw	r20, r2
  b8:	a1 01       	movw	r20, r2
  ba:	a1 01       	movw	r20, r2
  bc:	a1 01       	movw	r20, r2
  be:	a1 01       	movw	r20, r2
  c0:	a1 01       	movw	r20, r2
  c2:	a1 01       	movw	r20, r2
  c4:	a1 01       	movw	r20, r2
  c6:	a1 01       	movw	r20, r2
  c8:	a1 01       	movw	r20, r2
  ca:	a1 01       	movw	r20, r2
  cc:	a1 01       	movw	r20, r2
  ce:	a1 01       	movw	r20, r2
  d0:	a1 01       	movw	r20, r2
  d2:	a1 01       	movw	r20, r2
  d4:	a1 01       	movw	r20, r2
  d6:	a1 01       	movw	r20, r2
  d8:	a1 01       	movw	r20, r2
  da:	a1 01       	movw	r20, r2
  dc:	3e 01       	movw	r6, r28
  de:	57 01       	movw	r10, r14
  e0:	70 01       	movw	r14, r0
  e2:	89 01       	movw	r16, r18

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf e5       	ldi	r28, 0x5F	; 95
  ea:	d8 e0       	ldi	r29, 0x08	; 8
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	10 e0       	ldi	r17, 0x00	; 0
  f2:	a0 e6       	ldi	r26, 0x60	; 96
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	e6 e6       	ldi	r30, 0x66	; 102
  f8:	f3 e0       	ldi	r31, 0x03	; 3
  fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
  fc:	05 90       	lpm	r0, Z+
  fe:	0d 92       	st	X+, r0
 100:	a8 36       	cpi	r26, 0x68	; 104
 102:	b1 07       	cpc	r27, r17
 104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>
 106:	0e 94 a2 01 	call	0x344	; 0x344 <main>
 10a:	0c 94 b1 01 	jmp	0x362	; 0x362 <_exit>

0000010e <__bad_interrupt>:
 10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <HAL_DCMOTOR_Einit>:
#include "DIO.h"
#include "common_macros.h"
#include <avr/io.h>

void HAL_DCMOTOR_Einit(S_DCMOTOR* S_DC)
{	//make sure that PWM is the OC0 PIN PB3 if you want half the speed
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	ec 01       	movw	r28, r24
	DIO_vsetbitdir(S_DC->PWM_port,S_DC->PWM_pin,1);//set dc motor driver PWM SIGNAL as avr output
 118:	41 e0       	ldi	r20, 0x01	; 1
 11a:	6b 81       	ldd	r22, Y+3	; 0x03
 11c:	88 81       	ld	r24, Y
 11e:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_vsetbitdir>
	DIO_vsetbitdir(S_DC->DIR_port,S_DC->DIR_pin,1);//set DC motor direction pin as avr output
 122:	41 e0       	ldi	r20, 0x01	; 1
 124:	6c 81       	ldd	r22, Y+4	; 0x04
 126:	89 81       	ldd	r24, Y+1	; 0x01
 128:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_vsetbitdir>
	DIO_vsetbitdir(S_DC->EN_port,S_DC->EN_pin,1);//set DC motor driver enable as avr output
 12c:	41 e0       	ldi	r20, 0x01	; 1
 12e:	6d 81       	ldd	r22, Y+5	; 0x05
 130:	8a 81       	ldd	r24, Y+2	; 0x02
 132:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_vsetbitdir>
	DIO_vpinwrite(S_DC->EN_port,S_DC->EN_pin,1);//enable the DC MOTOR DRIVER L298
 136:	6d 81       	ldd	r22, Y+5	; 0x05
 138:	41 e0       	ldi	r20, 0x01	; 1
 13a:	8a 81       	ldd	r24, Y+2	; 0x02
 13c:	0e 94 32 01 	call	0x264	; 0x264 <DIO_vpinwrite>
}
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <HAL_DCMOTOR_Edirection>:

void HAL_DCMOTOR_Edirection(S_DCMOTOR* S_DC)
{	//set the direction clkwise or anti-clkwise
 146:	fc 01       	movw	r30, r24
	if (S_DC->clkwise==1)
 148:	96 81       	ldd	r25, Z+6	; 0x06
 14a:	91 30       	cpi	r25, 0x01	; 1
 14c:	31 f4       	brne	.+12     	; 0x15a <HAL_DCMOTOR_Edirection+0x14>
	{
		DIO_vpinwrite(S_DC->DIR_port,S_DC->DIR_pin,1);		
 14e:	64 81       	ldd	r22, Z+4	; 0x04
 150:	41 e0       	ldi	r20, 0x01	; 1
 152:	81 81       	ldd	r24, Z+1	; 0x01
 154:	0e 94 32 01 	call	0x264	; 0x264 <DIO_vpinwrite>
 158:	08 95       	ret
	}
	else if (S_DC->clkwise==0)
 15a:	91 11       	cpse	r25, r1
 15c:	05 c0       	rjmp	.+10     	; 0x168 <HAL_DCMOTOR_Edirection+0x22>
	{
		DIO_vpinwrite(S_DC->DIR_port,S_DC->DIR_pin,0);
 15e:	64 81       	ldd	r22, Z+4	; 0x04
 160:	40 e0       	ldi	r20, 0x00	; 0
 162:	81 81       	ldd	r24, Z+1	; 0x01
 164:	0e 94 32 01 	call	0x264	; 0x264 <DIO_vpinwrite>
 168:	08 95       	ret

0000016a <HAL_DCMOTOR_Efullspeed>:
	}
}

void HAL_DCMOTOR_Efullspeed(S_DCMOTOR* S_DC)
{
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	ec 01       	movw	r28, r24
	HAL_DCMOTOR_Edirection(S_DC);
 170:	0e 94 a3 00 	call	0x146	; 0x146 <HAL_DCMOTOR_Edirection>
	DIO_vpinwrite(S_DC->PWM_port,S_DC->PWM_pin,1);
 174:	6b 81       	ldd	r22, Y+3	; 0x03
 176:	41 e0       	ldi	r20, 0x01	; 1
 178:	88 81       	ld	r24, Y
 17a:	0e 94 32 01 	call	0x264	; 0x264 <DIO_vpinwrite>
};
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <DIO_vsetbitdir>:
		break;
		case 'D':
		case 'd':	if (dir==0)
		CLR_PORT(DDRD);
		else
		SET_PORT(DDRD);
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	fc 01       	movw	r30, r24
 188:	e1 54       	subi	r30, 0x41	; 65
 18a:	f1 09       	sbc	r31, r1
 18c:	e4 32       	cpi	r30, 0x24	; 36
 18e:	f1 05       	cpc	r31, r1
 190:	08 f0       	brcs	.+2      	; 0x194 <DIO_vsetbitdir+0x10>
 192:	67 c0       	rjmp	.+206    	; 0x262 <DIO_vsetbitdir+0xde>
 194:	e6 5d       	subi	r30, 0xD6	; 214
 196:	ff 4f       	sbci	r31, 0xFF	; 255
 198:	0c 94 ab 01 	jmp	0x356	; 0x356 <__tablejump2__>
 19c:	41 11       	cpse	r20, r1
 19e:	0c c0       	rjmp	.+24     	; 0x1b8 <DIO_vsetbitdir+0x34>
 1a0:	2a b3       	in	r18, 0x1a	; 26
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <DIO_vsetbitdir+0x28>
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	6a 95       	dec	r22
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <DIO_vsetbitdir+0x24>
 1b0:	80 95       	com	r24
 1b2:	82 23       	and	r24, r18
 1b4:	8a bb       	out	0x1a, r24	; 26
 1b6:	08 95       	ret
 1b8:	2a b3       	in	r18, 0x1a	; 26
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <DIO_vsetbitdir+0x40>
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	6a 95       	dec	r22
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <DIO_vsetbitdir+0x3c>
 1c8:	82 2b       	or	r24, r18
 1ca:	8a bb       	out	0x1a, r24	; 26
 1cc:	08 95       	ret
 1ce:	41 11       	cpse	r20, r1
 1d0:	0c c0       	rjmp	.+24     	; 0x1ea <DIO_vsetbitdir+0x66>
 1d2:	27 b3       	in	r18, 0x17	; 23
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <DIO_vsetbitdir+0x5a>
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	6a 95       	dec	r22
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <DIO_vsetbitdir+0x56>
 1e2:	80 95       	com	r24
 1e4:	82 23       	and	r24, r18
 1e6:	87 bb       	out	0x17, r24	; 23
 1e8:	08 95       	ret
 1ea:	27 b3       	in	r18, 0x17	; 23
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <DIO_vsetbitdir+0x72>
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	6a 95       	dec	r22
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <DIO_vsetbitdir+0x6e>
 1fa:	82 2b       	or	r24, r18
 1fc:	87 bb       	out	0x17, r24	; 23
 1fe:	08 95       	ret
 200:	41 11       	cpse	r20, r1
 202:	0c c0       	rjmp	.+24     	; 0x21c <DIO_vsetbitdir+0x98>
 204:	24 b3       	in	r18, 0x14	; 20
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_vsetbitdir+0x8c>
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	6a 95       	dec	r22
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_vsetbitdir+0x88>
 214:	80 95       	com	r24
 216:	82 23       	and	r24, r18
 218:	84 bb       	out	0x14, r24	; 20
 21a:	08 95       	ret
 21c:	24 b3       	in	r18, 0x14	; 20
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	02 c0       	rjmp	.+4      	; 0x228 <DIO_vsetbitdir+0xa4>
 224:	88 0f       	add	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	6a 95       	dec	r22
 22a:	e2 f7       	brpl	.-8      	; 0x224 <DIO_vsetbitdir+0xa0>
 22c:	82 2b       	or	r24, r18
 22e:	84 bb       	out	0x14, r24	; 20
 230:	08 95       	ret
 232:	41 11       	cpse	r20, r1
 234:	0c c0       	rjmp	.+24     	; 0x24e <DIO_vsetbitdir+0xca>
 236:	21 b3       	in	r18, 0x11	; 17
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	02 c0       	rjmp	.+4      	; 0x242 <DIO_vsetbitdir+0xbe>
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	6a 95       	dec	r22
 244:	e2 f7       	brpl	.-8      	; 0x23e <DIO_vsetbitdir+0xba>
 246:	80 95       	com	r24
 248:	82 23       	and	r24, r18
 24a:	81 bb       	out	0x11, r24	; 17
 24c:	08 95       	ret
 24e:	21 b3       	in	r18, 0x11	; 17
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	02 c0       	rjmp	.+4      	; 0x25a <DIO_vsetbitdir+0xd6>
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	6a 95       	dec	r22
 25c:	e2 f7       	brpl	.-8      	; 0x256 <DIO_vsetbitdir+0xd2>
 25e:	82 2b       	or	r24, r18
 260:	81 bb       	out	0x11, r24	; 17
 262:	08 95       	ret

00000264 <DIO_vpinwrite>:
		break;
	}
}
void DIO_vpinwrite(char port, char pin, char data)
{
	switch(port)
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	fc 01       	movw	r30, r24
 268:	e1 54       	subi	r30, 0x41	; 65
 26a:	f1 09       	sbc	r31, r1
 26c:	e4 32       	cpi	r30, 0x24	; 36
 26e:	f1 05       	cpc	r31, r1
 270:	08 f0       	brcs	.+2      	; 0x274 <DIO_vpinwrite+0x10>
 272:	67 c0       	rjmp	.+206    	; 0x342 <DIO_vpinwrite+0xde>
 274:	e2 5b       	subi	r30, 0xB2	; 178
 276:	ff 4f       	sbci	r31, 0xFF	; 255
 278:	0c 94 ab 01 	jmp	0x356	; 0x356 <__tablejump2__>
	{	case 'A':
		case 'a':	if (data==0)
 27c:	41 11       	cpse	r20, r1
 27e:	0c c0       	rjmp	.+24     	; 0x298 <DIO_vpinwrite+0x34>
		CLR_BIT(PORTA,pin);
 280:	2b b3       	in	r18, 0x1b	; 27
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_vpinwrite+0x28>
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	6a 95       	dec	r22
 28e:	e2 f7       	brpl	.-8      	; 0x288 <DIO_vpinwrite+0x24>
 290:	80 95       	com	r24
 292:	82 23       	and	r24, r18
 294:	8b bb       	out	0x1b, r24	; 27
 296:	08 95       	ret
		else
		SET_BIT(PORTA,pin);
 298:	2b b3       	in	r18, 0x1b	; 27
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_vpinwrite+0x40>
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	6a 95       	dec	r22
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_vpinwrite+0x3c>
 2a8:	82 2b       	or	r24, r18
 2aa:	8b bb       	out	0x1b, r24	; 27
 2ac:	08 95       	ret
		break;
		
		case 'B':
		case 'b':	if (data==0)
 2ae:	41 11       	cpse	r20, r1
 2b0:	0c c0       	rjmp	.+24     	; 0x2ca <DIO_vpinwrite+0x66>
		CLR_BIT(PORTB,pin);
 2b2:	28 b3       	in	r18, 0x18	; 24
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <DIO_vpinwrite+0x5a>
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	6a 95       	dec	r22
 2c0:	e2 f7       	brpl	.-8      	; 0x2ba <DIO_vpinwrite+0x56>
 2c2:	80 95       	com	r24
 2c4:	82 23       	and	r24, r18
 2c6:	88 bb       	out	0x18, r24	; 24
 2c8:	08 95       	ret
		else
		SET_BIT(PORTB,pin);
 2ca:	28 b3       	in	r18, 0x18	; 24
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <DIO_vpinwrite+0x72>
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	6a 95       	dec	r22
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <DIO_vpinwrite+0x6e>
 2da:	82 2b       	or	r24, r18
 2dc:	88 bb       	out	0x18, r24	; 24
 2de:	08 95       	ret
		break;
		case 'C':
		case 'c':	if (data==0)
 2e0:	41 11       	cpse	r20, r1
 2e2:	0c c0       	rjmp	.+24     	; 0x2fc <DIO_vpinwrite+0x98>
		CLR_BIT(PORTC,pin);
 2e4:	25 b3       	in	r18, 0x15	; 21
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <DIO_vpinwrite+0x8c>
 2ec:	88 0f       	add	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	6a 95       	dec	r22
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <DIO_vpinwrite+0x88>
 2f4:	80 95       	com	r24
 2f6:	82 23       	and	r24, r18
 2f8:	85 bb       	out	0x15, r24	; 21
 2fa:	08 95       	ret
		else
		SET_BIT(PORTC,pin);
 2fc:	25 b3       	in	r18, 0x15	; 21
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	02 c0       	rjmp	.+4      	; 0x308 <DIO_vpinwrite+0xa4>
 304:	88 0f       	add	r24, r24
 306:	99 1f       	adc	r25, r25
 308:	6a 95       	dec	r22
 30a:	e2 f7       	brpl	.-8      	; 0x304 <DIO_vpinwrite+0xa0>
 30c:	82 2b       	or	r24, r18
 30e:	85 bb       	out	0x15, r24	; 21
 310:	08 95       	ret
		break;
		case 'D':
		case 'd':	if (data==0)
 312:	41 11       	cpse	r20, r1
 314:	0c c0       	rjmp	.+24     	; 0x32e <DIO_vpinwrite+0xca>
		CLR_BIT(PORTD,pin);
 316:	22 b3       	in	r18, 0x12	; 18
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	02 c0       	rjmp	.+4      	; 0x322 <DIO_vpinwrite+0xbe>
 31e:	88 0f       	add	r24, r24
 320:	99 1f       	adc	r25, r25
 322:	6a 95       	dec	r22
 324:	e2 f7       	brpl	.-8      	; 0x31e <DIO_vpinwrite+0xba>
 326:	80 95       	com	r24
 328:	82 23       	and	r24, r18
 32a:	82 bb       	out	0x12, r24	; 18
 32c:	08 95       	ret
		else
		SET_BIT(PORTD,pin);
 32e:	22 b3       	in	r18, 0x12	; 18
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	02 c0       	rjmp	.+4      	; 0x33a <DIO_vpinwrite+0xd6>
 336:	88 0f       	add	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	6a 95       	dec	r22
 33c:	e2 f7       	brpl	.-8      	; 0x336 <DIO_vpinwrite+0xd2>
 33e:	82 2b       	or	r24, r18
 340:	82 bb       	out	0x12, r24	; 18
 342:	08 95       	ret

00000344 <main>:
#include <util/delay.h>
S_DCMOTOR S_DC={'B','B','B',3,5,6,1};
	
int main(void)
{	
    HAL_DCMOTOR_Einit(&S_DC);
 344:	80 e6       	ldi	r24, 0x60	; 96
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	0e 94 89 00 	call	0x112	; 0x112 <HAL_DCMOTOR_Einit>
	/*HAL_DCMOTOR_Ehalfspeed(&S_DC);
	_delay_ms(10000);*/
	HAL_DCMOTOR_Efullspeed(&S_DC);
 34c:	80 e6       	ldi	r24, 0x60	; 96
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	0e 94 b5 00 	call	0x16a	; 0x16a <HAL_DCMOTOR_Efullspeed>
 354:	ff cf       	rjmp	.-2      	; 0x354 <main+0x10>

00000356 <__tablejump2__>:
 356:	ee 0f       	add	r30, r30
 358:	ff 1f       	adc	r31, r31
 35a:	05 90       	lpm	r0, Z+
 35c:	f4 91       	lpm	r31, Z
 35e:	e0 2d       	mov	r30, r0
 360:	09 94       	ijmp

00000362 <_exit>:
 362:	f8 94       	cli

00000364 <__stop_program>:
 364:	ff cf       	rjmp	.-2      	; 0x364 <__stop_program>
