
DC motor driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000034c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000034c  000003c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  00000434  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c32  00000000  00000000  000004e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000754  00000000  00000000  00001116  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006ca  00000000  00000000  0000186a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000130  00000000  00000000  00001f34  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000423  00000000  00000000  00002064  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000089d  00000000  00000000  00002487  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00002d24  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  40:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  54:	c1 00       	.word	0x00c1	; ????
  56:	da 00       	.word	0x00da	; ????
  58:	f3 00       	.word	0x00f3	; ????
  5a:	0c 01       	movw	r0, r24
  5c:	24 01       	movw	r4, r8
  5e:	24 01       	movw	r4, r8
  60:	24 01       	movw	r4, r8
  62:	24 01       	movw	r4, r8
  64:	24 01       	movw	r4, r8
  66:	24 01       	movw	r4, r8
  68:	24 01       	movw	r4, r8
  6a:	24 01       	movw	r4, r8
  6c:	24 01       	movw	r4, r8
  6e:	24 01       	movw	r4, r8
  70:	24 01       	movw	r4, r8
  72:	24 01       	movw	r4, r8
  74:	24 01       	movw	r4, r8
  76:	24 01       	movw	r4, r8
  78:	24 01       	movw	r4, r8
  7a:	24 01       	movw	r4, r8
  7c:	24 01       	movw	r4, r8
  7e:	24 01       	movw	r4, r8
  80:	24 01       	movw	r4, r8
  82:	24 01       	movw	r4, r8
  84:	24 01       	movw	r4, r8
  86:	24 01       	movw	r4, r8
  88:	24 01       	movw	r4, r8
  8a:	24 01       	movw	r4, r8
  8c:	24 01       	movw	r4, r8
  8e:	24 01       	movw	r4, r8
  90:	24 01       	movw	r4, r8
  92:	24 01       	movw	r4, r8
  94:	c1 00       	.word	0x00c1	; ????
  96:	da 00       	.word	0x00da	; ????
  98:	f3 00       	.word	0x00f3	; ????
  9a:	0c 01       	movw	r0, r24
  9c:	31 01       	movw	r6, r2
  9e:	4a 01       	movw	r8, r20
  a0:	63 01       	movw	r12, r6
  a2:	7c 01       	movw	r14, r24
  a4:	94 01       	movw	r18, r8
  a6:	94 01       	movw	r18, r8
  a8:	94 01       	movw	r18, r8
  aa:	94 01       	movw	r18, r8
  ac:	94 01       	movw	r18, r8
  ae:	94 01       	movw	r18, r8
  b0:	94 01       	movw	r18, r8
  b2:	94 01       	movw	r18, r8
  b4:	94 01       	movw	r18, r8
  b6:	94 01       	movw	r18, r8
  b8:	94 01       	movw	r18, r8
  ba:	94 01       	movw	r18, r8
  bc:	94 01       	movw	r18, r8
  be:	94 01       	movw	r18, r8
  c0:	94 01       	movw	r18, r8
  c2:	94 01       	movw	r18, r8
  c4:	94 01       	movw	r18, r8
  c6:	94 01       	movw	r18, r8
  c8:	94 01       	movw	r18, r8
  ca:	94 01       	movw	r18, r8
  cc:	94 01       	movw	r18, r8
  ce:	94 01       	movw	r18, r8
  d0:	94 01       	movw	r18, r8
  d2:	94 01       	movw	r18, r8
  d4:	94 01       	movw	r18, r8
  d6:	94 01       	movw	r18, r8
  d8:	94 01       	movw	r18, r8
  da:	94 01       	movw	r18, r8
  dc:	31 01       	movw	r6, r2
  de:	4a 01       	movw	r8, r20
  e0:	63 01       	movw	r12, r6
  e2:	7c 01       	movw	r14, r24

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf e5       	ldi	r28, 0x5F	; 95
  ea:	d8 e0       	ldi	r29, 0x08	; 8
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	10 e0       	ldi	r17, 0x00	; 0
  f2:	a0 e6       	ldi	r26, 0x60	; 96
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	ec e4       	ldi	r30, 0x4C	; 76
  f8:	f3 e0       	ldi	r31, 0x03	; 3
  fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
  fc:	05 90       	lpm	r0, Z+
  fe:	0d 92       	st	X+, r0
 100:	a8 36       	cpi	r26, 0x68	; 104
 102:	b1 07       	cpc	r27, r17
 104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>
 106:	0e 94 95 01 	call	0x32a	; 0x32a <main>
 10a:	0c 94 a4 01 	jmp	0x348	; 0x348 <_exit>

0000010e <__bad_interrupt>:
 10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <HAL_DCMOTOR_Einit>:

void HAL_DCMOTOR_Efullspeed(S_DCMOTOR* S_DC)
{
	HAL_DCMOTOR_Edirection(S_DC);
	DIO_vpinwrite(S_DC->PWM_port,S_DC->PWM_pin,1);
};
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	ec 01       	movw	r28, r24
 118:	41 e0       	ldi	r20, 0x01	; 1
 11a:	6b 81       	ldd	r22, Y+3	; 0x03
 11c:	88 81       	ld	r24, Y
 11e:	0e 94 b5 00 	call	0x16a	; 0x16a <DIO_vsetbitdir>
 122:	41 e0       	ldi	r20, 0x01	; 1
 124:	6c 81       	ldd	r22, Y+4	; 0x04
 126:	89 81       	ldd	r24, Y+1	; 0x01
 128:	0e 94 b5 00 	call	0x16a	; 0x16a <DIO_vsetbitdir>
 12c:	41 e0       	ldi	r20, 0x01	; 1
 12e:	6d 81       	ldd	r22, Y+5	; 0x05
 130:	8a 81       	ldd	r24, Y+2	; 0x02
 132:	0e 94 b5 00 	call	0x16a	; 0x16a <DIO_vsetbitdir>
 136:	6d 81       	ldd	r22, Y+5	; 0x05
 138:	41 e0       	ldi	r20, 0x01	; 1
 13a:	8a 81       	ldd	r24, Y+2	; 0x02
 13c:	0e 94 25 01 	call	0x24a	; 0x24a <DIO_vpinwrite>
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <HAL_DCMOTOR_Ehalfspeed>:

void HAL_DCMOTOR_Ehalfspeed(S_DCMOTOR* S_DC)
{
	//use TIMER0 fast PWM to generate 50% Duty cycle 
	SET_BIT(TCCR0,WGM01);//fast PWM mode
 146:	83 b7       	in	r24, 0x33	; 51
 148:	88 60       	ori	r24, 0x08	; 8
 14a:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,WGM00);
 14c:	83 b7       	in	r24, 0x33	; 51
 14e:	80 64       	ori	r24, 0x40	; 64
 150:	83 bf       	out	0x33, r24	; 51
	
	SET_BIT(TCCR0,COM00);//Set at the compare match and clear at BOTTOM (Inverting mode)
 152:	83 b7       	in	r24, 0x33	; 51
 154:	80 61       	ori	r24, 0x10	; 16
 156:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,COM01);
 158:	83 b7       	in	r24, 0x33	; 51
 15a:	80 62       	ori	r24, 0x20	; 32
 15c:	83 bf       	out	0x33, r24	; 51
	
	SET_BIT(TCCR0,CS00);//NO PRESCALAR
 15e:	83 b7       	in	r24, 0x33	; 51
 160:	81 60       	ori	r24, 0x01	; 1
 162:	83 bf       	out	0x33, r24	; 51
	
	OCR0=OCR0_HALFSPEED;
 164:	80 e8       	ldi	r24, 0x80	; 128
 166:	8c bf       	out	0x3c, r24	; 60
 168:	08 95       	ret

0000016a <DIO_vsetbitdir>:
		break;
		case 'D':
		case 'd':	if (dir==0)
		CLR_PORT(DDRD);
		else
		SET_PORT(DDRD);
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	fc 01       	movw	r30, r24
 16e:	e1 54       	subi	r30, 0x41	; 65
 170:	f1 09       	sbc	r31, r1
 172:	e4 32       	cpi	r30, 0x24	; 36
 174:	f1 05       	cpc	r31, r1
 176:	08 f0       	brcs	.+2      	; 0x17a <DIO_vsetbitdir+0x10>
 178:	67 c0       	rjmp	.+206    	; 0x248 <DIO_vsetbitdir+0xde>
 17a:	e6 5d       	subi	r30, 0xD6	; 214
 17c:	ff 4f       	sbci	r31, 0xFF	; 255
 17e:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__tablejump2__>
 182:	41 11       	cpse	r20, r1
 184:	0c c0       	rjmp	.+24     	; 0x19e <DIO_vsetbitdir+0x34>
 186:	2a b3       	in	r18, 0x1a	; 26
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	02 c0       	rjmp	.+4      	; 0x192 <DIO_vsetbitdir+0x28>
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	6a 95       	dec	r22
 194:	e2 f7       	brpl	.-8      	; 0x18e <DIO_vsetbitdir+0x24>
 196:	80 95       	com	r24
 198:	82 23       	and	r24, r18
 19a:	8a bb       	out	0x1a, r24	; 26
 19c:	08 95       	ret
 19e:	2a b3       	in	r18, 0x1a	; 26
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <DIO_vsetbitdir+0x40>
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	6a 95       	dec	r22
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <DIO_vsetbitdir+0x3c>
 1ae:	82 2b       	or	r24, r18
 1b0:	8a bb       	out	0x1a, r24	; 26
 1b2:	08 95       	ret
 1b4:	41 11       	cpse	r20, r1
 1b6:	0c c0       	rjmp	.+24     	; 0x1d0 <DIO_vsetbitdir+0x66>
 1b8:	27 b3       	in	r18, 0x17	; 23
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <DIO_vsetbitdir+0x5a>
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	6a 95       	dec	r22
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <DIO_vsetbitdir+0x56>
 1c8:	80 95       	com	r24
 1ca:	82 23       	and	r24, r18
 1cc:	87 bb       	out	0x17, r24	; 23
 1ce:	08 95       	ret
 1d0:	27 b3       	in	r18, 0x17	; 23
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <DIO_vsetbitdir+0x72>
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	6a 95       	dec	r22
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <DIO_vsetbitdir+0x6e>
 1e0:	82 2b       	or	r24, r18
 1e2:	87 bb       	out	0x17, r24	; 23
 1e4:	08 95       	ret
 1e6:	41 11       	cpse	r20, r1
 1e8:	0c c0       	rjmp	.+24     	; 0x202 <DIO_vsetbitdir+0x98>
 1ea:	24 b3       	in	r18, 0x14	; 20
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <DIO_vsetbitdir+0x8c>
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	6a 95       	dec	r22
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <DIO_vsetbitdir+0x88>
 1fa:	80 95       	com	r24
 1fc:	82 23       	and	r24, r18
 1fe:	84 bb       	out	0x14, r24	; 20
 200:	08 95       	ret
 202:	24 b3       	in	r18, 0x14	; 20
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	02 c0       	rjmp	.+4      	; 0x20e <DIO_vsetbitdir+0xa4>
 20a:	88 0f       	add	r24, r24
 20c:	99 1f       	adc	r25, r25
 20e:	6a 95       	dec	r22
 210:	e2 f7       	brpl	.-8      	; 0x20a <DIO_vsetbitdir+0xa0>
 212:	82 2b       	or	r24, r18
 214:	84 bb       	out	0x14, r24	; 20
 216:	08 95       	ret
 218:	41 11       	cpse	r20, r1
 21a:	0c c0       	rjmp	.+24     	; 0x234 <DIO_vsetbitdir+0xca>
 21c:	21 b3       	in	r18, 0x11	; 17
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	02 c0       	rjmp	.+4      	; 0x228 <DIO_vsetbitdir+0xbe>
 224:	88 0f       	add	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	6a 95       	dec	r22
 22a:	e2 f7       	brpl	.-8      	; 0x224 <DIO_vsetbitdir+0xba>
 22c:	80 95       	com	r24
 22e:	82 23       	and	r24, r18
 230:	81 bb       	out	0x11, r24	; 17
 232:	08 95       	ret
 234:	21 b3       	in	r18, 0x11	; 17
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	02 c0       	rjmp	.+4      	; 0x240 <DIO_vsetbitdir+0xd6>
 23c:	88 0f       	add	r24, r24
 23e:	99 1f       	adc	r25, r25
 240:	6a 95       	dec	r22
 242:	e2 f7       	brpl	.-8      	; 0x23c <DIO_vsetbitdir+0xd2>
 244:	82 2b       	or	r24, r18
 246:	81 bb       	out	0x11, r24	; 17
 248:	08 95       	ret

0000024a <DIO_vpinwrite>:
		break;
	}
}
void DIO_vpinwrite(char port, char pin, char data)
{
	switch(port)
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	fc 01       	movw	r30, r24
 24e:	e1 54       	subi	r30, 0x41	; 65
 250:	f1 09       	sbc	r31, r1
 252:	e4 32       	cpi	r30, 0x24	; 36
 254:	f1 05       	cpc	r31, r1
 256:	08 f0       	brcs	.+2      	; 0x25a <DIO_vpinwrite+0x10>
 258:	67 c0       	rjmp	.+206    	; 0x328 <DIO_vpinwrite+0xde>
 25a:	e2 5b       	subi	r30, 0xB2	; 178
 25c:	ff 4f       	sbci	r31, 0xFF	; 255
 25e:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__tablejump2__>
	{	case 'A':
		case 'a':	if (data==0)
 262:	41 11       	cpse	r20, r1
 264:	0c c0       	rjmp	.+24     	; 0x27e <DIO_vpinwrite+0x34>
		CLR_BIT(PORTA,pin);
 266:	2b b3       	in	r18, 0x1b	; 27
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_vpinwrite+0x28>
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	6a 95       	dec	r22
 274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_vpinwrite+0x24>
 276:	80 95       	com	r24
 278:	82 23       	and	r24, r18
 27a:	8b bb       	out	0x1b, r24	; 27
 27c:	08 95       	ret
		else
		SET_BIT(PORTA,pin);
 27e:	2b b3       	in	r18, 0x1b	; 27
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	02 c0       	rjmp	.+4      	; 0x28a <DIO_vpinwrite+0x40>
 286:	88 0f       	add	r24, r24
 288:	99 1f       	adc	r25, r25
 28a:	6a 95       	dec	r22
 28c:	e2 f7       	brpl	.-8      	; 0x286 <DIO_vpinwrite+0x3c>
 28e:	82 2b       	or	r24, r18
 290:	8b bb       	out	0x1b, r24	; 27
 292:	08 95       	ret
		break;
		
		case 'B':
		case 'b':	if (data==0)
 294:	41 11       	cpse	r20, r1
 296:	0c c0       	rjmp	.+24     	; 0x2b0 <DIO_vpinwrite+0x66>
		CLR_BIT(PORTB,pin);
 298:	28 b3       	in	r18, 0x18	; 24
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_vpinwrite+0x5a>
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	6a 95       	dec	r22
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_vpinwrite+0x56>
 2a8:	80 95       	com	r24
 2aa:	82 23       	and	r24, r18
 2ac:	88 bb       	out	0x18, r24	; 24
 2ae:	08 95       	ret
		else
		SET_BIT(PORTB,pin);
 2b0:	28 b3       	in	r18, 0x18	; 24
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_vpinwrite+0x72>
 2b8:	88 0f       	add	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	6a 95       	dec	r22
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <DIO_vpinwrite+0x6e>
 2c0:	82 2b       	or	r24, r18
 2c2:	88 bb       	out	0x18, r24	; 24
 2c4:	08 95       	ret
		break;
		case 'C':
		case 'c':	if (data==0)
 2c6:	41 11       	cpse	r20, r1
 2c8:	0c c0       	rjmp	.+24     	; 0x2e2 <DIO_vpinwrite+0x98>
		CLR_BIT(PORTC,pin);
 2ca:	25 b3       	in	r18, 0x15	; 21
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <DIO_vpinwrite+0x8c>
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	6a 95       	dec	r22
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <DIO_vpinwrite+0x88>
 2da:	80 95       	com	r24
 2dc:	82 23       	and	r24, r18
 2de:	85 bb       	out	0x15, r24	; 21
 2e0:	08 95       	ret
		else
		SET_BIT(PORTC,pin);
 2e2:	25 b3       	in	r18, 0x15	; 21
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <DIO_vpinwrite+0xa4>
 2ea:	88 0f       	add	r24, r24
 2ec:	99 1f       	adc	r25, r25
 2ee:	6a 95       	dec	r22
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <DIO_vpinwrite+0xa0>
 2f2:	82 2b       	or	r24, r18
 2f4:	85 bb       	out	0x15, r24	; 21
 2f6:	08 95       	ret
		break;
		case 'D':
		case 'd':	if (data==0)
 2f8:	41 11       	cpse	r20, r1
 2fa:	0c c0       	rjmp	.+24     	; 0x314 <DIO_vpinwrite+0xca>
		CLR_BIT(PORTD,pin);
 2fc:	22 b3       	in	r18, 0x12	; 18
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	02 c0       	rjmp	.+4      	; 0x308 <DIO_vpinwrite+0xbe>
 304:	88 0f       	add	r24, r24
 306:	99 1f       	adc	r25, r25
 308:	6a 95       	dec	r22
 30a:	e2 f7       	brpl	.-8      	; 0x304 <DIO_vpinwrite+0xba>
 30c:	80 95       	com	r24
 30e:	82 23       	and	r24, r18
 310:	82 bb       	out	0x12, r24	; 18
 312:	08 95       	ret
		else
		SET_BIT(PORTD,pin);
 314:	22 b3       	in	r18, 0x12	; 18
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	02 c0       	rjmp	.+4      	; 0x320 <DIO_vpinwrite+0xd6>
 31c:	88 0f       	add	r24, r24
 31e:	99 1f       	adc	r25, r25
 320:	6a 95       	dec	r22
 322:	e2 f7       	brpl	.-8      	; 0x31c <DIO_vpinwrite+0xd2>
 324:	82 2b       	or	r24, r18
 326:	82 bb       	out	0x12, r24	; 18
 328:	08 95       	ret

0000032a <main>:
#include "DCMOTOR_Interface.h"
S_DCMOTOR S_DC={'B','c','c',3,5,6,1};
	
int main(void)
{	
    HAL_DCMOTOR_Einit(&S_DC);
 32a:	80 e6       	ldi	r24, 0x60	; 96
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	0e 94 89 00 	call	0x112	; 0x112 <HAL_DCMOTOR_Einit>
	HAL_DCMOTOR_Ehalfspeed(&S_DC);
 332:	80 e6       	ldi	r24, 0x60	; 96
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	0e 94 a3 00 	call	0x146	; 0x146 <HAL_DCMOTOR_Ehalfspeed>
 33a:	ff cf       	rjmp	.-2      	; 0x33a <main+0x10>

0000033c <__tablejump2__>:
 33c:	ee 0f       	add	r30, r30
 33e:	ff 1f       	adc	r31, r31
 340:	05 90       	lpm	r0, Z+
 342:	f4 91       	lpm	r31, Z
 344:	e0 2d       	mov	r30, r0
 346:	09 94       	ijmp

00000348 <_exit>:
 348:	f8 94       	cli

0000034a <__stop_program>:
 34a:	ff cf       	rjmp	.-2      	; 0x34a <__stop_program>
