
Solenoid_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d96  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00001704  00000000  00000000  00000dec  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000012a1  00000000  00000000  000024f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 c0 06 	call	0xd80	; 0xd80 <main>
  64:	0c 94 c9 06 	jmp	0xd92	; 0xd92 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <MCAL_Dio_Init>:
#include "DIO.stdtypes.h"



Std_type MCAL_Dio_Init(S_Dio *Dio_Config)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	27 97       	sbiw	r28, 0x07	; 7
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	9d 83       	std	Y+5, r25	; 0x05
  82:	8c 83       	std	Y+4, r24	; 0x04
	Std_type error = OK;
  84:	1b 82       	std	Y+3, r1	; 0x03
	u8RegisterValue Mask1,Mask2;
	if(DIO_STATUS_ERROR == NOT_OK)
	{
		error = NOT_OK;
	}
	else if(Dio_Config->port_num >= DIO_CONFIGURED_PORTS)
  86:	ec 81       	ldd	r30, Y+4	; 0x04
  88:	fd 81       	ldd	r31, Y+5	; 0x05
  8a:	80 81       	ld	r24, Z
  8c:	84 30       	cpi	r24, 0x04	; 4
  8e:	18 f0       	brcs	.+6      	; 0x96 <MCAL_Dio_Init+0x2a>
	{

		error = NOT_OK;
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	8b 83       	std	Y+3, r24	; 0x03
  94:	7d c0       	rjmp	.+250    	; 0x190 <MCAL_Dio_Init+0x124>
	}
	else
	{

		Mask2 = ((Dio_Config->pin_num) & (Dio_Config->Direction));
  96:	ec 81       	ldd	r30, Y+4	; 0x04
  98:	fd 81       	ldd	r31, Y+5	; 0x05
  9a:	91 81       	ldd	r25, Z+1	; 0x01
  9c:	ec 81       	ldd	r30, Y+4	; 0x04
  9e:	fd 81       	ldd	r31, Y+5	; 0x05
  a0:	82 81       	ldd	r24, Z+2	; 0x02
  a2:	89 23       	and	r24, r25
  a4:	89 83       	std	Y+1, r24	; 0x01
		switch(Dio_Config->port_num)
  a6:	ec 81       	ldd	r30, Y+4	; 0x04
  a8:	fd 81       	ldd	r31, Y+5	; 0x05
  aa:	80 81       	ld	r24, Z
  ac:	28 2f       	mov	r18, r24
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	3f 83       	std	Y+7, r19	; 0x07
  b2:	2e 83       	std	Y+6, r18	; 0x06
  b4:	8e 81       	ldd	r24, Y+6	; 0x06
  b6:	9f 81       	ldd	r25, Y+7	; 0x07
  b8:	81 30       	cpi	r24, 0x01	; 1
  ba:	91 05       	cpc	r25, r1
  bc:	59 f1       	breq	.+86     	; 0x114 <MCAL_Dio_Init+0xa8>
  be:	2e 81       	ldd	r18, Y+6	; 0x06
  c0:	3f 81       	ldd	r19, Y+7	; 0x07
  c2:	22 30       	cpi	r18, 0x02	; 2
  c4:	31 05       	cpc	r19, r1
  c6:	2c f4       	brge	.+10     	; 0xd2 <MCAL_Dio_Init+0x66>
  c8:	8e 81       	ldd	r24, Y+6	; 0x06
  ca:	9f 81       	ldd	r25, Y+7	; 0x07
  cc:	00 97       	sbiw	r24, 0x00	; 0
  ce:	69 f0       	breq	.+26     	; 0xea <MCAL_Dio_Init+0x7e>
  d0:	5f c0       	rjmp	.+190    	; 0x190 <MCAL_Dio_Init+0x124>
  d2:	2e 81       	ldd	r18, Y+6	; 0x06
  d4:	3f 81       	ldd	r19, Y+7	; 0x07
  d6:	22 30       	cpi	r18, 0x02	; 2
  d8:	31 05       	cpc	r19, r1
  da:	89 f1       	breq	.+98     	; 0x13e <MCAL_Dio_Init+0xd2>
  dc:	8e 81       	ldd	r24, Y+6	; 0x06
  de:	9f 81       	ldd	r25, Y+7	; 0x07
  e0:	83 30       	cpi	r24, 0x03	; 3
  e2:	91 05       	cpc	r25, r1
  e4:	09 f4       	brne	.+2      	; 0xe8 <MCAL_Dio_Init+0x7c>
  e6:	40 c0       	rjmp	.+128    	; 0x168 <MCAL_Dio_Init+0xfc>
  e8:	53 c0       	rjmp	.+166    	; 0x190 <MCAL_Dio_Init+0x124>
		{
		case PORTA_ID:
			Mask1 = ((DIO_DDRA) & (~(Dio_Config->pin_num)));
  ea:	ea e3       	ldi	r30, 0x3A	; 58
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	91 81       	ldd	r25, Z+1	; 0x01
  f2:	98 2f       	mov	r25, r24
  f4:	ec 81       	ldd	r30, Y+4	; 0x04
  f6:	fd 81       	ldd	r31, Y+5	; 0x05
  f8:	81 81       	ldd	r24, Z+1	; 0x01
  fa:	80 95       	com	r24
  fc:	89 23       	and	r24, r25
  fe:	8a 83       	std	Y+2, r24	; 0x02
			DIO_DDRA = Mask1 | Mask2;
 100:	ea e3       	ldi	r30, 0x3A	; 58
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	9a 81       	ldd	r25, Y+2	; 0x02
 106:	89 81       	ldd	r24, Y+1	; 0x01
 108:	89 2b       	or	r24, r25
 10a:	88 2f       	mov	r24, r24
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	91 83       	std	Z+1, r25	; 0x01
 110:	80 83       	st	Z, r24
 112:	3e c0       	rjmp	.+124    	; 0x190 <MCAL_Dio_Init+0x124>
			break;
		case PORTB_ID:
			Mask1 = ((DIO_DDRB) & (~(Dio_Config->pin_num)));
 114:	e7 e3       	ldi	r30, 0x37	; 55
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	91 81       	ldd	r25, Z+1	; 0x01
 11c:	98 2f       	mov	r25, r24
 11e:	ec 81       	ldd	r30, Y+4	; 0x04
 120:	fd 81       	ldd	r31, Y+5	; 0x05
 122:	81 81       	ldd	r24, Z+1	; 0x01
 124:	80 95       	com	r24
 126:	89 23       	and	r24, r25
 128:	8a 83       	std	Y+2, r24	; 0x02
			DIO_DDRB = Mask1 | Mask2;
 12a:	e7 e3       	ldi	r30, 0x37	; 55
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	9a 81       	ldd	r25, Y+2	; 0x02
 130:	89 81       	ldd	r24, Y+1	; 0x01
 132:	89 2b       	or	r24, r25
 134:	88 2f       	mov	r24, r24
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	91 83       	std	Z+1, r25	; 0x01
 13a:	80 83       	st	Z, r24
 13c:	29 c0       	rjmp	.+82     	; 0x190 <MCAL_Dio_Init+0x124>
			break;
		case PORTC_ID:
			Mask1 = ((DIO_DDRC) & (~(Dio_Config->pin_num)));
 13e:	e4 e3       	ldi	r30, 0x34	; 52
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	91 81       	ldd	r25, Z+1	; 0x01
 146:	98 2f       	mov	r25, r24
 148:	ec 81       	ldd	r30, Y+4	; 0x04
 14a:	fd 81       	ldd	r31, Y+5	; 0x05
 14c:	81 81       	ldd	r24, Z+1	; 0x01
 14e:	80 95       	com	r24
 150:	89 23       	and	r24, r25
 152:	8a 83       	std	Y+2, r24	; 0x02
			DIO_DDRC = Mask1 | Mask2;
 154:	e4 e3       	ldi	r30, 0x34	; 52
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	9a 81       	ldd	r25, Y+2	; 0x02
 15a:	89 81       	ldd	r24, Y+1	; 0x01
 15c:	89 2b       	or	r24, r25
 15e:	88 2f       	mov	r24, r24
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	91 83       	std	Z+1, r25	; 0x01
 164:	80 83       	st	Z, r24
 166:	14 c0       	rjmp	.+40     	; 0x190 <MCAL_Dio_Init+0x124>
			break;
		case PORTD_ID:
			Mask1 = ((DIO_DDRD) & (~(Dio_Config->pin_num)));
 168:	e1 e3       	ldi	r30, 0x31	; 49
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	91 81       	ldd	r25, Z+1	; 0x01
 170:	98 2f       	mov	r25, r24
 172:	ec 81       	ldd	r30, Y+4	; 0x04
 174:	fd 81       	ldd	r31, Y+5	; 0x05
 176:	81 81       	ldd	r24, Z+1	; 0x01
 178:	80 95       	com	r24
 17a:	89 23       	and	r24, r25
 17c:	8a 83       	std	Y+2, r24	; 0x02
			DIO_DDRD = Mask1 | Mask2;
 17e:	e1 e3       	ldi	r30, 0x31	; 49
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	9a 81       	ldd	r25, Y+2	; 0x02
 184:	89 81       	ldd	r24, Y+1	; 0x01
 186:	89 2b       	or	r24, r25
 188:	88 2f       	mov	r24, r24
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	91 83       	std	Z+1, r25	; 0x01
 18e:	80 83       	st	Z, r24
			break;

		}
	}

	return error;
 190:	8b 81       	ldd	r24, Y+3	; 0x03
}
 192:	27 96       	adiw	r28, 0x07	; 7
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	f8 94       	cli
 198:	de bf       	out	0x3e, r29	; 62
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	cd bf       	out	0x3d, r28	; 61
 19e:	cf 91       	pop	r28
 1a0:	df 91       	pop	r29
 1a2:	08 95       	ret

000001a4 <MCAL_Dio_SetPortDirection>:

Std_type MCAL_Dio_SetPortDirection(S_Dio *Dio_ConfigPort)
{
 1a4:	df 93       	push	r29
 1a6:	cf 93       	push	r28
 1a8:	00 d0       	rcall	.+0      	; 0x1aa <MCAL_Dio_SetPortDirection+0x6>
 1aa:	00 d0       	rcall	.+0      	; 0x1ac <MCAL_Dio_SetPortDirection+0x8>
 1ac:	0f 92       	push	r0
 1ae:	cd b7       	in	r28, 0x3d	; 61
 1b0:	de b7       	in	r29, 0x3e	; 62
 1b2:	9b 83       	std	Y+3, r25	; 0x03
 1b4:	8a 83       	std	Y+2, r24	; 0x02
	Std_type error = OK;
 1b6:	19 82       	std	Y+1, r1	; 0x01
	if(DIO_STATUS_ERROR == NOT_OK)
	{
		error = NOT_OK;
	}
	else if(Dio_ConfigPort->port_num >= DIO_CONFIGURED_PORTS)
 1b8:	ea 81       	ldd	r30, Y+2	; 0x02
 1ba:	fb 81       	ldd	r31, Y+3	; 0x03
 1bc:	80 81       	ld	r24, Z
 1be:	84 30       	cpi	r24, 0x04	; 4
 1c0:	18 f0       	brcs	.+6      	; 0x1c8 <MCAL_Dio_SetPortDirection+0x24>
	{

		error = NOT_OK;
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	89 83       	std	Y+1, r24	; 0x01
 1c6:	4c c0       	rjmp	.+152    	; 0x260 <MCAL_Dio_SetPortDirection+0xbc>
	}
	else
	{
		switch(Dio_ConfigPort->port_num)
 1c8:	ea 81       	ldd	r30, Y+2	; 0x02
 1ca:	fb 81       	ldd	r31, Y+3	; 0x03
 1cc:	80 81       	ld	r24, Z
 1ce:	28 2f       	mov	r18, r24
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	3d 83       	std	Y+5, r19	; 0x05
 1d4:	2c 83       	std	Y+4, r18	; 0x04
 1d6:	8c 81       	ldd	r24, Y+4	; 0x04
 1d8:	9d 81       	ldd	r25, Y+5	; 0x05
 1da:	81 30       	cpi	r24, 0x01	; 1
 1dc:	91 05       	cpc	r25, r1
 1de:	01 f1       	breq	.+64     	; 0x220 <MCAL_Dio_SetPortDirection+0x7c>
 1e0:	2c 81       	ldd	r18, Y+4	; 0x04
 1e2:	3d 81       	ldd	r19, Y+5	; 0x05
 1e4:	22 30       	cpi	r18, 0x02	; 2
 1e6:	31 05       	cpc	r19, r1
 1e8:	2c f4       	brge	.+10     	; 0x1f4 <MCAL_Dio_SetPortDirection+0x50>
 1ea:	8c 81       	ldd	r24, Y+4	; 0x04
 1ec:	9d 81       	ldd	r25, Y+5	; 0x05
 1ee:	00 97       	sbiw	r24, 0x00	; 0
 1f0:	61 f0       	breq	.+24     	; 0x20a <MCAL_Dio_SetPortDirection+0x66>
 1f2:	36 c0       	rjmp	.+108    	; 0x260 <MCAL_Dio_SetPortDirection+0xbc>
 1f4:	2c 81       	ldd	r18, Y+4	; 0x04
 1f6:	3d 81       	ldd	r19, Y+5	; 0x05
 1f8:	22 30       	cpi	r18, 0x02	; 2
 1fa:	31 05       	cpc	r19, r1
 1fc:	e1 f0       	breq	.+56     	; 0x236 <MCAL_Dio_SetPortDirection+0x92>
 1fe:	8c 81       	ldd	r24, Y+4	; 0x04
 200:	9d 81       	ldd	r25, Y+5	; 0x05
 202:	83 30       	cpi	r24, 0x03	; 3
 204:	91 05       	cpc	r25, r1
 206:	11 f1       	breq	.+68     	; 0x24c <MCAL_Dio_SetPortDirection+0xa8>
 208:	2b c0       	rjmp	.+86     	; 0x260 <MCAL_Dio_SetPortDirection+0xbc>
		{
		case PORTA_ID:
			DIO_DDRA = Dio_ConfigPort->Direction;
 20a:	aa e3       	ldi	r26, 0x3A	; 58
 20c:	b0 e0       	ldi	r27, 0x00	; 0
 20e:	ea 81       	ldd	r30, Y+2	; 0x02
 210:	fb 81       	ldd	r31, Y+3	; 0x03
 212:	82 81       	ldd	r24, Z+2	; 0x02
 214:	88 2f       	mov	r24, r24
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	11 96       	adiw	r26, 0x01	; 1
 21a:	9c 93       	st	X, r25
 21c:	8e 93       	st	-X, r24
 21e:	20 c0       	rjmp	.+64     	; 0x260 <MCAL_Dio_SetPortDirection+0xbc>
			break;
		case PORTB_ID:
			DIO_DDRB = Dio_ConfigPort->Direction;
 220:	a7 e3       	ldi	r26, 0x37	; 55
 222:	b0 e0       	ldi	r27, 0x00	; 0
 224:	ea 81       	ldd	r30, Y+2	; 0x02
 226:	fb 81       	ldd	r31, Y+3	; 0x03
 228:	82 81       	ldd	r24, Z+2	; 0x02
 22a:	88 2f       	mov	r24, r24
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	11 96       	adiw	r26, 0x01	; 1
 230:	9c 93       	st	X, r25
 232:	8e 93       	st	-X, r24
 234:	15 c0       	rjmp	.+42     	; 0x260 <MCAL_Dio_SetPortDirection+0xbc>
			break;
		case PORTC_ID:

			DIO_DDRC = Dio_ConfigPort->Direction;
 236:	a4 e3       	ldi	r26, 0x34	; 52
 238:	b0 e0       	ldi	r27, 0x00	; 0
 23a:	ea 81       	ldd	r30, Y+2	; 0x02
 23c:	fb 81       	ldd	r31, Y+3	; 0x03
 23e:	82 81       	ldd	r24, Z+2	; 0x02
 240:	88 2f       	mov	r24, r24
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	11 96       	adiw	r26, 0x01	; 1
 246:	9c 93       	st	X, r25
 248:	8e 93       	st	-X, r24
 24a:	0a c0       	rjmp	.+20     	; 0x260 <MCAL_Dio_SetPortDirection+0xbc>
			break;
		case PORTD_ID:
			DIO_DDRD = Dio_ConfigPort->Direction;
 24c:	a1 e3       	ldi	r26, 0x31	; 49
 24e:	b0 e0       	ldi	r27, 0x00	; 0
 250:	ea 81       	ldd	r30, Y+2	; 0x02
 252:	fb 81       	ldd	r31, Y+3	; 0x03
 254:	82 81       	ldd	r24, Z+2	; 0x02
 256:	88 2f       	mov	r24, r24
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	11 96       	adiw	r26, 0x01	; 1
 25c:	9c 93       	st	X, r25
 25e:	8e 93       	st	-X, r24
			break;

		}
	}

	return error;
 260:	89 81       	ldd	r24, Y+1	; 0x01
}
 262:	0f 90       	pop	r0
 264:	0f 90       	pop	r0
 266:	0f 90       	pop	r0
 268:	0f 90       	pop	r0
 26a:	0f 90       	pop	r0
 26c:	cf 91       	pop	r28
 26e:	df 91       	pop	r29
 270:	08 95       	ret

00000272 <MCAL_Dio_SetPinDirection>:

Std_type MCAL_Dio_SetPinDirection(S_Dio *Dio_ConfigPin)
{
 272:	df 93       	push	r29
 274:	cf 93       	push	r28
 276:	cd b7       	in	r28, 0x3d	; 61
 278:	de b7       	in	r29, 0x3e	; 62
 27a:	27 97       	sbiw	r28, 0x07	; 7
 27c:	0f b6       	in	r0, 0x3f	; 63
 27e:	f8 94       	cli
 280:	de bf       	out	0x3e, r29	; 62
 282:	0f be       	out	0x3f, r0	; 63
 284:	cd bf       	out	0x3d, r28	; 61
 286:	9d 83       	std	Y+5, r25	; 0x05
 288:	8c 83       	std	Y+4, r24	; 0x04
	Std_type error = OK;
 28a:	1b 82       	std	Y+3, r1	; 0x03
	if(DIO_STATUS_ERROR == NOT_OK)
	{

		error = NOT_OK;
	}
	else if(Dio_ConfigPin->port_num >= DIO_CONFIGURED_PORTS)
 28c:	ec 81       	ldd	r30, Y+4	; 0x04
 28e:	fd 81       	ldd	r31, Y+5	; 0x05
 290:	80 81       	ld	r24, Z
 292:	84 30       	cpi	r24, 0x04	; 4
 294:	18 f0       	brcs	.+6      	; 0x29c <MCAL_Dio_SetPinDirection+0x2a>
	{

		error = NOT_OK;
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	8b 83       	std	Y+3, r24	; 0x03
 29a:	7d c0       	rjmp	.+250    	; 0x396 <MCAL_Dio_SetPinDirection+0x124>
	}
	else
	{
		Mask2 = ((Dio_ConfigPin->pin_num) & (Dio_ConfigPin->Direction));
 29c:	ec 81       	ldd	r30, Y+4	; 0x04
 29e:	fd 81       	ldd	r31, Y+5	; 0x05
 2a0:	91 81       	ldd	r25, Z+1	; 0x01
 2a2:	ec 81       	ldd	r30, Y+4	; 0x04
 2a4:	fd 81       	ldd	r31, Y+5	; 0x05
 2a6:	82 81       	ldd	r24, Z+2	; 0x02
 2a8:	89 23       	and	r24, r25
 2aa:	89 83       	std	Y+1, r24	; 0x01
		switch(Dio_ConfigPin->port_num)
 2ac:	ec 81       	ldd	r30, Y+4	; 0x04
 2ae:	fd 81       	ldd	r31, Y+5	; 0x05
 2b0:	80 81       	ld	r24, Z
 2b2:	28 2f       	mov	r18, r24
 2b4:	30 e0       	ldi	r19, 0x00	; 0
 2b6:	3f 83       	std	Y+7, r19	; 0x07
 2b8:	2e 83       	std	Y+6, r18	; 0x06
 2ba:	8e 81       	ldd	r24, Y+6	; 0x06
 2bc:	9f 81       	ldd	r25, Y+7	; 0x07
 2be:	81 30       	cpi	r24, 0x01	; 1
 2c0:	91 05       	cpc	r25, r1
 2c2:	59 f1       	breq	.+86     	; 0x31a <MCAL_Dio_SetPinDirection+0xa8>
 2c4:	2e 81       	ldd	r18, Y+6	; 0x06
 2c6:	3f 81       	ldd	r19, Y+7	; 0x07
 2c8:	22 30       	cpi	r18, 0x02	; 2
 2ca:	31 05       	cpc	r19, r1
 2cc:	2c f4       	brge	.+10     	; 0x2d8 <MCAL_Dio_SetPinDirection+0x66>
 2ce:	8e 81       	ldd	r24, Y+6	; 0x06
 2d0:	9f 81       	ldd	r25, Y+7	; 0x07
 2d2:	00 97       	sbiw	r24, 0x00	; 0
 2d4:	69 f0       	breq	.+26     	; 0x2f0 <MCAL_Dio_SetPinDirection+0x7e>
 2d6:	5f c0       	rjmp	.+190    	; 0x396 <MCAL_Dio_SetPinDirection+0x124>
 2d8:	2e 81       	ldd	r18, Y+6	; 0x06
 2da:	3f 81       	ldd	r19, Y+7	; 0x07
 2dc:	22 30       	cpi	r18, 0x02	; 2
 2de:	31 05       	cpc	r19, r1
 2e0:	89 f1       	breq	.+98     	; 0x344 <MCAL_Dio_SetPinDirection+0xd2>
 2e2:	8e 81       	ldd	r24, Y+6	; 0x06
 2e4:	9f 81       	ldd	r25, Y+7	; 0x07
 2e6:	83 30       	cpi	r24, 0x03	; 3
 2e8:	91 05       	cpc	r25, r1
 2ea:	09 f4       	brne	.+2      	; 0x2ee <MCAL_Dio_SetPinDirection+0x7c>
 2ec:	40 c0       	rjmp	.+128    	; 0x36e <MCAL_Dio_SetPinDirection+0xfc>
 2ee:	53 c0       	rjmp	.+166    	; 0x396 <MCAL_Dio_SetPinDirection+0x124>
		{
		case PORTA_ID:
			Mask1 = ((DIO_DDRA) & (~(Dio_ConfigPin->pin_num)));
 2f0:	ea e3       	ldi	r30, 0x3A	; 58
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	80 81       	ld	r24, Z
 2f6:	91 81       	ldd	r25, Z+1	; 0x01
 2f8:	98 2f       	mov	r25, r24
 2fa:	ec 81       	ldd	r30, Y+4	; 0x04
 2fc:	fd 81       	ldd	r31, Y+5	; 0x05
 2fe:	81 81       	ldd	r24, Z+1	; 0x01
 300:	80 95       	com	r24
 302:	89 23       	and	r24, r25
 304:	8a 83       	std	Y+2, r24	; 0x02
			DIO_DDRA = Mask1 | Mask2;
 306:	ea e3       	ldi	r30, 0x3A	; 58
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	9a 81       	ldd	r25, Y+2	; 0x02
 30c:	89 81       	ldd	r24, Y+1	; 0x01
 30e:	89 2b       	or	r24, r25
 310:	88 2f       	mov	r24, r24
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	91 83       	std	Z+1, r25	; 0x01
 316:	80 83       	st	Z, r24
 318:	3e c0       	rjmp	.+124    	; 0x396 <MCAL_Dio_SetPinDirection+0x124>
			break;
		case PORTB_ID:
			Mask1 = ((DIO_DDRB) & (~(Dio_ConfigPin->pin_num)));
 31a:	e7 e3       	ldi	r30, 0x37	; 55
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	80 81       	ld	r24, Z
 320:	91 81       	ldd	r25, Z+1	; 0x01
 322:	98 2f       	mov	r25, r24
 324:	ec 81       	ldd	r30, Y+4	; 0x04
 326:	fd 81       	ldd	r31, Y+5	; 0x05
 328:	81 81       	ldd	r24, Z+1	; 0x01
 32a:	80 95       	com	r24
 32c:	89 23       	and	r24, r25
 32e:	8a 83       	std	Y+2, r24	; 0x02
			DIO_DDRB = Mask1 | Mask2;
 330:	e7 e3       	ldi	r30, 0x37	; 55
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	9a 81       	ldd	r25, Y+2	; 0x02
 336:	89 81       	ldd	r24, Y+1	; 0x01
 338:	89 2b       	or	r24, r25
 33a:	88 2f       	mov	r24, r24
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	91 83       	std	Z+1, r25	; 0x01
 340:	80 83       	st	Z, r24
 342:	29 c0       	rjmp	.+82     	; 0x396 <MCAL_Dio_SetPinDirection+0x124>
			break;
		case PORTC_ID:
			Mask1 = ((DIO_DDRC) & (~(Dio_ConfigPin->pin_num)));
 344:	e4 e3       	ldi	r30, 0x34	; 52
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	80 81       	ld	r24, Z
 34a:	91 81       	ldd	r25, Z+1	; 0x01
 34c:	98 2f       	mov	r25, r24
 34e:	ec 81       	ldd	r30, Y+4	; 0x04
 350:	fd 81       	ldd	r31, Y+5	; 0x05
 352:	81 81       	ldd	r24, Z+1	; 0x01
 354:	80 95       	com	r24
 356:	89 23       	and	r24, r25
 358:	8a 83       	std	Y+2, r24	; 0x02
			DIO_DDRC = Mask1 | Mask2;
 35a:	e4 e3       	ldi	r30, 0x34	; 52
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	9a 81       	ldd	r25, Y+2	; 0x02
 360:	89 81       	ldd	r24, Y+1	; 0x01
 362:	89 2b       	or	r24, r25
 364:	88 2f       	mov	r24, r24
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	91 83       	std	Z+1, r25	; 0x01
 36a:	80 83       	st	Z, r24
 36c:	14 c0       	rjmp	.+40     	; 0x396 <MCAL_Dio_SetPinDirection+0x124>
			break;
		case PORTD_ID:
			Mask1 = ((DIO_DDRD) & (~(Dio_ConfigPin->pin_num)));
 36e:	e1 e3       	ldi	r30, 0x31	; 49
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	80 81       	ld	r24, Z
 374:	91 81       	ldd	r25, Z+1	; 0x01
 376:	98 2f       	mov	r25, r24
 378:	ec 81       	ldd	r30, Y+4	; 0x04
 37a:	fd 81       	ldd	r31, Y+5	; 0x05
 37c:	81 81       	ldd	r24, Z+1	; 0x01
 37e:	80 95       	com	r24
 380:	89 23       	and	r24, r25
 382:	8a 83       	std	Y+2, r24	; 0x02
			DIO_DDRD = Mask1 | Mask2;
 384:	e1 e3       	ldi	r30, 0x31	; 49
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	9a 81       	ldd	r25, Y+2	; 0x02
 38a:	89 81       	ldd	r24, Y+1	; 0x01
 38c:	89 2b       	or	r24, r25
 38e:	88 2f       	mov	r24, r24
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	91 83       	std	Z+1, r25	; 0x01
 394:	80 83       	st	Z, r24
			break;

		}
	}

	return error;
 396:	8b 81       	ldd	r24, Y+3	; 0x03

}
 398:	27 96       	adiw	r28, 0x07	; 7
 39a:	0f b6       	in	r0, 0x3f	; 63
 39c:	f8 94       	cli
 39e:	de bf       	out	0x3e, r29	; 62
 3a0:	0f be       	out	0x3f, r0	; 63
 3a2:	cd bf       	out	0x3d, r28	; 61
 3a4:	cf 91       	pop	r28
 3a6:	df 91       	pop	r29
 3a8:	08 95       	ret

000003aa <MCAL_Dio_ReadPort>:


Std_type MCAL_Dio_ReadPort(S_Dio *Dio_ReadPort,u8PortValue *Port_Value)
{
 3aa:	df 93       	push	r29
 3ac:	cf 93       	push	r28
 3ae:	cd b7       	in	r28, 0x3d	; 61
 3b0:	de b7       	in	r29, 0x3e	; 62
 3b2:	27 97       	sbiw	r28, 0x07	; 7
 3b4:	0f b6       	in	r0, 0x3f	; 63
 3b6:	f8 94       	cli
 3b8:	de bf       	out	0x3e, r29	; 62
 3ba:	0f be       	out	0x3f, r0	; 63
 3bc:	cd bf       	out	0x3d, r28	; 61
 3be:	9b 83       	std	Y+3, r25	; 0x03
 3c0:	8a 83       	std	Y+2, r24	; 0x02
 3c2:	7d 83       	std	Y+5, r23	; 0x05
 3c4:	6c 83       	std	Y+4, r22	; 0x04
	Std_type error = OK;
 3c6:	19 82       	std	Y+1, r1	; 0x01
	if(DIO_STATUS_ERROR == NOT_OK)
	{
		error = NOT_OK;
	}
	else if(Dio_ReadPort->port_num >= DIO_CONFIGURED_PORTS)
 3c8:	ea 81       	ldd	r30, Y+2	; 0x02
 3ca:	fb 81       	ldd	r31, Y+3	; 0x03
 3cc:	80 81       	ld	r24, Z
 3ce:	84 30       	cpi	r24, 0x04	; 4
 3d0:	18 f0       	brcs	.+6      	; 0x3d8 <MCAL_Dio_ReadPort+0x2e>
	{

		error = NOT_OK;
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	89 83       	std	Y+1, r24	; 0x01
 3d6:	40 c0       	rjmp	.+128    	; 0x458 <MCAL_Dio_ReadPort+0xae>
	}
	else
	{
		switch (Dio_ReadPort->port_num )
 3d8:	ea 81       	ldd	r30, Y+2	; 0x02
 3da:	fb 81       	ldd	r31, Y+3	; 0x03
 3dc:	80 81       	ld	r24, Z
 3de:	28 2f       	mov	r18, r24
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	3f 83       	std	Y+7, r19	; 0x07
 3e4:	2e 83       	std	Y+6, r18	; 0x06
 3e6:	8e 81       	ldd	r24, Y+6	; 0x06
 3e8:	9f 81       	ldd	r25, Y+7	; 0x07
 3ea:	81 30       	cpi	r24, 0x01	; 1
 3ec:	91 05       	cpc	r25, r1
 3ee:	e9 f0       	breq	.+58     	; 0x42a <MCAL_Dio_ReadPort+0x80>
 3f0:	2e 81       	ldd	r18, Y+6	; 0x06
 3f2:	3f 81       	ldd	r19, Y+7	; 0x07
 3f4:	22 30       	cpi	r18, 0x02	; 2
 3f6:	31 05       	cpc	r19, r1
 3f8:	2c f4       	brge	.+10     	; 0x404 <MCAL_Dio_ReadPort+0x5a>
 3fa:	8e 81       	ldd	r24, Y+6	; 0x06
 3fc:	9f 81       	ldd	r25, Y+7	; 0x07
 3fe:	00 97       	sbiw	r24, 0x00	; 0
 400:	61 f0       	breq	.+24     	; 0x41a <MCAL_Dio_ReadPort+0x70>
 402:	2a c0       	rjmp	.+84     	; 0x458 <MCAL_Dio_ReadPort+0xae>
 404:	2e 81       	ldd	r18, Y+6	; 0x06
 406:	3f 81       	ldd	r19, Y+7	; 0x07
 408:	22 30       	cpi	r18, 0x02	; 2
 40a:	31 05       	cpc	r19, r1
 40c:	b1 f0       	breq	.+44     	; 0x43a <MCAL_Dio_ReadPort+0x90>
 40e:	8e 81       	ldd	r24, Y+6	; 0x06
 410:	9f 81       	ldd	r25, Y+7	; 0x07
 412:	83 30       	cpi	r24, 0x03	; 3
 414:	91 05       	cpc	r25, r1
 416:	c9 f0       	breq	.+50     	; 0x44a <MCAL_Dio_ReadPort+0xa0>
 418:	1f c0       	rjmp	.+62     	; 0x458 <MCAL_Dio_ReadPort+0xae>
		{
		case PORTA_ID:
			*Port_Value = DIO_PINA;
 41a:	e9 e3       	ldi	r30, 0x39	; 57
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	80 81       	ld	r24, Z
 420:	91 81       	ldd	r25, Z+1	; 0x01
 422:	ec 81       	ldd	r30, Y+4	; 0x04
 424:	fd 81       	ldd	r31, Y+5	; 0x05
 426:	80 83       	st	Z, r24
 428:	17 c0       	rjmp	.+46     	; 0x458 <MCAL_Dio_ReadPort+0xae>
			break;
		case PORTB_ID:
			*Port_Value = DIO_PINB;
 42a:	e6 e3       	ldi	r30, 0x36	; 54
 42c:	f0 e0       	ldi	r31, 0x00	; 0
 42e:	80 81       	ld	r24, Z
 430:	91 81       	ldd	r25, Z+1	; 0x01
 432:	ec 81       	ldd	r30, Y+4	; 0x04
 434:	fd 81       	ldd	r31, Y+5	; 0x05
 436:	80 83       	st	Z, r24
 438:	0f c0       	rjmp	.+30     	; 0x458 <MCAL_Dio_ReadPort+0xae>
			break;
		case PORTC_ID:
			*Port_Value = DIO_PINC;
 43a:	e3 e3       	ldi	r30, 0x33	; 51
 43c:	f0 e0       	ldi	r31, 0x00	; 0
 43e:	80 81       	ld	r24, Z
 440:	91 81       	ldd	r25, Z+1	; 0x01
 442:	ec 81       	ldd	r30, Y+4	; 0x04
 444:	fd 81       	ldd	r31, Y+5	; 0x05
 446:	80 83       	st	Z, r24
 448:	07 c0       	rjmp	.+14     	; 0x458 <MCAL_Dio_ReadPort+0xae>
			break;
		case PORTD_ID:
			*Port_Value = DIO_PIND;
 44a:	e0 e3       	ldi	r30, 0x30	; 48
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	80 81       	ld	r24, Z
 450:	91 81       	ldd	r25, Z+1	; 0x01
 452:	ec 81       	ldd	r30, Y+4	; 0x04
 454:	fd 81       	ldd	r31, Y+5	; 0x05
 456:	80 83       	st	Z, r24
			break;

		}
	}
	return error;
 458:	89 81       	ldd	r24, Y+1	; 0x01
}
 45a:	27 96       	adiw	r28, 0x07	; 7
 45c:	0f b6       	in	r0, 0x3f	; 63
 45e:	f8 94       	cli
 460:	de bf       	out	0x3e, r29	; 62
 462:	0f be       	out	0x3f, r0	; 63
 464:	cd bf       	out	0x3d, r28	; 61
 466:	cf 91       	pop	r28
 468:	df 91       	pop	r29
 46a:	08 95       	ret

0000046c <MCAL_Dio_ReadPin>:

Std_type MCAL_Dio_ReadPin(S_Dio *Dio_ReadPin,u8PinValue *Pin_Value)
{
 46c:	df 93       	push	r29
 46e:	cf 93       	push	r28
 470:	cd b7       	in	r28, 0x3d	; 61
 472:	de b7       	in	r29, 0x3e	; 62
 474:	27 97       	sbiw	r28, 0x07	; 7
 476:	0f b6       	in	r0, 0x3f	; 63
 478:	f8 94       	cli
 47a:	de bf       	out	0x3e, r29	; 62
 47c:	0f be       	out	0x3f, r0	; 63
 47e:	cd bf       	out	0x3d, r28	; 61
 480:	9b 83       	std	Y+3, r25	; 0x03
 482:	8a 83       	std	Y+2, r24	; 0x02
 484:	7d 83       	std	Y+5, r23	; 0x05
 486:	6c 83       	std	Y+4, r22	; 0x04
	Std_type error = OK;
 488:	19 82       	std	Y+1, r1	; 0x01

	if(DIO_STATUS_ERROR == NOT_OK)
	{
		error = NOT_OK;
	}
	else if(Dio_ReadPin->port_num >= DIO_CONFIGURED_PORTS)
 48a:	ea 81       	ldd	r30, Y+2	; 0x02
 48c:	fb 81       	ldd	r31, Y+3	; 0x03
 48e:	80 81       	ld	r24, Z
 490:	84 30       	cpi	r24, 0x04	; 4
 492:	18 f0       	brcs	.+6      	; 0x49a <MCAL_Dio_ReadPin+0x2e>
	{

		error = NOT_OK;
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	89 83       	std	Y+1, r24	; 0x01
 498:	76 c0       	rjmp	.+236    	; 0x586 <MCAL_Dio_ReadPin+0x11a>

	}
	else
	{

		switch(Dio_ReadPin->port_num)
 49a:	ea 81       	ldd	r30, Y+2	; 0x02
 49c:	fb 81       	ldd	r31, Y+3	; 0x03
 49e:	80 81       	ld	r24, Z
 4a0:	28 2f       	mov	r18, r24
 4a2:	30 e0       	ldi	r19, 0x00	; 0
 4a4:	3f 83       	std	Y+7, r19	; 0x07
 4a6:	2e 83       	std	Y+6, r18	; 0x06
 4a8:	4e 81       	ldd	r20, Y+6	; 0x06
 4aa:	5f 81       	ldd	r21, Y+7	; 0x07
 4ac:	41 30       	cpi	r20, 0x01	; 1
 4ae:	51 05       	cpc	r21, r1
 4b0:	61 f1       	breq	.+88     	; 0x50a <MCAL_Dio_ReadPin+0x9e>
 4b2:	8e 81       	ldd	r24, Y+6	; 0x06
 4b4:	9f 81       	ldd	r25, Y+7	; 0x07
 4b6:	82 30       	cpi	r24, 0x02	; 2
 4b8:	91 05       	cpc	r25, r1
 4ba:	34 f4       	brge	.+12     	; 0x4c8 <MCAL_Dio_ReadPin+0x5c>
 4bc:	2e 81       	ldd	r18, Y+6	; 0x06
 4be:	3f 81       	ldd	r19, Y+7	; 0x07
 4c0:	21 15       	cp	r18, r1
 4c2:	31 05       	cpc	r19, r1
 4c4:	69 f0       	breq	.+26     	; 0x4e0 <MCAL_Dio_ReadPin+0x74>
 4c6:	5f c0       	rjmp	.+190    	; 0x586 <MCAL_Dio_ReadPin+0x11a>
 4c8:	4e 81       	ldd	r20, Y+6	; 0x06
 4ca:	5f 81       	ldd	r21, Y+7	; 0x07
 4cc:	42 30       	cpi	r20, 0x02	; 2
 4ce:	51 05       	cpc	r21, r1
 4d0:	89 f1       	breq	.+98     	; 0x534 <MCAL_Dio_ReadPin+0xc8>
 4d2:	8e 81       	ldd	r24, Y+6	; 0x06
 4d4:	9f 81       	ldd	r25, Y+7	; 0x07
 4d6:	83 30       	cpi	r24, 0x03	; 3
 4d8:	91 05       	cpc	r25, r1
 4da:	09 f4       	brne	.+2      	; 0x4de <MCAL_Dio_ReadPin+0x72>
 4dc:	40 c0       	rjmp	.+128    	; 0x55e <MCAL_Dio_ReadPin+0xf2>
 4de:	53 c0       	rjmp	.+166    	; 0x586 <MCAL_Dio_ReadPin+0x11a>
		{
		case PORTA_ID:
			*Pin_Value = GET_BIT(DIO_PINA,Dio_ReadPin->pin_num);
 4e0:	e9 e3       	ldi	r30, 0x39	; 57
 4e2:	f0 e0       	ldi	r31, 0x00	; 0
 4e4:	20 81       	ld	r18, Z
 4e6:	31 81       	ldd	r19, Z+1	; 0x01
 4e8:	ea 81       	ldd	r30, Y+2	; 0x02
 4ea:	fb 81       	ldd	r31, Y+3	; 0x03
 4ec:	81 81       	ldd	r24, Z+1	; 0x01
 4ee:	88 2f       	mov	r24, r24
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	a9 01       	movw	r20, r18
 4f4:	02 c0       	rjmp	.+4      	; 0x4fa <MCAL_Dio_ReadPin+0x8e>
 4f6:	56 95       	lsr	r21
 4f8:	47 95       	ror	r20
 4fa:	8a 95       	dec	r24
 4fc:	e2 f7       	brpl	.-8      	; 0x4f6 <MCAL_Dio_ReadPin+0x8a>
 4fe:	ca 01       	movw	r24, r20
 500:	81 70       	andi	r24, 0x01	; 1
 502:	ec 81       	ldd	r30, Y+4	; 0x04
 504:	fd 81       	ldd	r31, Y+5	; 0x05
 506:	80 83       	st	Z, r24
 508:	3e c0       	rjmp	.+124    	; 0x586 <MCAL_Dio_ReadPin+0x11a>
			break;
		case PORTB_ID:
			*Pin_Value = GET_BIT(DIO_PINB,Dio_ReadPin->pin_num);
 50a:	e6 e3       	ldi	r30, 0x36	; 54
 50c:	f0 e0       	ldi	r31, 0x00	; 0
 50e:	20 81       	ld	r18, Z
 510:	31 81       	ldd	r19, Z+1	; 0x01
 512:	ea 81       	ldd	r30, Y+2	; 0x02
 514:	fb 81       	ldd	r31, Y+3	; 0x03
 516:	81 81       	ldd	r24, Z+1	; 0x01
 518:	88 2f       	mov	r24, r24
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	a9 01       	movw	r20, r18
 51e:	02 c0       	rjmp	.+4      	; 0x524 <MCAL_Dio_ReadPin+0xb8>
 520:	56 95       	lsr	r21
 522:	47 95       	ror	r20
 524:	8a 95       	dec	r24
 526:	e2 f7       	brpl	.-8      	; 0x520 <MCAL_Dio_ReadPin+0xb4>
 528:	ca 01       	movw	r24, r20
 52a:	81 70       	andi	r24, 0x01	; 1
 52c:	ec 81       	ldd	r30, Y+4	; 0x04
 52e:	fd 81       	ldd	r31, Y+5	; 0x05
 530:	80 83       	st	Z, r24
 532:	29 c0       	rjmp	.+82     	; 0x586 <MCAL_Dio_ReadPin+0x11a>
			break;
		case PORTC_ID:
			*Pin_Value = GET_BIT(DIO_PINC,Dio_ReadPin->pin_num);
 534:	e3 e3       	ldi	r30, 0x33	; 51
 536:	f0 e0       	ldi	r31, 0x00	; 0
 538:	20 81       	ld	r18, Z
 53a:	31 81       	ldd	r19, Z+1	; 0x01
 53c:	ea 81       	ldd	r30, Y+2	; 0x02
 53e:	fb 81       	ldd	r31, Y+3	; 0x03
 540:	81 81       	ldd	r24, Z+1	; 0x01
 542:	88 2f       	mov	r24, r24
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	a9 01       	movw	r20, r18
 548:	02 c0       	rjmp	.+4      	; 0x54e <MCAL_Dio_ReadPin+0xe2>
 54a:	56 95       	lsr	r21
 54c:	47 95       	ror	r20
 54e:	8a 95       	dec	r24
 550:	e2 f7       	brpl	.-8      	; 0x54a <MCAL_Dio_ReadPin+0xde>
 552:	ca 01       	movw	r24, r20
 554:	81 70       	andi	r24, 0x01	; 1
 556:	ec 81       	ldd	r30, Y+4	; 0x04
 558:	fd 81       	ldd	r31, Y+5	; 0x05
 55a:	80 83       	st	Z, r24
 55c:	14 c0       	rjmp	.+40     	; 0x586 <MCAL_Dio_ReadPin+0x11a>
			break;
		case PORTD_ID:
			*Pin_Value = GET_BIT(DIO_PIND,Dio_ReadPin->pin_num);
 55e:	e0 e3       	ldi	r30, 0x30	; 48
 560:	f0 e0       	ldi	r31, 0x00	; 0
 562:	20 81       	ld	r18, Z
 564:	31 81       	ldd	r19, Z+1	; 0x01
 566:	ea 81       	ldd	r30, Y+2	; 0x02
 568:	fb 81       	ldd	r31, Y+3	; 0x03
 56a:	81 81       	ldd	r24, Z+1	; 0x01
 56c:	88 2f       	mov	r24, r24
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	a9 01       	movw	r20, r18
 572:	02 c0       	rjmp	.+4      	; 0x578 <MCAL_Dio_ReadPin+0x10c>
 574:	56 95       	lsr	r21
 576:	47 95       	ror	r20
 578:	8a 95       	dec	r24
 57a:	e2 f7       	brpl	.-8      	; 0x574 <MCAL_Dio_ReadPin+0x108>
 57c:	ca 01       	movw	r24, r20
 57e:	81 70       	andi	r24, 0x01	; 1
 580:	ec 81       	ldd	r30, Y+4	; 0x04
 582:	fd 81       	ldd	r31, Y+5	; 0x05
 584:	80 83       	st	Z, r24
			break;
		}
	}
	return error;
 586:	89 81       	ldd	r24, Y+1	; 0x01
}
 588:	27 96       	adiw	r28, 0x07	; 7
 58a:	0f b6       	in	r0, 0x3f	; 63
 58c:	f8 94       	cli
 58e:	de bf       	out	0x3e, r29	; 62
 590:	0f be       	out	0x3f, r0	; 63
 592:	cd bf       	out	0x3d, r28	; 61
 594:	cf 91       	pop	r28
 596:	df 91       	pop	r29
 598:	08 95       	ret

0000059a <MCAL_Dio_WritePort>:


Std_type MCAL_Dio_WritePort(S_Dio *Dio_WritePort,u8PortValue Port_Value)
{
 59a:	df 93       	push	r29
 59c:	cf 93       	push	r28
 59e:	00 d0       	rcall	.+0      	; 0x5a0 <MCAL_Dio_WritePort+0x6>
 5a0:	00 d0       	rcall	.+0      	; 0x5a2 <MCAL_Dio_WritePort+0x8>
 5a2:	00 d0       	rcall	.+0      	; 0x5a4 <MCAL_Dio_WritePort+0xa>
 5a4:	cd b7       	in	r28, 0x3d	; 61
 5a6:	de b7       	in	r29, 0x3e	; 62
 5a8:	9b 83       	std	Y+3, r25	; 0x03
 5aa:	8a 83       	std	Y+2, r24	; 0x02
 5ac:	6c 83       	std	Y+4, r22	; 0x04
	Std_type error = OK;
 5ae:	19 82       	std	Y+1, r1	; 0x01

	if(DIO_STATUS_ERROR == NOT_OK)
	{
		error = NOT_OK;
	}
	else if(Dio_WritePort->port_num >= DIO_CONFIGURED_PORTS)
 5b0:	ea 81       	ldd	r30, Y+2	; 0x02
 5b2:	fb 81       	ldd	r31, Y+3	; 0x03
 5b4:	80 81       	ld	r24, Z
 5b6:	84 30       	cpi	r24, 0x04	; 4
 5b8:	18 f0       	brcs	.+6      	; 0x5c0 <MCAL_Dio_WritePort+0x26>
	{

		error = NOT_OK;
 5ba:	81 e0       	ldi	r24, 0x01	; 1
 5bc:	89 83       	std	Y+1, r24	; 0x01
 5be:	40 c0       	rjmp	.+128    	; 0x640 <MCAL_Dio_WritePort+0xa6>
	}
	else
	{
		switch (Dio_WritePort->port_num)
 5c0:	ea 81       	ldd	r30, Y+2	; 0x02
 5c2:	fb 81       	ldd	r31, Y+3	; 0x03
 5c4:	80 81       	ld	r24, Z
 5c6:	28 2f       	mov	r18, r24
 5c8:	30 e0       	ldi	r19, 0x00	; 0
 5ca:	3e 83       	std	Y+6, r19	; 0x06
 5cc:	2d 83       	std	Y+5, r18	; 0x05
 5ce:	8d 81       	ldd	r24, Y+5	; 0x05
 5d0:	9e 81       	ldd	r25, Y+6	; 0x06
 5d2:	81 30       	cpi	r24, 0x01	; 1
 5d4:	91 05       	cpc	r25, r1
 5d6:	e9 f0       	breq	.+58     	; 0x612 <MCAL_Dio_WritePort+0x78>
 5d8:	2d 81       	ldd	r18, Y+5	; 0x05
 5da:	3e 81       	ldd	r19, Y+6	; 0x06
 5dc:	22 30       	cpi	r18, 0x02	; 2
 5de:	31 05       	cpc	r19, r1
 5e0:	2c f4       	brge	.+10     	; 0x5ec <MCAL_Dio_WritePort+0x52>
 5e2:	8d 81       	ldd	r24, Y+5	; 0x05
 5e4:	9e 81       	ldd	r25, Y+6	; 0x06
 5e6:	00 97       	sbiw	r24, 0x00	; 0
 5e8:	61 f0       	breq	.+24     	; 0x602 <MCAL_Dio_WritePort+0x68>
 5ea:	2a c0       	rjmp	.+84     	; 0x640 <MCAL_Dio_WritePort+0xa6>
 5ec:	2d 81       	ldd	r18, Y+5	; 0x05
 5ee:	3e 81       	ldd	r19, Y+6	; 0x06
 5f0:	22 30       	cpi	r18, 0x02	; 2
 5f2:	31 05       	cpc	r19, r1
 5f4:	b1 f0       	breq	.+44     	; 0x622 <MCAL_Dio_WritePort+0x88>
 5f6:	8d 81       	ldd	r24, Y+5	; 0x05
 5f8:	9e 81       	ldd	r25, Y+6	; 0x06
 5fa:	83 30       	cpi	r24, 0x03	; 3
 5fc:	91 05       	cpc	r25, r1
 5fe:	c9 f0       	breq	.+50     	; 0x632 <MCAL_Dio_WritePort+0x98>
 600:	1f c0       	rjmp	.+62     	; 0x640 <MCAL_Dio_WritePort+0xa6>
		{
		case PORTA_ID:
			DIO_PORTA = Port_Value;
 602:	eb e3       	ldi	r30, 0x3B	; 59
 604:	f0 e0       	ldi	r31, 0x00	; 0
 606:	8c 81       	ldd	r24, Y+4	; 0x04
 608:	88 2f       	mov	r24, r24
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	91 83       	std	Z+1, r25	; 0x01
 60e:	80 83       	st	Z, r24
 610:	17 c0       	rjmp	.+46     	; 0x640 <MCAL_Dio_WritePort+0xa6>
			break;
		case PORTB_ID:
			DIO_PORTB = Port_Value;
 612:	e8 e3       	ldi	r30, 0x38	; 56
 614:	f0 e0       	ldi	r31, 0x00	; 0
 616:	8c 81       	ldd	r24, Y+4	; 0x04
 618:	88 2f       	mov	r24, r24
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	91 83       	std	Z+1, r25	; 0x01
 61e:	80 83       	st	Z, r24
 620:	0f c0       	rjmp	.+30     	; 0x640 <MCAL_Dio_WritePort+0xa6>
			break;
		case PORTC_ID:
			DIO_PORTC = Port_Value;
 622:	e5 e3       	ldi	r30, 0x35	; 53
 624:	f0 e0       	ldi	r31, 0x00	; 0
 626:	8c 81       	ldd	r24, Y+4	; 0x04
 628:	88 2f       	mov	r24, r24
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	91 83       	std	Z+1, r25	; 0x01
 62e:	80 83       	st	Z, r24
 630:	07 c0       	rjmp	.+14     	; 0x640 <MCAL_Dio_WritePort+0xa6>
			break;
		case PORTD_ID:
			DIO_PORTD = Port_Value;
 632:	e2 e3       	ldi	r30, 0x32	; 50
 634:	f0 e0       	ldi	r31, 0x00	; 0
 636:	8c 81       	ldd	r24, Y+4	; 0x04
 638:	88 2f       	mov	r24, r24
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	91 83       	std	Z+1, r25	; 0x01
 63e:	80 83       	st	Z, r24
			break;
		}
	}
	return error;
 640:	89 81       	ldd	r24, Y+1	; 0x01
}
 642:	26 96       	adiw	r28, 0x06	; 6
 644:	0f b6       	in	r0, 0x3f	; 63
 646:	f8 94       	cli
 648:	de bf       	out	0x3e, r29	; 62
 64a:	0f be       	out	0x3f, r0	; 63
 64c:	cd bf       	out	0x3d, r28	; 61
 64e:	cf 91       	pop	r28
 650:	df 91       	pop	r29
 652:	08 95       	ret

00000654 <MCAL_Dio_WritePin>:


Std_type MCAL_Dio_WritePin(S_Dio *Dio_WritePin,u8PinValue Pin_value)
{
 654:	df 93       	push	r29
 656:	cf 93       	push	r28
 658:	cd b7       	in	r28, 0x3d	; 61
 65a:	de b7       	in	r29, 0x3e	; 62
 65c:	28 97       	sbiw	r28, 0x08	; 8
 65e:	0f b6       	in	r0, 0x3f	; 63
 660:	f8 94       	cli
 662:	de bf       	out	0x3e, r29	; 62
 664:	0f be       	out	0x3f, r0	; 63
 666:	cd bf       	out	0x3d, r28	; 61
 668:	9d 83       	std	Y+5, r25	; 0x05
 66a:	8c 83       	std	Y+4, r24	; 0x04
 66c:	6e 83       	std	Y+6, r22	; 0x06
	Std_type error = OK;
 66e:	1b 82       	std	Y+3, r1	; 0x03
	u8RegisterValue Mask1,Mask2;
	if(DIO_STATUS_ERROR == NOT_OK)
	{
		error = NOT_OK;
	}
	else if(Dio_WritePin->port_num >= DIO_CONFIGURED_PORTS)
 670:	ec 81       	ldd	r30, Y+4	; 0x04
 672:	fd 81       	ldd	r31, Y+5	; 0x05
 674:	80 81       	ld	r24, Z
 676:	84 30       	cpi	r24, 0x04	; 4
 678:	18 f0       	brcs	.+6      	; 0x680 <MCAL_Dio_WritePin+0x2c>
	{

		error = NOT_OK;
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	8b 83       	std	Y+3, r24	; 0x03
 67e:	7b c0       	rjmp	.+246    	; 0x776 <MCAL_Dio_WritePin+0x122>
	}
	else
	{

		Mask2 = ((Dio_WritePin->pin_num) & (Pin_value));
 680:	ec 81       	ldd	r30, Y+4	; 0x04
 682:	fd 81       	ldd	r31, Y+5	; 0x05
 684:	91 81       	ldd	r25, Z+1	; 0x01
 686:	8e 81       	ldd	r24, Y+6	; 0x06
 688:	89 23       	and	r24, r25
 68a:	89 83       	std	Y+1, r24	; 0x01
		switch(Dio_WritePin->port_num)
 68c:	ec 81       	ldd	r30, Y+4	; 0x04
 68e:	fd 81       	ldd	r31, Y+5	; 0x05
 690:	80 81       	ld	r24, Z
 692:	28 2f       	mov	r18, r24
 694:	30 e0       	ldi	r19, 0x00	; 0
 696:	38 87       	std	Y+8, r19	; 0x08
 698:	2f 83       	std	Y+7, r18	; 0x07
 69a:	8f 81       	ldd	r24, Y+7	; 0x07
 69c:	98 85       	ldd	r25, Y+8	; 0x08
 69e:	81 30       	cpi	r24, 0x01	; 1
 6a0:	91 05       	cpc	r25, r1
 6a2:	59 f1       	breq	.+86     	; 0x6fa <MCAL_Dio_WritePin+0xa6>
 6a4:	2f 81       	ldd	r18, Y+7	; 0x07
 6a6:	38 85       	ldd	r19, Y+8	; 0x08
 6a8:	22 30       	cpi	r18, 0x02	; 2
 6aa:	31 05       	cpc	r19, r1
 6ac:	2c f4       	brge	.+10     	; 0x6b8 <MCAL_Dio_WritePin+0x64>
 6ae:	8f 81       	ldd	r24, Y+7	; 0x07
 6b0:	98 85       	ldd	r25, Y+8	; 0x08
 6b2:	00 97       	sbiw	r24, 0x00	; 0
 6b4:	69 f0       	breq	.+26     	; 0x6d0 <MCAL_Dio_WritePin+0x7c>
 6b6:	5f c0       	rjmp	.+190    	; 0x776 <MCAL_Dio_WritePin+0x122>
 6b8:	2f 81       	ldd	r18, Y+7	; 0x07
 6ba:	38 85       	ldd	r19, Y+8	; 0x08
 6bc:	22 30       	cpi	r18, 0x02	; 2
 6be:	31 05       	cpc	r19, r1
 6c0:	89 f1       	breq	.+98     	; 0x724 <MCAL_Dio_WritePin+0xd0>
 6c2:	8f 81       	ldd	r24, Y+7	; 0x07
 6c4:	98 85       	ldd	r25, Y+8	; 0x08
 6c6:	83 30       	cpi	r24, 0x03	; 3
 6c8:	91 05       	cpc	r25, r1
 6ca:	09 f4       	brne	.+2      	; 0x6ce <MCAL_Dio_WritePin+0x7a>
 6cc:	40 c0       	rjmp	.+128    	; 0x74e <MCAL_Dio_WritePin+0xfa>
 6ce:	53 c0       	rjmp	.+166    	; 0x776 <MCAL_Dio_WritePin+0x122>
		{
		case PORTA_ID:
			Mask1 = ((DIO_PORTA) & (~(Dio_WritePin->pin_num)));
 6d0:	eb e3       	ldi	r30, 0x3B	; 59
 6d2:	f0 e0       	ldi	r31, 0x00	; 0
 6d4:	80 81       	ld	r24, Z
 6d6:	91 81       	ldd	r25, Z+1	; 0x01
 6d8:	98 2f       	mov	r25, r24
 6da:	ec 81       	ldd	r30, Y+4	; 0x04
 6dc:	fd 81       	ldd	r31, Y+5	; 0x05
 6de:	81 81       	ldd	r24, Z+1	; 0x01
 6e0:	80 95       	com	r24
 6e2:	89 23       	and	r24, r25
 6e4:	8a 83       	std	Y+2, r24	; 0x02
			DIO_PORTA = Mask1 | Mask2;
 6e6:	eb e3       	ldi	r30, 0x3B	; 59
 6e8:	f0 e0       	ldi	r31, 0x00	; 0
 6ea:	9a 81       	ldd	r25, Y+2	; 0x02
 6ec:	89 81       	ldd	r24, Y+1	; 0x01
 6ee:	89 2b       	or	r24, r25
 6f0:	88 2f       	mov	r24, r24
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	91 83       	std	Z+1, r25	; 0x01
 6f6:	80 83       	st	Z, r24
 6f8:	3e c0       	rjmp	.+124    	; 0x776 <MCAL_Dio_WritePin+0x122>
			break;
		case PORTB_ID:
			Mask1 = ((DIO_PORTB) & (~(Dio_WritePin->pin_num)));
 6fa:	e8 e3       	ldi	r30, 0x38	; 56
 6fc:	f0 e0       	ldi	r31, 0x00	; 0
 6fe:	80 81       	ld	r24, Z
 700:	91 81       	ldd	r25, Z+1	; 0x01
 702:	98 2f       	mov	r25, r24
 704:	ec 81       	ldd	r30, Y+4	; 0x04
 706:	fd 81       	ldd	r31, Y+5	; 0x05
 708:	81 81       	ldd	r24, Z+1	; 0x01
 70a:	80 95       	com	r24
 70c:	89 23       	and	r24, r25
 70e:	8a 83       	std	Y+2, r24	; 0x02
			DIO_PORTB = Mask1 | Mask2;
 710:	e8 e3       	ldi	r30, 0x38	; 56
 712:	f0 e0       	ldi	r31, 0x00	; 0
 714:	9a 81       	ldd	r25, Y+2	; 0x02
 716:	89 81       	ldd	r24, Y+1	; 0x01
 718:	89 2b       	or	r24, r25
 71a:	88 2f       	mov	r24, r24
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	91 83       	std	Z+1, r25	; 0x01
 720:	80 83       	st	Z, r24
 722:	29 c0       	rjmp	.+82     	; 0x776 <MCAL_Dio_WritePin+0x122>
			break;
		case PORTC_ID:
			Mask1 = ((DIO_PORTC) & (~(Dio_WritePin->pin_num)));
 724:	e5 e3       	ldi	r30, 0x35	; 53
 726:	f0 e0       	ldi	r31, 0x00	; 0
 728:	80 81       	ld	r24, Z
 72a:	91 81       	ldd	r25, Z+1	; 0x01
 72c:	98 2f       	mov	r25, r24
 72e:	ec 81       	ldd	r30, Y+4	; 0x04
 730:	fd 81       	ldd	r31, Y+5	; 0x05
 732:	81 81       	ldd	r24, Z+1	; 0x01
 734:	80 95       	com	r24
 736:	89 23       	and	r24, r25
 738:	8a 83       	std	Y+2, r24	; 0x02
			DIO_PORTC = Mask1 | Mask2;
 73a:	e5 e3       	ldi	r30, 0x35	; 53
 73c:	f0 e0       	ldi	r31, 0x00	; 0
 73e:	9a 81       	ldd	r25, Y+2	; 0x02
 740:	89 81       	ldd	r24, Y+1	; 0x01
 742:	89 2b       	or	r24, r25
 744:	88 2f       	mov	r24, r24
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	91 83       	std	Z+1, r25	; 0x01
 74a:	80 83       	st	Z, r24
 74c:	14 c0       	rjmp	.+40     	; 0x776 <MCAL_Dio_WritePin+0x122>
			break;
		case PORTD_ID:
			Mask1 = ((DIO_PORTD) & (~(Dio_WritePin->pin_num)));
 74e:	e2 e3       	ldi	r30, 0x32	; 50
 750:	f0 e0       	ldi	r31, 0x00	; 0
 752:	80 81       	ld	r24, Z
 754:	91 81       	ldd	r25, Z+1	; 0x01
 756:	98 2f       	mov	r25, r24
 758:	ec 81       	ldd	r30, Y+4	; 0x04
 75a:	fd 81       	ldd	r31, Y+5	; 0x05
 75c:	81 81       	ldd	r24, Z+1	; 0x01
 75e:	80 95       	com	r24
 760:	89 23       	and	r24, r25
 762:	8a 83       	std	Y+2, r24	; 0x02
			DIO_PORTD = Mask1 | Mask2;
 764:	e2 e3       	ldi	r30, 0x32	; 50
 766:	f0 e0       	ldi	r31, 0x00	; 0
 768:	9a 81       	ldd	r25, Y+2	; 0x02
 76a:	89 81       	ldd	r24, Y+1	; 0x01
 76c:	89 2b       	or	r24, r25
 76e:	88 2f       	mov	r24, r24
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	91 83       	std	Z+1, r25	; 0x01
 774:	80 83       	st	Z, r24
			break;

		}
	}
	return error;
 776:	8b 81       	ldd	r24, Y+3	; 0x03
}
 778:	28 96       	adiw	r28, 0x08	; 8
 77a:	0f b6       	in	r0, 0x3f	; 63
 77c:	f8 94       	cli
 77e:	de bf       	out	0x3e, r29	; 62
 780:	0f be       	out	0x3f, r0	; 63
 782:	cd bf       	out	0x3d, r28	; 61
 784:	cf 91       	pop	r28
 786:	df 91       	pop	r29
 788:	08 95       	ret

0000078a <MCAL_Dio_WriteSinglePin>:

Std_type MCAL_Dio_WriteSinglePin(S_Dio *Dio_WritePin,E_DioPin Pin_Num,u8PinValue Pin_value)
{
 78a:	df 93       	push	r29
 78c:	cf 93       	push	r28
 78e:	cd b7       	in	r28, 0x3d	; 61
 790:	de b7       	in	r29, 0x3e	; 62
 792:	2a 97       	sbiw	r28, 0x0a	; 10
 794:	0f b6       	in	r0, 0x3f	; 63
 796:	f8 94       	cli
 798:	de bf       	out	0x3e, r29	; 62
 79a:	0f be       	out	0x3f, r0	; 63
 79c:	cd bf       	out	0x3d, r28	; 61
 79e:	9e 83       	std	Y+6, r25	; 0x06
 7a0:	8d 83       	std	Y+5, r24	; 0x05
 7a2:	6f 83       	std	Y+7, r22	; 0x07
 7a4:	48 87       	std	Y+8, r20	; 0x08
		Std_type error = OK;
 7a6:	1c 82       	std	Y+4, r1	; 0x04
		u8PinNumber bitNumber;
		if(DIO_STATUS_ERROR == NOT_OK)
		{
			error = NOT_OK;
		}
		else if(Dio_WritePin->port_num >= DIO_CONFIGURED_PORTS)
 7a8:	ed 81       	ldd	r30, Y+5	; 0x05
 7aa:	fe 81       	ldd	r31, Y+6	; 0x06
 7ac:	80 81       	ld	r24, Z
 7ae:	84 30       	cpi	r24, 0x04	; 4
 7b0:	18 f0       	brcs	.+6      	; 0x7b8 <MCAL_Dio_WriteSinglePin+0x2e>
		{

			error = NOT_OK;
 7b2:	81 e0       	ldi	r24, 0x01	; 1
 7b4:	8c 83       	std	Y+4, r24	; 0x04
 7b6:	0c c1       	rjmp	.+536    	; 0x9d0 <__stack+0x171>
		}
		else
		{
			for (int i = 0; i < DIO_CONFIGURED_PINS; i++) {
 7b8:	1a 82       	std	Y+2, r1	; 0x02
 7ba:	19 82       	std	Y+1, r1	; 0x01
 7bc:	15 c0       	rjmp	.+42     	; 0x7e8 <MCAL_Dio_WriteSinglePin+0x5e>
						if (Pin_Num & (1 << i)) {
 7be:	8f 81       	ldd	r24, Y+7	; 0x07
 7c0:	88 2f       	mov	r24, r24
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	09 80       	ldd	r0, Y+1	; 0x01
 7c6:	02 c0       	rjmp	.+4      	; 0x7cc <MCAL_Dio_WriteSinglePin+0x42>
 7c8:	95 95       	asr	r25
 7ca:	87 95       	ror	r24
 7cc:	0a 94       	dec	r0
 7ce:	e2 f7       	brpl	.-8      	; 0x7c8 <MCAL_Dio_WriteSinglePin+0x3e>
 7d0:	81 70       	andi	r24, 0x01	; 1
 7d2:	90 70       	andi	r25, 0x00	; 0
 7d4:	88 23       	and	r24, r24
 7d6:	19 f0       	breq	.+6      	; 0x7de <MCAL_Dio_WriteSinglePin+0x54>
							bitNumber = i;
 7d8:	89 81       	ldd	r24, Y+1	; 0x01
 7da:	8b 83       	std	Y+3, r24	; 0x03
 7dc:	0a c0       	rjmp	.+20     	; 0x7f2 <MCAL_Dio_WriteSinglePin+0x68>

			error = NOT_OK;
		}
		else
		{
			for (int i = 0; i < DIO_CONFIGURED_PINS; i++) {
 7de:	89 81       	ldd	r24, Y+1	; 0x01
 7e0:	9a 81       	ldd	r25, Y+2	; 0x02
 7e2:	01 96       	adiw	r24, 0x01	; 1
 7e4:	9a 83       	std	Y+2, r25	; 0x02
 7e6:	89 83       	std	Y+1, r24	; 0x01
 7e8:	89 81       	ldd	r24, Y+1	; 0x01
 7ea:	9a 81       	ldd	r25, Y+2	; 0x02
 7ec:	88 30       	cpi	r24, 0x08	; 8
 7ee:	91 05       	cpc	r25, r1
 7f0:	34 f3       	brlt	.-52     	; 0x7be <MCAL_Dio_WriteSinglePin+0x34>
						if (Pin_Num & (1 << i)) {
							bitNumber = i;
							break;
						}
					}
			switch(Dio_WritePin->port_num)
 7f2:	ed 81       	ldd	r30, Y+5	; 0x05
 7f4:	fe 81       	ldd	r31, Y+6	; 0x06
 7f6:	80 81       	ld	r24, Z
 7f8:	28 2f       	mov	r18, r24
 7fa:	30 e0       	ldi	r19, 0x00	; 0
 7fc:	3a 87       	std	Y+10, r19	; 0x0a
 7fe:	29 87       	std	Y+9, r18	; 0x09
 800:	89 85       	ldd	r24, Y+9	; 0x09
 802:	9a 85       	ldd	r25, Y+10	; 0x0a
 804:	81 30       	cpi	r24, 0x01	; 1
 806:	91 05       	cpc	r25, r1
 808:	09 f4       	brne	.+2      	; 0x80c <MCAL_Dio_WriteSinglePin+0x82>
 80a:	4a c0       	rjmp	.+148    	; 0x8a0 <__stack+0x41>
 80c:	29 85       	ldd	r18, Y+9	; 0x09
 80e:	3a 85       	ldd	r19, Y+10	; 0x0a
 810:	22 30       	cpi	r18, 0x02	; 2
 812:	31 05       	cpc	r19, r1
 814:	2c f4       	brge	.+10     	; 0x820 <MCAL_Dio_WriteSinglePin+0x96>
 816:	89 85       	ldd	r24, Y+9	; 0x09
 818:	9a 85       	ldd	r25, Y+10	; 0x0a
 81a:	00 97       	sbiw	r24, 0x00	; 0
 81c:	71 f0       	breq	.+28     	; 0x83a <MCAL_Dio_WriteSinglePin+0xb0>
 81e:	d8 c0       	rjmp	.+432    	; 0x9d0 <__stack+0x171>
 820:	29 85       	ldd	r18, Y+9	; 0x09
 822:	3a 85       	ldd	r19, Y+10	; 0x0a
 824:	22 30       	cpi	r18, 0x02	; 2
 826:	31 05       	cpc	r19, r1
 828:	09 f4       	brne	.+2      	; 0x82c <MCAL_Dio_WriteSinglePin+0xa2>
 82a:	6d c0       	rjmp	.+218    	; 0x906 <__stack+0xa7>
 82c:	89 85       	ldd	r24, Y+9	; 0x09
 82e:	9a 85       	ldd	r25, Y+10	; 0x0a
 830:	83 30       	cpi	r24, 0x03	; 3
 832:	91 05       	cpc	r25, r1
 834:	09 f4       	brne	.+2      	; 0x838 <MCAL_Dio_WriteSinglePin+0xae>
 836:	9a c0       	rjmp	.+308    	; 0x96c <__stack+0x10d>
 838:	cb c0       	rjmp	.+406    	; 0x9d0 <__stack+0x171>
					{
					case PORTA_ID:
						if(Pin_value == 1) // compare with one as i define LOGIC_HIGH 1 in DIO_std but ican't use it
 83a:	88 85       	ldd	r24, Y+8	; 0x08
 83c:	81 30       	cpi	r24, 0x01	; 1
 83e:	b9 f4       	brne	.+46     	; 0x86e <__stack+0xf>
						{
							SET_BIT(DIO_PORTA,bitNumber);
 840:	ab e3       	ldi	r26, 0x3B	; 59
 842:	b0 e0       	ldi	r27, 0x00	; 0
 844:	eb e3       	ldi	r30, 0x3B	; 59
 846:	f0 e0       	ldi	r31, 0x00	; 0
 848:	40 81       	ld	r20, Z
 84a:	51 81       	ldd	r21, Z+1	; 0x01
 84c:	8b 81       	ldd	r24, Y+3	; 0x03
 84e:	28 2f       	mov	r18, r24
 850:	30 e0       	ldi	r19, 0x00	; 0
 852:	81 e0       	ldi	r24, 0x01	; 1
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	02 2e       	mov	r0, r18
 858:	02 c0       	rjmp	.+4      	; 0x85e <MCAL_Dio_WriteSinglePin+0xd4>
 85a:	88 0f       	add	r24, r24
 85c:	99 1f       	adc	r25, r25
 85e:	0a 94       	dec	r0
 860:	e2 f7       	brpl	.-8      	; 0x85a <MCAL_Dio_WriteSinglePin+0xd0>
 862:	84 2b       	or	r24, r20
 864:	95 2b       	or	r25, r21
 866:	11 96       	adiw	r26, 0x01	; 1
 868:	9c 93       	st	X, r25
 86a:	8e 93       	st	-X, r24
 86c:	b1 c0       	rjmp	.+354    	; 0x9d0 <__stack+0x171>
						}
						else
						{
							CLEAR_BIT(DIO_PORTA,bitNumber);
 86e:	ab e3       	ldi	r26, 0x3B	; 59
 870:	b0 e0       	ldi	r27, 0x00	; 0
 872:	eb e3       	ldi	r30, 0x3B	; 59
 874:	f0 e0       	ldi	r31, 0x00	; 0
 876:	40 81       	ld	r20, Z
 878:	51 81       	ldd	r21, Z+1	; 0x01
 87a:	8b 81       	ldd	r24, Y+3	; 0x03
 87c:	28 2f       	mov	r18, r24
 87e:	30 e0       	ldi	r19, 0x00	; 0
 880:	81 e0       	ldi	r24, 0x01	; 1
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	02 2e       	mov	r0, r18
 886:	02 c0       	rjmp	.+4      	; 0x88c <__stack+0x2d>
 888:	88 0f       	add	r24, r24
 88a:	99 1f       	adc	r25, r25
 88c:	0a 94       	dec	r0
 88e:	e2 f7       	brpl	.-8      	; 0x888 <__stack+0x29>
 890:	80 95       	com	r24
 892:	90 95       	com	r25
 894:	84 23       	and	r24, r20
 896:	95 23       	and	r25, r21
 898:	11 96       	adiw	r26, 0x01	; 1
 89a:	9c 93       	st	X, r25
 89c:	8e 93       	st	-X, r24
 89e:	98 c0       	rjmp	.+304    	; 0x9d0 <__stack+0x171>
						}
						break;
					case PORTB_ID:
						if(Pin_value == 1)
 8a0:	88 85       	ldd	r24, Y+8	; 0x08
 8a2:	81 30       	cpi	r24, 0x01	; 1
 8a4:	b9 f4       	brne	.+46     	; 0x8d4 <__stack+0x75>
						{
							SET_BIT(DIO_PORTB,bitNumber);
 8a6:	a8 e3       	ldi	r26, 0x38	; 56
 8a8:	b0 e0       	ldi	r27, 0x00	; 0
 8aa:	e8 e3       	ldi	r30, 0x38	; 56
 8ac:	f0 e0       	ldi	r31, 0x00	; 0
 8ae:	40 81       	ld	r20, Z
 8b0:	51 81       	ldd	r21, Z+1	; 0x01
 8b2:	8b 81       	ldd	r24, Y+3	; 0x03
 8b4:	28 2f       	mov	r18, r24
 8b6:	30 e0       	ldi	r19, 0x00	; 0
 8b8:	81 e0       	ldi	r24, 0x01	; 1
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	02 2e       	mov	r0, r18
 8be:	02 c0       	rjmp	.+4      	; 0x8c4 <__stack+0x65>
 8c0:	88 0f       	add	r24, r24
 8c2:	99 1f       	adc	r25, r25
 8c4:	0a 94       	dec	r0
 8c6:	e2 f7       	brpl	.-8      	; 0x8c0 <__stack+0x61>
 8c8:	84 2b       	or	r24, r20
 8ca:	95 2b       	or	r25, r21
 8cc:	11 96       	adiw	r26, 0x01	; 1
 8ce:	9c 93       	st	X, r25
 8d0:	8e 93       	st	-X, r24
 8d2:	7e c0       	rjmp	.+252    	; 0x9d0 <__stack+0x171>
						}
						else
						{
							CLEAR_BIT(DIO_PORTB,bitNumber);
 8d4:	a8 e3       	ldi	r26, 0x38	; 56
 8d6:	b0 e0       	ldi	r27, 0x00	; 0
 8d8:	e8 e3       	ldi	r30, 0x38	; 56
 8da:	f0 e0       	ldi	r31, 0x00	; 0
 8dc:	40 81       	ld	r20, Z
 8de:	51 81       	ldd	r21, Z+1	; 0x01
 8e0:	8b 81       	ldd	r24, Y+3	; 0x03
 8e2:	28 2f       	mov	r18, r24
 8e4:	30 e0       	ldi	r19, 0x00	; 0
 8e6:	81 e0       	ldi	r24, 0x01	; 1
 8e8:	90 e0       	ldi	r25, 0x00	; 0
 8ea:	02 2e       	mov	r0, r18
 8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <__stack+0x93>
 8ee:	88 0f       	add	r24, r24
 8f0:	99 1f       	adc	r25, r25
 8f2:	0a 94       	dec	r0
 8f4:	e2 f7       	brpl	.-8      	; 0x8ee <__stack+0x8f>
 8f6:	80 95       	com	r24
 8f8:	90 95       	com	r25
 8fa:	84 23       	and	r24, r20
 8fc:	95 23       	and	r25, r21
 8fe:	11 96       	adiw	r26, 0x01	; 1
 900:	9c 93       	st	X, r25
 902:	8e 93       	st	-X, r24
 904:	65 c0       	rjmp	.+202    	; 0x9d0 <__stack+0x171>
						}
						break;
					case PORTC_ID:
						if(Pin_value == 1)
 906:	88 85       	ldd	r24, Y+8	; 0x08
 908:	81 30       	cpi	r24, 0x01	; 1
 90a:	b9 f4       	brne	.+46     	; 0x93a <__stack+0xdb>
						{
							SET_BIT(DIO_PORTC,bitNumber);
 90c:	a5 e3       	ldi	r26, 0x35	; 53
 90e:	b0 e0       	ldi	r27, 0x00	; 0
 910:	e5 e3       	ldi	r30, 0x35	; 53
 912:	f0 e0       	ldi	r31, 0x00	; 0
 914:	40 81       	ld	r20, Z
 916:	51 81       	ldd	r21, Z+1	; 0x01
 918:	8b 81       	ldd	r24, Y+3	; 0x03
 91a:	28 2f       	mov	r18, r24
 91c:	30 e0       	ldi	r19, 0x00	; 0
 91e:	81 e0       	ldi	r24, 0x01	; 1
 920:	90 e0       	ldi	r25, 0x00	; 0
 922:	02 2e       	mov	r0, r18
 924:	02 c0       	rjmp	.+4      	; 0x92a <__stack+0xcb>
 926:	88 0f       	add	r24, r24
 928:	99 1f       	adc	r25, r25
 92a:	0a 94       	dec	r0
 92c:	e2 f7       	brpl	.-8      	; 0x926 <__stack+0xc7>
 92e:	84 2b       	or	r24, r20
 930:	95 2b       	or	r25, r21
 932:	11 96       	adiw	r26, 0x01	; 1
 934:	9c 93       	st	X, r25
 936:	8e 93       	st	-X, r24
 938:	4b c0       	rjmp	.+150    	; 0x9d0 <__stack+0x171>
						}
						else
						{
							CLEAR_BIT(DIO_PORTC,bitNumber);
 93a:	a5 e3       	ldi	r26, 0x35	; 53
 93c:	b0 e0       	ldi	r27, 0x00	; 0
 93e:	e5 e3       	ldi	r30, 0x35	; 53
 940:	f0 e0       	ldi	r31, 0x00	; 0
 942:	40 81       	ld	r20, Z
 944:	51 81       	ldd	r21, Z+1	; 0x01
 946:	8b 81       	ldd	r24, Y+3	; 0x03
 948:	28 2f       	mov	r18, r24
 94a:	30 e0       	ldi	r19, 0x00	; 0
 94c:	81 e0       	ldi	r24, 0x01	; 1
 94e:	90 e0       	ldi	r25, 0x00	; 0
 950:	02 2e       	mov	r0, r18
 952:	02 c0       	rjmp	.+4      	; 0x958 <__stack+0xf9>
 954:	88 0f       	add	r24, r24
 956:	99 1f       	adc	r25, r25
 958:	0a 94       	dec	r0
 95a:	e2 f7       	brpl	.-8      	; 0x954 <__stack+0xf5>
 95c:	80 95       	com	r24
 95e:	90 95       	com	r25
 960:	84 23       	and	r24, r20
 962:	95 23       	and	r25, r21
 964:	11 96       	adiw	r26, 0x01	; 1
 966:	9c 93       	st	X, r25
 968:	8e 93       	st	-X, r24
 96a:	32 c0       	rjmp	.+100    	; 0x9d0 <__stack+0x171>
						}
						break;
					case PORTD_ID:
						if(Pin_value == 1)
 96c:	88 85       	ldd	r24, Y+8	; 0x08
 96e:	81 30       	cpi	r24, 0x01	; 1
 970:	b9 f4       	brne	.+46     	; 0x9a0 <__stack+0x141>
						{
							SET_BIT(DIO_PORTD,bitNumber);
 972:	a2 e3       	ldi	r26, 0x32	; 50
 974:	b0 e0       	ldi	r27, 0x00	; 0
 976:	e2 e3       	ldi	r30, 0x32	; 50
 978:	f0 e0       	ldi	r31, 0x00	; 0
 97a:	40 81       	ld	r20, Z
 97c:	51 81       	ldd	r21, Z+1	; 0x01
 97e:	8b 81       	ldd	r24, Y+3	; 0x03
 980:	28 2f       	mov	r18, r24
 982:	30 e0       	ldi	r19, 0x00	; 0
 984:	81 e0       	ldi	r24, 0x01	; 1
 986:	90 e0       	ldi	r25, 0x00	; 0
 988:	02 2e       	mov	r0, r18
 98a:	02 c0       	rjmp	.+4      	; 0x990 <__stack+0x131>
 98c:	88 0f       	add	r24, r24
 98e:	99 1f       	adc	r25, r25
 990:	0a 94       	dec	r0
 992:	e2 f7       	brpl	.-8      	; 0x98c <__stack+0x12d>
 994:	84 2b       	or	r24, r20
 996:	95 2b       	or	r25, r21
 998:	11 96       	adiw	r26, 0x01	; 1
 99a:	9c 93       	st	X, r25
 99c:	8e 93       	st	-X, r24
 99e:	18 c0       	rjmp	.+48     	; 0x9d0 <__stack+0x171>
						}
						else
						{
							CLEAR_BIT(DIO_PORTD,bitNumber);
 9a0:	a2 e3       	ldi	r26, 0x32	; 50
 9a2:	b0 e0       	ldi	r27, 0x00	; 0
 9a4:	e2 e3       	ldi	r30, 0x32	; 50
 9a6:	f0 e0       	ldi	r31, 0x00	; 0
 9a8:	40 81       	ld	r20, Z
 9aa:	51 81       	ldd	r21, Z+1	; 0x01
 9ac:	8b 81       	ldd	r24, Y+3	; 0x03
 9ae:	28 2f       	mov	r18, r24
 9b0:	30 e0       	ldi	r19, 0x00	; 0
 9b2:	81 e0       	ldi	r24, 0x01	; 1
 9b4:	90 e0       	ldi	r25, 0x00	; 0
 9b6:	02 2e       	mov	r0, r18
 9b8:	02 c0       	rjmp	.+4      	; 0x9be <__stack+0x15f>
 9ba:	88 0f       	add	r24, r24
 9bc:	99 1f       	adc	r25, r25
 9be:	0a 94       	dec	r0
 9c0:	e2 f7       	brpl	.-8      	; 0x9ba <__stack+0x15b>
 9c2:	80 95       	com	r24
 9c4:	90 95       	com	r25
 9c6:	84 23       	and	r24, r20
 9c8:	95 23       	and	r25, r21
 9ca:	11 96       	adiw	r26, 0x01	; 1
 9cc:	9c 93       	st	X, r25
 9ce:	8e 93       	st	-X, r24
						break;
		}

		}

		return error;
 9d0:	8c 81       	ldd	r24, Y+4	; 0x04

}
 9d2:	2a 96       	adiw	r28, 0x0a	; 10
 9d4:	0f b6       	in	r0, 0x3f	; 63
 9d6:	f8 94       	cli
 9d8:	de bf       	out	0x3e, r29	; 62
 9da:	0f be       	out	0x3f, r0	; 63
 9dc:	cd bf       	out	0x3d, r28	; 61
 9de:	cf 91       	pop	r28
 9e0:	df 91       	pop	r29
 9e2:	08 95       	ret

000009e4 <MCAL_Dio_ReadSinglePin>:

Std_type MCAL_Dio_ReadSinglePin(S_Dio *Dio_ReadPin,E_DioPin Pin_Num,u8PinValue *Pin_Value)
{
 9e4:	df 93       	push	r29
 9e6:	cf 93       	push	r28
 9e8:	cd b7       	in	r28, 0x3d	; 61
 9ea:	de b7       	in	r29, 0x3e	; 62
 9ec:	2b 97       	sbiw	r28, 0x0b	; 11
 9ee:	0f b6       	in	r0, 0x3f	; 63
 9f0:	f8 94       	cli
 9f2:	de bf       	out	0x3e, r29	; 62
 9f4:	0f be       	out	0x3f, r0	; 63
 9f6:	cd bf       	out	0x3d, r28	; 61
 9f8:	9e 83       	std	Y+6, r25	; 0x06
 9fa:	8d 83       	std	Y+5, r24	; 0x05
 9fc:	6f 83       	std	Y+7, r22	; 0x07
 9fe:	59 87       	std	Y+9, r21	; 0x09
 a00:	48 87       	std	Y+8, r20	; 0x08
	Std_type error = OK;
 a02:	1c 82       	std	Y+4, r1	; 0x04
	{
		error = NOT_OK;


	}
	else if(Dio_ReadPin->port_num >= DIO_CONFIGURED_PORTS)
 a04:	ed 81       	ldd	r30, Y+5	; 0x05
 a06:	fe 81       	ldd	r31, Y+6	; 0x06
 a08:	80 81       	ld	r24, Z
 a0a:	84 30       	cpi	r24, 0x04	; 4
 a0c:	18 f0       	brcs	.+6      	; 0xa14 <MCAL_Dio_ReadSinglePin+0x30>
	{

		error = NOT_OK;
 a0e:	81 e0       	ldi	r24, 0x01	; 1
 a10:	8c 83       	std	Y+4, r24	; 0x04
 a12:	8a c0       	rjmp	.+276    	; 0xb28 <MCAL_Dio_ReadSinglePin+0x144>

	}
	else
	{
		for (int i = 0; i < DIO_CONFIGURED_PINS; i++) {
 a14:	1a 82       	std	Y+2, r1	; 0x02
 a16:	19 82       	std	Y+1, r1	; 0x01
 a18:	15 c0       	rjmp	.+42     	; 0xa44 <MCAL_Dio_ReadSinglePin+0x60>
			if (Pin_Num & (1 << i)) {
 a1a:	8f 81       	ldd	r24, Y+7	; 0x07
 a1c:	88 2f       	mov	r24, r24
 a1e:	90 e0       	ldi	r25, 0x00	; 0
 a20:	09 80       	ldd	r0, Y+1	; 0x01
 a22:	02 c0       	rjmp	.+4      	; 0xa28 <MCAL_Dio_ReadSinglePin+0x44>
 a24:	95 95       	asr	r25
 a26:	87 95       	ror	r24
 a28:	0a 94       	dec	r0
 a2a:	e2 f7       	brpl	.-8      	; 0xa24 <MCAL_Dio_ReadSinglePin+0x40>
 a2c:	81 70       	andi	r24, 0x01	; 1
 a2e:	90 70       	andi	r25, 0x00	; 0
 a30:	88 23       	and	r24, r24
 a32:	19 f0       	breq	.+6      	; 0xa3a <MCAL_Dio_ReadSinglePin+0x56>
				bitNumber = i;
 a34:	89 81       	ldd	r24, Y+1	; 0x01
 a36:	8b 83       	std	Y+3, r24	; 0x03
 a38:	0a c0       	rjmp	.+20     	; 0xa4e <MCAL_Dio_ReadSinglePin+0x6a>
		error = NOT_OK;

	}
	else
	{
		for (int i = 0; i < DIO_CONFIGURED_PINS; i++) {
 a3a:	89 81       	ldd	r24, Y+1	; 0x01
 a3c:	9a 81       	ldd	r25, Y+2	; 0x02
 a3e:	01 96       	adiw	r24, 0x01	; 1
 a40:	9a 83       	std	Y+2, r25	; 0x02
 a42:	89 83       	std	Y+1, r24	; 0x01
 a44:	89 81       	ldd	r24, Y+1	; 0x01
 a46:	9a 81       	ldd	r25, Y+2	; 0x02
 a48:	88 30       	cpi	r24, 0x08	; 8
 a4a:	91 05       	cpc	r25, r1
 a4c:	34 f3       	brlt	.-52     	; 0xa1a <MCAL_Dio_ReadSinglePin+0x36>
			if (Pin_Num & (1 << i)) {
				bitNumber = i;
				break;
			}
		}
		switch(Dio_ReadPin->port_num)
 a4e:	ed 81       	ldd	r30, Y+5	; 0x05
 a50:	fe 81       	ldd	r31, Y+6	; 0x06
 a52:	80 81       	ld	r24, Z
 a54:	28 2f       	mov	r18, r24
 a56:	30 e0       	ldi	r19, 0x00	; 0
 a58:	3b 87       	std	Y+11, r19	; 0x0b
 a5a:	2a 87       	std	Y+10, r18	; 0x0a
 a5c:	4a 85       	ldd	r20, Y+10	; 0x0a
 a5e:	5b 85       	ldd	r21, Y+11	; 0x0b
 a60:	41 30       	cpi	r20, 0x01	; 1
 a62:	51 05       	cpc	r21, r1
 a64:	49 f1       	breq	.+82     	; 0xab8 <MCAL_Dio_ReadSinglePin+0xd4>
 a66:	8a 85       	ldd	r24, Y+10	; 0x0a
 a68:	9b 85       	ldd	r25, Y+11	; 0x0b
 a6a:	82 30       	cpi	r24, 0x02	; 2
 a6c:	91 05       	cpc	r25, r1
 a6e:	34 f4       	brge	.+12     	; 0xa7c <MCAL_Dio_ReadSinglePin+0x98>
 a70:	2a 85       	ldd	r18, Y+10	; 0x0a
 a72:	3b 85       	ldd	r19, Y+11	; 0x0b
 a74:	21 15       	cp	r18, r1
 a76:	31 05       	cpc	r19, r1
 a78:	61 f0       	breq	.+24     	; 0xa92 <MCAL_Dio_ReadSinglePin+0xae>
 a7a:	56 c0       	rjmp	.+172    	; 0xb28 <MCAL_Dio_ReadSinglePin+0x144>
 a7c:	4a 85       	ldd	r20, Y+10	; 0x0a
 a7e:	5b 85       	ldd	r21, Y+11	; 0x0b
 a80:	42 30       	cpi	r20, 0x02	; 2
 a82:	51 05       	cpc	r21, r1
 a84:	61 f1       	breq	.+88     	; 0xade <MCAL_Dio_ReadSinglePin+0xfa>
 a86:	8a 85       	ldd	r24, Y+10	; 0x0a
 a88:	9b 85       	ldd	r25, Y+11	; 0x0b
 a8a:	83 30       	cpi	r24, 0x03	; 3
 a8c:	91 05       	cpc	r25, r1
 a8e:	d1 f1       	breq	.+116    	; 0xb04 <MCAL_Dio_ReadSinglePin+0x120>
 a90:	4b c0       	rjmp	.+150    	; 0xb28 <MCAL_Dio_ReadSinglePin+0x144>
				{
				case PORTA_ID:
					*Pin_Value = GET_BIT(DIO_PINA,bitNumber);
 a92:	e9 e3       	ldi	r30, 0x39	; 57
 a94:	f0 e0       	ldi	r31, 0x00	; 0
 a96:	20 81       	ld	r18, Z
 a98:	31 81       	ldd	r19, Z+1	; 0x01
 a9a:	8b 81       	ldd	r24, Y+3	; 0x03
 a9c:	88 2f       	mov	r24, r24
 a9e:	90 e0       	ldi	r25, 0x00	; 0
 aa0:	a9 01       	movw	r20, r18
 aa2:	02 c0       	rjmp	.+4      	; 0xaa8 <MCAL_Dio_ReadSinglePin+0xc4>
 aa4:	56 95       	lsr	r21
 aa6:	47 95       	ror	r20
 aa8:	8a 95       	dec	r24
 aaa:	e2 f7       	brpl	.-8      	; 0xaa4 <MCAL_Dio_ReadSinglePin+0xc0>
 aac:	ca 01       	movw	r24, r20
 aae:	81 70       	andi	r24, 0x01	; 1
 ab0:	e8 85       	ldd	r30, Y+8	; 0x08
 ab2:	f9 85       	ldd	r31, Y+9	; 0x09
 ab4:	80 83       	st	Z, r24
 ab6:	38 c0       	rjmp	.+112    	; 0xb28 <MCAL_Dio_ReadSinglePin+0x144>
					break;
				case PORTB_ID:
					*Pin_Value = GET_BIT(DIO_PINB,bitNumber);
 ab8:	e6 e3       	ldi	r30, 0x36	; 54
 aba:	f0 e0       	ldi	r31, 0x00	; 0
 abc:	20 81       	ld	r18, Z
 abe:	31 81       	ldd	r19, Z+1	; 0x01
 ac0:	8b 81       	ldd	r24, Y+3	; 0x03
 ac2:	88 2f       	mov	r24, r24
 ac4:	90 e0       	ldi	r25, 0x00	; 0
 ac6:	a9 01       	movw	r20, r18
 ac8:	02 c0       	rjmp	.+4      	; 0xace <MCAL_Dio_ReadSinglePin+0xea>
 aca:	56 95       	lsr	r21
 acc:	47 95       	ror	r20
 ace:	8a 95       	dec	r24
 ad0:	e2 f7       	brpl	.-8      	; 0xaca <MCAL_Dio_ReadSinglePin+0xe6>
 ad2:	ca 01       	movw	r24, r20
 ad4:	81 70       	andi	r24, 0x01	; 1
 ad6:	e8 85       	ldd	r30, Y+8	; 0x08
 ad8:	f9 85       	ldd	r31, Y+9	; 0x09
 ada:	80 83       	st	Z, r24
 adc:	25 c0       	rjmp	.+74     	; 0xb28 <MCAL_Dio_ReadSinglePin+0x144>
					break;
				case PORTC_ID:
					*Pin_Value = GET_BIT(DIO_PINC,bitNumber);
 ade:	e3 e3       	ldi	r30, 0x33	; 51
 ae0:	f0 e0       	ldi	r31, 0x00	; 0
 ae2:	20 81       	ld	r18, Z
 ae4:	31 81       	ldd	r19, Z+1	; 0x01
 ae6:	8b 81       	ldd	r24, Y+3	; 0x03
 ae8:	88 2f       	mov	r24, r24
 aea:	90 e0       	ldi	r25, 0x00	; 0
 aec:	a9 01       	movw	r20, r18
 aee:	02 c0       	rjmp	.+4      	; 0xaf4 <MCAL_Dio_ReadSinglePin+0x110>
 af0:	56 95       	lsr	r21
 af2:	47 95       	ror	r20
 af4:	8a 95       	dec	r24
 af6:	e2 f7       	brpl	.-8      	; 0xaf0 <MCAL_Dio_ReadSinglePin+0x10c>
 af8:	ca 01       	movw	r24, r20
 afa:	81 70       	andi	r24, 0x01	; 1
 afc:	e8 85       	ldd	r30, Y+8	; 0x08
 afe:	f9 85       	ldd	r31, Y+9	; 0x09
 b00:	80 83       	st	Z, r24
 b02:	12 c0       	rjmp	.+36     	; 0xb28 <MCAL_Dio_ReadSinglePin+0x144>
					break;
				case PORTD_ID:
					*Pin_Value = GET_BIT(DIO_PIND,bitNumber);
 b04:	e0 e3       	ldi	r30, 0x30	; 48
 b06:	f0 e0       	ldi	r31, 0x00	; 0
 b08:	20 81       	ld	r18, Z
 b0a:	31 81       	ldd	r19, Z+1	; 0x01
 b0c:	8b 81       	ldd	r24, Y+3	; 0x03
 b0e:	88 2f       	mov	r24, r24
 b10:	90 e0       	ldi	r25, 0x00	; 0
 b12:	a9 01       	movw	r20, r18
 b14:	02 c0       	rjmp	.+4      	; 0xb1a <MCAL_Dio_ReadSinglePin+0x136>
 b16:	56 95       	lsr	r21
 b18:	47 95       	ror	r20
 b1a:	8a 95       	dec	r24
 b1c:	e2 f7       	brpl	.-8      	; 0xb16 <MCAL_Dio_ReadSinglePin+0x132>
 b1e:	ca 01       	movw	r24, r20
 b20:	81 70       	andi	r24, 0x01	; 1
 b22:	e8 85       	ldd	r30, Y+8	; 0x08
 b24:	f9 85       	ldd	r31, Y+9	; 0x09
 b26:	80 83       	st	Z, r24
					break;
				}
	}
	return error;
 b28:	8c 81       	ldd	r24, Y+4	; 0x04
}
 b2a:	2b 96       	adiw	r28, 0x0b	; 11
 b2c:	0f b6       	in	r0, 0x3f	; 63
 b2e:	f8 94       	cli
 b30:	de bf       	out	0x3e, r29	; 62
 b32:	0f be       	out	0x3f, r0	; 63
 b34:	cd bf       	out	0x3d, r28	; 61
 b36:	cf 91       	pop	r28
 b38:	df 91       	pop	r29
 b3a:	08 95       	ret

00000b3c <MCAL_Dio_TogglePin>:

Std_type MCAL_Dio_TogglePin(S_Dio *Dio_TogglePin,E_DioPin Pin_Num)
{
 b3c:	df 93       	push	r29
 b3e:	cf 93       	push	r28
 b40:	cd b7       	in	r28, 0x3d	; 61
 b42:	de b7       	in	r29, 0x3e	; 62
 b44:	29 97       	sbiw	r28, 0x09	; 9
 b46:	0f b6       	in	r0, 0x3f	; 63
 b48:	f8 94       	cli
 b4a:	de bf       	out	0x3e, r29	; 62
 b4c:	0f be       	out	0x3f, r0	; 63
 b4e:	cd bf       	out	0x3d, r28	; 61
 b50:	9e 83       	std	Y+6, r25	; 0x06
 b52:	8d 83       	std	Y+5, r24	; 0x05
 b54:	6f 83       	std	Y+7, r22	; 0x07

	Std_type error = OK;
 b56:	1c 82       	std	Y+4, r1	; 0x04
	{
		error = NOT_OK;


	}
	else if(Dio_TogglePin->port_num >= DIO_CONFIGURED_PORTS)
 b58:	ed 81       	ldd	r30, Y+5	; 0x05
 b5a:	fe 81       	ldd	r31, Y+6	; 0x06
 b5c:	80 81       	ld	r24, Z
 b5e:	84 30       	cpi	r24, 0x04	; 4
 b60:	18 f0       	brcs	.+6      	; 0xb68 <MCAL_Dio_TogglePin+0x2c>
	{

		error = NOT_OK;
 b62:	81 e0       	ldi	r24, 0x01	; 1
 b64:	8c 83       	std	Y+4, r24	; 0x04
 b66:	9a c0       	rjmp	.+308    	; 0xc9c <MCAL_Dio_TogglePin+0x160>

	}
	else
	{
		for (int i = 0; i < DIO_CONFIGURED_PINS; i++) {
 b68:	1a 82       	std	Y+2, r1	; 0x02
 b6a:	19 82       	std	Y+1, r1	; 0x01
 b6c:	15 c0       	rjmp	.+42     	; 0xb98 <MCAL_Dio_TogglePin+0x5c>
			if (Pin_Num & (1 << i)) {
 b6e:	8f 81       	ldd	r24, Y+7	; 0x07
 b70:	88 2f       	mov	r24, r24
 b72:	90 e0       	ldi	r25, 0x00	; 0
 b74:	09 80       	ldd	r0, Y+1	; 0x01
 b76:	02 c0       	rjmp	.+4      	; 0xb7c <MCAL_Dio_TogglePin+0x40>
 b78:	95 95       	asr	r25
 b7a:	87 95       	ror	r24
 b7c:	0a 94       	dec	r0
 b7e:	e2 f7       	brpl	.-8      	; 0xb78 <MCAL_Dio_TogglePin+0x3c>
 b80:	81 70       	andi	r24, 0x01	; 1
 b82:	90 70       	andi	r25, 0x00	; 0
 b84:	88 23       	and	r24, r24
 b86:	19 f0       	breq	.+6      	; 0xb8e <MCAL_Dio_TogglePin+0x52>
				bitNumber = i;
 b88:	89 81       	ldd	r24, Y+1	; 0x01
 b8a:	8b 83       	std	Y+3, r24	; 0x03
 b8c:	0a c0       	rjmp	.+20     	; 0xba2 <MCAL_Dio_TogglePin+0x66>
		error = NOT_OK;

	}
	else
	{
		for (int i = 0; i < DIO_CONFIGURED_PINS; i++) {
 b8e:	89 81       	ldd	r24, Y+1	; 0x01
 b90:	9a 81       	ldd	r25, Y+2	; 0x02
 b92:	01 96       	adiw	r24, 0x01	; 1
 b94:	9a 83       	std	Y+2, r25	; 0x02
 b96:	89 83       	std	Y+1, r24	; 0x01
 b98:	89 81       	ldd	r24, Y+1	; 0x01
 b9a:	9a 81       	ldd	r25, Y+2	; 0x02
 b9c:	88 30       	cpi	r24, 0x08	; 8
 b9e:	91 05       	cpc	r25, r1
 ba0:	34 f3       	brlt	.-52     	; 0xb6e <MCAL_Dio_TogglePin+0x32>
				bitNumber = i;
				break;
			}
		}

		switch (Dio_TogglePin->port_num)
 ba2:	ed 81       	ldd	r30, Y+5	; 0x05
 ba4:	fe 81       	ldd	r31, Y+6	; 0x06
 ba6:	80 81       	ld	r24, Z
 ba8:	28 2f       	mov	r18, r24
 baa:	30 e0       	ldi	r19, 0x00	; 0
 bac:	39 87       	std	Y+9, r19	; 0x09
 bae:	28 87       	std	Y+8, r18	; 0x08
 bb0:	88 85       	ldd	r24, Y+8	; 0x08
 bb2:	99 85       	ldd	r25, Y+9	; 0x09
 bb4:	81 30       	cpi	r24, 0x01	; 1
 bb6:	91 05       	cpc	r25, r1
 bb8:	69 f1       	breq	.+90     	; 0xc14 <MCAL_Dio_TogglePin+0xd8>
 bba:	28 85       	ldd	r18, Y+8	; 0x08
 bbc:	39 85       	ldd	r19, Y+9	; 0x09
 bbe:	22 30       	cpi	r18, 0x02	; 2
 bc0:	31 05       	cpc	r19, r1
 bc2:	2c f4       	brge	.+10     	; 0xbce <MCAL_Dio_TogglePin+0x92>
 bc4:	88 85       	ldd	r24, Y+8	; 0x08
 bc6:	99 85       	ldd	r25, Y+9	; 0x09
 bc8:	00 97       	sbiw	r24, 0x00	; 0
 bca:	69 f0       	breq	.+26     	; 0xbe6 <MCAL_Dio_TogglePin+0xaa>
 bcc:	67 c0       	rjmp	.+206    	; 0xc9c <MCAL_Dio_TogglePin+0x160>
 bce:	28 85       	ldd	r18, Y+8	; 0x08
 bd0:	39 85       	ldd	r19, Y+9	; 0x09
 bd2:	22 30       	cpi	r18, 0x02	; 2
 bd4:	31 05       	cpc	r19, r1
 bd6:	a9 f1       	breq	.+106    	; 0xc42 <MCAL_Dio_TogglePin+0x106>
 bd8:	88 85       	ldd	r24, Y+8	; 0x08
 bda:	99 85       	ldd	r25, Y+9	; 0x09
 bdc:	83 30       	cpi	r24, 0x03	; 3
 bde:	91 05       	cpc	r25, r1
 be0:	09 f4       	brne	.+2      	; 0xbe4 <MCAL_Dio_TogglePin+0xa8>
 be2:	46 c0       	rjmp	.+140    	; 0xc70 <MCAL_Dio_TogglePin+0x134>
 be4:	5b c0       	rjmp	.+182    	; 0xc9c <MCAL_Dio_TogglePin+0x160>
		{
		case PORTA_ID:
			DIO_PORTA = DIO_PORTA ^ (1<<bitNumber);
 be6:	ab e3       	ldi	r26, 0x3B	; 59
 be8:	b0 e0       	ldi	r27, 0x00	; 0
 bea:	eb e3       	ldi	r30, 0x3B	; 59
 bec:	f0 e0       	ldi	r31, 0x00	; 0
 bee:	40 81       	ld	r20, Z
 bf0:	51 81       	ldd	r21, Z+1	; 0x01
 bf2:	8b 81       	ldd	r24, Y+3	; 0x03
 bf4:	28 2f       	mov	r18, r24
 bf6:	30 e0       	ldi	r19, 0x00	; 0
 bf8:	81 e0       	ldi	r24, 0x01	; 1
 bfa:	90 e0       	ldi	r25, 0x00	; 0
 bfc:	02 2e       	mov	r0, r18
 bfe:	02 c0       	rjmp	.+4      	; 0xc04 <MCAL_Dio_TogglePin+0xc8>
 c00:	88 0f       	add	r24, r24
 c02:	99 1f       	adc	r25, r25
 c04:	0a 94       	dec	r0
 c06:	e2 f7       	brpl	.-8      	; 0xc00 <MCAL_Dio_TogglePin+0xc4>
 c08:	84 27       	eor	r24, r20
 c0a:	95 27       	eor	r25, r21
 c0c:	11 96       	adiw	r26, 0x01	; 1
 c0e:	9c 93       	st	X, r25
 c10:	8e 93       	st	-X, r24
 c12:	44 c0       	rjmp	.+136    	; 0xc9c <MCAL_Dio_TogglePin+0x160>
			break;
		case PORTB_ID:
			DIO_PORTB = DIO_PORTB ^ (1<<bitNumber);
 c14:	a8 e3       	ldi	r26, 0x38	; 56
 c16:	b0 e0       	ldi	r27, 0x00	; 0
 c18:	e8 e3       	ldi	r30, 0x38	; 56
 c1a:	f0 e0       	ldi	r31, 0x00	; 0
 c1c:	40 81       	ld	r20, Z
 c1e:	51 81       	ldd	r21, Z+1	; 0x01
 c20:	8b 81       	ldd	r24, Y+3	; 0x03
 c22:	28 2f       	mov	r18, r24
 c24:	30 e0       	ldi	r19, 0x00	; 0
 c26:	81 e0       	ldi	r24, 0x01	; 1
 c28:	90 e0       	ldi	r25, 0x00	; 0
 c2a:	02 2e       	mov	r0, r18
 c2c:	02 c0       	rjmp	.+4      	; 0xc32 <MCAL_Dio_TogglePin+0xf6>
 c2e:	88 0f       	add	r24, r24
 c30:	99 1f       	adc	r25, r25
 c32:	0a 94       	dec	r0
 c34:	e2 f7       	brpl	.-8      	; 0xc2e <MCAL_Dio_TogglePin+0xf2>
 c36:	84 27       	eor	r24, r20
 c38:	95 27       	eor	r25, r21
 c3a:	11 96       	adiw	r26, 0x01	; 1
 c3c:	9c 93       	st	X, r25
 c3e:	8e 93       	st	-X, r24
 c40:	2d c0       	rjmp	.+90     	; 0xc9c <MCAL_Dio_TogglePin+0x160>
			break;
		case PORTC_ID:
			DIO_PORTB = DIO_PORTC ^ (1<<bitNumber);
 c42:	a8 e3       	ldi	r26, 0x38	; 56
 c44:	b0 e0       	ldi	r27, 0x00	; 0
 c46:	e5 e3       	ldi	r30, 0x35	; 53
 c48:	f0 e0       	ldi	r31, 0x00	; 0
 c4a:	40 81       	ld	r20, Z
 c4c:	51 81       	ldd	r21, Z+1	; 0x01
 c4e:	8b 81       	ldd	r24, Y+3	; 0x03
 c50:	28 2f       	mov	r18, r24
 c52:	30 e0       	ldi	r19, 0x00	; 0
 c54:	81 e0       	ldi	r24, 0x01	; 1
 c56:	90 e0       	ldi	r25, 0x00	; 0
 c58:	02 2e       	mov	r0, r18
 c5a:	02 c0       	rjmp	.+4      	; 0xc60 <MCAL_Dio_TogglePin+0x124>
 c5c:	88 0f       	add	r24, r24
 c5e:	99 1f       	adc	r25, r25
 c60:	0a 94       	dec	r0
 c62:	e2 f7       	brpl	.-8      	; 0xc5c <MCAL_Dio_TogglePin+0x120>
 c64:	84 27       	eor	r24, r20
 c66:	95 27       	eor	r25, r21
 c68:	11 96       	adiw	r26, 0x01	; 1
 c6a:	9c 93       	st	X, r25
 c6c:	8e 93       	st	-X, r24
 c6e:	16 c0       	rjmp	.+44     	; 0xc9c <MCAL_Dio_TogglePin+0x160>
			break;
		case PORTD_ID:
			DIO_PORTB = DIO_PORTD ^ (1<<bitNumber);
 c70:	a8 e3       	ldi	r26, 0x38	; 56
 c72:	b0 e0       	ldi	r27, 0x00	; 0
 c74:	e2 e3       	ldi	r30, 0x32	; 50
 c76:	f0 e0       	ldi	r31, 0x00	; 0
 c78:	40 81       	ld	r20, Z
 c7a:	51 81       	ldd	r21, Z+1	; 0x01
 c7c:	8b 81       	ldd	r24, Y+3	; 0x03
 c7e:	28 2f       	mov	r18, r24
 c80:	30 e0       	ldi	r19, 0x00	; 0
 c82:	81 e0       	ldi	r24, 0x01	; 1
 c84:	90 e0       	ldi	r25, 0x00	; 0
 c86:	02 2e       	mov	r0, r18
 c88:	02 c0       	rjmp	.+4      	; 0xc8e <MCAL_Dio_TogglePin+0x152>
 c8a:	88 0f       	add	r24, r24
 c8c:	99 1f       	adc	r25, r25
 c8e:	0a 94       	dec	r0
 c90:	e2 f7       	brpl	.-8      	; 0xc8a <MCAL_Dio_TogglePin+0x14e>
 c92:	84 27       	eor	r24, r20
 c94:	95 27       	eor	r25, r21
 c96:	11 96       	adiw	r26, 0x01	; 1
 c98:	9c 93       	st	X, r25
 c9a:	8e 93       	st	-X, r24

			break;
		}
	}

	return error;
 c9c:	8c 81       	ldd	r24, Y+4	; 0x04

}
 c9e:	29 96       	adiw	r28, 0x09	; 9
 ca0:	0f b6       	in	r0, 0x3f	; 63
 ca2:	f8 94       	cli
 ca4:	de bf       	out	0x3e, r29	; 62
 ca6:	0f be       	out	0x3f, r0	; 63
 ca8:	cd bf       	out	0x3d, r28	; 61
 caa:	cf 91       	pop	r28
 cac:	df 91       	pop	r29
 cae:	08 95       	ret

00000cb0 <HAL_Solenoid_init>:
 */
#include "Solenoid_interface.h"

/* Solenoid initialization */
E_ErrorType HAL_Solenoid_init()
{
 cb0:	df 93       	push	r29
 cb2:	cf 93       	push	r28
 cb4:	00 d0       	rcall	.+0      	; 0xcb6 <HAL_Solenoid_init+0x6>
 cb6:	00 d0       	rcall	.+0      	; 0xcb8 <HAL_Solenoid_init+0x8>
 cb8:	cd b7       	in	r28, 0x3d	; 61
 cba:	de b7       	in	r29, 0x3e	; 62
	E_ErrorType u8LocalReturn =OK;
 cbc:	19 82       	std	Y+1, r1	; 0x01
		u8LocalReturn = NOT_OK;
	}
	else
	{
		S_Dio Solenoid_interface;
		Solenoid_interface.port_num=SOLENOID_PORT;
 cbe:	83 e0       	ldi	r24, 0x03	; 3
 cc0:	8a 83       	std	Y+2, r24	; 0x02
		Solenoid_interface.pin_num=SOLENOID_PIN;
 cc2:	84 e0       	ldi	r24, 0x04	; 4
 cc4:	8b 83       	std	Y+3, r24	; 0x03
		Solenoid_interface.Direction=OUTPUT;
 cc6:	8f ef       	ldi	r24, 0xFF	; 255
 cc8:	8c 83       	std	Y+4, r24	; 0x04
		u8LocalReturn=MCAL_Dio_Init(&Solenoid_interface);
 cca:	ce 01       	movw	r24, r28
 ccc:	02 96       	adiw	r24, 0x02	; 2
 cce:	0e 94 36 00 	call	0x6c	; 0x6c <MCAL_Dio_Init>
 cd2:	89 83       	std	Y+1, r24	; 0x01
	}
	return OK;
 cd4:	80 e0       	ldi	r24, 0x00	; 0
}
 cd6:	0f 90       	pop	r0
 cd8:	0f 90       	pop	r0
 cda:	0f 90       	pop	r0
 cdc:	0f 90       	pop	r0
 cde:	cf 91       	pop	r28
 ce0:	df 91       	pop	r29
 ce2:	08 95       	ret

00000ce4 <HAL_Solenoid_Open>:

/* Open solenoid */
E_ErrorType HAL_Solenoid_Open()
{
 ce4:	df 93       	push	r29
 ce6:	cf 93       	push	r28
 ce8:	00 d0       	rcall	.+0      	; 0xcea <HAL_Solenoid_Open+0x6>
 cea:	00 d0       	rcall	.+0      	; 0xcec <HAL_Solenoid_Open+0x8>
 cec:	cd b7       	in	r28, 0x3d	; 61
 cee:	de b7       	in	r29, 0x3e	; 62
	E_ErrorType u8LocalReturn =OK;
 cf0:	19 82       	std	Y+1, r1	; 0x01
		u8LocalReturn = NOT_OK;
	}
	else
	{
		S_Dio Solenoid_interface;
		Solenoid_interface.port_num=SOLENOID_PORT;
 cf2:	83 e0       	ldi	r24, 0x03	; 3
 cf4:	8a 83       	std	Y+2, r24	; 0x02
		Solenoid_interface.pin_num=SOLENOID_PIN;
 cf6:	84 e0       	ldi	r24, 0x04	; 4
 cf8:	8b 83       	std	Y+3, r24	; 0x03
		Solenoid_interface.Direction=OUTPUT;
 cfa:	8f ef       	ldi	r24, 0xFF	; 255
 cfc:	8c 83       	std	Y+4, r24	; 0x04
		u8LocalReturn=MCAL_Dio_WritePin(&Solenoid_interface,PIN_HIGH);
 cfe:	ce 01       	movw	r24, r28
 d00:	02 96       	adiw	r24, 0x02	; 2
 d02:	6f ef       	ldi	r22, 0xFF	; 255
 d04:	0e 94 2a 03 	call	0x654	; 0x654 <MCAL_Dio_WritePin>
 d08:	89 83       	std	Y+1, r24	; 0x01
	}
	return OK;
 d0a:	80 e0       	ldi	r24, 0x00	; 0

}
 d0c:	0f 90       	pop	r0
 d0e:	0f 90       	pop	r0
 d10:	0f 90       	pop	r0
 d12:	0f 90       	pop	r0
 d14:	cf 91       	pop	r28
 d16:	df 91       	pop	r29
 d18:	08 95       	ret

00000d1a <HAL_Solenoid_Close>:
/* Close the solenoid */
E_ErrorType HAL_Solenoid_Close( )
{
 d1a:	df 93       	push	r29
 d1c:	cf 93       	push	r28
 d1e:	00 d0       	rcall	.+0      	; 0xd20 <HAL_Solenoid_Close+0x6>
 d20:	00 d0       	rcall	.+0      	; 0xd22 <HAL_Solenoid_Close+0x8>
 d22:	cd b7       	in	r28, 0x3d	; 61
 d24:	de b7       	in	r29, 0x3e	; 62

	E_ErrorType u8LocalReturn =OK;
 d26:	19 82       	std	Y+1, r1	; 0x01
		u8LocalReturn = NOT_OK;
	}
	else
	{
		S_Dio Solenoid_interface;
		Solenoid_interface.port_num=SOLENOID_PORT;
 d28:	83 e0       	ldi	r24, 0x03	; 3
 d2a:	8a 83       	std	Y+2, r24	; 0x02
		Solenoid_interface.pin_num=SOLENOID_PIN;
 d2c:	84 e0       	ldi	r24, 0x04	; 4
 d2e:	8b 83       	std	Y+3, r24	; 0x03
		Solenoid_interface.Direction=OUTPUT;
 d30:	8f ef       	ldi	r24, 0xFF	; 255
 d32:	8c 83       	std	Y+4, r24	; 0x04
		u8LocalReturn=MCAL_Dio_WritePin(&Solenoid_interface,PIN_LOW);
 d34:	ce 01       	movw	r24, r28
 d36:	02 96       	adiw	r24, 0x02	; 2
 d38:	60 e0       	ldi	r22, 0x00	; 0
 d3a:	0e 94 2a 03 	call	0x654	; 0x654 <MCAL_Dio_WritePin>
 d3e:	89 83       	std	Y+1, r24	; 0x01
	}
	return OK;
 d40:	80 e0       	ldi	r24, 0x00	; 0

}
 d42:	0f 90       	pop	r0
 d44:	0f 90       	pop	r0
 d46:	0f 90       	pop	r0
 d48:	0f 90       	pop	r0
 d4a:	cf 91       	pop	r28
 d4c:	df 91       	pop	r29
 d4e:	08 95       	ret

00000d50 <APP_app_init>:

#include"app.h"


void APP_app_init()
{
 d50:	df 93       	push	r29
 d52:	cf 93       	push	r28
 d54:	0f 92       	push	r0
 d56:	cd b7       	in	r28, 0x3d	; 61
 d58:	de b7       	in	r29, 0x3e	; 62

	Std_type u8LocalReturn;

	u8LocalReturn =HAL_Solenoid_init();
 d5a:	0e 94 58 06 	call	0xcb0	; 0xcb0 <HAL_Solenoid_init>
 d5e:	89 83       	std	Y+1, r24	; 0x01




}
 d60:	0f 90       	pop	r0
 d62:	cf 91       	pop	r28
 d64:	df 91       	pop	r29
 d66:	08 95       	ret

00000d68 <APP_app_start>:




void APP_app_start()
{
 d68:	df 93       	push	r29
 d6a:	cf 93       	push	r28
 d6c:	0f 92       	push	r0
 d6e:	cd b7       	in	r28, 0x3d	; 61
 d70:	de b7       	in	r29, 0x3e	; 62
	Std_type u8LocalReturn;

	//u8LocalReturn =HAL_Solenoid_Open();
	u8LocalReturn =HAL_Solenoid_Close();
 d72:	0e 94 8d 06 	call	0xd1a	; 0xd1a <HAL_Solenoid_Close>
 d76:	89 83       	std	Y+1, r24	; 0x01


}
 d78:	0f 90       	pop	r0
 d7a:	cf 91       	pop	r28
 d7c:	df 91       	pop	r29
 d7e:	08 95       	ret

00000d80 <main>:


#include "APP/app.h"

int main(void)
{
 d80:	df 93       	push	r29
 d82:	cf 93       	push	r28
 d84:	cd b7       	in	r28, 0x3d	; 61
 d86:	de b7       	in	r29, 0x3e	; 62
	APP_app_init();
 d88:	0e 94 a8 06 	call	0xd50	; 0xd50 <APP_app_init>
	while(1)
	{
		APP_app_start();
 d8c:	0e 94 b4 06 	call	0xd68	; 0xd68 <APP_app_start>
 d90:	fd cf       	rjmp	.-6      	; 0xd8c <main+0xc>

00000d92 <_exit>:
 d92:	f8 94       	cli

00000d94 <__stop_program>:
 d94:	ff cf       	rjmp	.-2      	; 0xd94 <__stop_program>
